{"id": 45012, "name": "Bitwise operations", "source": "Translate Java to C#: module BitwiseOps\n    {\n    @Inject Console console;\n    void run()\n        {\n        for ((Int64 n1, Int64 n2) : [0=7, 1=5, 42=2, 0x123456789ABCDEF=0xFF])  \n            {\n            static String hex(Int64 n)   \n                {\n                \n                return n.toByteArray() [(n.leadingZeroCount / 8).minOf(7) ..< 8].toString();\n                }\n\n            console.print($|For values {n1} ({hex(n1)}) and {n2} ({hex(n2)}):\n                           |  {hex(n1)} AND {hex(n2)} = {hex(n1 & n2)}\n                           |  {hex(n1)} OR {hex(n2)} = {hex(n1 | n2)}\n                           |  {hex(n1)} XOR {hex(n2)} = {hex(n1 ^ n2)}\n                           |  NOT {hex(n1)} = {hex(~n1)}\n                           |  left shift {hex(n1)} by {n2} = {hex(n1 << n2)}\n                           |  right shift {hex(n1)} by {n2} = {hex(n1 >> n2)}\n                           |  right arithmetic shift {hex(n1)} by {n2} = {hex(n1 >>> n2)}\n                           |  left rotate {hex(n1)} by {n2} = {hex(n1.rotateLeft(n2))}\n                           |  right rotate {hex(n1)} by {n2} = {hex(n1.rotateRight(n2))}\n                           |  leftmost bit of {hex(n1)} = {hex(n1.leftmostBit)}\n                           |  rightmost bit of {hex(n1)} = {hex(n1.rightmostBit)}\n                           |  leading zero count of {hex(n1)} = {n1.leadingZeroCount}\n                           |  trailing zero count of {hex(n1)} = {n1.trailingZeroCount}\n                           |  bit count (aka \"population\") of {hex(n1)} = {n1.bitCount}\n                           |  reversed bits of {hex(n1)} = {hex(n1.reverseBits())}\n                           |  reverse bytes of {hex(n1)} = {hex(n1.reverseBytes())}\n                           |\n                         );\n            }\n        }\n    }\n", "target": "static void bitwise(int a, int b)\n        {\n            Console.WriteLine(\"a and b is {0}\", a & b);\n            Console.WriteLine(\"a or b is {0}\", a | b);\n            Console.WriteLine(\"a xor b is {0}\", a ^ b);\n            Console.WriteLine(\"not a is {0}\", ~a);\n            Console.WriteLine(\"a lshift b is {0}\", a << b);\n            Console.WriteLine(\"a arshift b is {0}\", a >> b); \n                                                             \n            uint c = (uint)a;\n            Console.WriteLine(\"c rshift b is {0}\", c >> b); \n                                                            \n            \n        }\n"}
{"id": 45013, "name": "Dragon curve", "source": "Translate Java to C#: import java.awt.Color;\nimport java.awt.Graphics;\nimport java.util.*;\nimport javax.swing.JFrame;\n\npublic class DragonCurve extends JFrame {\n\n    private List<Integer> turns;\n    private double startingAngle, side;\n\n    public DragonCurve(int iter) {\n        super(\"Dragon Curve\");\n        setBounds(100, 100, 800, 600);\n        setDefaultCloseOperation(EXIT_ON_CLOSE);\n        turns = getSequence(iter);\n        startingAngle = -iter * (Math.PI / 4);\n        side = 400 / Math.pow(2, iter / 2.);\n    }\n\n    public List<Integer> getSequence(int iterations) {\n        List<Integer> turnSequence = new ArrayList<Integer>();\n        for (int i = 0; i < iterations; i++) {\n            List<Integer> copy = new ArrayList<Integer>(turnSequence);\n            Collections.reverse(copy);\n            turnSequence.add(1);\n            for (Integer turn : copy) {\n                turnSequence.add(-turn);\n            }\n        }\n        return turnSequence;\n    }\n\n    @Override\n    public void paint(Graphics g) {\n        g.setColor(Color.BLACK);\n        double angle = startingAngle;\n        int x1 = 230, y1 = 350;\n        int x2 = x1 + (int) (Math.cos(angle) * side);\n        int y2 = y1 + (int) (Math.sin(angle) * side);\n        g.drawLine(x1, y1, x2, y2);\n        x1 = x2;\n        y1 = y2;\n        for (Integer turn : turns) {\n            angle += turn * (Math.PI / 2);\n            x2 = x1 + (int) (Math.cos(angle) * side);\n            y2 = y1 + (int) (Math.sin(angle) * side);\n            g.drawLine(x1, y1, x2, y2);\n            x1 = x2;\n            y1 = y2;\n        }\n    }\n\n    public static void main(String[] args) {\n        new DragonCurve(14).setVisible(true);\n    }\n}\n", "target": "using System;\nusing System.Collections.Generic;\nusing System.Drawing;\nusing System.Drawing.Drawing2D;\nusing System.Windows.Forms;\n\npublic class DragonCurve : Form\n{\n    private List<int> turns;\n    private double startingAngle, side;\n\n    public DragonCurve(int iter)\n    {\n        Size = new Size(800, 600);\n        StartPosition = FormStartPosition.CenterScreen;\n        DoubleBuffered = true;\n        BackColor = Color.White;\n\n        startingAngle = -iter * (Math.PI / 4);\n        side = 400 / Math.Pow(2, iter / 2.0);\n\n        turns = getSequence(iter);\n    }\n\n    private List<int> getSequence(int iter)\n    {\n        var turnSequence = new List<int>();\n        for (int i = 0; i < iter; i++)\n        {\n            var copy = new List<int>(turnSequence);\n            copy.Reverse();\n            turnSequence.Add(1);\n            foreach (int turn in copy)\n            {\n                turnSequence.Add(-turn);\n            }\n        }\n        return turnSequence;\n    }\n\n    protected override void OnPaint(PaintEventArgs e)\n    {\n        base.OnPaint(e);\n        e.Graphics.SmoothingMode = SmoothingMode.AntiAlias;\n\n        double angle = startingAngle;\n        int x1 = 230, y1 = 350;\n        int x2 = x1 + (int)(Math.Cos(angle) * side);\n        int y2 = y1 + (int)(Math.Sin(angle) * side);\n        e.Graphics.DrawLine(Pens.Black, x1, y1, x2, y2);\n        x1 = x2;\n        y1 = y2;\n        foreach (int turn in turns)\n        {\n            angle += turn * (Math.PI / 2);\n            x2 = x1 + (int)(Math.Cos(angle) * side);\n            y2 = y1 + (int)(Math.Sin(angle) * side);\n            e.Graphics.DrawLine(Pens.Black, x1, y1, x2, y2);\n            x1 = x2;\n            y1 = y2;\n        }\n    }\n\n    [STAThread]\n    static void Main()\n    {\n        Application.Run(new DragonCurve(14));\n    }\n}\n"}
{"id": 45014, "name": "Read a file line by line", "source": "Translate Java to C#: import java.io.BufferedReader;\nimport java.io.FileReader;\n\n\npublic class ReadFileByLines {\n    private static void processLine(int lineNo, String line) {\n        \n    }\n\n    public static void main(String[] args) {\n        for (String filename : args) {\n            BufferedReader br = null;\n            FileReader fr = null;\n            try {\n                fr = new FileReader(filename);\n                br = new BufferedReader(fr);\n                String line;\n                int lineNo = 0;\n                while ((line = br.readLine()) != null) {\n                    processLine(++lineNo, line);\n                }\n            }\n            catch (Exception x) {\n                x.printStackTrace();\n            }\n            finally {\n                if (fr != null) {\n                    try {br.close();} catch (Exception ignoreMe) {}\n                    try {fr.close();} catch (Exception ignoreMe) {}\n                }\n            }\n        }\n    }\n}\n", "target": "foreach (string readLine in File.ReadLines(\"FileName\"))\n  DoSomething(readLine);\n"}
{"id": 45015, "name": "Doubly-linked list_Element insertion", "source": "Translate Java to C#: import java.util.LinkedList;\n\n@SuppressWarnings(\"serial\")\npublic class DoublyLinkedListInsertion<T> extends LinkedList<T> {\n   \n    public static void main(String[] args) {\n        DoublyLinkedListInsertion<String> list = new DoublyLinkedListInsertion<String>();\n        list.addFirst(\"Add First 1\");\n        list.addFirst(\"Add First 2\");\n        list.addFirst(\"Add First 3\");\n        list.addFirst(\"Add First 4\");\n        list.addFirst(\"Add First 5\");\n        traverseList(list);\n        \n        list.addAfter(\"Add First 3\", \"Add New\");\n        traverseList(list);\n    }\n    \n    \n    public void addAfter(T after, T element) {\n        int index = indexOf(after);\n        if ( index >= 0 ) {\n            add(index + 1, element);\n        }\n        else {\n            addLast(element);\n        }\n    }\n    \n    private static void traverseList(LinkedList<String> list) {\n        System.out.println(\"Traverse List:\");\n        for ( int i = 0 ; i < list.size() ; i++ ) {\n            System.out.printf(\"Element number %d - Element value = '%s'%n\", i, list.get(i));\n        }\n        System.out.println();\n    }\n    \n}\n", "target": "static void InsertAfter(Link prev, int i)\n{\n    if (prev.next != null)\n    {\n        prev.next.prev = new Link() { item = i, prev = prev, next = prev.next };\n        prev.next = prev.next.prev;\n    }\n    else\n        prev.next = new Link() { item = i, prev = prev };\n}\n"}
{"id": 45016, "name": "Quickselect algorithm", "source": "Translate Java to C#: import java.util.Random;\n\npublic class QuickSelect {\n\n\tprivate static <E extends Comparable<? super E>> int partition(E[] arr, int left, int right, int pivot) {\n\t\tE pivotVal = arr[pivot];\n\t\tswap(arr, pivot, right);\n\t\tint storeIndex = left;\n\t\tfor (int i = left; i < right; i++) {\n\t\t\tif (arr[i].compareTo(pivotVal) < 0) {\n\t\t\t\tswap(arr, i, storeIndex);\n\t\t\t\tstoreIndex++;\n\t\t\t}\n\t\t}\n\t\tswap(arr, right, storeIndex);\n\t\treturn storeIndex;\n\t}\n\t\n\tprivate static <E extends Comparable<? super E>> E select(E[] arr, int n) {\n\t\tint left = 0;\n\t\tint right = arr.length - 1;\n\t\tRandom rand = new Random();\n\t\twhile (right >= left) {\n\t\t\tint pivotIndex = partition(arr, left, right, rand.nextInt(right - left + 1) + left);\n\t\t\tif (pivotIndex == n) {\n\t\t\t\treturn arr[pivotIndex];\n\t\t\t} else if (pivotIndex < n) {\n\t\t\t\tleft = pivotIndex + 1;\n\t\t\t} else {\n\t\t\t\tright = pivotIndex - 1;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\t\n\tprivate static void swap(Object[] arr, int i1, int i2) {\n\t\tif (i1 != i2) {\n\t\t\tObject temp = arr[i1];\n\t\t\tarr[i1] = arr[i2];\n\t\t\tarr[i2] = temp;\n\t\t}\n\t}\n\t\n\tpublic static void main(String[] args) {\n\t\tfor (int i = 0; i < 10; i++) {\n\t\t\tInteger[] input = {9, 8, 7, 6, 5, 0, 1, 2, 3, 4};\n\t\t\tSystem.out.print(select(input, i));\n\t\t\tif (i < 9) System.out.print(\", \");\n\t\t}\n\t\tSystem.out.println();\n\t}\n\n}\n", "target": "\n\n\n\n\n\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace QuickSelect\n{\n    internal static class Program\n    {\n        #region Static Members\n\n        private static void Main()\n        {\n            var inputArray = new[] {9, 8, 7, 6, 5, 0, 1, 2, 3, 4};\n            \n            Console.WriteLine( \"Loop quick select 10 times.\" );\n            for( var i = 0 ; i < 10 ; i++ )\n            {\n                Console.Write( inputArray.NthSmallestElement( i ) );\n                if( i < 9 )\n                    Console.Write( \", \" );\n            }\n            Console.WriteLine();\n\n            \n            \n            Console.WriteLine( \"Just sort 10 elements.\" );\n            Console.WriteLine( string.Join( \", \", inputArray.TakeSmallest( 10 ).OrderBy( v => v ).Select( v => v.ToString() ).ToArray() ) );\n            \n            Console.WriteLine( \"Get 4 smallest and sort them.\" );\n            Console.WriteLine( string.Join( \", \", inputArray.TakeSmallest( 4 ).OrderBy( v => v ).Select( v => v.ToString() ).ToArray() ) );\n            Console.WriteLine( \"< Press any key >\" );\n            Console.ReadKey();\n        }\n\n        #endregion\n    }\n\n    internal static class ArrayExtension\n    {\n        #region Static Members\n\n        \n        \n        \n        \n        \n        \n        \n        public static IEnumerable<T> TakeSmallest<T>( this T[] array, int count ) where T : IComparable<T>\n        {\n            if( count < 0 )\n                throw new ArgumentOutOfRangeException( \"count\", \"Count is smaller than 0.\" );\n            if( count == 0 )\n                return new T[0];\n            if( array.Length <= count )\n                return array;\n\n            return QuickSelectSmallest( array, count - 1 ).Take( count );\n        }\n\n        \n        \n        \n        \n        \n        \n        \n        public static T NthSmallestElement<T>( this T[] array, int n ) where T : IComparable<T>\n        {\n            if( n < 0 || n > array.Length - 1 )\n                throw new ArgumentOutOfRangeException( \"n\", n, string.Format( \"n should be between 0 and {0} it was {1}.\", array.Length - 1, n ) );\n            if( array.Length == 0 )\n                throw new ArgumentException( \"Array is empty.\", \"array\" );\n            if( array.Length == 1 )\n                return array[ 0 ];\n\n            return QuickSelectSmallest( array, n )[ n ];\n        }\n\n        \n        \n        \n        \n        \n        \n        \n        private static T[] QuickSelectSmallest<T>( T[] input, int n ) where T : IComparable<T>\n        {\n            \n            \n            var partiallySortedArray = (T[]) input.Clone();\n           \n            \n            var startIndex = 0;\n            var endIndex = input.Length - 1;\n            \n            \n            \n            var pivotIndex = n;\n\n            \n            var r = new Random();\n            while( endIndex > startIndex )\n            {\n                pivotIndex = QuickSelectPartition( partiallySortedArray, startIndex, endIndex, pivotIndex );\n                if( pivotIndex == n )\n                    \n                    break;\n                if( pivotIndex > n )\n                    \n                    endIndex = pivotIndex - 1;\n                else                    \n                    \n                    startIndex = pivotIndex + 1;\n\n                \n                \n                pivotIndex = r.Next( startIndex,  endIndex );\n            }\n            return partiallySortedArray;\n        }\n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        private static int QuickSelectPartition<T>( this T[] array, int startIndex, int endIndex, int pivotIndex ) where T : IComparable<T>\n        {\n            var pivotValue = array[ pivotIndex ];\n            \n            array.Swap( pivotIndex, endIndex );\n            for( var i = startIndex ; i < endIndex ; i++ )\n            {\n                if( array[ i ].CompareTo( pivotValue ) > 0 )\n                    continue;\n\n                \n                array.Swap( i, startIndex );\n                \n                startIndex++;\n            }\n            \n            array.Swap( endIndex, startIndex );\n            return startIndex;\n        }\n\n        private static void Swap<T>( this T[] array, int index1, int index2 )\n        {\n            if( index1 == index2 )\n                return;\n\n            var temp = array[ index1 ];\n            array[ index1 ] = array[ index2 ];\n            array[ index2 ] = temp;\n        }\n\n        #endregion\n    }\n}\n"}
{"id": 45017, "name": "Non-decimal radices_Convert", "source": "Translate Java to C#: public static long backToTen(String num, int oldBase){\n   return Long.parseLong(num, oldBase); \n}\n\npublic static String tenToBase(long num, int newBase){\n   return Long.toString(num, newBase);\n}\n", "target": "public static class BaseConverter {\n\n    \n    \n    \n    \n    \n    \n    public static long stringToLong(string s, int b) {\n\n        if ( b < 2 || b > 36 )\n            throw new ArgumentException(\"Base must be between 2 and 36\", \"b\");\n\n        checked {\n\n            int slen = s.Length;\n            long result = 0;\n            bool isNegative = false;\n\n            for ( int i = 0; i < slen; i++ ) {\n\n                char c = s[i];\n                int num;\n\n                if ( c == '-' ) {\n                    \n                    if ( i != 0 )\n                        throw new ArgumentException(\"A negative sign is allowed only as the first character of the string.\", \"s\");\n\n                    isNegative = true;\n                    continue;\n                }\n\n                if ( c > 0x2F && c < 0x3A )\n                    \n                    num = c - 0x30;\n                else if ( c > 0x40 && c < 0x5B )\n                    \n                    \n                    num = c - 0x37;  \n                else if ( c > 0x60 && c < 0x7B )\n                    \n                    \n                    num = c - 0x57;  \n                else\n                    throw new ArgumentException(\"The string contains an invalid character '\" + c + \"'\", \"s\");\n\n                \n\n                if ( num >= b )\n                    throw new ArgumentException(\"The string contains a character '\" + c + \"' which is not allowed in base \" + b, \"s\");\n\n                \n\n                result *= b;\n                result += num;\n\n            }\n\n            if ( isNegative )\n                result = -result;\n\n            return result;\n\n        }\n\n    }\n\n    \n    \n    \n    \n    \n    \n    public static string longToString(long n, int b) {\n        \n        \n        \n        \n        if ( b < 2 || b > 36 )\n            throw new ArgumentException(\"Base must be between 2 and 36\", \"b\");\n\n        \n\n        if ( b == 10 )\n            return n.ToString();\n\n        checked {\n            long longBase = b;\n            \n            StringBuilder sb = new StringBuilder();\n            \n            if ( n < 0 ) {\n                \n                n = -n;\n                sb.Append('-');\n            }\n            \n            long div = 1;\n            while ( n / div >= b )\n                \n                \n                div *= b;\n            \n            while ( true ) {\n                byte digit = (byte) (n / div);\n            \n                if ( digit < 10 )\n                    \n                    sb.Append((char) (digit + 0x30));\n                else\n                    \n                    sb.Append((char) (digit + 0x57));  \n            \n                if ( div == 1 )\n                    \n                    break;\n            \n                n %= div;\n                div /= b;\n            }\n            \n            return sb.ToString();\n        }\n\n    }\n\n}\n"}
{"id": 45018, "name": "Walk a directory_Recursively", "source": "Translate Java to C#: import java.io.File;\n\npublic class MainEntry {\n    public static void main(String[] args) {\n        walkin(new File(\"/home/user\")); \n    }\n    \n    \n    public static void walkin(File dir) {\n        String pattern = \".mp3\";\n        \n        File listFile[] = dir.listFiles();\n        if (listFile != null) {\n            for (int i=0; i<listFile.length; i++) {\n                if (listFile[i].isDirectory()) {\n                    walkin(listFile[i]);\n                } else {\n                    if (listFile[i].getName().endsWith(pattern)) {\n                        System.out.println(listFile[i].getPath());\n                    }\n                }\n            }\n        }\n    }\n}\n", "target": "using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\n\nnamespace RosettaRecursiveDirectory\n{\n    class Program\n    {\n        static IEnumerable<FileInfo> TraverseDirectory(string rootPath, Func<FileInfo, bool> Pattern)\n        {\n            var directoryStack = new Stack<DirectoryInfo>();\n            directoryStack.Push(new DirectoryInfo(rootPath));\n            while (directoryStack.Count > 0)\n            {\n                var dir = directoryStack.Pop();\n                try\n                {\n                    foreach (var i in dir.GetDirectories())\n                        directoryStack.Push(i);\n                }\n                catch (UnauthorizedAccessException) {\n                    continue; \n                }\n                foreach (var f in dir.GetFiles().Where(Pattern)) \n                    yield return f;\n            }\n        }\n        static void Main(string[] args)\n        {\n            \n            foreach (var file in TraverseDirectory(@\"C:\\Windows\", f => f.Extension == \".wmv\"))\n                Console.WriteLine(file.FullName);\n            Console.WriteLine(\"Done.\");\n        }\n    }\n}\n"}
{"id": 45019, "name": "CRC-32", "source": "Translate Java to C#: import java.util.zip.* ;\n\npublic class CRCMaker {\n   public static void main( String[ ] args ) {\n      String toBeEncoded = new String( \"The quick brown fox jumps over the lazy dog\" ) ;\n      CRC32 myCRC = new CRC32( ) ;\n      myCRC.update( toBeEncoded.getBytes( ) ) ;\n      System.out.println( \"The CRC-32 value is\u00a0: \" + Long.toHexString( myCRC.getValue( ) ) + \"\u00a0!\" ) ;\n   }\n}\n", "target": "    \n    \n    \n    public class Crc32\n    {\n        #region Constants\n        \n        \n        \n        private const UInt32 s_generator = 0xEDB88320;\n        #endregion\n\n        #region Constructors\n        \n        \n        \n        public Crc32()\n        {\n            \n            m_checksumTable = Enumerable.Range(0, 256).Select(i =>\n            {\n                var tableEntry = (uint)i;\n                for (var j = 0; j < 8; ++j)\n                {\n                    tableEntry = ((tableEntry & 1) != 0)\n                        ? (s_generator ^ (tableEntry >> 1)) \n                        : (tableEntry >> 1);\n                }\n                return tableEntry;\n            }).ToArray();\n        }\n        #endregion\n\n        #region Methods\n        \n        \n        \n        \n        \n        public UInt32 Get<T>(IEnumerable<T> byteStream)\n        {\n            try\n            {\n                \n                return ~byteStream.Aggregate(0xFFFFFFFF, (checksumRegister, currentByte) => \n                          (m_checksumTable[(checksumRegister & 0xFF) ^ Convert.ToByte(currentByte)] ^ (checksumRegister >> 8)));\n            }\n            catch (FormatException e)\n            {\n                throw new CrcException(\"Could not read the stream out as bytes.\", e);\n            }\n            catch (InvalidCastException e)\n            {\n                throw new CrcException(\"Could not read the stream out as bytes.\", e);\n            }\n            catch (OverflowException e)\n            {\n                throw new CrcException(\"Could not read the stream out as bytes.\", e);\n            }\n        }\n        #endregion\n\n        #region Fields\n        \n        \n        \n        private readonly UInt32[] m_checksumTable;\n\n        #endregion\n    }\n"}
{"id": 45020, "name": "Classes", "source": "Translate Java to C#: public class MyClass{\n\n  \n  private int variable;  \n\n  \n  public MyClass(){\n    \n  }\n\n  \n  public void someMethod(){\n   this.variable = 1;\n  }\n}\n", "target": "public class MyClass\n{\n    public MyClass()\n    {\n    }\n    public void SomeMethod()\n    {\n    }\n    private int _variable;\n    public int Variable\n    {\n        get { return _variable; }\n        set { _variable = value; }\n    }\n    public static void Main()\n    {\n        \n        MyClass instance = new MyClass();\n        \n        instance.SomeMethod();\n        \n        instance.Variable = 99;\n        \n        System.Console.WriteLine( \"Variable=\" + instance.Variable.ToString() );\n    }\n}\n"}
{"id": 45021, "name": "Kaprekar numbers", "source": "Translate Java to C#: public class Kaprekar {\n    private static String[] splitAt(String str, int idx){\n        String[] ans = new String[2];\n        ans[0] = str.substring(0, idx);\n        if(ans[0].equals(\"\")) ans[0] = \"0\"; \n        ans[1] = str.substring(idx);\n        return ans;\n    }\n        \n    public static void main(String[] args){\n        int count = 0;\n        int base = (args.length > 0) ? Integer.parseInt(args[0]) : 10;\n        for(long i = 1; i <= 1000000; i++){\n            String sqrStr = Long.toString(i * i, base);\n            for(int j = 0; j < sqrStr.length() / 2 + 1; j++){\n                String[] parts = splitAt(sqrStr, j);\n                long firstNum = Long.parseLong(parts[0], base);\n                long secNum = Long.parseLong(parts[1], base);\n                \n                if(secNum == 0) break;\n                if(firstNum + secNum == i){\n                    System.out.println(i + \"\\t\" + Long.toString(i, base) +\n                            \"\\t\" + sqrStr + \"\\t\" + parts[0] + \" + \" + parts[1]);\n                    count++;\n                    break;\n                }\n            }\n        }\n        System.out.println(count + \" Kaprekar numbers < 1000000 (base 10) in base \"+base);\n    }\n}\n", "target": "using System;\nusing System.Collections.Generic;\n\npublic class KaprekarNumbers {\n\n    \n    \n    \n    public static void Main() {\n        int count = 0;\n\n        foreach ( ulong i in _kaprekarGenerator(999999) ) {\n            Console.WriteLine(i);\n            count++;\n        }\n\n        Console.WriteLine(\"There are {0} Kaprekar numbers less than 1000000.\", count);\n    }\n\n    \n    \n    \n    \n    \n    private static IEnumerable<ulong> _kaprekarGenerator(ulong max) {\n\n        ulong next = 1;\n\n        \n        yield return next;\n\n        for ( next = 2; next <= max; next++ ) {\n\n            ulong square = next * next;\n\n            for ( ulong check = 10; check <= 10000000000000000000; check *= 10 ) {\n                \n                \n\n                \n                if ( square <= check )\n                    break;\n\n                \n                \n                \n                \n                \n\n                ulong r = square % check;\n                ulong q = (square - r) / check;\n\n                if ( r != 0 && q + r == next ) {\n                    yield return next;\n                    break;\n                }\n            }\n\n        }\n\n    }\n\n}\n"}
{"id": 45022, "name": "Kaprekar numbers", "source": "Translate Java to C#: public class Kaprekar {\n    private static String[] splitAt(String str, int idx){\n        String[] ans = new String[2];\n        ans[0] = str.substring(0, idx);\n        if(ans[0].equals(\"\")) ans[0] = \"0\"; \n        ans[1] = str.substring(idx);\n        return ans;\n    }\n        \n    public static void main(String[] args){\n        int count = 0;\n        int base = (args.length > 0) ? Integer.parseInt(args[0]) : 10;\n        for(long i = 1; i <= 1000000; i++){\n            String sqrStr = Long.toString(i * i, base);\n            for(int j = 0; j < sqrStr.length() / 2 + 1; j++){\n                String[] parts = splitAt(sqrStr, j);\n                long firstNum = Long.parseLong(parts[0], base);\n                long secNum = Long.parseLong(parts[1], base);\n                \n                if(secNum == 0) break;\n                if(firstNum + secNum == i){\n                    System.out.println(i + \"\\t\" + Long.toString(i, base) +\n                            \"\\t\" + sqrStr + \"\\t\" + parts[0] + \" + \" + parts[1]);\n                    count++;\n                    break;\n                }\n            }\n        }\n        System.out.println(count + \" Kaprekar numbers < 1000000 (base 10) in base \"+base);\n    }\n}\n", "target": "using System;\nusing System.Collections.Generic;\n\npublic class KaprekarNumbers {\n\n    \n    \n    \n    public static void Main() {\n        int count = 0;\n\n        foreach ( ulong i in _kaprekarGenerator(999999) ) {\n            Console.WriteLine(i);\n            count++;\n        }\n\n        Console.WriteLine(\"There are {0} Kaprekar numbers less than 1000000.\", count);\n    }\n\n    \n    \n    \n    \n    \n    private static IEnumerable<ulong> _kaprekarGenerator(ulong max) {\n\n        ulong next = 1;\n\n        \n        yield return next;\n\n        for ( next = 2; next <= max; next++ ) {\n\n            ulong square = next * next;\n\n            for ( ulong check = 10; check <= 10000000000000000000; check *= 10 ) {\n                \n                \n\n                \n                if ( square <= check )\n                    break;\n\n                \n                \n                \n                \n                \n\n                ulong r = square % check;\n                ulong q = (square - r) / check;\n\n                if ( r != 0 && q + r == next ) {\n                    yield return next;\n                    break;\n                }\n            }\n\n        }\n\n    }\n\n}\n"}
{"id": 45023, "name": "Hofstadter Figure-Figure sequences", "source": "Translate Java to C#: import java.util.*;\n\nclass Hofstadter\n{\n  private static List<Integer> getSequence(int rlistSize, int slistSize)\n  {\n    List<Integer> rlist = new ArrayList<Integer>();\n    List<Integer> slist = new ArrayList<Integer>();\n    Collections.addAll(rlist, 1, 3, 7);\n    Collections.addAll(slist, 2, 4, 5, 6);\n    List<Integer> list = (rlistSize > 0) ? rlist : slist;\n    int targetSize = (rlistSize > 0) ? rlistSize : slistSize;\n    while (list.size() > targetSize)\n      list.remove(list.size() - 1);\n    while (list.size() < targetSize)\n    {\n      int lastIndex = rlist.size() - 1;\n      int lastr = rlist.get(lastIndex).intValue();\n      int r = lastr + slist.get(lastIndex).intValue();\n      rlist.add(Integer.valueOf(r));\n      for (int s = lastr + 1; (s < r) && (list.size() < targetSize); s++)\n        slist.add(Integer.valueOf(s));\n    }\n    return list;\n  }\n  \n  public static int ffr(int n)\n  {  return getSequence(n, 0).get(n - 1).intValue();  }\n  \n  public static int ffs(int n)\n  {  return getSequence(0, n).get(n - 1).intValue();  }\n  \n  public static void main(String[] args)\n  {\n    System.out.print(\"R():\");\n    for (int n = 1; n <= 10; n++)\n      System.out.print(\" \" + ffr(n));\n    System.out.println();\n    \n    Set<Integer> first40R = new HashSet<Integer>();\n    for (int n = 1; n <= 40; n++)\n      first40R.add(Integer.valueOf(ffr(n)));\n      \n    Set<Integer> first960S = new HashSet<Integer>();\n    for (int n = 1; n <= 960; n++)\n      first960S.add(Integer.valueOf(ffs(n)));\n    \n    for (int i = 1; i <= 1000; i++)\n    {\n      Integer n = Integer.valueOf(i);\n      if (first40R.contains(n) == first960S.contains(n))\n        System.out.println(\"Integer \" + i + \" either in both or neither set\");\n    }\n    System.out.println(\"Done\");\n  }\n}\n", "target": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace HofstadterFigureFigure\n{\n\tclass HofstadterFigureFigure\n\t{\n\t\treadonly List<int> _r = new List<int>() {1};\n\t\treadonly List<int> _s = new List<int>();\n\n\t\tpublic IEnumerable<int> R()\n\t\t{\n\t\t\tint iR = 0;\n\t\t\twhile (true)\n\t\t\t{\n\t\t\t\tif (iR >= _r.Count)\n\t\t\t\t{\n\t\t\t\t\tAdvance();\n\t\t\t\t}\n\t\t\t\tyield return _r[iR++];\n\t\t\t}\n\t\t}\n\n\t\tpublic IEnumerable<int> S()\n\t\t{\n\t\t\tint iS = 0;\n\t\t\twhile (true)\n\t\t\t{\n\t\t\t\tif (iS >= _s.Count)\n\t\t\t\t{\n\t\t\t\t\tAdvance();\n\t\t\t\t}\n\t\t\t\tyield return _s[iS++];\n\t\t\t}\n\t\t}\n\n\t\tprivate void Advance()\n\t\t{\n\t\t\tint rCount = _r.Count;\n\t\t\tint oldR = _r[rCount - 1];\n\t\t\tint sVal;\n\t\t\t\n\t\t\t\n\t\t\tswitch (rCount)\n\t\t\t{\n\t\t\t\tcase 1:\n\t\t\t\t\tsVal = 2;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\tsVal = 4;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tsVal = _s[rCount - 1];\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\t_r.Add(_r[rCount - 1] + sVal);\n\t\t\tint newR = _r[rCount];\n\t\t\tfor (int iS = oldR + 1; iS < newR; iS++)\n\t\t\t{\n\t\t\t\t_s.Add(iS);\n\t\t\t}\n\t\t}\n\t}\n\n\tclass Program\n\t{\n\t\tstatic void Main()\n\t\t{\n\t\t\tvar hff = new HofstadterFigureFigure();\n\t\t\tvar rs = hff.R();\n\t\t\tvar arr = rs.Take(40).ToList();\n\n\t\t\tforeach(var v in arr.Take(10))\n\t\t\t{\n\t\t\t\tConsole.WriteLine(\"{0}\", v);\n\t\t\t}\n\n\t\t\tvar hs = new HashSet<int>(arr);\n\t\t\ths.UnionWith(hff.S().Take(960));\n\t\t\tConsole.WriteLine(hs.Count == 1000 ? \"Verified\" : \"Oops!  Something's wrong!\");\n\t\t}\n\t}\n}\n"}
{"id": 45024, "name": "Hofstadter Figure-Figure sequences", "source": "Translate Java to C#: import java.util.*;\n\nclass Hofstadter\n{\n  private static List<Integer> getSequence(int rlistSize, int slistSize)\n  {\n    List<Integer> rlist = new ArrayList<Integer>();\n    List<Integer> slist = new ArrayList<Integer>();\n    Collections.addAll(rlist, 1, 3, 7);\n    Collections.addAll(slist, 2, 4, 5, 6);\n    List<Integer> list = (rlistSize > 0) ? rlist : slist;\n    int targetSize = (rlistSize > 0) ? rlistSize : slistSize;\n    while (list.size() > targetSize)\n      list.remove(list.size() - 1);\n    while (list.size() < targetSize)\n    {\n      int lastIndex = rlist.size() - 1;\n      int lastr = rlist.get(lastIndex).intValue();\n      int r = lastr + slist.get(lastIndex).intValue();\n      rlist.add(Integer.valueOf(r));\n      for (int s = lastr + 1; (s < r) && (list.size() < targetSize); s++)\n        slist.add(Integer.valueOf(s));\n    }\n    return list;\n  }\n  \n  public static int ffr(int n)\n  {  return getSequence(n, 0).get(n - 1).intValue();  }\n  \n  public static int ffs(int n)\n  {  return getSequence(0, n).get(n - 1).intValue();  }\n  \n  public static void main(String[] args)\n  {\n    System.out.print(\"R():\");\n    for (int n = 1; n <= 10; n++)\n      System.out.print(\" \" + ffr(n));\n    System.out.println();\n    \n    Set<Integer> first40R = new HashSet<Integer>();\n    for (int n = 1; n <= 40; n++)\n      first40R.add(Integer.valueOf(ffr(n)));\n      \n    Set<Integer> first960S = new HashSet<Integer>();\n    for (int n = 1; n <= 960; n++)\n      first960S.add(Integer.valueOf(ffs(n)));\n    \n    for (int i = 1; i <= 1000; i++)\n    {\n      Integer n = Integer.valueOf(i);\n      if (first40R.contains(n) == first960S.contains(n))\n        System.out.println(\"Integer \" + i + \" either in both or neither set\");\n    }\n    System.out.println(\"Done\");\n  }\n}\n", "target": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace HofstadterFigureFigure\n{\n\tclass HofstadterFigureFigure\n\t{\n\t\treadonly List<int> _r = new List<int>() {1};\n\t\treadonly List<int> _s = new List<int>();\n\n\t\tpublic IEnumerable<int> R()\n\t\t{\n\t\t\tint iR = 0;\n\t\t\twhile (true)\n\t\t\t{\n\t\t\t\tif (iR >= _r.Count)\n\t\t\t\t{\n\t\t\t\t\tAdvance();\n\t\t\t\t}\n\t\t\t\tyield return _r[iR++];\n\t\t\t}\n\t\t}\n\n\t\tpublic IEnumerable<int> S()\n\t\t{\n\t\t\tint iS = 0;\n\t\t\twhile (true)\n\t\t\t{\n\t\t\t\tif (iS >= _s.Count)\n\t\t\t\t{\n\t\t\t\t\tAdvance();\n\t\t\t\t}\n\t\t\t\tyield return _s[iS++];\n\t\t\t}\n\t\t}\n\n\t\tprivate void Advance()\n\t\t{\n\t\t\tint rCount = _r.Count;\n\t\t\tint oldR = _r[rCount - 1];\n\t\t\tint sVal;\n\t\t\t\n\t\t\t\n\t\t\tswitch (rCount)\n\t\t\t{\n\t\t\t\tcase 1:\n\t\t\t\t\tsVal = 2;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\tsVal = 4;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tsVal = _s[rCount - 1];\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\t_r.Add(_r[rCount - 1] + sVal);\n\t\t\tint newR = _r[rCount];\n\t\t\tfor (int iS = oldR + 1; iS < newR; iS++)\n\t\t\t{\n\t\t\t\t_s.Add(iS);\n\t\t\t}\n\t\t}\n\t}\n\n\tclass Program\n\t{\n\t\tstatic void Main()\n\t\t{\n\t\t\tvar hff = new HofstadterFigureFigure();\n\t\t\tvar rs = hff.R();\n\t\t\tvar arr = rs.Take(40).ToList();\n\n\t\t\tforeach(var v in arr.Take(10))\n\t\t\t{\n\t\t\t\tConsole.WriteLine(\"{0}\", v);\n\t\t\t}\n\n\t\t\tvar hs = new HashSet<int>(arr);\n\t\t\ths.UnionWith(hff.S().Take(960));\n\t\t\tConsole.WriteLine(hs.Count == 1000 ? \"Verified\" : \"Oops!  Something's wrong!\");\n\t\t}\n\t}\n}\n"}
{"id": 45025, "name": "Anonymous recursion", "source": "Translate Java to C#: public static long fib(int n) {\n    if (n < 0)\n        throw new IllegalArgumentException(\"n can not be a negative number\");\n\n    return new Object() {\n        private long fibInner(int n) {\n            return (n < 2) ? n : (fibInner(n - 1) + fibInner(n - 2));\n        }\n    }.fibInner(n);\n}\n", "target": "static int Fib(int n)\n{\n    if (n < 0) throw new ArgumentException(\"Must be non negativ\", \"n\");\n \n    Func<int, int> fib = null; \n    fib = p => p > 1 ? fib(p - 2) + fib(p - 1) : p;\n    return fib(n);\n}\n"}
{"id": 45026, "name": "Create a file", "source": "Translate Java to C#: import java.io.*;\npublic class CreateFileTest {\n\tpublic static void main(String args[]) {\n\t\ttry {\n\t\t\tnew File(\"output.txt\").createNewFile();\n\t\t\tnew File(File.separator + \"output.txt\").createNewFile();\n\t\t\tnew File(\"docs\").mkdir();\n\t\t\tnew File(File.separator + \"docs\").mkdir();\n\t\t} catch (IOException e) {\n\t\t\tSystem.err.println(e.getMessage());\n\t\t}\n\t}\n}\n", "target": "using System;\nusing System.IO;\n\nclass Program {\n    static void Main(string[] args) {\n        File.Create(\"output.txt\");\n        File.Create(@\"\\output.txt\");\n\n        Directory.CreateDirectory(\"docs\");\n        Directory.CreateDirectory(@\"\\docs\");\n    }\n}\n"}
{"id": 45027, "name": "Delegates", "source": "Translate Java to C#: interface Thingable {\n    String thing();\n}\n\nclass Delegator {\n    public Thingable delegate;\n\n    public String operation() {\n        if (delegate == null)\n            return \"default implementation\";\n        else\n            return delegate.thing();\n    }\n}\n\nclass Delegate implements Thingable {\n    public String thing() {\n        return \"delegate implementation\";\n    }\n}\n\n\n\npublic class DelegateExample {\n    public static void main(String[] args) {\n        \n        Delegator a = new Delegator();\n        assert a.operation().equals(\"default implementation\");\n\n        \n        Delegate d = new Delegate();\n        a.delegate = d;\n        assert a.operation().equals(\"delegate implementation\");\n\n        \n        a.delegate = new Thingable() {\n                public String thing() {\n                    return \"anonymous delegate implementation\";\n                }\n            };\n        assert a.operation().equals(\"anonymous delegate implementation\");\n    }\n}\n", "target": "using System;\n\ninterface IOperable\n{\n    string Operate();\n}\n\nclass Inoperable\n{\n}\n\nclass Operable : IOperable\n{\n    public string Operate()\n    {\n        return \"Delegate implementation.\";\n    }\n}\n\nclass Delegator : IOperable\n{\n    object Delegate;\n\n    public string Operate()\n    {\n        var operable = Delegate as IOperable;\n        return operable != null ? operable.Operate() : \"Default implementation.\";\n    }\n\n    static void Main()\n    {\n        var delegator = new Delegator();\n        foreach (var @delegate in new object[] { null, new Inoperable(), new Operable() })\n        {\n            delegator.Delegate = @delegate;\n            Console.WriteLine(delegator.Operate());\n        }\n    }\n}\n"}
{"id": 45028, "name": "Bacon cipher", "source": "Translate Java to C#: import java.util.HashMap;\nimport java.util.Map;\nimport java.util.Objects;\n\npublic class BaconCipher {\n    private static final Map<Character, String> codes;\n\n    static {\n        codes = new HashMap<>();\n        codes.putAll(Map.of(\n            'a', \"AAAAA\", 'b', \"AAAAB\", 'c', \"AAABA\", 'd', \"AAABB\", 'e', \"AABAA\",\n            'f', \"AABAB\", 'g', \"AABBA\", 'h', \"AABBB\", 'i', \"ABAAA\", 'j', \"ABAAB\"\n        ));\n        codes.putAll(Map.of(\n            'k', \"ABABA\", 'l', \"ABABB\", 'm', \"ABBAA\", 'n', \"ABBAB\", 'o', \"ABBBA\",\n            'p', \"ABBBB\", 'q', \"BAAAA\", 'r', \"BAAAB\", 's', \"BAABA\", 't', \"BAABB\"\n        ));\n        codes.putAll(Map.of(\n            'u', \"BABAA\", 'v', \"BABAB\", 'w', \"BABBA\", 'x', \"BABBB\", 'y', \"BBAAA\",\n            'z', \"BBAAB\", ' ', \"BBBAA\" \n        ));\n    }\n\n    private static String encode(String plainText, String message) {\n        String pt = plainText.toLowerCase();\n        StringBuilder sb = new StringBuilder();\n        for (char c : pt.toCharArray()) {\n            if ('a' <= c && c <= 'z') sb.append(codes.get(c));\n            else sb.append(codes.get(' '));\n        }\n        String et = sb.toString();\n        String mg = message.toLowerCase();  \n        sb.setLength(0);\n        int count = 0;\n        for (char c : mg.toCharArray()) {\n            if ('a' <= c && c <= 'z') {\n                if (et.charAt(count) == 'A') sb.append(c);\n                else sb.append(((char) (c - 32))); \n                count++;\n                if (count == et.length()) break;\n            } else sb.append(c);\n        }\n        return sb.toString();\n    }\n\n    private static String decode(String message) {\n        StringBuilder sb = new StringBuilder();\n        for (char c : message.toCharArray()) {\n            if ('a' <= c && c <= 'z') sb.append('A');\n            if ('A' <= c && c <= 'Z') sb.append('B');\n        }\n        String et = sb.toString();\n        sb.setLength(0);\n        for (int i = 0; i < et.length(); i += 5) {\n            String quintet = et.substring(i, i + 5);\n            Character key = codes.entrySet().stream().filter(a -> Objects.equals(a.getValue(), quintet)).findFirst().map(Map.Entry::getKey).orElse(null);\n            sb.append(key);\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        String plainText = \"the quick brown fox jumps over the lazy dog\";\n        String message = \"bacon's cipher is a method of steganography created by francis bacon. \" +\n            \"this task is to implement a program for encryption and decryption of \" +\n            \"plaintext using the simple alphabet of the baconian cipher or some \" +\n            \"other kind of representation of this alphabet (make anything signify anything). \" +\n            \"the baconian alphabet may optionally be extended to encode all lower \" +\n            \"case characters individually and/or adding a few punctuation characters \" +\n            \"such as the space.\";\n        String cipherText = encode(plainText, message);\n        System.out.printf(\"Cipher text ->\\n\\n%s\\n\", cipherText);\n        String decodedText = decode(cipherText);\n        System.out.printf(\"\\nHidden text ->\\n\\n%s\\n\", decodedText);\n    }\n}\n", "target": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace BaconCipher {\n    class Program {\n        private static Dictionary<char, string> codes = new Dictionary<char, string> {\n            {'a', \"AAAAA\" }, {'b', \"AAAAB\" }, {'c', \"AAABA\" }, {'d', \"AAABB\" }, {'e', \"AABAA\" },\n            {'f', \"AABAB\" }, {'g', \"AABBA\" }, {'h', \"AABBB\" }, {'i', \"ABAAA\" }, {'j', \"ABAAB\" },\n            {'k', \"ABABA\" }, {'l', \"ABABB\" }, {'m', \"ABBAA\" }, {'n', \"ABBAB\" }, {'o', \"ABBBA\" },\n            {'p', \"ABBBB\" }, {'q', \"BAAAA\" }, {'r', \"BAAAB\" }, {'s', \"BAABA\" }, {'t', \"BAABB\" },\n            {'u', \"BABAA\" }, {'v', \"BABAB\" }, {'w', \"BABBA\" }, {'x', \"BABBB\" }, {'y', \"BBAAA\" },\n            {'z', \"BBAAB\" }, {' ', \"BBBAA\" }, \n        };\n\n        private static string Encode(string plainText, string message) {\n            string pt = plainText.ToLower();\n            StringBuilder sb = new StringBuilder();\n            foreach (char c in pt) {\n                if ('a' <= c && c <= 'z') sb.Append(codes[c]);\n                else sb.Append(codes[' ']);\n            }\n            string et = sb.ToString();\n            string mg = message.ToLower();  \n            sb.Length = 0;\n            int count = 0;\n            foreach (char c in mg) {\n                if ('a' <= c && c <= 'z') {\n                    if (et[count] == 'A') sb.Append(c);\n                    else sb.Append((char)(c - 32)); \n                    count++;\n                    if (count == et.Length) break;\n                }\n                else sb.Append(c);\n            }\n\n            return sb.ToString();\n        }\n\n        private static string Decode(string message) {\n            StringBuilder sb = new StringBuilder();\n            foreach (char c in message) {\n                if ('a' <= c && c <= 'z') sb.Append('A');\n                else if ('A' <= c && c <= 'Z') sb.Append('B');\n            }\n            string et = sb.ToString();\n            sb.Length = 0;\n            for (int i = 0; i < et.Length; i += 5) {\n                string quintet = et.Substring(i, 5);\n                char key = codes.Where(a => a.Value == quintet).First().Key;\n                sb.Append(key);\n            }\n            return sb.ToString();\n        }\n\n        static void Main(string[] args) {\n            string plainText = \"the quick brown fox jumps over the lazy dog\";\n            string message = \"bacon's cipher is a method of steganography created by francis bacon. \" +\n                \"this task is to implement a program for encryption and decryption of \" +\n                \"plaintext using the simple alphabet of the baconian cipher or some \" +\n                \"other kind of representation of this alphabet (make anything signify anything). \" +\n                \"the baconian alphabet may optionally be extended to encode all lower \" +\n                \"case characters individually and/or adding a few punctuation characters \" +\n                \"such as the space.\";\n            string cipherText = Encode(plainText, message);\n            Console.WriteLine(\"Cipher text ->\\n{0}\", cipherText);\n            string decodedText = Decode(cipherText);\n            Console.WriteLine(\"\\nHidden text ->\\n{0}\", decodedText);\n        }\n    }\n}\n"}
{"id": 45029, "name": "Bacon cipher", "source": "Translate Java to C#: import java.util.HashMap;\nimport java.util.Map;\nimport java.util.Objects;\n\npublic class BaconCipher {\n    private static final Map<Character, String> codes;\n\n    static {\n        codes = new HashMap<>();\n        codes.putAll(Map.of(\n            'a', \"AAAAA\", 'b', \"AAAAB\", 'c', \"AAABA\", 'd', \"AAABB\", 'e', \"AABAA\",\n            'f', \"AABAB\", 'g', \"AABBA\", 'h', \"AABBB\", 'i', \"ABAAA\", 'j', \"ABAAB\"\n        ));\n        codes.putAll(Map.of(\n            'k', \"ABABA\", 'l', \"ABABB\", 'm', \"ABBAA\", 'n', \"ABBAB\", 'o', \"ABBBA\",\n            'p', \"ABBBB\", 'q', \"BAAAA\", 'r', \"BAAAB\", 's', \"BAABA\", 't', \"BAABB\"\n        ));\n        codes.putAll(Map.of(\n            'u', \"BABAA\", 'v', \"BABAB\", 'w', \"BABBA\", 'x', \"BABBB\", 'y', \"BBAAA\",\n            'z', \"BBAAB\", ' ', \"BBBAA\" \n        ));\n    }\n\n    private static String encode(String plainText, String message) {\n        String pt = plainText.toLowerCase();\n        StringBuilder sb = new StringBuilder();\n        for (char c : pt.toCharArray()) {\n            if ('a' <= c && c <= 'z') sb.append(codes.get(c));\n            else sb.append(codes.get(' '));\n        }\n        String et = sb.toString();\n        String mg = message.toLowerCase();  \n        sb.setLength(0);\n        int count = 0;\n        for (char c : mg.toCharArray()) {\n            if ('a' <= c && c <= 'z') {\n                if (et.charAt(count) == 'A') sb.append(c);\n                else sb.append(((char) (c - 32))); \n                count++;\n                if (count == et.length()) break;\n            } else sb.append(c);\n        }\n        return sb.toString();\n    }\n\n    private static String decode(String message) {\n        StringBuilder sb = new StringBuilder();\n        for (char c : message.toCharArray()) {\n            if ('a' <= c && c <= 'z') sb.append('A');\n            if ('A' <= c && c <= 'Z') sb.append('B');\n        }\n        String et = sb.toString();\n        sb.setLength(0);\n        for (int i = 0; i < et.length(); i += 5) {\n            String quintet = et.substring(i, i + 5);\n            Character key = codes.entrySet().stream().filter(a -> Objects.equals(a.getValue(), quintet)).findFirst().map(Map.Entry::getKey).orElse(null);\n            sb.append(key);\n        }\n        return sb.toString();\n    }\n\n    public static void main(String[] args) {\n        String plainText = \"the quick brown fox jumps over the lazy dog\";\n        String message = \"bacon's cipher is a method of steganography created by francis bacon. \" +\n            \"this task is to implement a program for encryption and decryption of \" +\n            \"plaintext using the simple alphabet of the baconian cipher or some \" +\n            \"other kind of representation of this alphabet (make anything signify anything). \" +\n            \"the baconian alphabet may optionally be extended to encode all lower \" +\n            \"case characters individually and/or adding a few punctuation characters \" +\n            \"such as the space.\";\n        String cipherText = encode(plainText, message);\n        System.out.printf(\"Cipher text ->\\n\\n%s\\n\", cipherText);\n        String decodedText = decode(cipherText);\n        System.out.printf(\"\\nHidden text ->\\n\\n%s\\n\", decodedText);\n    }\n}\n", "target": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace BaconCipher {\n    class Program {\n        private static Dictionary<char, string> codes = new Dictionary<char, string> {\n            {'a', \"AAAAA\" }, {'b', \"AAAAB\" }, {'c', \"AAABA\" }, {'d', \"AAABB\" }, {'e', \"AABAA\" },\n            {'f', \"AABAB\" }, {'g', \"AABBA\" }, {'h', \"AABBB\" }, {'i', \"ABAAA\" }, {'j', \"ABAAB\" },\n            {'k', \"ABABA\" }, {'l', \"ABABB\" }, {'m', \"ABBAA\" }, {'n', \"ABBAB\" }, {'o', \"ABBBA\" },\n            {'p', \"ABBBB\" }, {'q', \"BAAAA\" }, {'r', \"BAAAB\" }, {'s', \"BAABA\" }, {'t', \"BAABB\" },\n            {'u', \"BABAA\" }, {'v', \"BABAB\" }, {'w', \"BABBA\" }, {'x', \"BABBB\" }, {'y', \"BBAAA\" },\n            {'z', \"BBAAB\" }, {' ', \"BBBAA\" }, \n        };\n\n        private static string Encode(string plainText, string message) {\n            string pt = plainText.ToLower();\n            StringBuilder sb = new StringBuilder();\n            foreach (char c in pt) {\n                if ('a' <= c && c <= 'z') sb.Append(codes[c]);\n                else sb.Append(codes[' ']);\n            }\n            string et = sb.ToString();\n            string mg = message.ToLower();  \n            sb.Length = 0;\n            int count = 0;\n            foreach (char c in mg) {\n                if ('a' <= c && c <= 'z') {\n                    if (et[count] == 'A') sb.Append(c);\n                    else sb.Append((char)(c - 32)); \n                    count++;\n                    if (count == et.Length) break;\n                }\n                else sb.Append(c);\n            }\n\n            return sb.ToString();\n        }\n\n        private static string Decode(string message) {\n            StringBuilder sb = new StringBuilder();\n            foreach (char c in message) {\n                if ('a' <= c && c <= 'z') sb.Append('A');\n                else if ('A' <= c && c <= 'Z') sb.Append('B');\n            }\n            string et = sb.ToString();\n            sb.Length = 0;\n            for (int i = 0; i < et.Length; i += 5) {\n                string quintet = et.Substring(i, 5);\n                char key = codes.Where(a => a.Value == quintet).First().Key;\n                sb.Append(key);\n            }\n            return sb.ToString();\n        }\n\n        static void Main(string[] args) {\n            string plainText = \"the quick brown fox jumps over the lazy dog\";\n            string message = \"bacon's cipher is a method of steganography created by francis bacon. \" +\n                \"this task is to implement a program for encryption and decryption of \" +\n                \"plaintext using the simple alphabet of the baconian cipher or some \" +\n                \"other kind of representation of this alphabet (make anything signify anything). \" +\n                \"the baconian alphabet may optionally be extended to encode all lower \" +\n                \"case characters individually and/or adding a few punctuation characters \" +\n                \"such as the space.\";\n            string cipherText = Encode(plainText, message);\n            Console.WriteLine(\"Cipher text ->\\n{0}\", cipherText);\n            string decodedText = Decode(cipherText);\n            Console.WriteLine(\"\\nHidden text ->\\n{0}\", decodedText);\n        }\n    }\n}\n"}
{"id": 45030, "name": "Spiral matrix", "source": "Translate Java to C#: public class Blah {\n\n  public static void main(String[] args) {\n    print2dArray(getSpiralArray(5));\n  }\n\n  public static int[][] getSpiralArray(int dimension) {\n    int[][] spiralArray = new int[dimension][dimension];\n\n    int numConcentricSquares = (int) Math.ceil((dimension) / 2.0);\n\n    int j;\n    int sideLen = dimension;\n    int currNum = 0;\n\n    for (int i = 0; i < numConcentricSquares; i++) {\n      \n      for (j = 0; j < sideLen; j++) {\n        spiralArray[i][i + j] = currNum++;\n      }\n\n      \n      for (j = 1; j < sideLen; j++) {\n        spiralArray[i + j][dimension - 1 - i] = currNum++;\n      }\n\n      \n      for (j = sideLen - 2; j > -1; j--) {\n        spiralArray[dimension - 1 - i][i + j] = currNum++;\n      }\n\n      \n      for (j = sideLen - 2; j > 0; j--) {\n        spiralArray[i + j][i] = currNum++;\n      }\n\n      sideLen -= 2;\n    }\n\n    return spiralArray;\n  }\n\n  public static void print2dArray(int[][] array) {\n    for (int[] row : array) {\n      for (int elem : row) {\n        System.out.printf(\"%3d\", elem);\n      }\n      System.out.println();\n    }\n  }\n}\n", "target": "public int[,] Spiral(int n) {\n    int[,] result = new int[n, n];\n\n    int pos = 0;\n    int count = n;\n    int value = -n;\n    int sum = -1;\n\n    do {\n        value = -1 * value / n;\n        for (int i = 0; i < count; i++) {\n            sum += value;\n            result[sum / n, sum % n] = pos++;\n        }\n        value *= n;\n        count--;\n        for (int i = 0; i < count; i++) {\n            sum += value;\n            result[sum / n, sum % n] = pos++;\n        }\n    } while (count > 0);\n\n    return result;\n}\n\n\n\npublic void PrintArray(int[,] array) {\n    int n = (array.GetLength(0) * array.GetLength(1) - 1).ToString().Length + 1;\n\n    for (int i = 0; i < array.GetLength(0); i++) {\n        for (int j = 0; j < array.GetLength(1); j++) {\n            Console.Write(array[i, j].ToString().PadLeft(n, ' '));\n        }\n        Console.WriteLine();\n    }\n}\n"}
{"id": 45031, "name": "Faulhaber's triangle", "source": "Translate Java to C#: import java.math.BigDecimal;\nimport java.math.MathContext;\nimport java.util.Arrays;\nimport java.util.stream.LongStream;\n\npublic class FaulhabersTriangle {\n    private static final MathContext MC = new MathContext(256);\n\n    private static long gcd(long a, long b) {\n        if (b == 0) {\n            return a;\n        }\n        return gcd(b, a % b);\n    }\n\n    private static class Frac implements Comparable<Frac> {\n        private long num;\n        private long denom;\n\n        public static final Frac ZERO = new Frac(0, 1);\n\n        public Frac(long n, long d) {\n            if (d == 0) throw new IllegalArgumentException(\"d must not be zero\");\n            long nn = n;\n            long dd = d;\n            if (nn == 0) {\n                dd = 1;\n            } else if (dd < 0) {\n                nn = -nn;\n                dd = -dd;\n            }\n            long g = Math.abs(gcd(nn, dd));\n            if (g > 1) {\n                nn /= g;\n                dd /= g;\n            }\n            num = nn;\n            denom = dd;\n        }\n\n        public Frac plus(Frac rhs) {\n            return new Frac(num * rhs.denom + denom * rhs.num, rhs.denom * denom);\n        }\n\n        public Frac unaryMinus() {\n            return new Frac(-num, denom);\n        }\n\n        public Frac minus(Frac rhs) {\n            return this.plus(rhs.unaryMinus());\n        }\n\n        public Frac times(Frac rhs) {\n            return new Frac(this.num * rhs.num, this.denom * rhs.denom);\n        }\n\n        @Override\n        public int compareTo(Frac o) {\n            double diff = toDouble() - o.toDouble();\n            return Double.compare(diff, 0.0);\n        }\n\n        @Override\n        public boolean equals(Object obj) {\n            return null != obj && obj instanceof Frac && this.compareTo((Frac) obj) == 0;\n        }\n\n        @Override\n        public String toString() {\n            if (denom == 1) {\n                return Long.toString(num);\n            }\n            return String.format(\"%d/%d\", num, denom);\n        }\n\n        public double toDouble() {\n            return (double) num / denom;\n        }\n\n        public BigDecimal toBigDecimal() {\n            return BigDecimal.valueOf(num).divide(BigDecimal.valueOf(denom), MC);\n        }\n    }\n\n    private static Frac bernoulli(int n) {\n        if (n < 0) throw new IllegalArgumentException(\"n may not be negative or zero\");\n        Frac[] a = new Frac[n + 1];\n        Arrays.fill(a, Frac.ZERO);\n        for (int m = 0; m <= n; ++m) {\n            a[m] = new Frac(1, m + 1);\n            for (int j = m; j >= 1; --j) {\n                a[j - 1] = a[j - 1].minus(a[j]).times(new Frac(j, 1));\n            }\n        }\n        \n        if (n != 1) return a[0];\n        return a[0].unaryMinus();\n    }\n\n    private static long binomial(int n, int k) {\n        if (n < 0 || k < 0 || n < k) throw new IllegalArgumentException();\n        if (n == 0 || k == 0) return 1;\n        long num = LongStream.rangeClosed(k + 1, n).reduce(1, (a, b) -> a * b);\n        long den = LongStream.rangeClosed(2, n - k).reduce(1, (acc, i) -> acc * i);\n        return num / den;\n    }\n\n    private static Frac[] faulhaberTriangle(int p) {\n        Frac[] coeffs = new Frac[p + 1];\n        Arrays.fill(coeffs, Frac.ZERO);\n        Frac q = new Frac(1, p + 1);\n        int sign = -1;\n        for (int j = 0; j <= p; ++j) {\n            sign *= -1;\n            coeffs[p - j] = q.times(new Frac(sign, 1)).times(new Frac(binomial(p + 1, j), 1)).times(bernoulli(j));\n        }\n        return coeffs;\n    }\n\n    public static void main(String[] args) {\n        for (int i = 0; i <= 9; ++i) {\n            Frac[] coeffs = faulhaberTriangle(i);\n            for (Frac coeff : coeffs) {\n                System.out.printf(\"%5s  \", coeff);\n            }\n            System.out.println();\n        }\n        System.out.println();\n        \n        int k = 17;\n        Frac[] cc = faulhaberTriangle(k);\n        int n = 1000;\n        BigDecimal nn = BigDecimal.valueOf(n);\n        BigDecimal np = BigDecimal.ONE;\n        BigDecimal sum = BigDecimal.ZERO;\n        for (Frac c : cc) {\n            np = np.multiply(nn);\n            sum = sum.add(np.multiply(c.toBigDecimal()));\n        }\n        System.out.println(sum.toBigInteger());\n    }\n}\n", "target": "using System;\n\nnamespace FaulhabersTriangle {\n    internal class Frac {\n        private long num;\n        private long denom;\n\n        public static readonly Frac ZERO = new Frac(0, 1);\n        public static readonly Frac ONE = new Frac(1, 1);\n\n        public Frac(long n, long d) {\n            if (d == 0) {\n                throw new ArgumentException(\"d must not be zero\");\n            }\n            long nn = n;\n            long dd = d;\n            if (nn == 0) {\n                dd = 1;\n            }\n            else if (dd < 0) {\n                nn = -nn;\n                dd = -dd;\n            }\n            long g = Math.Abs(Gcd(nn, dd));\n            if (g > 1) {\n                nn /= g;\n                dd /= g;\n            }\n            num = nn;\n            denom = dd;\n        }\n\n        private static long Gcd(long a, long b) {\n            if (b == 0) {\n                return a;\n            }\n            return Gcd(b, a % b);\n        }\n\n        public static Frac operator -(Frac self) {\n            return new Frac(-self.num, self.denom);\n        }\n\n        public static Frac operator +(Frac lhs, Frac rhs) {\n            return new Frac(lhs.num * rhs.denom + lhs.denom * rhs.num, rhs.denom * lhs.denom);\n        }\n\n        public static Frac operator -(Frac lhs, Frac rhs) {\n            return lhs + -rhs;\n        }\n\n        public static Frac operator *(Frac lhs, Frac rhs) {\n            return new Frac(lhs.num * rhs.num, lhs.denom * rhs.denom);\n        }\n\n        public static bool operator <(Frac lhs, Frac rhs) {\n            double x = (double)lhs.num / lhs.denom;\n            double y = (double)rhs.num / rhs.denom;\n            return x < y;\n        }\n\n        public static bool operator >(Frac lhs, Frac rhs) {\n            double x = (double)lhs.num / lhs.denom;\n            double y = (double)rhs.num / rhs.denom;\n            return x > y;\n        }\n\n        public static bool operator ==(Frac lhs, Frac rhs) {\n            return lhs.num == rhs.num && lhs.denom == rhs.denom;\n        }\n\n        public static bool operator !=(Frac lhs, Frac rhs) {\n            return lhs.num != rhs.num || lhs.denom != rhs.denom;\n        }\n\n        public override string ToString() {\n            if (denom == 1) {\n                return num.ToString();\n            }\n            return string.Format(\"{0}/{1}\", num, denom);\n        }\n\n        public override bool Equals(object obj) {\n            var frac = obj as Frac;\n            return frac != null &&\n                   num == frac.num &&\n                   denom == frac.denom;\n        }\n\n        public override int GetHashCode() {\n            var hashCode = 1317992671;\n            hashCode = hashCode * -1521134295 + num.GetHashCode();\n            hashCode = hashCode * -1521134295 + denom.GetHashCode();\n            return hashCode;\n        }\n    }\n\n    class Program {\n        static Frac Bernoulli(int n) {\n            if (n < 0) {\n                throw new ArgumentException(\"n may not be negative or zero\");\n            }\n            Frac[] a = new Frac[n + 1];\n            for (int m = 0; m <= n; m++) {\n                a[m] = new Frac(1, m + 1);\n                for (int j = m; j >= 1; j--) {\n                    a[j - 1] = (a[j - 1] - a[j]) * new Frac(j, 1);\n                }\n            }\n            \n            if (n != 1) return a[0];\n            return -a[0];\n        }\n\n        static int Binomial(int n, int k) {\n            if (n < 0 || k < 0 || n < k) {\n                throw new ArgumentException();\n            }\n            if (n == 0 || k == 0) return 1;\n            int num = 1;\n            for (int i = k + 1; i <= n; i++) {\n                num = num * i;\n            }\n            int denom = 1;\n            for (int i = 2; i <= n - k; i++) {\n                denom = denom * i;\n            }\n            return num / denom;\n        }\n\n        static Frac[] FaulhaberTriangle(int p) {\n            Frac[] coeffs = new Frac[p + 1];\n            for (int i = 0; i < p + 1; i++) {\n                coeffs[i] = Frac.ZERO;\n            }\n            Frac q = new Frac(1, p + 1);\n            int sign = -1;\n            for (int j = 0; j <= p; j++) {\n                sign *= -1;\n                coeffs[p - j] = q * new Frac(sign, 1) * new Frac(Binomial(p + 1, j), 1) * Bernoulli(j);\n            }\n            return coeffs;\n        }\n\n        static void Main(string[] args) {\n            for (int i = 0; i < 10; i++) {\n                Frac[] coeffs = FaulhaberTriangle(i);\n                foreach (Frac coeff in coeffs) {\n                    Console.Write(\"{0,5}  \", coeff);\n                }\n                Console.WriteLine();\n            }\n        }\n    }\n}\n"}
{"id": 45032, "name": "Command-line arguments", "source": "Translate Java to C#: public class Arguments {\n  public static void main(String[] args) {\n     System.out.println(\"There are \" + args.length + \" arguments given.\");\n     for(int i = 0; i < args.length; i++) \n        System.out.println(\"The argument #\" + (i+1) + \" is \" + args[i] + \" and is at index \" + i);\n  }\n}\n", "target": "using System;\n\nnamespace RosettaCode {\n    class Program {\n        static void Main(string[] args) {\n            for (int i = 0; i < args.Length; i++)\n                Console.WriteLine(String.Format(\"Argument {0} is '{1}'\", i, args[i]));\n        }\n    }\n}\n"}
{"id": 45033, "name": "Command-line arguments", "source": "Translate Java to C#: public class Arguments {\n  public static void main(String[] args) {\n     System.out.println(\"There are \" + args.length + \" arguments given.\");\n     for(int i = 0; i < args.length; i++) \n        System.out.println(\"The argument #\" + (i+1) + \" is \" + args[i] + \" and is at index \" + i);\n  }\n}\n", "target": "using System;\n\nnamespace RosettaCode {\n    class Program {\n        static void Main(string[] args) {\n            for (int i = 0; i < args.Length; i++)\n                Console.WriteLine(String.Format(\"Argument {0} is '{1}'\", i, args[i]));\n        }\n    }\n}\n"}
{"id": 45034, "name": "Array concatenation", "source": "Translate Java to C#: String[] fruits = [\"apples\", \"oranges\"];\nString[] grains = [\"wheat\", \"corn\"];\nString[] all    = fruits + grains;\n", "target": "using System;\n\nnamespace RosettaCode\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            int[] a = { 1, 2, 3 };\n            int[] b = { 4, 5, 6 };\n\n            int[] c = new int[a.Length + b.Length];\n            a.CopyTo(c, 0);\n            b.CopyTo(c, a.Length);\n\n            foreach(int n in c)\n            {\n                Console.WriteLine(n.ToString());\n            }\n        }\n    }\n}\n"}
{"id": 45035, "name": "User input_Text", "source": "Translate Java to C#: import java.util.Scanner;\n\npublic class GetInput {\n    public static void main(String[] args) throws Exception {\n        Scanner s = new Scanner(System.in);\n        System.out.print(\"Enter a string: \");\n        String str = s.nextLine();\n        System.out.print(\"Enter an integer: \");\n        int i = Integer.parseInt(s.next());\n    }\n}\n", "target": "using System;\n\nnamespace C_Sharp_Console {\n\n    class example {\n\n        static void Main() {\n            string word;\n            int num;\n            \n            Console.Write(\"Enter an integer: \");\n            num = Console.Read();\n            Console.Write(\"Enter a String: \");\n            word = Console.ReadLine();\n        }\n    }\n}\n"}
{"id": 45036, "name": "Knapsack problem_0-1", "source": "Translate Java to C#: package hu.pj.alg.test;\n\nimport hu.pj.alg.ZeroOneKnapsack;\nimport hu.pj.obj.Item;\nimport java.util.*;\nimport java.text.*;\n\npublic class ZeroOneKnapsackForTourists {\n\n    public ZeroOneKnapsackForTourists() {\n        ZeroOneKnapsack zok = new ZeroOneKnapsack(400); \n\n        \n        zok.add(\"map\", 9, 150);\n        zok.add(\"compass\", 13, 35);\n        zok.add(\"water\", 153, 200);\n        zok.add(\"sandwich\", 50, 160);\n        zok.add(\"glucose\", 15, 60);\n        zok.add(\"tin\", 68, 45);\n        zok.add(\"banana\", 27, 60);\n        zok.add(\"apple\", 39, 40);\n        zok.add(\"cheese\", 23, 30);\n        zok.add(\"beer\", 52, 10);\n        zok.add(\"suntan cream\", 11, 70);\n        zok.add(\"camera\", 32, 30);\n        zok.add(\"t-shirt\", 24, 15);\n        zok.add(\"trousers\", 48, 10);\n        zok.add(\"umbrella\", 73, 40);\n        zok.add(\"waterproof trousers\", 42, 70);\n        zok.add(\"waterproof overclothes\", 43, 75);\n        zok.add(\"note-case\", 22, 80);\n        zok.add(\"sunglasses\", 7, 20);\n        zok.add(\"towel\", 18, 12);\n        zok.add(\"socks\", 4, 50);\n        zok.add(\"book\", 30, 10);\n\n        \n        List<Item> itemList = zok.calcSolution();\n\n        \n        if (zok.isCalculated()) {\n            NumberFormat nf  = NumberFormat.getInstance();\n\n            System.out.println(\n                \"Maximal weight           = \" +\n                nf.format(zok.getMaxWeight() / 100.0) + \" kg\"\n            );\n            System.out.println(\n                \"Total weight of solution = \" +\n                nf.format(zok.getSolutionWeight() / 100.0) + \" kg\"\n            );\n            System.out.println(\n                \"Total value              = \" +\n                zok.getProfit()\n            );\n            System.out.println();\n            System.out.println(\n                \"You can carry the following materials \" +\n                \"in the knapsack:\"\n            );\n            for (Item item : itemList) {\n                if (item.getInKnapsack() == 1) {\n                    System.out.format(\n                        \"%1$-23s %2$-3s %3$-5s %4$-15s \\n\",\n                        item.getName(),\n                        item.getWeight(), \"dag  \",\n                        \"(value = \" + item.getValue() + \")\"\n                    );\n                }\n            }\n        } else {\n            System.out.println(\n                \"The problem is not solved. \" +\n                \"Maybe you gave wrong data.\"\n            );\n        }\n\n    }\n\n    public static void main(String[] args) {\n        new ZeroOneKnapsackForTourists();\n    }\n\n} \n", "target": "using System;\nusing System.Collections.Generic;\n\nnamespace Tests_With_Framework_4\n{\n\nclass Bag : IEnumerable<Bag.Item>\n        {\n            List<Item> items;\n            const int MaxWeightAllowed = 400;\n\n            public Bag()\n            {\n                items = new List<Item>();\n            }\n\n            void AddItem(Item i)\n            {\n                if ((TotalWeight + i.Weight) <= MaxWeightAllowed)\n                    items.Add(i);\n            }\n\n            public void Calculate(List<Item> items)\n            {\n                foreach (Item i in Sorte(items))\n                {\n                    AddItem(i);\n                }\n            }\n\n            List<Item> Sorte(List<Item> inputItems)\n            {\n                List<Item> choosenItems = new List<Item>();\n                for (int i = 0; i < inputItems.Count; i++)\n                {\n                    int j = -1;\n                    if (i == 0)\n                    {\n                        choosenItems.Add(inputItems[i]);\n                    }\n                    if (i > 0)\n                    {\n                        if (!RecursiveF(inputItems, choosenItems, i, choosenItems.Count - 1, false, ref j))\n                        {\n                            choosenItems.Add(inputItems[i]);\n                        }\n                    }\n                }\n                return choosenItems;\n            }\n\n            bool RecursiveF(List<Item> knapsackItems, List<Item> choosenItems, int i, int lastBound, bool dec, ref int indxToAdd)\n            {\n                if (!(lastBound < 0))\n                {\n                    if ( knapsackItems[i].ResultWV < choosenItems[lastBound].ResultWV )\n                    {\n                        indxToAdd = lastBound;\n                    }\n                    return RecursiveF(knapsackItems, choosenItems, i, lastBound - 1, true, ref indxToAdd);\n                }\n                if (indxToAdd > -1)\n                {\n                    choosenItems.Insert(indxToAdd, knapsackItems[i]);\n                    return true;\n                }\n                return false;\n            }\n\n            #region IEnumerable<Item> Members\n            IEnumerator<Item> IEnumerable<Item>.GetEnumerator()\n            {\n                foreach (Item i in items)\n                    yield return i;\n            }\n            #endregion\n\n            #region IEnumerable Members\n            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()\n            {\n                return items.GetEnumerator();\n            }\n            #endregion\n\n            public int TotalWeight\n            {\n                get\n                {\n                    var sum = 0;\n                    foreach (Item i in this)\n                    {\n                        sum += i.Weight;\n                    }\n                    return sum;\n                }\n            }\n\n            public class Item\n            {\n                public string Name { get; set; } public int Weight { get; set; } public int Value { get; set; } public int ResultWV { get { return  Weight-Value; } }\n                public override string ToString()\n                {\n                    return \"Name\u00a0: \" + Name + \"        Wieght\u00a0: \" + Weight + \"       Value\u00a0: \" + Value + \"     ResultWV\u00a0: \" + ResultWV;\n                }\n            }\n        }\n\n    class Program\n    {\n        static void Main(string[] args)\n        {List<Bag.Item> knapsackItems = new List<Bag.Item>();\n            knapsackItems.Add(new Bag.Item() { Name = \"Map\", Weight = 9, Value = 150 });\n            knapsackItems.Add(new Bag.Item() { Name = \"Water\", Weight = 153, Value = 200 });\n            knapsackItems.Add(new Bag.Item() { Name = \"Compass\", Weight = 13, Value = 35 });\n            knapsackItems.Add(new Bag.Item() { Name = \"Sandwitch\", Weight = 50, Value = 160 });\n            knapsackItems.Add(new Bag.Item() { Name = \"Glucose\", Weight = 15, Value = 60 });\n            knapsackItems.Add(new Bag.Item() { Name = \"Tin\", Weight = 68, Value = 45 });\n            knapsackItems.Add(new Bag.Item() { Name = \"Banana\", Weight = 27, Value = 60 });\n            knapsackItems.Add(new Bag.Item() { Name = \"Apple\", Weight = 39, Value = 40 });\n            knapsackItems.Add(new Bag.Item() { Name = \"Cheese\", Weight = 23, Value = 30 });\n            knapsackItems.Add(new Bag.Item() { Name = \"Beer\", Weight = 52, Value = 10 });\n            knapsackItems.Add(new Bag.Item() { Name = \"Suntan Cream\", Weight = 11, Value = 70 });\n            knapsackItems.Add(new Bag.Item() { Name = \"Camera\", Weight = 32, Value = 30 });\n            knapsackItems.Add(new Bag.Item() { Name = \"T-shirt\", Weight = 24, Value = 15 });\n            knapsackItems.Add(new Bag.Item() { Name = \"Trousers\", Weight = 48, Value = 10 });\n            knapsackItems.Add(new Bag.Item() { Name = \"Umbrella\", Weight = 73, Value = 40 });\n            knapsackItems.Add(new Bag.Item() { Name = \"WaterProof Trousers\", Weight = 42, Value = 70 });\n            knapsackItems.Add(new Bag.Item() { Name = \"Note-Case\", Weight = 22, Value = 80 });\n            knapsackItems.Add(new Bag.Item() { Name = \"Sunglasses\", Weight = 7, Value = 20 });\n            knapsackItems.Add(new Bag.Item() { Name = \"Towel\", Weight = 18, Value = 12 });\n            knapsackItems.Add(new Bag.Item() { Name = \"Socks\", Weight = 4, Value = 50 });\n            knapsackItems.Add(new Bag.Item() { Name = \"Book\", Weight = 30, Value = 10 });\n            knapsackItems.Add(new Bag.Item() { Name = \"waterproof overclothes \", Weight = 43, Value = 75 });\n\n            Bag b = new Bag();\n            b.Calculate(knapsackItems);\n            b.All(x => { Console.WriteLine(x); return true; });\n            Console.WriteLine(b.Sum(x => x.Weight));\n            Console.ReadKey();\n        }\n    }\n}\n"}
{"id": 45037, "name": "Cartesian product of two or more lists", "source": "Translate Java to C#: import static java.util.Arrays.asList;\nimport static java.util.Collections.emptyList;\nimport static java.util.Optional.of;\nimport static java.util.stream.Collectors.toList;\n\nimport java.util.List;\n\npublic class CartesianProduct {\n\n    public List<?> product(List<?>... a) {\n        if (a.length >= 2) {\n            List<?> product = a[0];\n            for (int i = 1; i < a.length; i++) {\n                product = product(product, a[i]);\n            }\n            return product;\n        }\n\n        return emptyList();\n    }\n\n    private <A, B> List<?> product(List<A> a, List<B> b) {\n        return of(a.stream()\n                .map(e1 -> of(b.stream().map(e2 -> asList(e1, e2)).collect(toList())).orElse(emptyList()))\n                .flatMap(List::stream)\n                .collect(toList())).orElse(emptyList());\n    }\n}\n", "target": "using System;\npublic class Program\n{\n    public static void Main()\n    {\n        int[] empty = new int[0];\n        int[] list1 = { 1, 2 };\n        int[] list2 = { 3, 4 };\n        int[] list3 = { 1776, 1789 };\n        int[] list4 = { 7, 12 };\n        int[] list5 = { 4, 14, 23 };\n        int[] list6 = { 0, 1 };\n        int[] list7 = { 1, 2, 3 };\n        int[] list8 = { 30 };\n        int[] list9 = { 500, 100 };\n        \n        foreach (var sequenceList in new [] {\n            new [] { list1, list2 },\n            new [] { list2, list1 },\n            new [] { list1, empty },\n            new [] { empty, list1 },\n            new [] { list3, list4, list5, list6 },\n            new [] { list7, list8, list9 },\n            new [] { list7, empty, list9 }\n        }) {\n            var cart = sequenceList.CartesianProduct()\n                .Select(tuple => $\"({string.Join(\", \", tuple)})\");\n            Console.WriteLine($\"{{{string.Join(\", \", cart)}}}\");\n        }\n    }\n}\n\npublic static class Extensions\n{\n    public static IEnumerable<IEnumerable<T>> CartesianProduct<T>(this IEnumerable<IEnumerable<T>> sequences) {\n        IEnumerable<IEnumerable<T>> emptyProduct = new[] { Enumerable.Empty<T>() };\n        return sequences.Aggregate(\n            emptyProduct,\n            (accumulator, sequence) =>\n            from acc in accumulator\n            from item in sequence\n            select acc.Concat(new [] { item }));\n    }\n}\n"}
{"id": 45038, "name": "Cartesian product of two or more lists", "source": "Translate Java to C#: import static java.util.Arrays.asList;\nimport static java.util.Collections.emptyList;\nimport static java.util.Optional.of;\nimport static java.util.stream.Collectors.toList;\n\nimport java.util.List;\n\npublic class CartesianProduct {\n\n    public List<?> product(List<?>... a) {\n        if (a.length >= 2) {\n            List<?> product = a[0];\n            for (int i = 1; i < a.length; i++) {\n                product = product(product, a[i]);\n            }\n            return product;\n        }\n\n        return emptyList();\n    }\n\n    private <A, B> List<?> product(List<A> a, List<B> b) {\n        return of(a.stream()\n                .map(e1 -> of(b.stream().map(e2 -> asList(e1, e2)).collect(toList())).orElse(emptyList()))\n                .flatMap(List::stream)\n                .collect(toList())).orElse(emptyList());\n    }\n}\n", "target": "using System;\npublic class Program\n{\n    public static void Main()\n    {\n        int[] empty = new int[0];\n        int[] list1 = { 1, 2 };\n        int[] list2 = { 3, 4 };\n        int[] list3 = { 1776, 1789 };\n        int[] list4 = { 7, 12 };\n        int[] list5 = { 4, 14, 23 };\n        int[] list6 = { 0, 1 };\n        int[] list7 = { 1, 2, 3 };\n        int[] list8 = { 30 };\n        int[] list9 = { 500, 100 };\n        \n        foreach (var sequenceList in new [] {\n            new [] { list1, list2 },\n            new [] { list2, list1 },\n            new [] { list1, empty },\n            new [] { empty, list1 },\n            new [] { list3, list4, list5, list6 },\n            new [] { list7, list8, list9 },\n            new [] { list7, empty, list9 }\n        }) {\n            var cart = sequenceList.CartesianProduct()\n                .Select(tuple => $\"({string.Join(\", \", tuple)})\");\n            Console.WriteLine($\"{{{string.Join(\", \", cart)}}}\");\n        }\n    }\n}\n\npublic static class Extensions\n{\n    public static IEnumerable<IEnumerable<T>> CartesianProduct<T>(this IEnumerable<IEnumerable<T>> sequences) {\n        IEnumerable<IEnumerable<T>> emptyProduct = new[] { Enumerable.Empty<T>() };\n        return sequences.Aggregate(\n            emptyProduct,\n            (accumulator, sequence) =>\n            from acc in accumulator\n            from item in sequence\n            select acc.Concat(new [] { item }));\n    }\n}\n"}
{"id": 45039, "name": "First-class functions", "source": "Translate Java to C#: import java.util.ArrayList;\n\npublic class FirstClass{\n\t\n\tpublic interface Function<A,B>{\n\t\tB apply(A x);\n\t}\n\t\n\tpublic static <A,B,C> Function<A, C> compose(\n\t\t\tfinal Function<B, C> f, final Function<A, B> g) {\n\t\treturn new Function<A, C>() {\n\t\t\t@Override public C apply(A x) {\n\t\t\t\treturn f.apply(g.apply(x));\n\t\t\t}\n\t\t};\n\t}\n\t \n\tpublic static void main(String[] args){\n\t\tArrayList<Function<Double, Double>> functions =\n\t\t\tnew ArrayList<Function<Double,Double>>();\n\t\t\n\t\tfunctions.add(\n\t\t\t\tnew Function<Double, Double>(){\n\t\t\t\t\t@Override public Double apply(Double x){\n\t\t\t\t\t\treturn Math.cos(x);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\tfunctions.add(\n\t\t\t\tnew Function<Double, Double>(){\n\t\t\t\t\t@Override public Double apply(Double x){\n\t\t\t\t\t\treturn Math.tan(x);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\tfunctions.add(\n\t\t\t\tnew Function<Double, Double>(){\n\t\t\t\t\t@Override public Double apply(Double x){\n\t\t\t\t\t\treturn x * x;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\n\t\tArrayList<Function<Double, Double>> inverse = new ArrayList<Function<Double,Double>>();\n\t\t\n\t\tinverse.add(\n\t\t\t\tnew Function<Double, Double>(){\n\t\t\t\t\t@Override public Double apply(Double x){\n\t\t\t\t\t\treturn Math.acos(x);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\tinverse.add(\n\t\t\t\tnew Function<Double, Double>(){\n\t\t\t\t\t@Override public Double apply(Double x){\n\t\t\t\t\t\treturn Math.atan(x);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\tinverse.add(\n\t\t\t\tnew Function<Double, Double>(){\n\t\t\t\t\t@Override public Double apply(Double x){\n\t\t\t\t\t\treturn Math.sqrt(x);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\tSystem.out.println(\"Compositions:\");\n\t\tfor(int i = 0; i < functions.size(); i++){\n\t\t\tSystem.out.println(compose(functions.get(i), inverse.get(i)).apply(0.5));\n\t\t}\n\t\tSystem.out.println(\"Hard-coded compositions:\");\n\t\tSystem.out.println(Math.cos(Math.acos(0.5)));\n\t\tSystem.out.println(Math.tan(Math.atan(0.5)));\n\t\tSystem.out.println(Math.pow(Math.sqrt(0.5), 2));\n\t}\n}\n", "target": "using System;\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        var cube = new Func<double, double>(x => Math.Pow(x, 3.0));\n        var croot = new Func<double, double>(x => Math.Pow(x, 1 / 3.0));\n\n        var functionTuples = new[]\n        {\n            (forward: Math.Sin, backward: Math.Asin),\n            (forward: Math.Cos, backward: Math.Acos),\n            (forward: cube,     backward: croot)\n        };\n\n        foreach (var ft in functionTuples)\n        {\n            Console.WriteLine(ft.backward(ft.forward(0.5)));\n        }\n    }\n}\n"}
{"id": 45040, "name": "Proper divisors", "source": "Translate Java to C#: import java.util.Collections;\nimport java.util.LinkedList;\nimport java.util.List;\n\npublic class Proper{\n    public static List<Integer> properDivs(int n){\n        List<Integer> divs = new LinkedList<Integer>();\n        if(n == 1) return divs;\n        divs.add(1);\n        for(int x = 2; x < n; x++){\n            if(n % x == 0) divs.add(x);\n        }\n        \n        Collections.sort(divs);\n        \n        return divs;\n    }\n    \n    public static void main(String[] args){\n        for(int x = 1; x <= 10; x++){\n            System.out.println(x + \": \" + properDivs(x));\n        }\n        \n        int x = 0, count = 0;\n        for(int n = 1; n <= 20000; n++){\n            if(properDivs(n).size() > count){\n                x = n;\n                count = properDivs(n).size();\n            }\n        }\n        System.out.println(x + \": \" + count);\n    }\n}\n", "target": "namespace RosettaCode.ProperDivisors\n{\n    using System;\n    using System.Collections.Generic;\n    using System.Linq;\n\n    internal static class Program\n    {\n        private static IEnumerable<int> ProperDivisors(int number)\n        {\n            return\n                Enumerable.Range(1, number / 2)\n                    .Where(divisor => number % divisor == 0);\n        }\n\n        private static void Main()\n        {\n            foreach (var number in Enumerable.Range(1, 10))\n            {\n                Console.WriteLine(\"{0}: {{{1}}}\", number,\n                    string.Join(\", \", ProperDivisors(number)));\n            }\n\n            var record = Enumerable.Range(1, 20000).Select(number => new\n            {\n                Number = number,\n                Count = ProperDivisors(number).Count()\n            }).OrderByDescending(currentRecord => currentRecord.Count).First();\n            Console.WriteLine(\"{0}: {1}\", record.Number, record.Count);\n        }\n    }\n}\n"}
{"id": 45041, "name": "XML_Output", "source": "Translate Java to C#: import java.io.StringWriter;\n\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.transform.Result;\nimport javax.xml.transform.Source;\nimport javax.xml.transform.Transformer;\nimport javax.xml.transform.TransformerFactory;\nimport javax.xml.transform.dom.DOMSource;\nimport javax.xml.transform.stream.StreamResult;\n\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Element;\n\npublic class XmlCreation {\n\n  private static final String[] names = {\"April\", \"Tam O'Shanter\", \"Emily\"};\n  private static final String[] remarks = {\"Bubbly: I'm > Tam and <= Emily\",\n    \"Burns: \\\"When chapman billies leave the street ...\\\"\",\n      \"Short & shrift\"};\n  \n  public static void main(String[] args) {\n    try {\n      \n      final Document doc = DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();\n      \n      \n      final Element root = doc.createElement(\"CharacterRemarks\");\n      doc.appendChild(root);\n      \n      \n      for(int i = 0; i < names.length; i++) {\n        final Element character = doc.createElement(\"Character\");\n        root.appendChild(character);\n        character.setAttribute(\"name\", names[i]);\n        character.appendChild(doc.createTextNode(remarks[i]));\n      }\n      \n      \n      \n      final Source source = new DOMSource(doc);\n      \n      \n      final StringWriter buffer = new StringWriter();\n      \n      \n      final Result result = new StreamResult(buffer);\n      \n      \n      final Transformer transformer = TransformerFactory.newInstance().newTransformer();\n      transformer.setOutputProperty(\"indent\", \"yes\");\n      transformer.transform(source, result);\n      \n      \n      \n      System.out.println(buffer.toString());\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n  }\n  \n}\n", "target": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Xml.Linq;\n\nclass Program\n{\n    static string CreateXML(Dictionary<string, string> characterRemarks)\n    {\n        var remarks = characterRemarks.Select(r => new XElement(\"Character\", r.Value, new XAttribute(\"Name\", r.Key)));\n        var xml = new XElement(\"CharacterRemarks\", remarks);\n        return xml.ToString();\n    }\n\n    static void Main(string[] args)\n    {\n        var characterRemarks = new Dictionary<string, string>\n        {\n            { \"April\", \"Bubbly: I'm > Tam and <= Emily\" },\n            { \"Tam O'Shanter\", \"Burns: \\\"When chapman billies leave the street ...\\\"\" },\n            { \"Emily\", \"Short & shrift\" }\n        };\n\n        string xml = CreateXML(characterRemarks);\n        Console.WriteLine(xml);\n    }\n}\n"}
{"id": 45042, "name": "Regular expressions", "source": "Translate Java to C#: String str = \"I am a string\";\nif (str.matches(\".*string\")) { \n  System.out.println(\"ends with 'string'\");\n}\n", "target": "using System;\nusing System.Text.RegularExpressions;\n\nclass Program {\n    static void Main(string[] args) {\n        string str = \"I am a string\";\n\n        if (new Regex(\"string$\").IsMatch(str)) {\n            Console.WriteLine(\"Ends with string.\");\n        }\n\n        str = new Regex(\" a \").Replace(str, \" another \");\n        Console.WriteLine(str);\n    }\n}\n"}
{"id": 45043, "name": "Guess the number_With feedback (player)", "source": "Translate Java to C#: import java.util.AbstractList;\nimport java.util.Collections;\nimport java.util.Scanner;\n\npublic class GuessNumber {\n    public static final int LOWER = 0, UPPER = 100;\n    public static void main(String[] args) {\n\tSystem.out.printf(\"Instructions:\\n\" +\n\t\t\t  \"Think of integer number from %d (inclusive) to %d (exclusive) and\\n\" +\n\t\t\t  \"I will guess it. After each guess, you respond with L, H, or C depending\\n\" +\n\t\t\t  \"on if my guess was too low, too high, or correct.\\n\",\n\t\t\t  LOWER, UPPER);\n\tint result = Collections.binarySearch(new AbstractList<Integer>() {\n\t\tprivate final Scanner in = new Scanner(System.in);\n\t\tpublic int size() { return UPPER - LOWER; }\n\t\tpublic Integer get(int i) {\n\t\t    System.out.printf(\"My guess is: %d. Is it too high, too low, or correct? (H/L/C) \", LOWER+i);\n\t\t    String s = in.nextLine();\n\t\t    assert s.length() > 0;\n\t\t    switch (Character.toLowerCase(s.charAt(0))) {\n\t\t    case 'l':\n\t\t\treturn -1;\n\t\t    case 'h':\n\t\t\treturn 1;\n\t\t    case 'c':\n\t\t\treturn 0;\n\t\t    }\n\t\t    return -1;\n\t\t}\n\t    }, 0);\n\tif (result < 0)\n\t    System.out.println(\"That is impossible.\");\n\telse\n\t    System.out.printf(\"Your number is %d.\\n\", result);\n    }\n}\n", "target": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading; \n\nnamespace ConsoleApplication1\n{\n    class RealisticGuess \n    {\n        private int max;\n        private int min;\n        private int guess;\n\n        public void Start()\n        {\n            Console.Clear();\n            string input;\n\n            try\n            {\n                Console.WriteLine(\"Please enter the lower boundary\");\n                input = Console.ReadLine();\n                min = Convert.ToInt32(input);\n                Console.WriteLine(\"Please enter the upper boundary\");\n                input = Console.ReadLine();\n                max = Convert.ToInt32(input);\n            }\n            catch (FormatException)\n            {\n                Console.WriteLine(\"The entry you have made is invalid. Please make sure your entry is an integer and try again.\");\n                Console.ReadKey(true);\n                Start();\n            }\n            Console.WriteLine(\"Think of a number between {0} and {1}.\", min, max);\n            Thread.Sleep(2500);\n            Console.WriteLine(\"Ready?\");\n            Console.WriteLine(\"Press any key to begin.\");\n            Console.ReadKey(true);\n            Guess(min, max);\n        }\n        public void Guess(int min, int max)\n        {\n            int counter = 1;\n            string userAnswer;\n            bool correct = false;\n            Random rand = new Random();\n\n            while (correct == false)\n            {\n                guess = rand.Next(min, max);\n                Console.Clear();\n                Console.WriteLine(\"{0}\", guess);\n                Console.WriteLine(\"Is this number correct? {Y/N}\");\n                userAnswer = Console.ReadLine();\n                if (userAnswer != \"y\" && userAnswer != \"Y\" && userAnswer != \"n\" && userAnswer != \"N\")\n                {\n                    Console.WriteLine(\"Your entry is invalid. Please enter either 'Y' or 'N'\");\n                    Console.WriteLine(\"Is the number correct? {Y/N}\");\n                    userAnswer = Console.ReadLine();\n                }\n                if (userAnswer == \"y\" || userAnswer == \"Y\")\n                {\n                    correct = true;\n                }\n                if (userAnswer == \"n\" || userAnswer == \"N\")\n                {\n                    counter++;\n                    if (max == min)\n                    {\n                        Console.WriteLine(\"Error: Range Intersect. Press enter to restart the game.\");  \n                        Console.ReadKey(true);                                                          \n                        Guess(1, 101);                                                                  \n                    }\n                    Console.WriteLine(\"Is the number you're thinking of lower or higher? {L/H}\");\n                    userAnswer = Console.ReadLine();\n                    if (userAnswer != \"l\" && userAnswer != \"L\" && userAnswer != \"h\" && userAnswer != \"H\")\n                    {\n                        Console.WriteLine(\"Your entry is invalid. Please enter either 'L' or 'H'\");\n                        Console.WriteLine(\"Is the number you're thinking of lower or higher? {L/H}\");\n                        userAnswer = Console.ReadLine();\n                    }\n                    if (userAnswer == \"l\" || userAnswer == \"L\")\n                    {\n                        max = guess;\n                    }\n                    if (userAnswer == \"h\" || userAnswer == \"H\")\n                    {\n                        min = guess;\n                    }\n                }\n            }\n            if (correct == true)\n            {\n                EndAndLoop(counter);\n            }\n        }\n\n        public void EndAndLoop(int iterations)\n        {\n            string userChoice;\n            bool loop = false;\n            Console.WriteLine(\"Game over. It took {0} guesses to find the number.\", iterations);\n            while (loop == false)\n            {\n                Console.WriteLine(\"Would you like to play again? {Y/N}\");\n                userChoice = Console.ReadLine();\n                if (userChoice != \"Y\" && userChoice != \"y\" && userChoice != \"N\" && userChoice != \"n\")\n                {\n                    Console.WriteLine(\"Sorry, your input is invalid. Please answer 'Y' to play again, or 'N' to quit.\");\n                }\n                if (userChoice == \"Y\" || userChoice == \"y\")\n                {\n                    Start();\n                }\n                if (userChoice == \"N\" || userChoice == \"n\")\n                {\n                    Environment.Exit(1);\n                }\n            }\n        }\n    }\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.Title = \"Random Number\";\n            RealisticGuess game = new RealisticGuess();\n            game.Start();\n        }\n    }\n}\n"}
{"id": 45044, "name": "Hash from two arrays", "source": "Translate Java to C#: import java.util.HashMap;\npublic static void main(String[] args){\n\tString[] keys= {\"a\", \"b\", \"c\"};\n\tint[] vals= {1, 2, 3};\n\tHashMap<String, Integer> hash= new HashMap<String, Integer>();\n\n\tfor(int i= 0; i < keys.length; i++){\n\t   hash.put(keys[i], vals[i]);\n\t}\n}\n", "target": "static class Program\n{\n    static void Main()\n    {\n        System.Collections.Hashtable h = new System.Collections.Hashtable();\n\n        string[] keys = { \"foo\", \"bar\", \"val\" };\n        string[] values = { \"little\", \"miss\", \"muffet\" };\n\n        System.Diagnostics.Trace.Assert(keys.Length == values.Length, \"Arrays are not same length.\");\n\n        for (int i = 0; i < keys.Length; i++)\n        {\n            h.Add(keys[i], values[i]);\n        }\n    }\n}\n"}
{"id": 45045, "name": "Bin given limits", "source": "Translate Java to C#: import java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class Bins {\n    public static <T extends Comparable<? super T>> int[] bins(\n            List<? extends T> limits, Iterable<? extends T> data) {\n        int[] result = new int[limits.size() + 1];\n        for (T n : data) {\n            int i = Collections.binarySearch(limits, n);\n            if (i >= 0) {\n                \n                i = i+1;\n            } else {\n                \n                i = ~i;\n            }\n            result[i]++;\n        }\n        return result;\n    }\n\n    public static void printBins(List<?> limits, int[] bins) {\n        int n = limits.size();\n        if (n == 0) {\n            return;\n        }\n        assert n+1 == bins.length;\n        System.out.printf(\"           < %3s: %2d\\n\", limits.get(0), bins[0]);\n        for (int i = 1; i < n; i++) {\n            System.out.printf(\">= %3s and < %3s: %2d\\n\", limits.get(i-1), limits.get(i), bins[i]);\n        }\n        System.out.printf(\">= %3s         \u00a0: %2d\\n\", limits.get(n-1), bins[n]);\n    }\n\n    public static void main(String[] args) {\n        List<Integer> limits = Arrays.asList(23, 37, 43, 53, 67, 83);\n        List<Integer> data = Arrays.asList(\n            95, 21, 94, 12, 99, 4,  70, 75, 83, 93, 52, 80, 57, 5,  53, 86, 65,\n            17, 92, 83, 71, 61, 54, 58, 47, 16, 8,  9,  32, 84, 7,  87, 46, 19,\n            30, 37, 96, 6,  98, 40, 79, 97, 45, 64, 60, 29, 49, 36, 43, 55);\n\n        System.out.println(\"Example 1:\");\n        printBins(limits, bins(limits, data));\n\n        limits = Arrays.asList(14,  18,  249, 312, 389,\n                               392, 513, 591, 634, 720);\n        data = Arrays.asList(\n            445, 814, 519, 697, 700, 130, 255, 889, 481, 122, 932, 77,  323, 525,\n            570, 219, 367, 523, 442, 933, 416, 589, 930, 373, 202, 253, 775, 47,\n            731, 685, 293, 126, 133, 450, 545, 100, 741, 583, 763, 306, 655, 267,\n            248, 477, 549, 238, 62,  678, 98,  534, 622, 907, 406, 714, 184, 391,\n            913, 42,  560, 247, 346, 860, 56,  138, 546, 38,  985, 948, 58,  213,\n            799, 319, 390, 634, 458, 945, 733, 507, 916, 123, 345, 110, 720, 917,\n            313, 845, 426, 9,   457, 628, 410, 723, 354, 895, 881, 953, 677, 137,\n            397, 97,  854, 740, 83,  216, 421, 94,  517, 479, 292, 963, 376, 981,\n            480, 39,  257, 272, 157, 5,   316, 395, 787, 942, 456, 242, 759, 898,\n            576, 67,  298, 425, 894, 435, 831, 241, 989, 614, 987, 770, 384, 692,\n            698, 765, 331, 487, 251, 600, 879, 342, 982, 527, 736, 795, 585, 40,\n            54,  901, 408, 359, 577, 237, 605, 847, 353, 968, 832, 205, 838, 427,\n            876, 959, 686, 646, 835, 127, 621, 892, 443, 198, 988, 791, 466, 23,\n            707, 467, 33,  670, 921, 180, 991, 396, 160, 436, 717, 918, 8,   374,\n            101, 684, 727, 749);\n\n        System.out.println();\n        System.out.println(\"Example 2:\");\n        printBins(limits, bins(limits, data));\n    }\n}\n", "target": "using System;\n\npublic class Program\n{\n    static void Main()\n    {\n        PrintBins(new [] { 23, 37, 43, 53, 67, 83 },\n            95,21,94,12,99,4,70,75,83,93,52,80,57,5,53,86,65,17,92,83,71,61,54,58,47,\n            16, 8, 9,32,84,7,87,46,19,30,37,96,6,98,40,79,97,45,64,60,29,49,36,43,55\n        );\n        Console.WriteLine();\n\n        PrintBins(new [] { 14, 18, 249, 312, 389, 392, 513, 591, 634, 720 },\n            445,814,519,697,700,130,255,889,481,122,932, 77,323,525,570,219,367,523,442,933,416,589,930,373,202,\n            253,775, 47,731,685,293,126,133,450,545,100,741,583,763,306,655,267,248,477,549,238, 62,678, 98,534,\n            622,907,406,714,184,391,913, 42,560,247,346,860, 56,138,546, 38,985,948, 58,213,799,319,390,634,458,\n            945,733,507,916,123,345,110,720,917,313,845,426,  9,457,628,410,723,354,895,881,953,677,137,397, 97,\n            854,740, 83,216,421, 94,517,479,292,963,376,981,480, 39,257,272,157,  5,316,395,787,942,456,242,759,\n            898,576, 67,298,425,894,435,831,241,989,614,987,770,384,692,698,765,331,487,251,600,879,342,982,527,\n            736,795,585, 40, 54,901,408,359,577,237,605,847,353,968,832,205,838,427,876,959,686,646,835,127,621,\n            892,443,198,988,791,466, 23,707,467, 33,670,921,180,991,396,160,436,717,918,  8,374,101,684,727,749);\n    }\n\n    static void PrintBins(int[] limits, params int[] data)\n    {\n        int[] bins = Bins(limits, data);\n        Console.WriteLine($\"-\u221e .. {limits[0]} => {bins[0]}\");\n        for (int i = 0; i < limits.Length-1; i++) {\n            Console.WriteLine($\"{limits[i]} .. {limits[i+1]} => {bins[i+1]}\");\n        }\n        Console.WriteLine($\"{limits[^1]} .. \u221e => {bins[^1]}\");\n    }\n\n    static int[] Bins(int[] limits, params int[] data)\n    {\n        Array.Sort(limits);\n        int[] bins = new int[limits.Length + 1];\n        foreach (int n in data) {\n            int i = Array.BinarySearch(limits, n);\n            i = i < 0 ? ~i : i+1;\n            bins[i]++;\n        }\n        return bins;\n    }\n}\n"}
{"id": 45046, "name": "Bin given limits", "source": "Translate Java to C#: import java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class Bins {\n    public static <T extends Comparable<? super T>> int[] bins(\n            List<? extends T> limits, Iterable<? extends T> data) {\n        int[] result = new int[limits.size() + 1];\n        for (T n : data) {\n            int i = Collections.binarySearch(limits, n);\n            if (i >= 0) {\n                \n                i = i+1;\n            } else {\n                \n                i = ~i;\n            }\n            result[i]++;\n        }\n        return result;\n    }\n\n    public static void printBins(List<?> limits, int[] bins) {\n        int n = limits.size();\n        if (n == 0) {\n            return;\n        }\n        assert n+1 == bins.length;\n        System.out.printf(\"           < %3s: %2d\\n\", limits.get(0), bins[0]);\n        for (int i = 1; i < n; i++) {\n            System.out.printf(\">= %3s and < %3s: %2d\\n\", limits.get(i-1), limits.get(i), bins[i]);\n        }\n        System.out.printf(\">= %3s         \u00a0: %2d\\n\", limits.get(n-1), bins[n]);\n    }\n\n    public static void main(String[] args) {\n        List<Integer> limits = Arrays.asList(23, 37, 43, 53, 67, 83);\n        List<Integer> data = Arrays.asList(\n            95, 21, 94, 12, 99, 4,  70, 75, 83, 93, 52, 80, 57, 5,  53, 86, 65,\n            17, 92, 83, 71, 61, 54, 58, 47, 16, 8,  9,  32, 84, 7,  87, 46, 19,\n            30, 37, 96, 6,  98, 40, 79, 97, 45, 64, 60, 29, 49, 36, 43, 55);\n\n        System.out.println(\"Example 1:\");\n        printBins(limits, bins(limits, data));\n\n        limits = Arrays.asList(14,  18,  249, 312, 389,\n                               392, 513, 591, 634, 720);\n        data = Arrays.asList(\n            445, 814, 519, 697, 700, 130, 255, 889, 481, 122, 932, 77,  323, 525,\n            570, 219, 367, 523, 442, 933, 416, 589, 930, 373, 202, 253, 775, 47,\n            731, 685, 293, 126, 133, 450, 545, 100, 741, 583, 763, 306, 655, 267,\n            248, 477, 549, 238, 62,  678, 98,  534, 622, 907, 406, 714, 184, 391,\n            913, 42,  560, 247, 346, 860, 56,  138, 546, 38,  985, 948, 58,  213,\n            799, 319, 390, 634, 458, 945, 733, 507, 916, 123, 345, 110, 720, 917,\n            313, 845, 426, 9,   457, 628, 410, 723, 354, 895, 881, 953, 677, 137,\n            397, 97,  854, 740, 83,  216, 421, 94,  517, 479, 292, 963, 376, 981,\n            480, 39,  257, 272, 157, 5,   316, 395, 787, 942, 456, 242, 759, 898,\n            576, 67,  298, 425, 894, 435, 831, 241, 989, 614, 987, 770, 384, 692,\n            698, 765, 331, 487, 251, 600, 879, 342, 982, 527, 736, 795, 585, 40,\n            54,  901, 408, 359, 577, 237, 605, 847, 353, 968, 832, 205, 838, 427,\n            876, 959, 686, 646, 835, 127, 621, 892, 443, 198, 988, 791, 466, 23,\n            707, 467, 33,  670, 921, 180, 991, 396, 160, 436, 717, 918, 8,   374,\n            101, 684, 727, 749);\n\n        System.out.println();\n        System.out.println(\"Example 2:\");\n        printBins(limits, bins(limits, data));\n    }\n}\n", "target": "using System;\n\npublic class Program\n{\n    static void Main()\n    {\n        PrintBins(new [] { 23, 37, 43, 53, 67, 83 },\n            95,21,94,12,99,4,70,75,83,93,52,80,57,5,53,86,65,17,92,83,71,61,54,58,47,\n            16, 8, 9,32,84,7,87,46,19,30,37,96,6,98,40,79,97,45,64,60,29,49,36,43,55\n        );\n        Console.WriteLine();\n\n        PrintBins(new [] { 14, 18, 249, 312, 389, 392, 513, 591, 634, 720 },\n            445,814,519,697,700,130,255,889,481,122,932, 77,323,525,570,219,367,523,442,933,416,589,930,373,202,\n            253,775, 47,731,685,293,126,133,450,545,100,741,583,763,306,655,267,248,477,549,238, 62,678, 98,534,\n            622,907,406,714,184,391,913, 42,560,247,346,860, 56,138,546, 38,985,948, 58,213,799,319,390,634,458,\n            945,733,507,916,123,345,110,720,917,313,845,426,  9,457,628,410,723,354,895,881,953,677,137,397, 97,\n            854,740, 83,216,421, 94,517,479,292,963,376,981,480, 39,257,272,157,  5,316,395,787,942,456,242,759,\n            898,576, 67,298,425,894,435,831,241,989,614,987,770,384,692,698,765,331,487,251,600,879,342,982,527,\n            736,795,585, 40, 54,901,408,359,577,237,605,847,353,968,832,205,838,427,876,959,686,646,835,127,621,\n            892,443,198,988,791,466, 23,707,467, 33,670,921,180,991,396,160,436,717,918,  8,374,101,684,727,749);\n    }\n\n    static void PrintBins(int[] limits, params int[] data)\n    {\n        int[] bins = Bins(limits, data);\n        Console.WriteLine($\"-\u221e .. {limits[0]} => {bins[0]}\");\n        for (int i = 0; i < limits.Length-1; i++) {\n            Console.WriteLine($\"{limits[i]} .. {limits[i+1]} => {bins[i+1]}\");\n        }\n        Console.WriteLine($\"{limits[^1]} .. \u221e => {bins[^1]}\");\n    }\n\n    static int[] Bins(int[] limits, params int[] data)\n    {\n        Array.Sort(limits);\n        int[] bins = new int[limits.Length + 1];\n        foreach (int n in data) {\n            int i = Array.BinarySearch(limits, n);\n            i = i < 0 ? ~i : i+1;\n            bins[i]++;\n        }\n        return bins;\n    }\n}\n"}
{"id": 45047, "name": "Animate a pendulum", "source": "Translate Java to C#: import java.awt.*;\nimport javax.swing.*;\n\npublic class Pendulum extends JPanel implements Runnable {\n\n    private double angle = Math.PI / 2;\n    private int length;\n\n    public Pendulum(int length) {\n        this.length = length;\n        setDoubleBuffered(true);\n    }\n\n    @Override\n    public void paint(Graphics g) {\n        g.setColor(Color.WHITE);\n        g.fillRect(0, 0, getWidth(), getHeight());\n        g.setColor(Color.BLACK);\n        int anchorX = getWidth() / 2, anchorY = getHeight() / 4;\n        int ballX = anchorX + (int) (Math.sin(angle) * length);\n        int ballY = anchorY + (int) (Math.cos(angle) * length);\n        g.drawLine(anchorX, anchorY, ballX, ballY);\n        g.fillOval(anchorX - 3, anchorY - 4, 7, 7);\n        g.fillOval(ballX - 7, ballY - 7, 14, 14);\n    }\n\n    public void run() {\n        double angleAccel, angleVelocity = 0, dt = 0.1;\n        while (true) {\n            angleAccel = -9.81 / length * Math.sin(angle);\n            angleVelocity += angleAccel * dt;\n            angle += angleVelocity * dt;\n            repaint();\n            try { Thread.sleep(15); } catch (InterruptedException ex) {}\n        }\n    }\n\n    @Override\n    public Dimension getPreferredSize() {\n        return new Dimension(2 * length + 50, length / 2 * 3);\n    }\n\n    public static void main(String[] args) {\n        JFrame f = new JFrame(\"Pendulum\");\n        Pendulum p = new Pendulum(200);\n        f.add(p);\n        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n        f.pack();\n        f.setVisible(true);\n        new Thread(p).start();\n    }\n}\n", "target": "using System;\nusing System.Drawing;\nusing System.Windows.Forms;\n\nclass CSharpPendulum\n{\n    Form _form;\n    Timer _timer;\n    \n    double _angle = Math.PI / 2, \n           _angleAccel, \n           _angleVelocity = 0, \n           _dt = 0.1;\n    \n    int _length = 50;\n\n    [STAThread]\n    static void Main()\n    {\n        var p = new CSharpPendulum();\n    }\n\n    public CSharpPendulum()\n    {\n        _form = new Form() { Text = \"Pendulum\", Width = 200, Height = 200 };\n        _timer = new Timer() { Interval = 30 };\n\n        _timer.Tick += delegate(object sender, EventArgs e)\n        {\n            int anchorX = (_form.Width / 2) - 12,\n                anchorY = _form.Height / 4,\n                ballX = anchorX + (int)(Math.Sin(_angle) * _length),\n                ballY = anchorY + (int)(Math.Cos(_angle) * _length);\n\n            _angleAccel = -9.81 / _length * Math.Sin(_angle);\n            _angleVelocity += _angleAccel * _dt;\n            _angle += _angleVelocity * _dt;\n          \n            Bitmap dblBuffer = new Bitmap(_form.Width, _form.Height);\n            Graphics g = Graphics.FromImage(dblBuffer);\n            Graphics f = Graphics.FromHwnd(_form.Handle);\n\n            g.DrawLine(Pens.Black, new Point(anchorX, anchorY), new Point(ballX, ballY));\n            g.FillEllipse(Brushes.Black, anchorX - 3, anchorY - 4, 7, 7);\n            g.FillEllipse(Brushes.DarkGoldenrod, ballX - 7, ballY - 7, 14, 14);\n            \n            f.Clear(Color.White);\n            f.DrawImage(dblBuffer, new Point(0, 0));    \n        };\n\n        _timer.Start();\n        Application.Run(_form);\n    }     \n}\n"}
{"id": 45048, "name": "Sorting algorithms_Heapsort", "source": "Translate Java to C#: public static void heapSort(int[] a){\n\tint count = a.length;\n\n\t\n\theapify(a, count);\n\n\tint end = count - 1;\n\twhile(end > 0){\n\t\t\n\t\t\n\t\tint tmp = a[end];\n\t\ta[end] = a[0];\n\t\ta[0] = tmp;\n\t\t\n\t\tsiftDown(a, 0, end - 1);\n\t\t\n\t\t\n\t\tend--;\n\t}\n}\n\npublic static void heapify(int[] a, int count){\n\t\n\tint start = (count - 2) / 2; \n\n\twhile(start >= 0){\n\t\t\n\t\t\n\t\t\n\t\tsiftDown(a, start, count - 1);\n\t\tstart--;\n\t}\n\t\n}\n\npublic static void siftDown(int[] a, int start, int end){\n\t\n\tint root = start;\n\n\twhile((root * 2 + 1) <= end){      \n\t\tint child = root * 2 + 1;           \n\t\t\n\t\tif(child + 1 <= end && a[child] < a[child + 1])\n\t\t\tchild = child + 1;           \n\t\tif(a[root] < a[child]){     \n\t\t\tint tmp = a[root];\n\t\t\ta[root] = a[child];\n\t\t\ta[child] = tmp;\n\t\t\troot = child;                \n\t\t}else\n\t\t\treturn;\n\t}\n}\n", "target": "using System;\nusing System.Collections.Generic;\nusing System.Text;\n\npublic class HeapSortClass\n{\n    public static void HeapSort<T>(T[] array)\n    {\n        HeapSort<T>(array, 0, array.Length, Comparer<T>.Default);\n    }\n\n    public static void HeapSort<T>(T[] array, int offset, int length, IComparer<T> comparer)\n    {\n        HeapSort<T>(array, offset, length, comparer.Compare);\n    }\n\n    public static void HeapSort<T>(T[] array, int offset, int length, Comparison<T> comparison)\n    {\n        \n        for (int i = 0; i < length; i++)\n        {\n            int index = i;\n            T item = array[offset + i]; \n\n            \n            while (index > 0 &&\n                comparison(array[offset + (index - 1) / 2], item) < 0)\n            {\n                int top = (index - 1) / 2;\n                array[offset + index] = array[offset + top];\n                index = top;\n            }\n            array[offset + index] = item;\n        }\n\n        for (int i = length - 1; i > 0; i--)\n        {\n            \n            T last = array[offset + i];\n            array[offset + i] = array[offset];\n\n            int index = 0;\n            \n            while (index * 2 + 1 < i)\n            {\n                int left = index * 2 + 1, right = left + 1;\n\n                if (right < i && comparison(array[offset + left], array[offset + right]) < 0)\n                {\n                    if (comparison(last, array[offset + right]) > 0) break;\n\n                    array[offset + index] = array[offset + right];\n                    index = right;\n                }\n                else\n                {\n                    if (comparison(last, array[offset + left]) > 0) break;\n\n                    array[offset + index] = array[offset + left];\n                    index = left;\n                }\n            }\n            array[offset + index] = last;\n        }\n    }\n\n    static void Main()\n    {\n        \n        byte[] r = {5, 4, 1, 2};\n        HeapSort(r);\n\n        string[] s = { \"-\", \"D\", \"a\", \"33\" };\n        HeapSort(s, 0, s.Length, StringComparer.CurrentCultureIgnoreCase);\n    }\n}\n"}
{"id": 45049, "name": "Playing cards", "source": "Translate Java to C#: public enum Pip { Two, Three, Four, Five, Six, Seven, \n    Eight, Nine, Ten, Jack, Queen, King, Ace }\n", "target": "using System;\nusing System.Linq;\nusing System.Collections.Generic;\n\npublic struct Card\n{\n    public Card(string rank, string suit) : this()\n    {\n        Rank = rank;\n        Suit = suit;\n    }\n\n    public string Rank { get; }\n    public string Suit { get; }\n\n    public override string ToString() => $\"{Rank} of {Suit}\";\n}\n\npublic class Deck : IEnumerable<Card>\n{\n    static readonly string[] ranks = { \"Two\", \"Three\", \"Four\", \"Five\", \"Six\",\n        \"Seven\", \"Eight\", \"Nine\", \"Ten\", \"Jack\", \"Queen\", \"King\", \"Ace\" };\n    static readonly string[] suits = { \"Clubs\", \"Diamonds\", \"Hearts\", \"Spades\" };\n    readonly List<Card> cards;\n \n    public Deck() {\n        cards = (from suit in suits\n                from rank in ranks\n                select new Card(rank, suit)).ToList();\n    }\n\n    public int Count => cards.Count;\n\n    public void Shuffle() {\n        \n        var random = new Random();\n        for (int i = 0; i < cards.Count; i++) {\n            int r = random.Next(i, cards.Count);\n            var temp = cards[i];\n            cards[i] = cards[r];\n            cards[r] = temp;\n        }\n    }\n\n    public Card Deal() {\n        int last = cards.Count - 1;\n        Card card = cards[last];\n        \n        \n        cards.RemoveAt(last);\n        return card;\n    }\n\n    public IEnumerator<Card> GetEnumerator() {\n        \n        \n        for (int i = cards.Count - 1; i >= 0; i--)\n            yield return cards[i];\n    }\n\n    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() => GetEnumerator();\n}\n"}
{"id": 45050, "name": "Arrays", "source": "Translate Java to C#: Int[] literalArray = [1,2,3];\nInt[] fixedLengthArray = new Int[10];\nInt[] variableArray = new Int[];\n\nassert literalArray.size == 3; \nInt n = literalArray[2];       \nfixedLengthArray[4] = 12345;   \n\nfixedLengthArray += 6789;  \nvariableArray    += 6789;  \n", "target": " int[] numbers = new int[10];\n"}
{"id": 45051, "name": "Sierpinski carpet", "source": "Translate Java to C#: public static boolean inCarpet(long x, long y) {\n    while (x!=0 && y!=0) {\n        if (x % 3 == 1 && y % 3 == 1)\n            return false;\n        x /= 3;\n        y /= 3;\n    }\n    return true;\n}\n \npublic static void carpet(final int n) {\n    final double power = Math.pow(3,n);\n    for(long i = 0; i < power; i++) {\n        for(long j = 0; j < power; j++) {\n            System.out.print(inCarpet(i, j) ? \"*\" : \" \");\n        }\n        System.out.println();\n    }\n}\n", "target": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Program\n{\n    static List<string> NextCarpet(List<string> carpet)\n    {\n        return carpet.Select(x => x + x + x)\n                     .Concat(carpet.Select(x => x + x.Replace('#', ' ') + x))\n                     .Concat(carpet.Select(x => x + x + x)).ToList();\n    }\n\n    static List<string> SierpinskiCarpet(int n)\n    {\n        return Enumerable.Range(1, n).Aggregate(new List<string> { \"#\" }, (carpet, _) => NextCarpet(carpet));\n    }\n\n    static void Main(string[] args)\n    {\n        foreach (string s in SierpinskiCarpet(3))\n            Console.WriteLine(s);\n    }\n}\n"}
{"id": 45052, "name": "Sorting algorithms_Bogosort", "source": "Translate Java to C#: public class BogoSort \n{\n\tpublic static void main(String[] args)\n\t{\n\t\t\n\t\tint[] arr={4,5,6,0,7,8,9,1,2,3};\n\t\t\n\t\tBogoSort now=new BogoSort();\n\t\tSystem.out.print(\"Unsorted: \");\n\t\tnow.display1D(arr);\n\t\t\n\t\tnow.bogo(arr);\n\t\t\n\t\tSystem.out.print(\"Sorted: \");\n\t\tnow.display1D(arr);\n\t}\n\tvoid bogo(int[] arr)\n\t{\n\t\t\n\t\tint shuffle=1;\n\t\tfor(;!isSorted(arr);shuffle++)\n\t\t\tshuffle(arr);\n\t\t\n\t\tSystem.out.println(\"This took \"+shuffle+\" shuffles.\");\n\t}\n\tvoid shuffle(int[] arr)\n\t{\n\t\t\n\t\tint i=arr.length-1;\n\t\twhile(i>0)\n\t\t\tswap(arr,i--,(int)(Math.random()*i));\n\t}\n\tvoid swap(int[] arr,int i,int j)\n\t{\n\t\tint temp=arr[i];\n\t\tarr[i]=arr[j];\n\t\tarr[j]=temp;\n\t}\n\tboolean isSorted(int[] arr)\n\t{\n\n\t\tfor(int i=1;i<arr.length;i++)\n\t\t\tif(arr[i]<arr[i-1])\n\t\t\t\treturn false;\n\t\treturn true;\n\t}\n\tvoid display1D(int[] arr)\n\t{\n\t\tfor(int i=0;i<arr.length;i++)\n\t\t\tSystem.out.print(arr[i]+\" \");\n\t\tSystem.out.println();\n\t}\n\n}\n", "target": "using System;\nusing System.Collections.Generic;\n\nnamespace RosettaCode.BogoSort\n{\n    public static class BogoSorter\n    {\n        public static void Sort<T>(List<T> list) where T:IComparable\n        {\n            while (!list.isSorted())\n            {\n                list.Shuffle();\n            }\n        }\n\n        private static bool isSorted<T>(this IList<T> list) where T:IComparable\n        {\n            if(list.Count<=1)\n                return true;\n            for (int i = 1 ; i < list.Count; i++)\n                if(list[i].CompareTo(list[i-1])<0) return false;\n            return true;\n        }\n\n        private static void Shuffle<T>(this IList<T> list)\n        {\n            Random rand = new Random();\n            for (int i = 0; i < list.Count; i++)\n            {\n                int swapIndex = rand.Next(list.Count);\n                T temp = list[swapIndex];\n                list[swapIndex] = list[i];\n                list[i] = temp;\n            }\n        }\n    }\n\n    class TestProgram\n    {\n        static void Main()\n        {\n            List<int> testList = new List<int> { 3, 4, 1, 8, 7, 4, -2 };\n            BogoSorter.Sort(testList);\n            foreach (int i in testList) Console.Write(i + \" \");\n        }\n\n    }\n}\n"}
{"id": 45053, "name": "Sorting algorithms_Bogosort", "source": "Translate Java to C#: public class BogoSort \n{\n\tpublic static void main(String[] args)\n\t{\n\t\t\n\t\tint[] arr={4,5,6,0,7,8,9,1,2,3};\n\t\t\n\t\tBogoSort now=new BogoSort();\n\t\tSystem.out.print(\"Unsorted: \");\n\t\tnow.display1D(arr);\n\t\t\n\t\tnow.bogo(arr);\n\t\t\n\t\tSystem.out.print(\"Sorted: \");\n\t\tnow.display1D(arr);\n\t}\n\tvoid bogo(int[] arr)\n\t{\n\t\t\n\t\tint shuffle=1;\n\t\tfor(;!isSorted(arr);shuffle++)\n\t\t\tshuffle(arr);\n\t\t\n\t\tSystem.out.println(\"This took \"+shuffle+\" shuffles.\");\n\t}\n\tvoid shuffle(int[] arr)\n\t{\n\t\t\n\t\tint i=arr.length-1;\n\t\twhile(i>0)\n\t\t\tswap(arr,i--,(int)(Math.random()*i));\n\t}\n\tvoid swap(int[] arr,int i,int j)\n\t{\n\t\tint temp=arr[i];\n\t\tarr[i]=arr[j];\n\t\tarr[j]=temp;\n\t}\n\tboolean isSorted(int[] arr)\n\t{\n\n\t\tfor(int i=1;i<arr.length;i++)\n\t\t\tif(arr[i]<arr[i-1])\n\t\t\t\treturn false;\n\t\treturn true;\n\t}\n\tvoid display1D(int[] arr)\n\t{\n\t\tfor(int i=0;i<arr.length;i++)\n\t\t\tSystem.out.print(arr[i]+\" \");\n\t\tSystem.out.println();\n\t}\n\n}\n", "target": "using System;\nusing System.Collections.Generic;\n\nnamespace RosettaCode.BogoSort\n{\n    public static class BogoSorter\n    {\n        public static void Sort<T>(List<T> list) where T:IComparable\n        {\n            while (!list.isSorted())\n            {\n                list.Shuffle();\n            }\n        }\n\n        private static bool isSorted<T>(this IList<T> list) where T:IComparable\n        {\n            if(list.Count<=1)\n                return true;\n            for (int i = 1 ; i < list.Count; i++)\n                if(list[i].CompareTo(list[i-1])<0) return false;\n            return true;\n        }\n\n        private static void Shuffle<T>(this IList<T> list)\n        {\n            Random rand = new Random();\n            for (int i = 0; i < list.Count; i++)\n            {\n                int swapIndex = rand.Next(list.Count);\n                T temp = list[swapIndex];\n                list[swapIndex] = list[i];\n                list[i] = temp;\n            }\n        }\n    }\n\n    class TestProgram\n    {\n        static void Main()\n        {\n            List<int> testList = new List<int> { 3, 4, 1, 8, 7, 4, -2 };\n            BogoSorter.Sort(testList);\n            foreach (int i in testList) Console.Write(i + \" \");\n        }\n\n    }\n}\n"}
{"id": 45054, "name": "Euler method", "source": "Translate Java to C#: public class Euler {\n  private static void euler (Callable f, double y0, int a, int b, int h) {\n    int t = a;\n    double y = y0;\n    while (t < b) {\n      System.out.println (\"\" + t + \" \" + y);\n      t += h;\n      y += h * f.compute (t, y);\n    }\n    System.out.println (\"DONE\");\n  }\n\n  public static void main (String[] args) {\n    Callable cooling = new Cooling ();\n    int[] steps = {2, 5, 10};\n    for (int stepSize : steps) {\n      System.out.println (\"Step size: \" + stepSize);\n      euler (cooling, 100.0, 0, 100, stepSize);\n    }\n  }\n}\n\n\ninterface Callable {\n  public double compute (int time, double t);\n}\n\n\nclass Cooling implements Callable {\n  public double compute (int time, double t) {\n    return -0.07 * (t - 20);\n  }\n}\n", "target": "using System;\n\nnamespace prog\n{\n\tclass MainClass\n\t{\n\t\tconst float T0 = 100f;\n\t\tconst float TR = 20f;\n\t\tconst float k = 0.07f;\n\t\treadonly static float[] delta_t = {2.0f,5.0f,10.0f};\n\t\tconst int n = 100;\n\t\t\n\t\tpublic delegate float func(float t);\n\t\tstatic float NewtonCooling(float t)\n\t\t{\n\t\t\treturn -k * (t-TR);\t\t\t\n\t\t}\n\t\t\n\t\tpublic static void Main (string[] args)\n\t\t{\n\t\t\tfunc f = new func(NewtonCooling); \n\t\t\tfor(int i=0; i<delta_t.Length; i++)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(\"delta_t = \" + delta_t[i]);\n\t\t\t\tEuler(f,T0,n,delta_t[i]);\n\t\t\t}\n\t\t}\n\t\t\t\t\n\t\tpublic static void Euler(func f, float y, int n, float h)\n\t\t{\n\t\t\tfor(float x=0; x<=n; x+=h)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(\"\\t\" + x + \"\\t\" + y);\n\t\t\t\ty += h * f(y);\t\n\t\t\t}\n\t\t}\n\t}\n}\n"}
{"id": 45055, "name": "Sequence of non-squares", "source": "Translate Java to C#: public class SeqNonSquares {\n    public static int nonsqr(int n) {\n        return n + (int)Math.round(Math.sqrt(n));\n    }\n    \n    public static void main(String[] args) {\n        \n        for (int i = 1; i < 23; i++)\n            System.out.print(nonsqr(i) + \" \");\n        System.out.println();\n        \n        \n        for (int i = 1; i < 1000000; i++) {\n            double j = Math.sqrt(nonsqr(i));\n            assert j != Math.floor(j);\n        }\n    }\n}\n", "target": "using System;\nusing System.Diagnostics;\n\nnamespace sons\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            for (int i = 1; i < 23; i++)            \n                Console.WriteLine(nonsqr(i));            \n\n            for (int i = 1; i < 1000000; i++)\n            {\n                double j = Math.Sqrt(nonsqr(i));\n                Debug.Assert(j != Math.Floor(j),\"Square\");\n            }            \n        }\n\n        static int nonsqr(int i)\n        {\n            return (int)(i + Math.Floor(0.5 + Math.Sqrt(i)));\n        }\n    }\n}\n"}
{"id": 45056, "name": "Substring", "source": "Translate Java to C#: public static String Substring(String str, int n, int m){\n    return str.substring(n, n+m);\n}\npublic static String Substring(String str, int n){\n    return str.substring(n);\n}\npublic static String Substring(String str){\n    return str.substring(0, str.length()-1);\n}\npublic static String Substring(String str, char c, int m){\n    return str.substring(str.indexOf(c), str.indexOf(c)+m+1);\n}\npublic static String Substring(String str, String sub, int m){\n    return str.substring(str.indexOf(sub), str.indexOf(sub)+m+1);\n}\n", "target": "using System;\nnamespace SubString\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            string s = \"0123456789\";\n            const int n = 3;\n            const int m = 2;\n            const char c = '3';\n            const string z = \"345\";\n\n            \n            Console.WriteLine(s.Substring(n, m));\n            \n            Console.WriteLine(s.Substring(n, s.Length - n));\n            \n            Console.WriteLine(s.Substring(0, s.Length - 1));\n            \n            Console.WriteLine(s.Substring(s.IndexOf(c), m));\n            \n            Console.WriteLine(s.Substring(s.IndexOf(z), m));\n        }\n    }\n}\n"}
{"id": 45057, "name": "Substring", "source": "Translate Java to C#: public static String Substring(String str, int n, int m){\n    return str.substring(n, n+m);\n}\npublic static String Substring(String str, int n){\n    return str.substring(n);\n}\npublic static String Substring(String str){\n    return str.substring(0, str.length()-1);\n}\npublic static String Substring(String str, char c, int m){\n    return str.substring(str.indexOf(c), str.indexOf(c)+m+1);\n}\npublic static String Substring(String str, String sub, int m){\n    return str.substring(str.indexOf(sub), str.indexOf(sub)+m+1);\n}\n", "target": "using System;\nnamespace SubString\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            string s = \"0123456789\";\n            const int n = 3;\n            const int m = 2;\n            const char c = '3';\n            const string z = \"345\";\n\n            \n            Console.WriteLine(s.Substring(n, m));\n            \n            Console.WriteLine(s.Substring(n, s.Length - n));\n            \n            Console.WriteLine(s.Substring(0, s.Length - 1));\n            \n            Console.WriteLine(s.Substring(s.IndexOf(c), m));\n            \n            Console.WriteLine(s.Substring(s.IndexOf(z), m));\n        }\n    }\n}\n"}
{"id": 45058, "name": "JortSort", "source": "Translate Java to C#: public class JortSort {\n    public static void main(String[] args) {\n        System.out.println(jortSort(new int[]{1, 2, 3}));\n    }\n\n    static boolean jortSort(int[] arr) {\n        return true;\n    }\n}\n", "target": "using System;\n\nclass Program\n{\n  public static bool JortSort<T>(T[] array) where T : IComparable, IEquatable<T>\n  {\n    \n    T[] originalArray = (T[]) array.Clone();\n    Array.Sort(array);\n\n    \n    for (var i = 0; i < originalArray.Length; i++)\n    {\n      if (!Equals(originalArray[i], array[i]))\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n}\n"}
{"id": 45059, "name": "Leap year", "source": "Translate Java to C#: import java.util.GregorianCalendar;\nimport java.text.MessageFormat;\n\npublic class Leapyear{\n        public static void main(String[] argv){\n                int[] yrs = {1800,1900,1994,1998,1999,2000,2001,2004,2100};\n                GregorianCalendar cal = new GregorianCalendar();\n                for(int year : yrs){\n                        System.err.println(MessageFormat.format(\"The year {0,number,#} is leaper: {1} / {2}.\",\n                                                                 year, cal.isLeapYear(year), isLeapYear(year)));\n                }\n\n        }\n        public static boolean isLeapYear(int year){\n                return (year % 100 == 0) ? (year % 400 == 0) : (year % 4 == 0);\n        }\n}\n", "target": "using System;\n\nclass Program\n{\n    static void Main()\n    {\n        foreach (var year in new[] { 1900, 1994, 1996, DateTime.Now.Year })\n        {\n            Console.WriteLine(\"{0} is {1}a leap year.\",\n                              year,\n                              DateTime.IsLeapYear(year) ? string.Empty : \"not \");\n        }\n    }\n}\n"}
{"id": 45060, "name": "Sort numbers lexicographically", "source": "Translate Java to C#: import java.util.List;\nimport java.util.stream.*;\n\npublic class LexicographicalNumbers {\n\n    static List<Integer> lexOrder(int n) {\n        int first = 1, last = n;\n        if (n < 1) {\n            first = n;\n            last = 1;\n        }\n        return IntStream.rangeClosed(first, last)\n                        .mapToObj(Integer::toString)\n                        .sorted()\n                        .map(Integer::valueOf)\n                        .collect(Collectors.toList());\n    }\n\n    public static void main(String[] args) {\n        System.out.println(\"In lexicographical order:\\n\");\n        int[] ints = {0, 5, 13, 21, -22};\n        for (int n : ints) {\n           System.out.printf(\"%3d: %s\\n\", n, lexOrder(n));\n        }\n    }\n}\n", "target": "using static System.Console;\nusing static System.Linq.Enumerable;\n\npublic class Program\n{\n    public static void Main() {\n        foreach (int n in new [] { 0, 5, 13, 21, -22 }) WriteLine($\"{n}: {string.Join(\", \", LexOrder(n))}\");\n    }\n\n    public static IEnumerable<int> LexOrder(int n) => (n < 1 ? Range(n, 2 - n) : Range(1, n)).OrderBy(i => i.ToString());\n}\n"}
{"id": 45061, "name": "Number names", "source": "Translate Java to C#: module NumberNames\n    {\n    void run()\n        {\n        @Inject Console console;\n\n        Int[] tests = [0, 1, -1, 11, -17, 42, 99, 100, 101, -111, 1000, 1234, 10000, 100000,\n                       123456789000, 0x123456789ABCDEF];\n        for (Int test : tests)\n            {\n            console.print($\"{test} = {toEnglish(test)}\");\n            }\n        }\n\n    static String[] digits = [\"zero\", \"one\", \"two\", \"three\", \"four\",\n                              \"five\", \"six\", \"seven\", \"eight\", \"nine\"];\n    static String[] teens  = [\"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\",\n                              \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\"];\n    static String[] tens   = [\"zero\", \"ten\", \"twenty\", \"thirty\", \"forty\",\n                              \"fifty\", \"sixty\", \"seventy\", \"eighty\", \"ninety\"];\n    static String[] ten3rd = [\"?\", \"thousand\", \"million\", \"billion\", \"trillion\",\n                              \"quadrillion\", \"quintillion\"];\n\n    static String toEnglish(Int n)\n        {\n        StringBuffer buf = new StringBuffer();\n        if (n < 0)\n            {\n            \"negative \".appendTo(buf);\n            n = -n;\n            }\n\n        format3digits(n, buf);\n        return buf.toString();\n        }\n\n    static void format3digits(Int n, StringBuffer buf, Int nested=0)\n        {\n        (Int left, Int right) = n /% 1000;\n        if (left != 0)\n            {\n            format3digits(left, buf, nested+1);\n            }\n\n        if (right != 0 || (left == 0 && nested==0))\n            {\n            if (right >= 100)\n                {\n                (left, right) = (right /% 100);\n                digits[left].appendTo(buf);\n                \" hundred \".appendTo(buf);\n                if (right != 0)\n                    {\n                    format2digits(right, buf);\n                    }\n                }\n            else\n                {\n                format2digits(right, buf);\n                }\n\n            if (nested > 0)\n                {\n                ten3rd[nested].appendTo(buf).add(' ');\n                }\n            }\n        }\n\n    static void format2digits(Int n, StringBuffer buf)\n        {\n        switch (n)\n            {\n            case 0..9:\n                digits[n].appendTo(buf).add(' ');\n                break;\n\n            case 10..19:\n                teens[n-10].appendTo(buf).add(' ');\n                break;\n\n            default:\n                (Int left, Int right) = n /% 10;\n                tens[left].appendTo(buf);\n                if (right == 0)\n                    {\n                    buf.add(' ');\n                    }\n                else\n                    {\n                    buf.add('-');\n                    digits[right].appendTo(buf).add(' ');\n                    }\n                break;\n            }\n        }\n    }\n", "target": "using System;\n\nclass NumberNamer {\n    static readonly string[] incrementsOfOne =\n            { \"zero\",    \"one\",     \"two\",       \"three\",    \"four\",\n              \"five\",    \"six\",     \"seven\",     \"eight\",    \"nine\",\n              \"ten\",     \"eleven\",  \"twelve\",    \"thirteen\", \"fourteen\",\n              \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\" };\n\n    static readonly string[] incrementsOfTen =\n            { \"\",      \"\",      \"twenty\",  \"thirty\", \"fourty\",\n              \"fifty\", \"sixty\", \"seventy\", \"eighty\", \"ninety\" };\n\n    const string millionName = \"million\",\n                 thousandName = \"thousand\",\n                 hundredName = \"hundred\",\n                 andName = \"and\";\n\n\n    public static string GetName( int i ) {\n        string output = \"\";\n        if( i >= 1000000 ) {\n            output += ParseTriplet( i / 1000000 ) + \" \" + millionName;\n            i %= 1000000;\n            if( i == 0 ) return output;\n        }\n\n        if( i >= 1000 ) {\n            if( output.Length > 0 ) {\n                output += \", \";\n            }\n            output += ParseTriplet( i / 1000 ) + \" \" + thousandName;\n            i %= 1000;\n            if( i == 0 ) return output;\n        }\n\n        if( output.Length > 0 ) {\n            output += \", \";\n        }\n        output += ParseTriplet( i );\n        return output;\n    }\n\n\n    static string ParseTriplet( int i ) {\n        string output = \"\";\n        if( i >= 100 ) {\n            output += incrementsOfOne[i / 100] + \" \" + hundredName;\n            i %= 100;\n            if( i == 0 ) return output;\n        }\n\n        if( output.Length > 0 ) {\n            output += \" \" + andName + \" \";\n        }\n        if( i >= 20 ) {\n            output += incrementsOfTen[i / 10];\n            i %= 10;\n            if( i == 0 ) return output;\n        }\n\n        if( output.Length > 0 ) {\n            output += \" \";\n        }\n        output += incrementsOfOne[i];\n        return output;\n    }\n}\n\n\nclass Program { \n    static void Main( string[] args ) {\n        Console.WriteLine( NumberNamer.GetName( 1 ) );\n        Console.WriteLine( NumberNamer.GetName( 234 ) );\n        Console.WriteLine( NumberNamer.GetName( 31337 ) );\n        Console.WriteLine( NumberNamer.GetName( 987654321 ) );\n    }\n}\n"}
{"id": 45062, "name": "Compare length of two strings", "source": "Translate Java to C#: package stringlensort;\n\nimport java.io.PrintStream;\nimport java.util.Arrays;\nimport java.util.Comparator;\n\npublic class ReportStringLengths {\n\n    public static void main(String[] args) {\n        String[] list = {\"abcd\", \"123456789\", \"abcdef\", \"1234567\"};\n        String[] strings = args.length > 0 ? args : list;\n\n        compareAndReportStringsLength(strings);\n    }\n\n        \n    public static void compareAndReportStringsLength(String[] strings) {\n        compareAndReportStringsLength(strings, System.out);\n    }\n\n    \n    public static void compareAndReportStringsLength(String[] strings, PrintStream stream) {\n        if (strings.length > 0) {\n            strings = strings.clone();\n            final String QUOTE = \"\\\"\";\n            Arrays.sort(strings, Comparator.comparing(String::length));\n            int min = strings[0].length();\n            int max = strings[strings.length - 1].length();\n            for (int i = strings.length - 1; i >= 0; i--) {\n                int length = strings[i].length();\n                String predicate;\n                if (length == max) {\n                    predicate = \"is the longest string\";\n                } else if (length == min) {\n                    predicate = \"is the shortest string\";\n                } else {\n                    predicate = \"is neither the longest nor the shortest string\";\n                }\n                \n                stream.println(QUOTE + strings[i] + QUOTE + \" has length \" + length\n                        + \" and \" + predicate);\n            }\n        }\n    }\n}\n", "target": "using System;\nusing System.Collections.Generic;\n\nnamespace example\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            var strings = new string[] { \"abcd\", \"123456789\", \"abcdef\", \"1234567\" };\n            compareAndReportStringsLength(strings);\n        }\n\n        private static void compareAndReportStringsLength(string[] strings)\n        {\n            if (strings.Length > 0)\n            {\n                char Q = '\"';\n                string hasLength = \" has length \";\n                string predicateMax = \" and is the longest string\";\n                string predicateMin = \" and is the shortest string\";\n                string predicateAve = \" and is neither the longest nor the shortest string\";\n                string predicate;\n\n                (int, int)[] li = new (int, int)[strings.Length];\n                for (int i = 0; i < strings.Length; i++)\n                    li[i] = (strings[i].Length, i);\n                Array.Sort(li, ((int, int) a, (int, int) b) => b.Item1 - a.Item1);\n                int maxLength = li[0].Item1;\n                int minLength = li[strings.Length - 1].Item1;\n\n                for (int i = 0; i < strings.Length; i++)\n                {\n                    int length = li[i].Item1;\n                    string str = strings[li[i].Item2];\n                    if (length == maxLength)\n                        predicate = predicateMax;\n                    else if (length == minLength)\n                        predicate = predicateMin;\n                    else\n                        predicate = predicateAve;\n                    Console.WriteLine(Q + str + Q + hasLength + length + predicate);\n                }\n            }\n        }\n\n    }\n}\n"}
{"id": 45063, "name": "Letter frequency", "source": "Translate Java to C#: import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.Arrays;\n\npublic class LetterFreq {\n\tpublic static int[] countLetters(String filename) throws IOException{\n\t\tint[] freqs = new int[26];\n\t\tBufferedReader in = new BufferedReader(new FileReader(filename));\n\t\tString line;\n\t\twhile((line = in.readLine()) != null){\n\t\t\tline = line.toUpperCase();\n\t\t\tfor(char ch:line.toCharArray()){\n\t\t\t\tif(Character.isLetter(ch)){\n\t\t\t\t\tfreqs[ch - 'A']++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tin.close();\n\t\treturn freqs;\n\t}\n\t\n\tpublic static void main(String[] args) throws IOException{\n\t\tSystem.out.println(Arrays.toString(countLetters(\"filename.txt\")));\n\t}\n}\n", "target": "using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\n\nclass Program\n{\n    static SortedDictionary<TItem, int> GetFrequencies<TItem>(IEnumerable<TItem> items)\n    {\n        var dictionary = new SortedDictionary<TItem, int>();\n        foreach (var item in items)\n        {\n            if (dictionary.ContainsKey(item))\n            {\n                dictionary[item]++;\n            }\n            else\n            {\n                dictionary[item] = 1;\n            }\n        }\n        return dictionary;\n    }\n\n    static void Main(string[] arguments)\n    {\n        var file = arguments.FirstOrDefault();\n        if (File.Exists(file))\n        {\n            var text = File.ReadAllText(file);\n            foreach (var entry in GetFrequencies(text))\n            {\n                Console.WriteLine(\"{0}: {1}\", entry.Key, entry.Value);\n            }\n        }\n    }\n}\n"}
{"id": 45064, "name": "Increment a numerical string", "source": "Translate Java to C#: String s = \"12345\";\nIntLiteral lit1 = new IntLiteral(s);\nIntLiteral lit2 = 6789;\n++lit1; \n++lit2; \n", "target": "string s = \"12345\";\ns = (int.Parse(s) + 1).ToString();\n\n\n\n\n\n\nusing System.Numerics;\nstring bis = \"123456789012345678999999999\";\nbis = (BigInteger.Parse(bis) + 1).ToString();\n\n\n"}
{"id": 45065, "name": "Strip a set of characters from a string", "source": "Translate Java to C#: class StripChars {\n    public static String stripChars(String inString, String toStrip) {\n        return inString.replaceAll(\"[\" + toStrip + \"]\", \"\");\n    }\n\n    public static void main(String[] args) {\n        String sentence = \"She was a soul stripper. She took my heart!\";\n        String chars = \"aei\";\n        System.out.println(\"sentence: \" + sentence);\n        System.out.println(\"to strip: \" + chars);\n        System.out.println(\"stripped: \" + stripChars(sentence, chars));\n    }\n}\n", "target": "using System;\n\npublic static string RemoveCharactersFromString(string testString, string removeChars)\n{\n    char[] charAry = removeChars.ToCharArray();\n    string returnString = testString;\n    foreach (char c in charAry)\n    {\n        while (returnString.IndexOf(c) > -1)\n        {\n            returnString = returnString.Remove(returnString.IndexOf(c), 1);\n        }\n    }\n    return returnString;\n}\n"}
{"id": 45066, "name": "Averages_Arithmetic mean", "source": "Translate Java to C#: public static double avg(double... arr) {\n    double sum = 0.0;\n    for (double x : arr) {\n        sum += x;\n    }\n    return sum / arr.length;\n}\n", "target": "using System;\nusing System.Linq;\n\nclass Program\n{\n    static void Main()\n    {\n        Console.WriteLine(new[] { 1, 2, 3 }.Average());\n    }\n}\n"}
{"id": 45067, "name": "Entropy", "source": "Translate Java to C#: import java.lang.Math;\nimport java.util.Map;\nimport java.util.HashMap;\n\npublic class REntropy {\n\n  @SuppressWarnings(\"boxing\")\n  public static double getShannonEntropy(String s) {\n    int n = 0;\n    Map<Character, Integer> occ = new HashMap<>();\n\n    for (int c_ = 0; c_ < s.length(); ++c_) {\n      char cx = s.charAt(c_);\n      if (occ.containsKey(cx)) {\n        occ.put(cx, occ.get(cx) + 1);\n      } else {\n        occ.put(cx, 1);\n      }\n      ++n;\n    }\n\n    double e = 0.0;\n    for (Map.Entry<Character, Integer> entry : occ.entrySet()) {\n      char cx = entry.getKey();\n      double p = (double) entry.getValue() / n;\n      e += p * log2(p);\n    }\n    return -e;\n  }\n\n  private static double log2(double a) {\n    return Math.log(a) / Math.log(2);\n  }\n  public static void main(String[] args) {\n    String[] sstr = {\n      \"1223334444\",\n      \"1223334444555555555\", \n      \"122333\", \n      \"1227774444\",\n      \"aaBBcccDDDD\",\n      \"1234567890abcdefghijklmnopqrstuvwxyz\",\n      \"Rosetta Code\",\n    };\n\n    for (String ss : sstr) {\n      double entropy = REntropy.getShannonEntropy(ss);\n      System.out.printf(\"Shannon entropy of %40s:\u00a0%.12f%n\", \"\\\"\" + ss + \"\\\"\", entropy);\n    }\n    return;\n  }\n}\n", "target": "using System;\nusing System.Collections.Generic;\nnamespace Entropy\n{\n\tclass Program\n\t{\n\t\tpublic static double logtwo(double num)\n\t\t{\n\t\t\treturn Math.Log(num)/Math.Log(2);\n\t\t}\n\t\tpublic static void Main(string[] args)\n\t\t{\n\t\tlabel1:\n\t\t\tstring input = Console.ReadLine();\n\t\t\tdouble infoC=0;\n\t\t\tDictionary<char,double> table = new Dictionary<char, double>();\n\n\t\t\t\n\t\t\tforeach (char c in input)\n\t\t\t{\n\t\t\t\tif (table.ContainsKey(c))\n\t\t\t\t\ttable[c]++;\n\t\t\t\t    else\n\t\t\t\t    \ttable.Add(c,1);\n\t\n\t\t\t}\n\t\t\tdouble freq;\n\t\t\tforeach (KeyValuePair<char,double> letter in table)\n\t\t\t{\n\t\t\t\tfreq=letter.Value/input.Length;\n\t\t\t\tinfoC+=freq*logtwo(freq);\n\t\t\t}\n\t\t\tinfoC*=-1;\n\t\t\tConsole.WriteLine(\"The Entropy of {0} is {1}\",input,infoC);\n\t\t\tgoto label1;\n\t\t\n\t\t}\n\t}\n}\n"}
{"id": 45068, "name": "Tokenize a string with escaping", "source": "Translate Java to C#: import java.util.*;\n\npublic class TokenizeStringWithEscaping {\n\n    public static void main(String[] args) {\n        String sample = \"one^|uno||three^^^^|four^^^|^cuatro|\";\n        char separator = '|';\n        char escape = '^';\n\n        System.out.println(sample);\n        try {\n            System.out.println(tokenizeString(sample, separator, escape));\n        } catch (Exception e) {\n            System.out.println(e);\n        }\n    }\n\n    public static List<String> tokenizeString(String s, char sep, char escape)\n            throws Exception {\n        List<String> tokens = new ArrayList<>();\n        StringBuilder sb = new StringBuilder();\n\n        boolean inEscape = false;\n        for (char c : s.toCharArray()) {\n            if (inEscape) {\n                inEscape = false;\n            } else if (c == escape) {\n                inEscape = true;\n                continue;\n            } else if (c == sep) {\n                tokens.add(sb.toString());\n                sb.setLength(0);\n                continue;\n            }\n            sb.append(c);\n        }\n        if (inEscape)\n            throw new Exception(\"Invalid terminal escape\");\n\n        tokens.add(sb.toString());\n\n        return tokens;\n    }\n}\n", "target": "using System;\nusing System.Text;\nusing System.Collections.Generic;\n\npublic class TokenizeAStringWithEscaping\n{\n    public static void Main() {\n        string testcase = \"one^|uno||three^^^^|four^^^|^cuatro|\";\n        foreach (var token in testcase.Tokenize(separator: '|', escape: '^')) {\n            Console.WriteLine(\": \" + token); \n        }\n    }\n}\n\npublic static class Extensions\n{\n    public static IEnumerable<string> Tokenize(this string input, char separator, char escape) {\n        if (input == null) yield break;\n        var buffer = new StringBuilder();\n        bool escaping = false;\n        foreach (char c in input) {\n            if (escaping) {\n                buffer.Append(c);\n                escaping = false;\n            } else if (c == escape) {\n                escaping = true;\n            } else if (c == separator) {\n                yield return buffer.Flush();\n            } else {\n                buffer.Append(c);\n            }\n        }\n        if (buffer.Length > 0 || input[input.Length-1] == separator) yield return buffer.Flush();\n    }\n    \n    public static string Flush(this StringBuilder stringBuilder) {\n        string result = stringBuilder.ToString();\n        stringBuilder.Clear();\n        return result;\n    }\n}\n"}
{"id": 45069, "name": "Hello world_Text", "source": "Translate Java to C#: module HelloWorld\n    {\n    void run()\n        {\n        @Inject Console console;\n        console.print(\"Hello World!\");\n        }\n    }\n", "target": "Using System;\nnamespace HelloWorld {\n  class Program\n  {\n    static void Main()\n    {\n      Console.Writeln(\"Hello World!\");\n    }\n  }\n}\n"}
{"id": 45070, "name": "Forward difference", "source": "Translate Java to C#: import java.util.Arrays;\npublic class FD {\n    public static void main(String args[]) {\n        double[] a = {90, 47, 58, 29, 22, 32, 55, 5, 55, 73};\n        System.out.println(Arrays.toString(dif(a, 1)));\n        System.out.println(Arrays.toString(dif(a, 2)));\n        System.out.println(Arrays.toString(dif(a, 9)));\n        System.out.println(Arrays.toString(dif(a, 10)));      \n        System.out.println(Arrays.toString(dif(a, 11)));\n        System.out.println(Arrays.toString(dif(a, -1)));\n        System.out.println(Arrays.toString(dif(a, 0)));\n    }\n\n    public static double[] dif(double[] a, int n) {\n        if (n < 0)\n            return null; \n\n        for (int i = 0; i < n && a.length > 0; i++) {\n            double[] b = new double[a.length - 1];\n            for (int j = 0; j < b.length; j++){\n                b[j] = a[j+1] - a[j];\n            }\n            a = b; \n        }\n        return a;\n    }\n}\n", "target": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nclass Program\n{\n    static IEnumerable<int> ForwardDifference(IEnumerable<int> sequence, uint order = 1u)\n    {\n        switch (order)\n        {\n            case 0u:\n                return sequence;\n            case 1u:\n                return sequence.Skip(1).Zip(sequence, (next, current) => next - current);\n            default:\n                return ForwardDifference(ForwardDifference(sequence), order - 1u);\n        }\n    }\n\n    static void Main()\n    {\n        IEnumerable<int> sequence = new[] { 90, 47, 58, 29, 22, 32, 55, 5, 55, 73 };\n        do\n        {\n            Console.WriteLine(string.Join(\", \", sequence));\n        } while ((sequence = ForwardDifference(sequence)).Any());\n    }\n}\n"}
{"id": 45071, "name": "Primality by trial division", "source": "Translate Java to C#: public static boolean prime(long a){\n   if(a == 2){\n      return true;\n   }else if(a <= 1 || a % 2 == 0){\n      return false;\n   }\n   long max = (long)Math.sqrt(a);\n   for(long n= 3; n <= max; n+= 2){\n      if(a % n == 0){ return false; }\n   }\n   return true;\n}\n", "target": "static bool isPrime(int n)\n        {\n            if (n <= 1) return false;\n            for (int i = 2; i * i <= n; i++)            \n                if (n % i == 0) return false;            \n            return true;\n        }\n"}
{"id": 45072, "name": "Evaluate binomial coefficients", "source": "Translate Java to C#: public class Binomial {\n\n    \n    private static long binomialInt(int n, int k) {\n        if (k > n - k)\n            k = n - k;\n\n        long binom = 1;\n        for (int i = 1; i <= k; i++)\n            binom = binom * (n + 1 - i) / i;\n        return binom;\n    }\n\n    \n    private static Object binomialIntReliable(int n, int k) {\n        if (k > n - k)\n            k = n - k;\n\n        long binom = 1;\n        for (int i = 1; i <= k; i++) {\n            try {\n                binom = Math.multiplyExact(binom, n + 1 - i) / i;\n            } catch (ArithmeticException e) {\n                return \"overflow\";\n            }\n        }\n        return binom;\n    }\n\n    \n    \n    private static double binomialFloat(int n, int k) {\n        if (k > n - k)\n            k = n - k;\n\n        double binom = 1.0;\n        for (int i = 1; i <= k; i++)\n            binom = binom * (n + 1 - i) / i;\n        return binom;\n    }\n\n    \n    private static BigInteger binomialBigInt(int n, int k) {\n        if (k > n - k)\n            k = n - k;\n\n        BigInteger binom = BigInteger.ONE;\n        for (int i = 1; i <= k; i++) {\n            binom = binom.multiply(BigInteger.valueOf(n + 1 - i));\n            binom = binom.divide(BigInteger.valueOf(i));\n        }\n        return binom;\n    }\n\n    private static void demo(int n, int k) {\n        List<Object> data = Arrays.asList(\n                n,\n                k,\n                binomialInt(n, k),\n                binomialIntReliable(n, k),\n                binomialFloat(n, k),\n                binomialBigInt(n, k));\n\n        System.out.println(data.stream().map(Object::toString).collect(Collectors.joining(\"\\t\")));\n    }\n\n    public static void main(String[] args) {\n        demo(5, 3);\n        demo(1000, 300);\n    }\n}\n", "target": "using System;\n\nnamespace BinomialCoefficients\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            ulong n = 1000000, k = 3;\n            ulong result = biCoefficient(n, k);\n            Console.WriteLine(\"The Binomial Coefficient of {0}, and {1}, is equal to: {2}\", n, k, result);\n            Console.ReadLine();\n        }\n\n        static int fact(int n)\n        {\n            if (n == 0) return 1;\n            else return n * fact(n - 1);\n        }\n\n        static ulong biCoefficient(ulong n, ulong k)\n        {\n            if (k > n - k)\n            {\n                k = n - k;\n            }\n\n            ulong c = 1;\n            for (uint i = 0; i < k; i++)\n            {\n                c = c * (n - i);\n                c = c / (i + 1);\n            }\n            return c;\n        }\n    }\n}\n"}
{"id": 45073, "name": "Collections", "source": "Translate Java to C#: List arrayList = new ArrayList();\narrayList.add(new Integer(0));\n\narrayList.add(0); \n\n\n\nList<Integer> myarrlist = new ArrayList<Integer>();\n\n\nint sum;\nfor(int i = 0; i < 10; i++) {\n    myarrlist.add(i);\n}\n", "target": "\nint[] intArray = new int[5] { 1, 2, 3, 4, 5 };\n\nint[] intArray = new int[]{ 1, 2, 3, 4, 5 };\n\nint[] intArray = { 1, 2, 3, 4, 5 };\n\n\nstring[] stringArr = new string[5];\nstringArr[0] = \"string\";\n"}
{"id": 45074, "name": "Singly-linked list_Traversal", "source": "Translate Java to C#: LinkedList<Type> list = new LinkedList<Type>();\n\nfor(Type i: list){\n  \n  System.out.println(i);\n}\n", "target": "var current = [head of list to traverse]\nwhile(current != null)\n{\n    \n\n    current = current.Next;\n}\n"}
{"id": 45075, "name": "Bitmap_Write a PPM file", "source": "Translate Java to C#: import java.io.BufferedOutputStream;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\n\npublic class PPMWriter {\n\n    public void bitmapToPPM(File file, BasicBitmapStorage bitmap) throws IOException {\n        file.delete();\n\n        try (var os = new FileOutputStream(file, true);\n             var bw = new BufferedOutputStream(os)) {\n            var header = String.format(\"P6\\n%d %d\\n255\\n\",\n                    bitmap.getWidth(), bitmap.getHeight());\n\n            bw.write(header.getBytes(StandardCharsets.US_ASCII));\n\n            for (var y = 0; y < bitmap.getHeight(); y++) {\n                for (var x = 0; x < bitmap.getWidth(); x++) {\n                    var pixel = bitmap.getPixel(x, y);\n                    bw.write(pixel.getRed());\n                    bw.write(pixel.getGreen());\n                    bw.write(pixel.getBlue());\n                }\n            }\n        }\n    }\n}\n", "target": "using System;\nusing System.IO;\nclass PPMWriter\n{\n    public static void WriteBitmapToPPM(string file, Bitmap bitmap)\n        {\n            \n            var writer = new StreamWriter(file);\n            writer.WriteLine(\"P6\");\n            writer.WriteLine($\"{bitmap.Width}  {bitmap.Height}\");\n            writer.WriteLine(\"255\");\n            writer.Close();\n            \n            var writerB = new BinaryWriter(new FileStream(file, FileMode.Append));\n            for (int x = 0; x < bitmap.Height; x++)\n                for (int y = 0; y < bitmap.Width; y++)\n                {\n                    Color color = bitmap.GetPixel(y, x);\n                    writerB.Write(color.R);\n                    writerB.Write(color.G);\n                    writerB.Write(color.B);\n                }\n            writerB.Close();\n        }\n}\n"}
{"id": 45076, "name": "Delete a file", "source": "Translate Java to C#: import java.io.File;\n\npublic class FileDeleteTest {\n    public static boolean deleteFile(String filename) {\n        boolean exists = new File(filename).delete();\n        return exists;\n    }\n    \n    public static void test(String type, String filename) {\n        System.out.println(\"The following \" + type + \" called \" + filename + \n            (deleteFile(filename) ? \" was deleted.\" : \" could not be deleted.\")\n        );\n    }\n\n    public static void main(String args[]) {\n        test(\"file\", \"input.txt\");\n        test(\"file\", File.seperator + \"input.txt\");\n        test(\"directory\", \"docs\");\n        test(\"directory\", File.seperator + \"docs\" + File.seperator);\n    }\n}\n", "target": "using System;\nusing System.IO;\n\nnamespace DeleteFile {\n  class Program {\n    static void Main() {\n      File.Delete(\"input.txt\");\n      Directory.Delete(\"docs\");\n      File.Delete(\"/input.txt\");\n      Directory.Delete(\"/docs\");\n    }\n  }\n}\n"}
{"id": 45077, "name": "Delete a file", "source": "Translate Java to C#: import java.io.File;\n\npublic class FileDeleteTest {\n    public static boolean deleteFile(String filename) {\n        boolean exists = new File(filename).delete();\n        return exists;\n    }\n    \n    public static void test(String type, String filename) {\n        System.out.println(\"The following \" + type + \" called \" + filename + \n            (deleteFile(filename) ? \" was deleted.\" : \" could not be deleted.\")\n        );\n    }\n\n    public static void main(String args[]) {\n        test(\"file\", \"input.txt\");\n        test(\"file\", File.seperator + \"input.txt\");\n        test(\"directory\", \"docs\");\n        test(\"directory\", File.seperator + \"docs\" + File.seperator);\n    }\n}\n", "target": "using System;\nusing System.IO;\n\nnamespace DeleteFile {\n  class Program {\n    static void Main() {\n      File.Delete(\"input.txt\");\n      Directory.Delete(\"docs\");\n      File.Delete(\"/input.txt\");\n      Directory.Delete(\"/docs\");\n    }\n  }\n}\n"}
{"id": 45078, "name": "Discordian date", "source": "Translate Java to C#: import java.util.Calendar;\nimport java.util.GregorianCalendar;\n\npublic class DiscordianDate {\n    final static String[] seasons = {\"Chaos\", \"Discord\", \"Confusion\",\n        \"Bureaucracy\", \"The Aftermath\"};\n\n    final static String[] weekday = {\"Sweetmorn\", \"Boomtime\", \"Pungenday\",\n        \"Prickle-Prickle\", \"Setting Orange\"};\n\n    final static String[] apostle = {\"Mungday\", \"Mojoday\", \"Syaday\",\n        \"Zaraday\", \"Maladay\"};\n\n    final static String[] holiday = {\"Chaoflux\", \"Discoflux\", \"Confuflux\",\n        \"Bureflux\", \"Afflux\"};\n\n    public static String discordianDate(final GregorianCalendar date) {\n        int y = date.get(Calendar.YEAR);\n        int yold = y + 1166;\n        int dayOfYear = date.get(Calendar.DAY_OF_YEAR);\n\n        if (date.isLeapYear(y)) {\n            if (dayOfYear == 60)\n                return \"St. Tib's Day, in the YOLD \" + yold;\n            else if (dayOfYear > 60)\n                dayOfYear--;\n        }\n\n        dayOfYear--;\n\n        int seasonDay = dayOfYear % 73 + 1;\n        if (seasonDay == 5)\n            return apostle[dayOfYear / 73] + \", in the YOLD \" + yold;\n        if (seasonDay == 50)\n            return holiday[dayOfYear / 73] + \", in the YOLD \" + yold;\n\n        String season = seasons[dayOfYear / 73];\n        String dayOfWeek = weekday[dayOfYear % 5];\n\n        return String.format(\"%s, day %s of %s in the YOLD %s\",\n                dayOfWeek, seasonDay, season, yold);\n    }\n\n    public static void main(String[] args) {\n\n        System.out.println(discordianDate(new GregorianCalendar()));\n\n        test(2010, 6, 22, \"Pungenday, day 57 of Confusion in the YOLD 3176\");\n        test(2012, 1, 28, \"Prickle-Prickle, day 59 of Chaos in the YOLD 3178\");\n        test(2012, 1, 29, \"St. Tib's Day, in the YOLD 3178\");\n        test(2012, 2, 1, \"Setting Orange, day 60 of Chaos in the YOLD 3178\");\n        test(2010, 0, 5, \"Mungday, in the YOLD 3176\");\n        test(2011, 4, 3, \"Discoflux, in the YOLD 3177\");\n        test(2015, 9, 19, \"Boomtime, day 73 of Bureaucracy in the YOLD 3181\");\n    }\n\n    private static void test(int y, int m, int d, final String result) {\n        assert (discordianDate(new GregorianCalendar(y, m, d)).equals(result));\n    }\n}\n", "target": "using System;\n\npublic static class DiscordianDate\n{\n    static readonly string[] seasons = { \"Chaos\", \"Discord\", \"Confusion\", \"Bureaucracy\", \"The Aftermath\" };\n    static readonly string[] weekdays = { \"Sweetmorn\", \"Boomtime\", \"Pungenday\", \"Prickle-Prickle\", \"Setting Orange\" };\n    static readonly string[] apostles = { \"Mungday\", \"Mojoday\", \"Syaday\", \"Zaraday\", \"Maladay\" };\n    static readonly string[] holidays = { \"Chaoflux\", \"Discoflux\", \"Confuflux\", \"Bureflux\", \"Afflux\" };\n    \n    public static string Discordian(this DateTime date) {\n        string yold = $\" in the YOLD {date.Year + 1166}.\";\n        int dayOfYear = date.DayOfYear;\n\n        if (DateTime.IsLeapYear(date.Year)) {\n            if (dayOfYear == 60) return \"St. Tib's day\" + yold;\n            else if (dayOfYear > 60) dayOfYear--;\n        }\n        dayOfYear--;\n\n        int seasonDay = dayOfYear % 73 + 1;\n        int seasonNr = dayOfYear / 73;\n        int weekdayNr = dayOfYear % 5;\n        string holyday = \"\";\n\n        if (seasonDay == 5)       holyday = $\" Celebrate {apostles[seasonNr]}!\";\n        else if (seasonDay == 50) holyday = $\" Celebrate {holidays[seasonNr]}!\";\n        return $\"{weekdays[weekdayNr]}, day {seasonDay} of {seasons[seasonNr]}{yold}{holyday}\";\n    }\n\n    public static void Main() {\n        foreach (var (day, month, year) in new [] {\n            (1, 1, 2010),\n            (5, 1, 2010),\n            (19, 2, 2011),\n            (28, 2, 2012),\n            (29, 2, 2012),\n            (1, 3, 2012),\n            (19, 3, 2013),\n            (3, 5, 2014),\n            (31, 5, 2015),\n            (22, 6, 2016),\n            (15, 7, 2016),\n            (12, 8, 2017),\n            (19, 9, 2018),\n            (26, 9, 2018),\n            (24, 10, 2019),\n            (8, 12, 2020),\n            (31, 12, 2020)\n        })\n        {\n            Console.WriteLine($\"{day:00}-{month:00}-{year:00} = {new DateTime(year, month, day).Discordian()}\");\n        }\n    }\n\n}\n"}
{"id": 45079, "name": "Average loop length", "source": "Translate Java to C#: import java.util.HashSet;\nimport java.util.Random;\nimport java.util.Set;\n\npublic class AverageLoopLength {\n\n    private static final int N = 100000;\n\n    \n    private static double analytical(int n) {\n        double[] factorial = new double[n + 1];\n        double[] powers = new double[n + 1];\n        powers[0] = 1.0;\n        factorial[0] = 1.0;\n        for (int i = 1; i <= n; i++) {\n            factorial[i] = factorial[i - 1] * i;\n            powers[i] = powers[i - 1] * n;\n        }\n        double sum = 0;\n        \n        for (int i = 1; i <= n; i++) {\n            sum += factorial[n] / factorial[n - i] / powers[i];\n        }\n        return sum;\n    }\n\n    private static double average(int n) {\n        Random rnd = new Random();\n        double sum = 0.0;\n        for (int a = 0; a < N; a++) {\n            int[] random = new int[n];\n            for (int i = 0; i < n; i++) {\n                random[i] = rnd.nextInt(n);\n            }\n            Set<Integer> seen = new HashSet<>(n);\n            int current = 0;\n            int length = 0;\n            while (seen.add(current)) {\n                length++;\n                current = random[current];\n            }\n            sum += length;\n        }\n        return sum / N;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(\" N    average    analytical    (error)\");\n        System.out.println(\"===  =========  ============  =========\");\n        for (int i = 1; i <= 20; i++) {\n            double avg = average(i);\n            double ana = analytical(i);\n            System.out.println(String.format(\"%3d  %9.4f  %12.4f  (%6.2f%%)\", i, avg, ana, ((ana - avg) / ana * 100)));\n        }\n    }\n}\n", "target": "public class AverageLoopLength {\n\tprivate static int N = 100000;\n\t\n\tprivate static double analytical(int n) {\n\t\tdouble[] factorial = new double[n + 1];\n\t\tdouble[] powers = new double[n + 1];\n\t\tpowers[0] = 1.0;\n\t\tfactorial[0] = 1.0;\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\tfactorial[i] = factorial[i - 1] * i;\n\t\t\tpowers[i] = powers[i - 1] * n;\n\t\t}\n\t\tdouble sum = 0;\n\t\t\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\tsum += factorial[n] / factorial[n - i] / powers[i];\n\t\t}\n\t\treturn sum;\n\t}\n\n\tprivate static double average(int n) {\n\t\tRandom rnd = new Random();\n\t\tdouble sum = 0.0;\n\t\tfor (int a = 0; a < N; a++) {\n\t\t\tint[] random = new int[n];\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\trandom[i] = rnd.Next(n);\n\t\t\t}\n\t\t\tvar seen = new HashSet<double>(n);\n\t\t\tint current = 0;\n\t\t\tint length = 0;\n\t\t\twhile (seen.Add(current)) {\n\t\t\t\tlength++;\n\t\t\t\tcurrent = random[current];\n\t\t\t}\n\t\t\tsum += length;\n\t\t}\n\t\treturn sum / N;\n\t}\n\t\n\tpublic static void Main(string[] args) {\n\tConsole.WriteLine(\" N    average    analytical    (error)\");\n\tConsole.WriteLine(\"===  =========  ============  =========\");\n\t\tfor (int i = 1; i <= 20; i++) {\n\t\t\tvar average = AverageLoopLength.average(i);\n\t\t\tvar analytical = AverageLoopLength.analytical(i);\n\t\t\tConsole.WriteLine(\"{0,3} {1,10:N4} {2,13:N4}  {3,8:N2}%\", i, average, analytical, (analytical - average) / analytical * 100);\n\t\t}\n\t}\n}\n"}
{"id": 45080, "name": "Average loop length", "source": "Translate Java to C#: import java.util.HashSet;\nimport java.util.Random;\nimport java.util.Set;\n\npublic class AverageLoopLength {\n\n    private static final int N = 100000;\n\n    \n    private static double analytical(int n) {\n        double[] factorial = new double[n + 1];\n        double[] powers = new double[n + 1];\n        powers[0] = 1.0;\n        factorial[0] = 1.0;\n        for (int i = 1; i <= n; i++) {\n            factorial[i] = factorial[i - 1] * i;\n            powers[i] = powers[i - 1] * n;\n        }\n        double sum = 0;\n        \n        for (int i = 1; i <= n; i++) {\n            sum += factorial[n] / factorial[n - i] / powers[i];\n        }\n        return sum;\n    }\n\n    private static double average(int n) {\n        Random rnd = new Random();\n        double sum = 0.0;\n        for (int a = 0; a < N; a++) {\n            int[] random = new int[n];\n            for (int i = 0; i < n; i++) {\n                random[i] = rnd.nextInt(n);\n            }\n            Set<Integer> seen = new HashSet<>(n);\n            int current = 0;\n            int length = 0;\n            while (seen.add(current)) {\n                length++;\n                current = random[current];\n            }\n            sum += length;\n        }\n        return sum / N;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(\" N    average    analytical    (error)\");\n        System.out.println(\"===  =========  ============  =========\");\n        for (int i = 1; i <= 20; i++) {\n            double avg = average(i);\n            double ana = analytical(i);\n            System.out.println(String.format(\"%3d  %9.4f  %12.4f  (%6.2f%%)\", i, avg, ana, ((ana - avg) / ana * 100)));\n        }\n    }\n}\n", "target": "public class AverageLoopLength {\n\tprivate static int N = 100000;\n\t\n\tprivate static double analytical(int n) {\n\t\tdouble[] factorial = new double[n + 1];\n\t\tdouble[] powers = new double[n + 1];\n\t\tpowers[0] = 1.0;\n\t\tfactorial[0] = 1.0;\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\tfactorial[i] = factorial[i - 1] * i;\n\t\t\tpowers[i] = powers[i - 1] * n;\n\t\t}\n\t\tdouble sum = 0;\n\t\t\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\tsum += factorial[n] / factorial[n - i] / powers[i];\n\t\t}\n\t\treturn sum;\n\t}\n\n\tprivate static double average(int n) {\n\t\tRandom rnd = new Random();\n\t\tdouble sum = 0.0;\n\t\tfor (int a = 0; a < N; a++) {\n\t\t\tint[] random = new int[n];\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\trandom[i] = rnd.Next(n);\n\t\t\t}\n\t\t\tvar seen = new HashSet<double>(n);\n\t\t\tint current = 0;\n\t\t\tint length = 0;\n\t\t\twhile (seen.Add(current)) {\n\t\t\t\tlength++;\n\t\t\t\tcurrent = random[current];\n\t\t\t}\n\t\t\tsum += length;\n\t\t}\n\t\treturn sum / N;\n\t}\n\t\n\tpublic static void Main(string[] args) {\n\tConsole.WriteLine(\" N    average    analytical    (error)\");\n\tConsole.WriteLine(\"===  =========  ============  =========\");\n\t\tfor (int i = 1; i <= 20; i++) {\n\t\t\tvar average = AverageLoopLength.average(i);\n\t\t\tvar analytical = AverageLoopLength.analytical(i);\n\t\t\tConsole.WriteLine(\"{0,3} {1,10:N4} {2,13:N4}  {3,8:N2}%\", i, average, analytical, (analytical - average) / analytical * 100);\n\t\t}\n\t}\n}\n"}
{"id": 45081, "name": "String interpolation (included)", "source": "Translate Java to C#: String original = \"Mary had a X lamb\";\nString little = \"little\";\nString replaced = original.replace(\"X\", little); \nSystem.out.println(replaced);\n\nSystem.out.printf(\"Mary had a %s lamb.\", little);\n\nString formatted = String.format(\"Mary had a %s lamb.\", little);\nSystem.out.println(formatted);\n", "target": "class Program\n{\n    static void Main()\n    {\n        string extra = \"little\";\n        string formatted = $\"Mary had a {extra} lamb.\";\n        System.Console.WriteLine(formatted);\n    }\n}\n"}
{"id": 45082, "name": "Partition function P", "source": "Translate Java to C#: import java.math.BigInteger;\n\npublic class PartitionFunction {\n    public static void main(String[] args) {\n        long start = System.currentTimeMillis();\n        BigInteger result = partitions(6666);\n        long end = System.currentTimeMillis();\n        System.out.println(\"P(6666) = \" + result);\n        System.out.printf(\"elapsed time: %d milliseconds\\n\", end - start);\n    }\n\n    private static BigInteger partitions(int n) {\n        BigInteger[] p = new BigInteger[n + 1];\n        p[0] = BigInteger.ONE;\n        for (int i = 1; i <= n; ++i) {\n            p[i] = BigInteger.ZERO;\n            for (int k = 1; ; ++k) {\n                int j = (k * (3 * k - 1))/2;\n                if (j > i)\n                    break;\n                if ((k & 1) != 0)\n                    p[i] = p[i].add(p[i - j]);\n                else\n                    p[i] = p[i].subtract(p[i - j]);\n                j += k;\n                if (j > i)\n                    break;\n                if ((k & 1) != 0)\n                    p[i] = p[i].add(p[i - j]);\n                else\n                    p[i] = p[i].subtract(p[i - j]);\n            }\n        }\n        return p[n];\n    }\n}\n", "target": "using System;\n\nclass Program {\n\n    const long Lm = (long)1e18;\n    const string Fm = \"D18\";\n\n    \n    struct LI { public long lo, ml, mh, hi, tp; }\n\n    static void inc(ref LI d, LI s) { \n        if ((d.lo += s.lo) >= Lm) { d.ml++; d.lo -= Lm; }\n        if ((d.ml += s.ml) >= Lm) { d.mh++; d.ml -= Lm; }\n        if ((d.mh += s.mh) >= Lm) { d.hi++; d.mh -= Lm; }\n        if ((d.hi += s.hi) >= Lm) { d.tp++; d.hi -= Lm; }\n        d.tp += s.tp;\n    }\n \n    static void dec(ref LI d, LI s) { \n        if ((d.lo -= s.lo) < 0) { d.ml--; d.lo += Lm; }\n        if ((d.ml -= s.ml) < 0) { d.mh--; d.ml += Lm; }\n        if ((d.mh -= s.mh) < 0) { d.hi--; d.mh += Lm; }\n        if ((d.hi -= s.hi) < 0) { d.tp--; d.hi += Lm; }\n        d.tp -= s.tp;\n    }\n\n    static LI set(long s) { LI d;\n      d.lo = s; d.ml = d.mh = d.hi = d.tp = 0; return d; }\n\n  static string fmt(LI x) { \n    if (x.tp > 0) return x.tp.ToString() + x.hi.ToString(Fm) + x.mh.ToString(Fm) + x.ml.ToString(Fm) + x.lo.ToString(Fm);\n    if (x.hi > 0) return x.hi.ToString() + x.mh.ToString(Fm) + x.ml.ToString(Fm) + x.lo.ToString(Fm);\n    if (x.mh > 0) return x.mh.ToString() + x.ml.ToString(Fm) + x.lo.ToString(Fm);\n    if (x.ml > 0) return x.ml.ToString() + x.lo.ToString(Fm);\n    return x.lo.ToString();\n  }\n\n  static LI partcount(int n) {\n    var P = new LI[n + 1]; P[0] = set(1);\n    for (int i = 1; i <= n; i++) {\n      int k = 0, d = -2, j = i;\n      LI x = set(0);\n      while (true) {\n        if ((j -= (d += 3) -k) >= 0) inc(ref x, P[j]); else break;\n        if ((j -= ++k)         >= 0) inc(ref x, P[j]); else break;\n        if ((j -= (d += 3) -k) >= 0) dec(ref x, P[j]); else break;\n        if ((j -= ++k)         >= 0) dec(ref x, P[j]); else break;\n      }\n      P[i] = x;\n    }\n    return P[n];\n  }\n\n  static void Main(string[] args) {\n    var sw = System.Diagnostics.Stopwatch.StartNew ();\n    var res = partcount(6666); sw.Stop();\n    Console.Write(\"{0}  {1} ms\", fmt(res), sw.Elapsed.TotalMilliseconds);\n  }\n}\n"}
{"id": 45083, "name": "Numbers with prime digits whose sum is 13", "source": "Translate Java to C#: public class PrimeDigits {\n    private static boolean primeDigitsSum13(int n) {\n        int sum = 0;\n        while (n > 0) {\n            int r = n % 10;\n            if (r != 2 && r != 3 && r != 5 && r != 7) {\n                return false;\n            }\n            n /= 10;\n            sum += r;\n        }\n        return sum == 13;\n    }\n\n    public static void main(String[] args) {\n        \n        int c = 0;\n        for (int i = 1; i < 1_000_000; i++) {\n            if (primeDigitsSum13(i)) {\n                System.out.printf(\"%6d \", i);\n                if (c++ == 10) {\n                    c = 0;\n                    System.out.println();\n                }\n            }\n        }\n        System.out.println();\n    }\n}\n", "target": "using System;\nusing static System.Console; \nusing LI = System.Collections.Generic.SortedSet<int>;\n\nclass Program {\n\n  static LI unl(LI res, LI set, int lft, int mul = 1, int vlu = 0) {\n    if (lft == 0) res.Add(vlu);\n    else if (lft > 0) foreach (int itm in set)\n      res = unl(res, set, lft - itm, mul * 10, vlu + itm * mul);\n    return res; }\n\n  static void Main(string[] args) { WriteLine(string.Join(\" \",\n      unl(new LI {}, new LI { 2, 3, 5, 7 }, 13))); }\n}\n"}
{"id": 45084, "name": "Numbers with prime digits whose sum is 13", "source": "Translate Java to C#: public class PrimeDigits {\n    private static boolean primeDigitsSum13(int n) {\n        int sum = 0;\n        while (n > 0) {\n            int r = n % 10;\n            if (r != 2 && r != 3 && r != 5 && r != 7) {\n                return false;\n            }\n            n /= 10;\n            sum += r;\n        }\n        return sum == 13;\n    }\n\n    public static void main(String[] args) {\n        \n        int c = 0;\n        for (int i = 1; i < 1_000_000; i++) {\n            if (primeDigitsSum13(i)) {\n                System.out.printf(\"%6d \", i);\n                if (c++ == 10) {\n                    c = 0;\n                    System.out.println();\n                }\n            }\n        }\n        System.out.println();\n    }\n}\n", "target": "using System;\nusing static System.Console; \nusing LI = System.Collections.Generic.SortedSet<int>;\n\nclass Program {\n\n  static LI unl(LI res, LI set, int lft, int mul = 1, int vlu = 0) {\n    if (lft == 0) res.Add(vlu);\n    else if (lft > 0) foreach (int itm in set)\n      res = unl(res, set, lft - itm, mul * 10, vlu + itm * mul);\n    return res; }\n\n  static void Main(string[] args) { WriteLine(string.Join(\" \",\n      unl(new LI {}, new LI { 2, 3, 5, 7 }, 13))); }\n}\n"}
{"id": 45085, "name": "Take notes on the command line", "source": "Translate Java to C#: import java.io.*;\nimport java.nio.channels.*;\nimport java.util.Date;\n\npublic class TakeNotes {\n    public static void main(String[] args) throws IOException {\n        if (args.length > 0) {\n            PrintStream ps = new PrintStream(new FileOutputStream(\"notes.txt\", true));\n            ps.println(new Date());\n            ps.print(\"\\t\" + args[0]);\n            for (int i = 1; i < args.length; i++)\n                ps.print(\" \" + args[i]);\n            ps.println();\n            ps.close();\n        } else {\n            FileChannel fc = new FileInputStream(\"notes.txt\").getChannel();\n            fc.transferTo(0, fc.size(), Channels.newChannel(System.out));\n            fc.close();\n        }\n    }\n}\n", "target": "using System;\nusing System.IO;\nusing System.Text;\n\nnamespace RosettaCode\n{\n  internal class Program\n  {\n    private const string FileName = \"NOTES.TXT\";\n\n    private static void Main(string[] args)\n    {\n      if (args.Length==0)\n      {\n        string txt = File.ReadAllText(FileName);\n        Console.WriteLine(txt);\n      }\n      else\n      {\n        var sb = new StringBuilder();\n        sb.Append(DateTime.Now).Append(\"\\n\\t\");\n        foreach (string s in args)\n          sb.Append(s).Append(\" \");\n        sb.Append(\"\\n\");\n\n        if (File.Exists(FileName))\n          File.AppendAllText(FileName, sb.ToString());\n        else\n          File.WriteAllText(FileName, sb.ToString());\n      }\n    }\n  }\n}\n"}
{"id": 45086, "name": "Take notes on the command line", "source": "Translate Java to C#: import java.io.*;\nimport java.nio.channels.*;\nimport java.util.Date;\n\npublic class TakeNotes {\n    public static void main(String[] args) throws IOException {\n        if (args.length > 0) {\n            PrintStream ps = new PrintStream(new FileOutputStream(\"notes.txt\", true));\n            ps.println(new Date());\n            ps.print(\"\\t\" + args[0]);\n            for (int i = 1; i < args.length; i++)\n                ps.print(\" \" + args[i]);\n            ps.println();\n            ps.close();\n        } else {\n            FileChannel fc = new FileInputStream(\"notes.txt\").getChannel();\n            fc.transferTo(0, fc.size(), Channels.newChannel(System.out));\n            fc.close();\n        }\n    }\n}\n", "target": "using System;\nusing System.IO;\nusing System.Text;\n\nnamespace RosettaCode\n{\n  internal class Program\n  {\n    private const string FileName = \"NOTES.TXT\";\n\n    private static void Main(string[] args)\n    {\n      if (args.Length==0)\n      {\n        string txt = File.ReadAllText(FileName);\n        Console.WriteLine(txt);\n      }\n      else\n      {\n        var sb = new StringBuilder();\n        sb.Append(DateTime.Now).Append(\"\\n\\t\");\n        foreach (string s in args)\n          sb.Append(s).Append(\" \");\n        sb.Append(\"\\n\");\n\n        if (File.Exists(FileName))\n          File.AppendAllText(FileName, sb.ToString());\n        else\n          File.WriteAllText(FileName, sb.ToString());\n      }\n    }\n  }\n}\n"}
{"id": 45087, "name": "Angles (geometric), normalization and conversion", "source": "Translate Java to C#: import java.text.DecimalFormat;\n\n\n\npublic class AnglesNormalizationAndConversion {\n\n    public static void main(String[] args) {\n        DecimalFormat formatAngle = new DecimalFormat(\"######0.000000\");\n        DecimalFormat formatConv = new DecimalFormat(\"###0.0000\");\n        System.out.printf(\"                               degrees    gradiens        mils     radians%n\");\n        for ( double angle : new double[] {-2, -1, 0, 1, 2, 6.2831853, 16, 57.2957795, 359, 399, 6399, 1000000} ) {\n            for ( String units : new String[] {\"degrees\", \"gradiens\", \"mils\", \"radians\"}) {\n                double d = 0, g = 0, m = 0, r = 0;\n                switch (units) {\n                case \"degrees\":\n                    d = d2d(angle);\n                    g = d2g(d);\n                    m = d2m(d);\n                    r = d2r(d);\n                    break;\n                case \"gradiens\":\n                    g = g2g(angle);\n                    d = g2d(g);\n                    m = g2m(g);\n                    r = g2r(g);\n                    break;\n                case \"mils\":\n                    m = m2m(angle);\n                    d = m2d(m);\n                    g = m2g(m);\n                    r = m2r(m);\n                    break;\n                case \"radians\":\n                    r = r2r(angle);\n                    d = r2d(r);\n                    g = r2g(r);\n                    m = r2m(r);\n                    break;\n                }\n                System.out.printf(\"%15s  %8s = %10s  %10s  %10s  %10s%n\", formatAngle.format(angle), units, formatConv.format(d), formatConv.format(g), formatConv.format(m), formatConv.format(r));\n            }\n        }\n    }\n\n    private static final double DEGREE = 360D;\n    private static final double GRADIAN = 400D;\n    private static final double MIL = 6400D;\n    private static final double RADIAN = (2 * Math.PI);\n    \n    private static double d2d(double a) {\n        return a % DEGREE;\n    }\n    private static double d2g(double a) {\n        return a * (GRADIAN / DEGREE);\n    }\n    private static double d2m(double a) {\n        return a * (MIL / DEGREE);\n    }\n    private static double d2r(double a) {\n        return a * (RADIAN / 360);\n    }\n\n    private static double g2d(double a) {\n        return a * (DEGREE / GRADIAN);\n    }\n    private static double g2g(double a) {\n        return a % GRADIAN;\n    }\n    private static double g2m(double a) {\n        return a * (MIL / GRADIAN);\n    }\n    private static double g2r(double a) {\n        return a * (RADIAN / GRADIAN);\n    }\n    \n    private static double m2d(double a) {\n        return a * (DEGREE / MIL);\n    }\n    private static double m2g(double a) {\n        return a * (GRADIAN / MIL);\n    }\n    private static double m2m(double a) {\n        return a % MIL;\n    }\n    private static double m2r(double a) {\n        return a * (RADIAN / MIL);\n    }\n    \n    private static double r2d(double a) {\n        return a * (DEGREE / RADIAN);\n    }\n    private static double r2g(double a) {\n        return a * (GRADIAN / RADIAN);\n    }\n    private static double r2m(double a) {\n        return a * (MIL / RADIAN);\n    }\n    private static double r2r(double a) {\n        return a % RADIAN;\n    }\n    \n}\n", "target": "using System;\n\npublic static class Angles\n{\n    public static void Main() => Print(-2, -1, 0, 1, 2, 6.2831853, 16, 57.2957795, 359, 6399, 1_000_000);\n\n    public static void Print(params double[] angles) {\n        string[] names = { \"Degrees\", \"Gradians\", \"Mils\", \"Radians\" };\n        Func<double, double> rnd = a => Math.Round(a, 4);\n        Func<double, double>[] normal = { NormalizeDeg, NormalizeGrad, NormalizeMil, NormalizeRad };\n\n        Func<double, double>[,] convert = {\n            { a => a, DegToGrad, DegToMil, DegToRad },\n            { GradToDeg, a => a, GradToMil, GradToRad },\n            { MilToDeg, MilToGrad, a => a, MilToRad },\n            { RadToDeg, RadToGrad, RadToMil, a => a }\n        };\n\n        Console.WriteLine($@\"{\"Angle\",-12}{\"Normalized\",-12}{\"Unit\",-12}{\n            \"Degrees\",-12}{\"Gradians\",-12}{\"Mils\",-12}{\"Radians\",-12}\");\n\n        foreach (double angle in angles) {\n            for (int i = 0; i < 4; i++) {\n                double nAngle = normal[i](angle);\n\n                Console.WriteLine($@\"{\n                    rnd(angle),-12}{\n                    rnd(nAngle),-12}{\n                    names[i],-12}{\n                    rnd(convert[i, 0](nAngle)),-12}{\n                    rnd(convert[i, 1](nAngle)),-12}{\n                    rnd(convert[i, 2](nAngle)),-12}{\n                    rnd(convert[i, 3](nAngle)),-12}\");\n            }\n        }\n    }\n\n    public static double NormalizeDeg(double angle) => Normalize(angle, 360);\n    public static double NormalizeGrad(double angle) => Normalize(angle, 400);\n    public static double NormalizeMil(double angle) => Normalize(angle, 6400);\n    public static double NormalizeRad(double angle) => Normalize(angle, 2 * Math.PI);\n\n    private static double Normalize(double angle, double N) {\n        while (angle <= -N) angle += N;\n        while (angle >= N) angle -= N;\n        return angle;\n    }\n\n    public static double DegToGrad(double angle) => angle * 10 / 9;\n    public static double DegToMil(double angle) => angle * 160 / 9;\n    public static double DegToRad(double angle) => angle * Math.PI / 180;\n    \n    public static double GradToDeg(double angle) => angle * 9 / 10;\n    public static double GradToMil(double angle) => angle * 16;\n    public static double GradToRad(double angle) => angle * Math.PI / 200;\n    \n    public static double MilToDeg(double angle) => angle * 9 / 160;\n    public static double MilToGrad(double angle) => angle / 16;\n    public static double MilToRad(double angle) => angle * Math.PI / 3200;\n    \n    public static double RadToDeg(double angle) => angle * 180 / Math.PI;\n    public static double RadToGrad(double angle) => angle * 200 / Math.PI;\n    public static double RadToMil(double angle) => angle * 3200 / Math.PI;\n}\n"}
{"id": 45088, "name": "Find common directory path", "source": "Translate Java to C#: public class CommonPath {\n\tpublic static String commonPath(String... paths){\n\t\tString commonPath = \"\";\n\t\tString[][] folders = new String[paths.length][];\n\t\tfor(int i = 0; i < paths.length; i++){\n\t\t\tfolders[i] = paths[i].split(\"/\"); \n\t\t}\n\t\tfor(int j = 0; j < folders[0].length; j++){\n\t\t\tString thisFolder = folders[0][j]; \n\t\t\tboolean allMatched = true; \n\t\t\tfor(int i = 1; i < folders.length && allMatched; i++){ \n\t\t\t\tif(folders[i].length < j){ \n\t\t\t\t\tallMatched = false; \n\t\t\t\t\tbreak; \n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tallMatched &= folders[i][j].equals(thisFolder); \n\t\t\t}\n\t\t\tif(allMatched){ \n\t\t\t\tcommonPath += thisFolder + \"/\"; \n\t\t\t}else{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn commonPath;\n\t}\n\t\n\tpublic static void main(String[] args){\n\t\tString[] paths = { \"/home/user1/tmp/coverage/test\",\n\t\t\t\t \"/home/user1/tmp/covert/operator\",\n\t\t\t\t \"/home/user1/tmp/coven/members\"};\n\t\tSystem.out.println(commonPath(paths));\n\t\t\n\t\tString[] paths2 = { \"/hame/user1/tmp/coverage/test\",\n\t\t\t\t \"/home/user1/tmp/covert/operator\",\n\t\t\t\t \"/home/user1/tmp/coven/members\"};\n\t\tSystem.out.println(commonPath(paths2));\n\t}\n}\n", "target": "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace RosettaCodeTasks\n{\n\n\tclass Program\n\t{\n\t\tstatic void Main ( string[ ] args )\n\t\t{\n\t\t\tFindCommonDirectoryPath.Test ( );\n\t\t}\n\n\t}\n\n\tclass FindCommonDirectoryPath\n\t{\n\t\tpublic static void Test ( )\n\t\t{\n\t\t\tConsole.WriteLine ( \"Find Common Directory Path\" );\n\t\t\tConsole.WriteLine ( );\n\t\t\tList<string> PathSet1 = new List<string> ( );\n\t\t\tPathSet1.Add ( \"/home/user1/tmp/coverage/test\" );\n\t\t\tPathSet1.Add ( \"/home/user1/tmp/covert/operator\" );\n\t\t\tPathSet1.Add ( \"/home/user1/tmp/coven/members\" );\n\t\t\tConsole.WriteLine(\"Path Set 1 (All Absolute Paths):\");\n\t\t\tforeach ( string path in PathSet1 )\n\t\t\t{\n\t\t\t\tConsole.WriteLine ( path );\n\t\t\t}\n\t\t\tConsole.WriteLine ( \"Path Set 1 Common Path: {0}\", FindCommonPath ( \"/\", PathSet1 ) );\n\t\t}\n\t\tpublic static string FindCommonPath ( string Separator, List<string> Paths )\n\t\t{\n\t\t\tstring CommonPath = String.Empty;\n\t\t\tList<string> SeparatedPath = Paths\n\t\t\t\t.First ( str => str.Length == Paths.Max ( st2 => st2.Length ) )\n\t\t\t\t.Split ( new string[ ] { Separator }, StringSplitOptions.RemoveEmptyEntries )\n\t\t\t\t.ToList ( );\n\n\t\t\tforeach ( string PathSegment in SeparatedPath.AsEnumerable ( ) )\n\t\t\t{\n\t\t\t\tif ( CommonPath.Length == 0 && Paths.All ( str => str.StartsWith ( PathSegment ) ) )\n\t\t\t\t{\n\t\t\t\t\tCommonPath = PathSegment;\n\t\t\t\t}\n\t\t\t\telse if ( Paths.All ( str => str.StartsWith ( CommonPath + Separator + PathSegment ) ) )\n\t\t\t\t{\n\t\t\t\t\tCommonPath += Separator + PathSegment;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\treturn CommonPath;\n\t\t}\n\t}\n}\n"}
{"id": 45089, "name": "Recaman's sequence", "source": "Translate Java to C#: import java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\npublic class RecamanSequence {\n    public static void main(String[] args) {\n        List<Integer> a = new ArrayList<>();\n        a.add(0);\n\n        Set<Integer> used = new HashSet<>();\n        used.add(0);\n\n        Set<Integer> used1000 = new HashSet<>();\n        used1000.add(0);\n\n        boolean foundDup = false;\n        int n = 1;\n        while (n <= 15 || !foundDup || used1000.size() < 1001) {\n            int next = a.get(n - 1) - n;\n            if (next < 1 || used.contains(next)) {\n                next += 2 * n;\n            }\n            boolean alreadyUsed = used.contains(next);\n            a.add(next);\n            if (!alreadyUsed) {\n                used.add(next);\n                if (0 <= next && next <= 1000) {\n                    used1000.add(next);\n                }\n            }\n            if (n == 14) {\n                System.out.printf(\"The first 15 terms of the Recaman sequence are\u00a0: %s\\n\", a);\n            }\n            if (!foundDup && alreadyUsed) {\n                System.out.printf(\"The first duplicate term is a[%d] = %d\\n\", n, next);\n                foundDup = true;\n            }\n            if (used1000.size() == 1001) {\n                System.out.printf(\"Terms up to a[%d] are needed to generate 0 to 1000\\n\", n);\n            }\n            n++;\n        }\n    }\n}\n", "target": "using System;\nusing System.Collections.Generic;\n\nnamespace RecamanSequence {\n    class Program {\n        static void Main(string[] args) {\n            List<int> a = new List<int>() { 0 };\n            HashSet<int> used = new HashSet<int>() { 0 };\n            HashSet<int> used1000 = new HashSet<int>() { 0 };\n            bool foundDup = false;\n            int n = 1;\n            while (n <= 15 || !foundDup || used1000.Count < 1001) {\n                int next = a[n - 1] - n;\n                if (next < 1 || used.Contains(next)) {\n                    next += 2 * n;\n                }\n                bool alreadyUsed = used.Contains(next);\n                a.Add(next);\n                if (!alreadyUsed) {\n                    used.Add(next);\n                    if (0 <= next && next <= 1000) {\n                        used1000.Add(next);\n                    }\n                }\n                if (n == 14) {\n                    Console.WriteLine(\"The first 15 terms of the Recaman sequence are: [{0}]\", string.Join(\", \", a));\n                }\n                if (!foundDup && alreadyUsed) {\n                    Console.WriteLine(\"The first duplicated term is a[{0}] = {1}\", n, next);\n                    foundDup = true;\n                }\n                if (used1000.Count == 1001) {\n                    Console.WriteLine(\"Terms up to a[{0}] are needed to generate 0 to 1000\", n);\n                }\n                n++;\n            }\n        }\n    }\n}\n"}
{"id": 45090, "name": "Recaman's sequence", "source": "Translate Java to C#: import java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\npublic class RecamanSequence {\n    public static void main(String[] args) {\n        List<Integer> a = new ArrayList<>();\n        a.add(0);\n\n        Set<Integer> used = new HashSet<>();\n        used.add(0);\n\n        Set<Integer> used1000 = new HashSet<>();\n        used1000.add(0);\n\n        boolean foundDup = false;\n        int n = 1;\n        while (n <= 15 || !foundDup || used1000.size() < 1001) {\n            int next = a.get(n - 1) - n;\n            if (next < 1 || used.contains(next)) {\n                next += 2 * n;\n            }\n            boolean alreadyUsed = used.contains(next);\n            a.add(next);\n            if (!alreadyUsed) {\n                used.add(next);\n                if (0 <= next && next <= 1000) {\n                    used1000.add(next);\n                }\n            }\n            if (n == 14) {\n                System.out.printf(\"The first 15 terms of the Recaman sequence are\u00a0: %s\\n\", a);\n            }\n            if (!foundDup && alreadyUsed) {\n                System.out.printf(\"The first duplicate term is a[%d] = %d\\n\", n, next);\n                foundDup = true;\n            }\n            if (used1000.size() == 1001) {\n                System.out.printf(\"Terms up to a[%d] are needed to generate 0 to 1000\\n\", n);\n            }\n            n++;\n        }\n    }\n}\n", "target": "using System;\nusing System.Collections.Generic;\n\nnamespace RecamanSequence {\n    class Program {\n        static void Main(string[] args) {\n            List<int> a = new List<int>() { 0 };\n            HashSet<int> used = new HashSet<int>() { 0 };\n            HashSet<int> used1000 = new HashSet<int>() { 0 };\n            bool foundDup = false;\n            int n = 1;\n            while (n <= 15 || !foundDup || used1000.Count < 1001) {\n                int next = a[n - 1] - n;\n                if (next < 1 || used.Contains(next)) {\n                    next += 2 * n;\n                }\n                bool alreadyUsed = used.Contains(next);\n                a.Add(next);\n                if (!alreadyUsed) {\n                    used.Add(next);\n                    if (0 <= next && next <= 1000) {\n                        used1000.Add(next);\n                    }\n                }\n                if (n == 14) {\n                    Console.WriteLine(\"The first 15 terms of the Recaman sequence are: [{0}]\", string.Join(\", \", a));\n                }\n                if (!foundDup && alreadyUsed) {\n                    Console.WriteLine(\"The first duplicated term is a[{0}] = {1}\", n, next);\n                    foundDup = true;\n                }\n                if (used1000.Count == 1001) {\n                    Console.WriteLine(\"Terms up to a[{0}] are needed to generate 0 to 1000\", n);\n                }\n                n++;\n            }\n        }\n    }\n}\n"}
{"id": 45091, "name": "Memory allocation", "source": "Translate Java to C#: \n\nObject foo = new Object(); \nint[] fooArray = new int[size]; \nint x = 0; \n", "target": "using System;\nusing System.Runtime.InteropServices;\n\npublic unsafe class Program\n{\n    public static unsafe void HeapMemory()\n    {\n        const int HEAP_ZERO_MEMORY = 0x00000008;\n        const int size = 1000;\n        int ph = GetProcessHeap();\n        void* pointer = HeapAlloc(ph, HEAP_ZERO_MEMORY, size);\n        if (pointer == null)\n            throw new OutOfMemoryException();\n        Console.WriteLine(HeapSize(ph, 0, pointer));\n        HeapFree(ph, 0, pointer);\n    }\n\n    public static unsafe void StackMemory()\n    {\n        byte* buffer = stackalloc byte[1000];\n        \n    }\n    public static void Main(string[] args)\n    {\n        HeapMemory();\n        StackMemory();\n    }\n    [DllImport(\"kernel32\")]\n    static extern void* HeapAlloc(int hHeap, int flags, int size);\n    [DllImport(\"kernel32\")]\n    static extern bool HeapFree(int hHeap, int flags, void* block);\n    [DllImport(\"kernel32\")]\n    static extern int GetProcessHeap();\n    [DllImport(\"kernel32\")]\n    static extern int HeapSize(int hHeap, int flags, void* block);\n\n}\n"}
{"id": 45092, "name": "Integer sequence", "source": "Translate Java to C#: public class Count{\n    public static void main(String[] args){\n        for(long i = 1; ;i++) System.out.println(i);\n    }\n}\n", "target": "using System;\nusing System.Numerics;\n\nclass Program\n{\n    static void Main()\n    {\n        BigInteger i = 1;\n        while (true)\n        {\n            Console.WriteLine(i++);\n        }\n    }\n}\n"}
{"id": 45093, "name": "Integer sequence", "source": "Translate Java to C#: public class Count{\n    public static void main(String[] args){\n        for(long i = 1; ;i++) System.out.println(i);\n    }\n}\n", "target": "using System;\nusing System.Numerics;\n\nclass Program\n{\n    static void Main()\n    {\n        BigInteger i = 1;\n        while (true)\n        {\n            Console.WriteLine(i++);\n        }\n    }\n}\n"}
{"id": 45094, "name": "DNS query", "source": "Translate Java to C#: import java.net.InetAddress;\nimport java.net.Inet4Address;\nimport java.net.Inet6Address;\nimport java.net.UnknownHostException;\n\nclass DnsQuery {\n    public static void main(String[] args) {\n        try {\n            InetAddress[] ipAddr = InetAddress.getAllByName(\"www.kame.net\");\n            for(int i=0; i < ipAddr.length ; i++) {\n                if (ipAddr[i] instanceof Inet4Address) {\n                    System.out.println(\"IPv4\u00a0: \" + ipAddr[i].getHostAddress());\n                } else if (ipAddr[i] instanceof Inet6Address) {\n                    System.out.println(\"IPv6\u00a0: \" + ipAddr[i].getHostAddress());\n                }\n            }\n        } catch (UnknownHostException uhe) {\n            System.err.println(\"unknown host\");\n        }\n    }\n}\n", "target": "        private string LookupDns(string s)\n        {\n            try\n            {\n                System.Net.IPHostEntry ip = System.Net.Dns.GetHostEntry(s);\n\n                string result = ip.AddressList[0].ToString();\n\n                for (int i = 1; i < ip.AddressList.Length; ++i)\n                    result += \", \" + ip.AddressList[i].ToString();\n\n                return result;\n            }\n            catch (System.Net.Sockets.SocketException se)\n            {\n                return se.Message;\n            }\n        }\n"}
{"id": 45095, "name": "Seven-sided dice from five-sided dice", "source": "Translate Java to C#: import java.util.Random;\npublic class SevenSidedDice \n{\n\tprivate static final Random rnd = new Random();\n\tpublic static void main(String[] args)\n\t{\n\t\tSevenSidedDice now=new SevenSidedDice();\n\t\tSystem.out.println(\"Random number from 1 to 7: \"+now.seven());\n\t}\n\tint seven()\n\t{\n\t\tint v=21;\n\t\twhile(v>20)\n\t\t\tv=five()+five()*5-6;\n\t\treturn 1+v%7;\n\t}\n\tint five()\n\t{\n\t\treturn 1+rnd.nextInt(5);\n\t}\n}\n", "target": "using System;\n\npublic class SevenSidedDice\n{\n    Random random = new Random();\n\t\t\n        static void Main(string[] args)\n\t\t{\n\t\t\tSevenSidedDice sevenDice = new SevenSidedDice();\n\t\t\tConsole.WriteLine(\"Random number from 1 to 7: \"+ sevenDice.seven());\n            Console.Read();\n\t\t}\n\t\t\n\t\tint seven()\n\t\t{\n\t\t\tint v=21;\n\t\t\twhile(v>20)\n\t\t\t\tv=five()+five()*5-6;\n\t\t\treturn 1+v%7;\n\t\t}\n\t\t\n\t\tint five()\n\t\t{\n        return 1 + random.Next(5);\n\t\t}\n}\n"}
{"id": 45096, "name": "Magnanimous numbers", "source": "Translate Java to C#: import java.util.ArrayList;\nimport java.util.List;\n\npublic class MagnanimousNumbers {\n\n    public static void main(String[] args) {\n        runTask(\"Find and display the first 45 magnanimous numbers.\", 1, 45);\n        runTask(\"241st through 250th magnanimous numbers.\", 241, 250);\n        runTask(\"391st through 400th magnanimous numbers.\", 391, 400);\n    }\n    \n    private static void runTask(String message, int startN, int endN) {\n        int count = 0;\n        List<Integer> nums = new ArrayList<>();\n        for ( int n = 0 ; count < endN ; n++ ) {\n            if ( isMagnanimous(n) ) {\n                nums.add(n);\n                count++;\n            }\n        }\n        System.out.printf(\"%s%n\", message);\n        System.out.printf(\"%s%n%n\", nums.subList(startN-1, endN));\n    }\n    \n    private static boolean isMagnanimous(long n) {\n        if ( n >= 0 && n <= 9 ) {\n            return true;\n        }\n        long q = 11;\n        for ( long div = 10 ; q >= 10 ; div *= 10 ) {\n            q = n / div;\n            long r = n % div;\n            if ( ! isPrime(q+r) ) {\n                return false;\n            }\n        }\n        return true;\n    }\n    \n    private static final int MAX = 100_000;\n    private static final boolean[] primes = new boolean[MAX];\n    private static boolean SIEVE_COMPLETE = false;\n    \n    private static final boolean isPrimeTrivial(long test) {\n        if ( ! SIEVE_COMPLETE ) {\n            sieve();\n            SIEVE_COMPLETE = true;\n        }\n        return primes[(int) test];\n    }\n    \n    private static final void sieve() {\n        \n        for ( int i = 2 ; i < MAX ; i++ ) {\n            primes[i] = true;            \n        }\n        for ( int i = 2 ; i < MAX ; i++ ) {\n            if ( primes[i] ) {\n                for ( int j = 2*i ; j < MAX ; j += i ) {\n                    primes[j] = false;\n                }\n            }\n        }\n    }\n\n    \n    public static final boolean isPrime(long testValue) {\n        if ( testValue == 2 ) return true;\n        if ( testValue % 2 == 0 ) return false;\n        if ( testValue <= MAX ) return isPrimeTrivial(testValue);\n        long d = testValue-1;\n        int s = 0;\n        while ( d % 2 == 0 ) {\n            s += 1;\n            d /= 2;\n        }\n        if ( testValue < 1373565L ) {\n            if ( ! aSrp(2, s, d, testValue) ) {\n                return false;\n            }\n            if ( ! aSrp(3, s, d, testValue) ) {\n                return false;\n            }\n            return true;\n        }\n        if ( testValue < 4759123141L ) {\n            if ( ! aSrp(2, s, d, testValue) ) {\n                return false;\n            }\n            if ( ! aSrp(7, s, d, testValue) ) {\n                return false;\n            }\n            if ( ! aSrp(61, s, d, testValue) ) {\n                return false;\n            }\n            return true;\n        }\n        if ( testValue < 10000000000000000L ) {\n            if ( ! aSrp(3, s, d, testValue) ) {\n                return false;\n            }\n            if ( ! aSrp(24251, s, d, testValue) ) {\n                return false;\n            }\n            return true;\n        }\n        \n        if ( ! aSrp(37, s, d, testValue) ) {\n            return false;\n        }\n        if ( ! aSrp(47, s, d, testValue) ) {\n            return false;\n        }\n        if ( ! aSrp(61, s, d, testValue) ) {\n            return false;\n        }\n        if ( ! aSrp(73, s, d, testValue) ) {\n            return false;\n        }\n        if ( ! aSrp(83, s, d, testValue) ) {\n            return false;\n        }\n        \n        return true;\n    }\n\n    private static final boolean aSrp(int a, int s, long d, long n) {\n        long modPow = modPow(a, d, n);\n        \n        if ( modPow == 1 ) {\n            return true;\n        }\n        int twoExpR = 1;\n        for ( int r = 0 ; r < s ; r++ ) {\n            if ( modPow(modPow, twoExpR, n) == n-1 ) {\n                return true;\n            }\n            twoExpR *= 2;\n        }\n        return false;\n    }\n    \n    private static final long SQRT = (long) Math.sqrt(Long.MAX_VALUE);\n    \n    public static final long modPow(long base, long exponent, long modulus) {\n        long result = 1;\n        while ( exponent > 0 ) {\n            if ( exponent % 2 == 1 ) {\n                if ( result > SQRT || base > SQRT ) {\n                    result = multiply(result, base, modulus);\n                }\n                else {\n                    result = (result * base) % modulus;\n                }\n            }\n            exponent >>= 1;\n            if ( base > SQRT ) {\n                base = multiply(base, base, modulus);\n            }\n            else {\n                base = (base * base) % modulus;\n            }\n        }\n        return result;\n    }\n\n\n    \n    public static final long multiply(long a, long b, long modulus) {\n        long x = 0;\n        long y = a % modulus;\n        long t;\n        while ( b > 0 ) {\n            if ( b % 2 == 1 ) {\n                t = x + y;\n                x = (t > modulus ? t-modulus : t);\n            }\n            t = y << 1;\n            y = (t > modulus ? t-modulus : t);\n            b >>= 1;\n        }\n        return x % modulus;\n    }\n\n}\n", "target": "using System; using static System.Console;\n\nclass Program {\n\n  static bool[] np; \n\n  static void ms(long lmt) { \n    np = new bool[lmt]; np[0] = np[1] = true;\n    for (long n = 2, j = 1; n < lmt; n += j, j = 2) if (!np[n])\n        for (long k = n * n; k < lmt; k += n) np[k] = true; }\n\n  static bool is_Mag(long n) { long res, rem;\n    for (long p = 10; n >= p; p *= 10) {\n      res = Math.DivRem (n, p, out rem);\n      if (np[res + rem]) return false; } return true; }\n\n  static void Main(string[] args) { ms(100_009); string mn;\n    WriteLine(\"First 45{0}\", mn = \" magnanimous numbers:\");\n    for (long l = 0, c = 0; c < 400; l++) if (is_Mag(l)) {\n      if (c++ < 45 || (c > 240 && c <= 250) || c > 390)\n        Write(c <= 45 ? \"{0,4} \" : \"{0,8:n0} \", l);\n      if (c < 45 && c % 15 == 0) WriteLine();\n      if (c == 240) WriteLine (\"\\n\\n241st through 250th{0}\", mn);\n      if (c == 390) WriteLine (\"\\n\\n391st through 400th{0}\", mn); } }\n}\n"}
{"id": 45097, "name": "Create a two-dimensional array at runtime", "source": "Translate Java to C#: import java.util.Scanner;\n\npublic class twoDimArray {\n  public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        \n        int nbr1 = in.nextInt();\n        int nbr2 = in.nextInt();\n        \n        double[][] array = new double[nbr1][nbr2];\n        array[0][0] = 42.0;\n        System.out.println(\"The number at place [0 0] is \" + array[0][0]);\n  }\n}\n", "target": "class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(\"Enter two integers. Space delimited please: \");\n            string s = Console.ReadLine();\n            \n            int[,] myArray=new int[(int)s[0],(int)s[2]];\n            myArray[0, 0] = 2;\n            Console.WriteLine(myArray[0, 0]);\n\n            Console.ReadLine();\n        }\n    }\n"}
