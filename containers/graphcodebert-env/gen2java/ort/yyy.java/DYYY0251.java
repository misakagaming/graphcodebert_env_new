
package gen.ort.yyy;

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
//
//                    Source Code Generated by
//                           CA Gen 8.6
//
//    Copyright (c) 2023 CA Technologies. All rights reserved.
//
//    Name: DYYY0251_CHILD_LIST              Date: 2023/07/05
//    Target OS:   JVM                       Time: 15:09:05
//    Target DBMS: JDBC                      User: HakanBal
//    Access Method: JDBC           
//
//    Generation options:
//    Debug trace option selected
//    Data modeling constraint enforcement not selected
//    Optimized import view initialization not selected
//    Enforce default values with DBMS not selected
//    Init unspecified optional fields to NULL not selected
//
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// Import Statements
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
import java.lang.*;
import java.io.*;
import java.util.*;
import java.math.*;
import java.sql.*;
import com.ca.gen.vwrt.*;
import com.ca.gen.vwrt.types.*;
import com.ca.gen.vwrt.vdf.*;

import com.ca.gen.abrt.*;
import com.ca.gen.abrt.functions.*;
import com.ca.gen.abrt.cascade.*;
import com.ca.gen.abrt.trace.*;
import com.ca.gen.exits.common.*;
import com.ca.gen.odc.*;

public class DYYY0251 extends ABBase
{
  // * * * * * * * * * * * * * * * * * * *
  // ENTITY ACTION STATEMENT STATUS FLAGS 
  // ENTITY VIEW STATUS FLAGS AND         
  // LAST COMMAND FOR EACH ENTITY VIEW    
  // * * * * * * * * * * * * * * * * * * *
  String sl_29360156 = ErrorData.NONE_FL_LS;
  String sl_29360170 = ErrorData.NONE_FL_LS;
  String Child_es;
  String Child_001cd;
  String Child_lk;
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // IMPORT VIEW CLASS VARIABLE
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  DYYY0251_IA w_ia;
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // EXPORT VIEW CLASS VARIABLE
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  DYYY0251_OA w_oa;
  
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // START OF ENTITY ACTION VIEW
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  /**
   * Internal data view storage for: DYYY0251_EA
   **/
  public class DYYY0251_EA extends ViewBase implements IEntityActionView, Serializable
  {
    // Entity View: 
    //        Type: CHILD
    /**
     * Attribute missing flag for: ChildCinstanceId
     **/
    public char ChildCinstanceId_AS;
    /**
     * Attribute for: ChildCinstanceId
     * Domain: Timestamp
     * Length: 20
     **/
    public String ChildCinstanceId;
    /**
     * Attribute missing flag for: ChildCreferenceId
     **/
    public char ChildCreferenceId_AS;
    /**
     * Attribute for: ChildCreferenceId
     * Domain: Timestamp
     * Length: 20
     **/
    public String ChildCreferenceId;
    /**
     * Attribute missing flag for: ChildCcreateUserId
     **/
    public char ChildCcreateUserId_AS;
    /**
     * Attribute for: ChildCcreateUserId
     * Domain: Text
     * Length: 8
     * Varying Length: N
     **/
    public String ChildCcreateUserId;
    /**
     * Attribute missing flag for: ChildCupdateUserId
     **/
    public char ChildCupdateUserId_AS;
    /**
     * Attribute for: ChildCupdateUserId
     * Domain: Text
     * Length: 8
     * Varying Length: N
     **/
    public String ChildCupdateUserId;
    /**
     * Attribute missing flag for: ChildCparentPkeyAttrText
     **/
    public char ChildCparentPkeyAttrText_AS;
    /**
     * Attribute for: ChildCparentPkeyAttrText
     * Domain: Text
     * Length: 5
     * Varying Length: N
     **/
    public String ChildCparentPkeyAttrText;
    /**
     * Attribute missing flag for: ChildCkeyAttrNum
     **/
    public char ChildCkeyAttrNum_AS;
    /**
     * Attribute for: ChildCkeyAttrNum
     * Domain: Number
     * Length: 6
     * Decimal Places: 0
     * Decimal Precision: N
     **/
    public int ChildCkeyAttrNum;
    /**
     * Attribute missing flag for: ChildCsearchAttrText
     **/
    public char ChildCsearchAttrText_AS;
    /**
     * Attribute for: ChildCsearchAttrText
     * Domain: Text
     * Length: 25
     * Varying Length: N
     **/
    public String ChildCsearchAttrText;
    /**
     * Attribute missing flag for: ChildCotherAttrText
     **/
    public char ChildCotherAttrText_AS;
    /**
     * Attribute for: ChildCotherAttrText
     * Domain: Text
     * Length: 25
     * Varying Length: N
     **/
    public String ChildCotherAttrText;
    /**
     * Default Constructor
     **/
    
    public DYYY0251_EA()
    {
      reset();
    }
    /**
     * Copy Constructor
     **/
    
    public DYYY0251_EA(DYYY0251_EA orig)
    {
      ChildCinstanceId_AS = orig.ChildCinstanceId_AS;
      ChildCinstanceId = orig.ChildCinstanceId;
      ChildCreferenceId_AS = orig.ChildCreferenceId_AS;
      ChildCreferenceId = orig.ChildCreferenceId;
      ChildCcreateUserId_AS = orig.ChildCcreateUserId_AS;
      ChildCcreateUserId = orig.ChildCcreateUserId;
      ChildCupdateUserId_AS = orig.ChildCupdateUserId_AS;
      ChildCupdateUserId = orig.ChildCupdateUserId;
      ChildCparentPkeyAttrText_AS = orig.ChildCparentPkeyAttrText_AS;
      ChildCparentPkeyAttrText = orig.ChildCparentPkeyAttrText;
      ChildCkeyAttrNum_AS = orig.ChildCkeyAttrNum_AS;
      ChildCkeyAttrNum = orig.ChildCkeyAttrNum;
      ChildCsearchAttrText_AS = orig.ChildCsearchAttrText_AS;
      ChildCsearchAttrText = orig.ChildCsearchAttrText;
      ChildCotherAttrText_AS = orig.ChildCotherAttrText_AS;
      ChildCotherAttrText = orig.ChildCotherAttrText;
    }
    /**
     * clone constructor
     **/
    
    @Override public Object clone()
    	throws CloneNotSupportedException
    {
      return(new DYYY0251_EA(this));
    }
    /**
     * Resets all properties to the defaults.
     **/
    
    public void reset()
    {
      ChildCinstanceId_AS = ' ';
      ChildCinstanceId = "00000000000000000000";
      ChildCreferenceId_AS = ' ';
      ChildCreferenceId = "00000000000000000000";
      ChildCcreateUserId_AS = ' ';
      ChildCcreateUserId = "        ";
      ChildCupdateUserId_AS = ' ';
      ChildCupdateUserId = "        ";
      ChildCparentPkeyAttrText_AS = ' ';
      ChildCparentPkeyAttrText = "     ";
      ChildCkeyAttrNum_AS = ' ';
      ChildCkeyAttrNum = 0;
      ChildCsearchAttrText_AS = ' ';
      ChildCsearchAttrText = "                         ";
      ChildCotherAttrText_AS = ' ';
      ChildCotherAttrText = "                         ";
    }
  }
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // ENTITY ACTION VIEW CLASS VARIABLE
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  DYYY0251_EA w_ea = new DYYY0251_EA();
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // LOCAL VIEW CLASS VARIABLE
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  DYYY0251_LA w_la;
  
  
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // HOST VARIABLES FOR TABLE: VDVYYYC
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  int ckey_attr_001EF;
  int ckey_attr_002EN;
  String csearch_attr_003EF;
  String csearch_attr_004EN;
  String cother_attr_005EF;
  String cother_attr_006EN;
  String ccreate_userid_007EF;
  String ccreate_userid_008EN;
  String cupdate_userid_009EF;
  String cupdate_userid_010EN;
  java.sql.Timestamp cinstance_id_011EF;
  java.sql.Timestamp cinstance_id_012EN;
  java.sql.Timestamp creference_id_013EF;
  java.sql.Timestamp creference_id_014EN;
  String cparent_pkey_attr_015EF;
  String cparent_pkey_attr_016EN;
  
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // TEMPORARY HOST VARIABLES 
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  String CparentPkeyAttrText_001TP;
  int CkeyAttrNum_002TP;
  String CparentPkeyAttrText_003TP;
  int CkeyAttrNum_004TP;
  String CparentPkeyAttrText_005TP;
  int CkeyAttrNum_006TP;
  String CsearchAttrText_007TP;
  
  
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // REPEATING GROUP VIEW STATUS FIELDS 
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  boolean ExpGroupList_FL_001;
  int ExpGroupList_PS_001;
  boolean ExpGroupList_RF_001;
  public final static int ExpGroupList_MM_001 = 48;
  
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // MISC DECLARATIONS AND PROTOTYPES 
  //    FOLLOW AS NEEDED:             
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  boolean func_0022020318_esc_flag;
  boolean func_0020972777_esc_flag;
  boolean read_each_0068158039_esc_flag;
  PreparedStatement hstmt_0037881828_1;
  ResultSet hstmt_0037881828_1_rs;
  int hstmt_0037881828_1_cnt;
  boolean func_0020972788_esc_flag;
  boolean read_each_0068157665_esc_flag;
  PreparedStatement hstmt_0038075225_1;
  ResultSet hstmt_0038075225_1_rs;
  int hstmt_0038075225_1_cnt;
  boolean func_0020972439_esc_flag;
  boolean func_0020971875_esc_flag;
  boolean func_0020972547_esc_flag;
  boolean func_0020972246_esc_flag;
  boolean func_0020971976_esc_flag;
  boolean func_0020972527_esc_flag;
  PadView padview[] = new PadView [78];
  int trace_ret_code;
  PadText padtext[] = initPadText();
  public PadText [] initPadText()
  {
    PadText [] result = new PadText [PADTEXT_SIZE];
    result[0] = PadText.getInstance(   0,"+->   DYYY0251_CHILD_LIST               07/05/2023  15:09");
    result[1] = PadText.getInstance(   0,"!       IMPORTS:");
    result[2] = PadText.getInstance(   0,"!         Work View imp_error iyy1_component (Transient, Mandatory, Import only)");
    result[3] = PadText.getInstance(   0,"!           severity_code");
    result[4] = PadText.getInstance(   0,"!           rollback_indicator");
    result[5] = PadText.getInstance(   0,"!           origin_servid");
    result[6] = PadText.getInstance(   0,"!           context_string");
    result[7] = PadText.getInstance(   0,"!           return_code");
    result[8] = PadText.getInstance(   0,"!           reason_code");
    result[9] = PadText.getInstance(   0,"!           checksum");
    result[10] = PadText.getInstance(   0,"!         Work View imp_filter iyy1_list (Transient, Mandatory, Import only)");
    result[11] = PadText.getInstance(   0,"!           sort_option");
    result[12] = PadText.getInstance(   0,"!           scroll_type");
    result[13] = PadText.getInstance(   0,"!           list_direction");
    result[14] = PadText.getInstance(   0,"!           scroll_amount");
    result[15] = PadText.getInstance(   0,"!           order_by_field_num");
    result[16] = PadText.getInstance(   0,"!         Entity View imp_from child (Transient, Mandatory, Import only)");
    result[17] = PadText.getInstance(   0,"!           cinstance_id");
    result[18] = PadText.getInstance(   0,"!           cparent_pkey_attr_text");
    result[19] = PadText.getInstance(   0,"!           ckey_attr_num");
    result[20] = PadText.getInstance(   0,"!         Entity View imp_filter_start child (Transient, Mandatory, Import only)");
    result[21] = PadText.getInstance(   0,"!           cparent_pkey_attr_text");
    result[22] = PadText.getInstance(   0,"!           ckey_attr_num");
    result[23] = PadText.getInstance(   0,"!         Entity View imp_filter_stop child (Transient, Mandatory, Import only)");
    result[24] = PadText.getInstance(   0,"!           cparent_pkey_attr_text");
    result[25] = PadText.getInstance(   0,"!           ckey_attr_num");
    result[26] = PadText.getInstance(   0,"!         Entity View imp_filter child (Transient, Mandatory, Import only)");
    result[27] = PadText.getInstance(   0,"!           csearch_attr_text");
    result[28] = PadText.getInstance(   0,"!       EXPORTS:");
    result[29] = PadText.getInstance(   0,"!         Group View (48) exp_group_list");
    result[30] = PadText.getInstance(   0,"!           Entity View exp_g_list child (Transient, Export only)");
    result[31] = PadText.getInstance(   0,"!             cinstance_id");
    result[32] = PadText.getInstance(   0,"!             creference_id");
    result[33] = PadText.getInstance(   0,"!             ccreate_user_id");
    result[34] = PadText.getInstance(   0,"!             cupdate_user_id");
    result[35] = PadText.getInstance(   0,"!             cparent_pkey_attr_text");
    result[36] = PadText.getInstance(   0,"!             ckey_attr_num");
    result[37] = PadText.getInstance(   0,"!             csearch_attr_text");
    result[38] = PadText.getInstance(   0,"!             cother_attr_text");
    result[39] = PadText.getInstance(   0,"!         Work View exp_error iyy1_component (Transient, Export only)");
    result[40] = PadText.getInstance(   0,"!           severity_code");
    result[41] = PadText.getInstance(   0,"!           rollback_indicator");
    result[42] = PadText.getInstance(   0,"!           origin_servid");
    result[43] = PadText.getInstance(   0,"!           context_string");
    result[44] = PadText.getInstance(   0,"!           return_code");
    result[45] = PadText.getInstance(   0,"!           reason_code");
    result[46] = PadText.getInstance(   0,"!           checksum");
    result[47] = PadText.getInstance(   0,"!       ENTITY ACTIONS:");
    result[48] = PadText.getInstance(   0,"!         Entity View child");
    result[49] = PadText.getInstance(   0,"!           cinstance_id");
    result[50] = PadText.getInstance(   0,"!           creference_id");
    result[51] = PadText.getInstance(   0,"!           ccreate_user_id");
    result[52] = PadText.getInstance(   0,"!           cupdate_user_id");
    result[53] = PadText.getInstance(   0,"!           cparent_pkey_attr_text");
    result[54] = PadText.getInstance(   0,"!           ckey_attr_num");
    result[55] = PadText.getInstance(   0,"!           csearch_attr_text");
    result[56] = PadText.getInstance(   0,"!           cother_attr_text");
    result[57] = PadText.getInstance(   0,"!       LOCALS:");
    result[58] = PadText.getInstance(   0,"!         Work View loc_filter iyy1_list");
    result[59] = PadText.getInstance(   0,"!           scroll_type");
    result[60] = PadText.getInstance(   0,"!         Work View loc dont_change_return_codes");
    result[61] = PadText.getInstance(   0,"!           1_ok");
    result[62] = PadText.getInstance(   0,"!         Work View loc dont_change_reason_codes");
    result[63] = PadText.getInstance(   0,"!           1_default");
    result[64] = PadText.getInstance(   0,"!           11_list_full");
    result[65] = PadText.getInstance(   0,"!           12_list_empty");
    result[66] = PadText.getInstance(   0,"!");
    result[67] = PadText.getInstance(   0,"!     PROCEDURE STATEMENTS");
    result[68] = PadText.getInstance(   0,"!");
    result[69] = PadText.getInstance(   1,"!  NOTE: ");
    result[70] = PadText.getInstance(   1,"!  Amaç için açıklamaya bakınız");
    result[71] = PadText.getInstance(   1,"!  ");
    result[72] = PadText.getInstance(   2,"!  NOTE: ");
    result[73] = PadText.getInstance(   2,"!  RELEASE HISTORY");
    result[74] = PadText.getInstance(   2,"!  01_00 23-02-1998 New release");
    result[75] = PadText.getInstance(   2,"!  ");
    result[76] = PadText.getInstance(   3,"!  MOVE imp_error iyy1_component TO exp_error iyy1_component");
    result[77] = PadText.getInstance(   4,"!   ");
    result[78] = PadText.getInstance(   5,"!  NOTE: ");
    result[79] = PadText.getInstance(   5,"!  ****************************************************************");
    result[80] = PadText.getInstance(   5,"!  The used ReturnCode/ReasonCode values");
    result[81] = PadText.getInstance(   5,"!  ");
    result[82] = PadText.getInstance(   6,"!  NOTE: ");
    result[83] = PadText.getInstance(   6,"!  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
    result[84] = PadText.getInstance(   6,"!  Set the return and reason codes below");
    result[85] = PadText.getInstance(   6,"!  ");
    result[86] = PadText.getInstance(   7,"!  SET loc dont_change_return_codes 1_ok TO 1 ");
    result[87] = PadText.getInstance(   8,"!   ");
    result[88] = PadText.getInstance(   9,"!  SET loc dont_change_reason_codes 1_default TO 1 ");
    result[89] = PadText.getInstance(  10,"!  SET loc dont_change_reason_codes 11_list_full TO 11 ");
    result[90] = PadText.getInstance(  11,"!  SET loc dont_change_reason_codes 12_list_empty TO 12 ");
    result[91] = PadText.getInstance(  12,"!   ");
    result[92] = PadText.getInstance(  13,"!  NOTE: ");
    result[93] = PadText.getInstance(  13,"!  ****************************************************************");
    result[94] = PadText.getInstance(  13,"!  ");
    result[95] = PadText.getInstance(  14,"!  SET SUBSCRIPT OF exp_group_list TO 0 ");
    result[96] = PadText.getInstance(  15,"!  SET loc_filter iyy1_list scroll_type TO imp_filter iyy1_list scroll_type ");
    result[97] = PadText.getInstance(  16,"!   ");
    result[98] = PadText.getInstance(  17,"!  +->CASE OF imp_filter iyy1_list sort_option");
    result[99] = PadText.getInstance(  17, 1, "!  +> CASE \"ASC\"");
    result[100] = PadText.getInstance(  18,"!  !  NOTE: ");
    result[101] = PadText.getInstance(  18,
      "!  !  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
    result[102] = PadText.getInstance(  18,
      "!  !  Choose General->Select Clause Isolation Level property as \"Uncommitted / Browse\" and ");
    result[103] = PadText.getInstance(  18,"!  !  DB2 MVS (XDB)->Optimize for N rows property as \"Use the value: 1\".");
    result[104] = PadText.getInstance(  18,"!  !  ");
    result[105] = PadText.getInstance(  19,"!  !  +=>READ EACH (Optimize 1, Isolation UR) child");
    result[106] = PadText.getInstance(  19,"!  !  !        SORTED BY ASCENDING child cparent_pkey_attr_text");
    result[107] = PadText.getInstance(  19,"!  !  !        ");
    result[108] = PadText.getInstance(  19,"!  !  !              AND SORTED BY ASCENDING child ckey_attr_num");
    result[109] = PadText.getInstance(  19,
      "!  !  !        WHERE DESIRED child cparent_pkey_attr_text >= imp_from child cparent_pkey_attr_text  ");
    result[110] = PadText.getInstance(  19,
      "!  !  !              AND  (DESIRED child cparent_pkey_attr_text > imp_from child cparent_pkey_attr_text  ");
    result[111] = PadText.getInstance(  19,
      "!  !  !              OR  (DESIRED child cparent_pkey_attr_text = imp_from child cparent_pkey_attr_text  ");
    result[112] = PadText.getInstance(  19,
      "!  !  !              AND  DESIRED child ckey_attr_num >= imp_from child ckey_attr_num))  ");
    result[113] = PadText.getInstance(  19,
      "!  !  !              AND  (DESIRED child cparent_pkey_attr_text > imp_filter_start child cparent_pkey_attr_text  ");
    result[114] = PadText.getInstance(  19,
      "!  !  !              OR  (DESIRED child cparent_pkey_attr_text = imp_filter_start child cparent_pkey_attr_text  ");
    result[115] = PadText.getInstance(  19,
      "!  !  !              AND  DESIRED child ckey_attr_num >= imp_filter_start child ckey_attr_num))  ");
    result[116] = PadText.getInstance(  19,
      "!  !  !              AND  (DESIRED child cparent_pkey_attr_text < imp_filter_stop child cparent_pkey_attr_text  ");
    result[117] = PadText.getInstance(  19,
      "!  !  !              OR  (DESIRED child cparent_pkey_attr_text = imp_filter_stop child cparent_pkey_attr_text  ");
    result[118] = PadText.getInstance(  19,
      "!  !  !              AND  DESIRED child ckey_attr_num <= imp_filter_stop child ckey_attr_num))  ");
    result[119] = PadText.getInstance(  19,
      "!  !  !              AND  DESIRED child csearch_attr_text IS LIKE imp_filter child csearch_attr_text");
    result[120] = PadText.getInstance(  20,"!  !  !  +->IF SUBSCRIPT OF exp_group_list < imp_filter iyy1_list scroll_amount");
    result[121] = PadText.getInstance(  21,"!  !  !  !  +->IF loc_filter iyy1_list scroll_type = \"S\"");
    result[122] = PadText.getInstance(  22,"!  !  !  !  !  SET loc_filter iyy1_list scroll_type TO SPACES ");
    result[123] = PadText.getInstance(  21, 1, "!  !  !  !  +> ELSE");
    result[124] = PadText.getInstance(  23,"!  !  !  !  !  SET SUBSCRIPT OF exp_group_list TO SUBSCRIPT OF exp_group_list + 1 ");
    result[125] = PadText.getInstance(  24,"!  !  !  !  !  MOVE  child TO exp_g_list child");
    result[126] = PadText.getInstance(  21,"!  !  !  !  +--");
    result[127] = PadText.getInstance(  20, 1, "!  !  !  +> ELSE");
    result[128] = PadText.getInstance(  25,
      "!  !  !  !  SET exp_error iyy1_component reason_code TO loc dont_change_reason_codes 11_list_full ");
    result[129] = PadText.getInstance(  26,"!  ! <------ESCAPE");
    result[130] = PadText.getInstance(  20,"!  !  !  +--");
    result[131] = PadText.getInstance(  19,"!  !  +--");
    result[132] = PadText.getInstance(  17, 2, "!  +> CASE \"DES\"");
    result[133] = PadText.getInstance(  27,"!  !  NOTE: ");
    result[134] = PadText.getInstance(  27,
      "!  !  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
    result[135] = PadText.getInstance(  27,
      "!  !  Choose General->Select Clause Isolation Level property as \"Uncommitted / Browse\" and ");
    result[136] = PadText.getInstance(  27,"!  !  DB2 MVS (XDB)->Optimize for N rows property as \"Use the value: 1\".");
    result[137] = PadText.getInstance(  27,"!  !  ");
    result[138] = PadText.getInstance(  28,"!  !  +=>READ EACH (Optimize 1, Isolation UR) child");
    result[139] = PadText.getInstance(  28,"!  !  !        SORTED BY DESCENDING child cparent_pkey_attr_text");
    result[140] = PadText.getInstance(  28,"!  !  !        ");
    result[141] = PadText.getInstance(  28,"!  !  !              AND SORTED BY DESCENDING child ckey_attr_num");
    result[142] = PadText.getInstance(  28,
      "!  !  !        WHERE DESIRED child cparent_pkey_attr_text <= imp_from child cparent_pkey_attr_text  ");
    result[143] = PadText.getInstance(  28,
      "!  !  !              AND  (DESIRED child cparent_pkey_attr_text < imp_from child cparent_pkey_attr_text  ");
    result[144] = PadText.getInstance(  28,
      "!  !  !              OR  (DESIRED child cparent_pkey_attr_text = imp_from child cparent_pkey_attr_text  ");
    result[145] = PadText.getInstance(  28,
      "!  !  !              AND  DESIRED child ckey_attr_num <= imp_from child ckey_attr_num))  ");
    result[146] = PadText.getInstance(  28,
      "!  !  !              AND  (DESIRED child cparent_pkey_attr_text > imp_filter_start child cparent_pkey_attr_text  ");
    result[147] = PadText.getInstance(  28,
      "!  !  !              OR  (DESIRED child cparent_pkey_attr_text = imp_filter_start child cparent_pkey_attr_text  ");
    result[148] = PadText.getInstance(  28,
      "!  !  !              AND  DESIRED child ckey_attr_num >= imp_filter_start child ckey_attr_num))  ");
    result[149] = PadText.getInstance(  28,
      "!  !  !              AND  (DESIRED child cparent_pkey_attr_text < imp_filter_stop child cparent_pkey_attr_text  ");
    result[150] = PadText.getInstance(  28,
      "!  !  !              OR  (DESIRED child cparent_pkey_attr_text = imp_filter_stop child cparent_pkey_attr_text  ");
    result[151] = PadText.getInstance(  28,
      "!  !  !              AND  DESIRED child ckey_attr_num <= imp_filter_stop child ckey_attr_num))  ");
    result[152] = PadText.getInstance(  28,
      "!  !  !              AND  DESIRED child csearch_attr_text IS LIKE imp_filter child csearch_attr_text");
    result[153] = PadText.getInstance(  29,"!  !  !  +->IF SUBSCRIPT OF exp_group_list < imp_filter iyy1_list scroll_amount");
    result[154] = PadText.getInstance(  30,"!  !  !  !  +->IF loc_filter iyy1_list scroll_type = \"S\"");
    result[155] = PadText.getInstance(  31,"!  !  !  !  !  SET loc_filter iyy1_list scroll_type TO SPACES ");
    result[156] = PadText.getInstance(  30, 1, "!  !  !  !  +> ELSE");
    result[157] = PadText.getInstance(  32,"!  !  !  !  !  SET SUBSCRIPT OF exp_group_list TO SUBSCRIPT OF exp_group_list + 1 ");
    result[158] = PadText.getInstance(  33,"!  !  !  !  !  MOVE  child TO exp_g_list child");
    result[159] = PadText.getInstance(  30,"!  !  !  !  +--");
    result[160] = PadText.getInstance(  29, 1, "!  !  !  +> ELSE");
    result[161] = PadText.getInstance(  34,
      "!  !  !  !  SET exp_error iyy1_component reason_code TO loc dont_change_reason_codes 11_list_full ");
    result[162] = PadText.getInstance(  35,"!  ! <------ESCAPE");
    result[163] = PadText.getInstance(  29,"!  !  !  +--");
    result[164] = PadText.getInstance(  28,"!  !  +--");
    result[165] = PadText.getInstance(  17, 3, "!  +> OTHERWISE");
    result[166] = PadText.getInstance(  17,"!  +--");
    result[167] = PadText.getInstance(  36,"!  +->IF LAST OF exp_group_list <= 0");
    result[168] = PadText.getInstance(  37,
      "!  !  SET exp_error iyy1_component reason_code TO loc dont_change_reason_codes 12_list_empty ");
    result[169] = PadText.getInstance(  36,"!  +--");
    result[170] = PadText.getInstance(   0,"+---");
    result[171] = PadText.getInstance(PadText.LASTLINE,"************************* BOTTOM OF DATA *************************");
    return result;
  }
  final static int PADTEXT_SIZE = 172;
  //       +->   DYYY0251_CHILD_LIST               07/05/2023  15:09
  //       !       IMPORTS:
  //       !         Work View imp_error iyy1_component (Transient, Mandatory, Import only)
  //       !           severity_code
  //       !           rollback_indicator
  //       !           origin_servid
  //       !           context_string
  //       !           return_code
  //       !           reason_code
  //       !           checksum
  //       !         Work View imp_filter iyy1_list (Transient, Mandatory, Import only)
  //       !           sort_option
  //       !           scroll_type
  //       !           list_direction
  //       !           scroll_amount
  //       !           order_by_field_num
  //       !         Entity View imp_from child (Transient, Mandatory, Import only)
  //       !           cinstance_id
  //       !           cparent_pkey_attr_text
  //       !           ckey_attr_num
  //       !         Entity View imp_filter_start child (Transient, Mandatory, Import only)
  //       !           cparent_pkey_attr_text
  //       !           ckey_attr_num
  //       !         Entity View imp_filter_stop child (Transient, Mandatory, Import only)
  //       !           cparent_pkey_attr_text
  //       !           ckey_attr_num
  //       !         Entity View imp_filter child (Transient, Mandatory, Import only)
  //       !           csearch_attr_text
  //       !       EXPORTS:
  //       !         Group View (48) exp_group_list
  //       !           Entity View exp_g_list child (Transient, Export only)
  //       !             cinstance_id
  //       !             creference_id
  //       !             ccreate_user_id
  //       !             cupdate_user_id
  //       !             cparent_pkey_attr_text
  //       !             ckey_attr_num
  //       !             csearch_attr_text
  //       !             cother_attr_text
  //       !         Work View exp_error iyy1_component (Transient, Export only)
  //       !           severity_code
  //       !           rollback_indicator
  //       !           origin_servid
  //       !           context_string
  //       !           return_code
  //       !           reason_code
  //       !           checksum
  //       !       ENTITY ACTIONS:
  //       !         Entity View child
  //       !           cinstance_id
  //       !           creference_id
  //       !           ccreate_user_id
  //       !           cupdate_user_id
  //       !           cparent_pkey_attr_text
  //       !           ckey_attr_num
  //       !           csearch_attr_text
  //       !           cother_attr_text
  //       !       LOCALS:
  //       !         Work View loc_filter iyy1_list
  //       !           scroll_type
  //       !         Work View loc dont_change_return_codes
  //       !           1_ok
  //       !         Work View loc dont_change_reason_codes
  //       !           1_default
  //       !           11_list_full
  //       !           12_list_empty
  //       !
  //       !     PROCEDURE STATEMENTS
  //       !
  //     1 !  NOTE: 
  //     1 !  Amaç için açıklamaya bakınız
  //     1 !  
  //     2 !  NOTE: 
  //     2 !  RELEASE HISTORY
  //     2 !  01_00 23-02-1998 New release
  //     2 !  
  //     3 !  MOVE imp_error iyy1_component TO exp_error iyy1_component
  //     4 !   
  //     5 !  NOTE: 
  //     5 !  ****************************************************************
  //     5 !  The used ReturnCode/ReasonCode values
  //     5 !  
  //     6 !  NOTE: 
  //     6 !  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  //     6 !  Set the return and reason codes below
  //     6 !  
  //     7 !  SET loc dont_change_return_codes 1_ok TO 1 
  //     8 !   
  //     9 !  SET loc dont_change_reason_codes 1_default TO 1 
  //    10 !  SET loc dont_change_reason_codes 11_list_full TO 11 
  //    11 !  SET loc dont_change_reason_codes 12_list_empty TO 12 
  //    12 !   
  //    13 !  NOTE: 
  //    13 !  ****************************************************************
  //    13 !  
  //    14 !  SET SUBSCRIPT OF exp_group_list TO 0 
  //    15 !  SET loc_filter iyy1_list scroll_type TO imp_filter iyy1_list scroll_type 
  //    16 !   
  //    17 !  +->CASE OF imp_filter iyy1_list sort_option
  //    17 !  +> CASE "ASC"
  //    18 !  !  NOTE: 
  //    18 !  !  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  //    18 !  !  Choose General->Select Clause Isolation Level property as "Uncommitted / Browse" and 
  //    18 !  !  DB2 MVS (XDB)->Optimize for N rows property as "Use the value: 1".
  //    18 !  !  
  //    19 !  !  +=>READ EACH (Optimize 1, Isolation UR) child
  //    19 !  !  !        SORTED BY ASCENDING child cparent_pkey_attr_text
  //    19 !  !  !        
  //    19 !  !  !              AND SORTED BY ASCENDING child ckey_attr_num
  //    19 !  !  !        WHERE DESIRED child cparent_pkey_attr_text >= imp_from child cparent_pkey_attr_text  
  //    19 !  !  !              AND  (DESIRED child cparent_pkey_attr_text > imp_from child cparent_pkey_attr_text  
  //    19 !  !  !              OR  (DESIRED child cparent_pkey_attr_text = imp_from child cparent_pkey_attr_text  
  //    19 !  !  !              AND  DESIRED child ckey_attr_num >= imp_from child ckey_attr_num))  
  //    19 !  !  !              AND  (DESIRED child cparent_pkey_attr_text > imp_filter_start child cparent_pkey_attr_text  
  //    19 !  !  !              OR  (DESIRED child cparent_pkey_attr_text = imp_filter_start child cparent_pkey_attr_text  
  //    19 !  !  !              AND  DESIRED child ckey_attr_num >= imp_filter_start child ckey_attr_num))  
  //    19 !  !  !              AND  (DESIRED child cparent_pkey_attr_text < imp_filter_stop child cparent_pkey_attr_text  
  //    19 !  !  !              OR  (DESIRED child cparent_pkey_attr_text = imp_filter_stop child cparent_pkey_attr_text  
  //    19 !  !  !              AND  DESIRED child ckey_attr_num <= imp_filter_stop child ckey_attr_num))  
  //    19 !  !  !              AND  DESIRED child csearch_attr_text IS LIKE imp_filter child csearch_attr_text
  //    20 !  !  !  +->IF SUBSCRIPT OF exp_group_list < imp_filter iyy1_list scroll_amount
  //    21 !  !  !  !  +->IF loc_filter iyy1_list scroll_type = "S"
  //    22 !  !  !  !  !  SET loc_filter iyy1_list scroll_type TO SPACES 
  //    21 !  !  !  !  +> ELSE
  //    23 !  !  !  !  !  SET SUBSCRIPT OF exp_group_list TO SUBSCRIPT OF exp_group_list + 1 
  //    24 !  !  !  !  !  MOVE  child TO exp_g_list child
  //    21 !  !  !  !  +--
  //    20 !  !  !  +> ELSE
  //    25 !  !  !  !  SET exp_error iyy1_component reason_code TO loc dont_change_reason_codes 11_list_full 
  //    26 !  ! <------ESCAPE
  //    20 !  !  !  +--
  //    19 !  !  +--
  //    17 !  +> CASE "DES"
  //    27 !  !  NOTE: 
  //    27 !  !  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  //    27 !  !  Choose General->Select Clause Isolation Level property as "Uncommitted / Browse" and 
  //    27 !  !  DB2 MVS (XDB)->Optimize for N rows property as "Use the value: 1".
  //    27 !  !  
  //    28 !  !  +=>READ EACH (Optimize 1, Isolation UR) child
  //    28 !  !  !        SORTED BY DESCENDING child cparent_pkey_attr_text
  //    28 !  !  !        
  //    28 !  !  !              AND SORTED BY DESCENDING child ckey_attr_num
  //    28 !  !  !        WHERE DESIRED child cparent_pkey_attr_text <= imp_from child cparent_pkey_attr_text  
  //    28 !  !  !              AND  (DESIRED child cparent_pkey_attr_text < imp_from child cparent_pkey_attr_text  
  //    28 !  !  !              OR  (DESIRED child cparent_pkey_attr_text = imp_from child cparent_pkey_attr_text  
  //    28 !  !  !              AND  DESIRED child ckey_attr_num <= imp_from child ckey_attr_num))  
  //    28 !  !  !              AND  (DESIRED child cparent_pkey_attr_text > imp_filter_start child cparent_pkey_attr_text  
  //    28 !  !  !              OR  (DESIRED child cparent_pkey_attr_text = imp_filter_start child cparent_pkey_attr_text  
  //    28 !  !  !              AND  DESIRED child ckey_attr_num >= imp_filter_start child ckey_attr_num))  
  //    28 !  !  !              AND  (DESIRED child cparent_pkey_attr_text < imp_filter_stop child cparent_pkey_attr_text  
  //    28 !  !  !              OR  (DESIRED child cparent_pkey_attr_text = imp_filter_stop child cparent_pkey_attr_text  
  //    28 !  !  !              AND  DESIRED child ckey_attr_num <= imp_filter_stop child ckey_attr_num))  
  //    28 !  !  !              AND  DESIRED child csearch_attr_text IS LIKE imp_filter child csearch_attr_text
  //    29 !  !  !  +->IF SUBSCRIPT OF exp_group_list < imp_filter iyy1_list scroll_amount
  //    30 !  !  !  !  +->IF loc_filter iyy1_list scroll_type = "S"
  //    31 !  !  !  !  !  SET loc_filter iyy1_list scroll_type TO SPACES 
  //    30 !  !  !  !  +> ELSE
  //    32 !  !  !  !  !  SET SUBSCRIPT OF exp_group_list TO SUBSCRIPT OF exp_group_list + 1 
  //    33 !  !  !  !  !  MOVE  child TO exp_g_list child
  //    30 !  !  !  !  +--
  //    29 !  !  !  +> ELSE
  //    34 !  !  !  !  SET exp_error iyy1_component reason_code TO loc dont_change_reason_codes 11_list_full 
  //    35 !  ! <------ESCAPE
  //    29 !  !  !  +--
  //    28 !  !  +--
  //    17 !  +> OTHERWISE
  //    17 !  +--
  //    36 !  +->IF LAST OF exp_group_list <= 0
  //    37 !  !  SET exp_error iyy1_component reason_code TO loc dont_change_reason_codes 12_list_empty 
  //    36 !  +--
  //       +---
  
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  //  CONSTRUCTOR FOR THE CLASS       
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  public DYYY0251()
  {
    iefCGenRlse = "CA Gen 8.6";
    ssCopyright = "Copyright (c) 2023 CA Technologies. All rights reserved.";
    iefCGenDate = "2023/07/05";
    iefCGenTime = "15:09:05";
    iefCGenEncy = "9.2.A6";
    iefCGenUserId = "HakanBal";
    iefCGenModel = "N8I_ORT_YYY_0112_TEMPLATE";
    iefCGenSubset = "ALL";
    iefCGenName = "DYYY0251_CHILD_LIST";
    nestingLevel = 0;
    valChkDeadlockTimeout = false;
    valChkDBError = false;
  }
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // ACTION BLOCK FUNCTION DECLARATIONS 
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  
  public void DYYY0251( Object in_runtime_parm1, 
  	IRuntimePStepContext in_runtime_parm2, 
  	GlobData in_globdata, 
  	DYYY0251_IA import_view, 
  	DYYY0251_OA export_view )
  {
    iefRuntimeParm1 = in_runtime_parm1;
    iefRuntimeParm2 = in_runtime_parm2;
    globdata = in_globdata;
    w_ia = import_view;
    w_oa = export_view;
    _DYYY0251();
  }
  
  private void _DYYY0251()
  {
    
    f_22020318_localAlloc("DYYY0251_CHILD_LIST");
    if ( globdata.getErrorData().getLastStatus() == ErrorData.IEF_ALLOCATION_ERROR_FL_LS )
    	return;
    
    ++(nestingLevel);
    try {
      f_22020318_init();
      f_22020318();
    } catch( ABException e ) {
    } finally {
      --(nestingLevel);
    }
    String last_stmt_num_saved = globdata.getStateData().getLastStatementNumber();
    globdata.getStateData().setLastStatementNumber( "9999999999" );
    try {
      f_0_trace();
    } catch( ABException e ) {
    }
    globdata.getStateData().setLastStatementNumber( last_stmt_num_saved );
  }
  public void f_22020318()
  	throws ABException
  {
    func_0022020318_esc_flag = false;
    globdata.getStateData().setCurrentABId( "0022020318" );
    globdata.getStateData().setCurrentABName( "DYYY0251_CHILD_LIST" );
    padview_init();
    globdata.getStateData().setLastStatementNumber( "0000000000" );
    f_0_trace();
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    //    Amaç için açıklamaya bakınız                                    
    //                                                                    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    //    RELEASE HISTORY                                                 
    //    01_00 23-02-1998 New release                                    
    //                                                                    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    globdata.getStateData().setLastStatementNumber( "0000000003" );
    f_0_trace();
    if ( trace_ret_code != 8 )
    {
      w_oa.ExpErrorIyy1ComponentSeverityCode = FixedStringAttr.valueOf(w_ia.ImpErrorIyy1ComponentSeverityCode, (short)1);
      w_oa.ExpErrorIyy1ComponentRollbackIndicator = FixedStringAttr.valueOf(w_ia.ImpErrorIyy1ComponentRollbackIndicator, (short)1);
      w_oa.ExpErrorIyy1ComponentOriginServid = DoubleAttr.valueOf(w_ia.ImpErrorIyy1ComponentOriginServid);
      w_oa.ExpErrorIyy1ComponentContextString = StringAttr.valueOf(w_ia.ImpErrorIyy1ComponentContextString, (short)512);
      w_oa.ExpErrorIyy1ComponentReturnCode = IntAttr.valueOf(w_ia.ImpErrorIyy1ComponentReturnCode);
      w_oa.ExpErrorIyy1ComponentReasonCode = IntAttr.valueOf(w_ia.ImpErrorIyy1ComponentReasonCode);
      w_oa.ExpErrorIyy1ComponentChecksum = FixedStringAttr.valueOf(w_ia.ImpErrorIyy1ComponentChecksum, (short)15);
    }
    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    //    **************************************************************  
    //    **                                                              
    //    The used ReturnCode/ReasonCode values                           
    //                                                                    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    //    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  
    //    !!                                                              
    //    Set the return and reason codes below                           
    //                                                                    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    globdata.getStateData().setLastStatementNumber( "0000000007" );
    f_0_trace();
    if ( trace_ret_code != 8 )
    {
      w_la.LocDontChangeReturnCodesQ1Ok = IntAttr.valueOf((int)TIRD2DEC.TIRD2DC1(1, 0, TIRD2DEC.ROUND_NONE, 5));
    }
    
    globdata.getStateData().setLastStatementNumber( "0000000009" );
    f_0_trace();
    if ( trace_ret_code != 8 )
    {
      w_la.LocDontChangeReasonCodesQ1Default = IntAttr.valueOf((int)TIRD2DEC.TIRD2DC1(1, 0, TIRD2DEC.ROUND_NONE, 5));
    }
    globdata.getStateData().setLastStatementNumber( "0000000010" );
    f_0_trace();
    if ( trace_ret_code != 8 )
    {
      w_la.LocDontChangeReasonCodesQ11ListFull = IntAttr.valueOf((int)TIRD2DEC.TIRD2DC1(11, 0, TIRD2DEC.ROUND_NONE, 5));
    }
    globdata.getStateData().setLastStatementNumber( "0000000011" );
    f_0_trace();
    if ( trace_ret_code != 8 )
    {
      w_la.LocDontChangeReasonCodesQ12ListEmpty = IntAttr.valueOf((int)TIRD2DEC.TIRD2DC1(12, 0, TIRD2DEC.ROUND_NONE, 5));
    }
    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    //    **************************************************************  
    //    **                                                              
    //                                                                    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    globdata.getStateData().setLastStatementNumber( "0000000014" );
    f_0_trace();
    if ( trace_ret_code != 8 )
    {
      ExpGroupList_PS_001 = (int)TIRD2DEC.TIRD2DC1(0, 0, TIRD2DEC.ROUND_NONE, 0);
      if ( (ExpGroupList_PS_001 > w_oa.ExpGroupList_MA) && (ExpGroupList_PS_001 <= 48) )
      w_oa.ExpGroupList_MA = IntAttr.valueOf(ExpGroupList_PS_001);
    }
    globdata.getStateData().setLastStatementNumber( "0000000015" );
    f_0_trace();
    if ( trace_ret_code != 8 )
    {
      w_la.LocFilterIyy1ListScrollType = FixedStringAttr.valueOf(w_ia.ImpFilterIyy1ListScrollType, (short)1);
    }
    
    globdata.getStateData().setLastStatementNumber( "0000000017" );
    f_0_trace();
    if ( trace_ret_code != 8 )
    {
      if ( CompareExit.compareTo(w_ia.ImpFilterIyy1ListSortOption, "ASC") == 0 )
      {
        globdata.getStateData().setLastSubStatementNumber( "1" );
        f_0_trace();
        {
          f_20972777();
        }
      }
      else if ( CompareExit.compareTo(w_ia.ImpFilterIyy1ListSortOption, "DES") == 0 )
      {
        globdata.getStateData().setLastSubStatementNumber( "2" );
        f_0_trace();
        {
          f_20972788();
        }
      }
      else {
        globdata.getStateData().setLastSubStatementNumber( "3" );
        f_0_trace();
        {
          // Empty statement here.
          ;
        }
      }
    }
    globdata.getStateData().setLastStatementNumber( "0000000036" );
    f_0_trace();
    if ( trace_ret_code != 8 )
    {
      if ( ((double)w_oa.ExpGroupList_MA <= 0) )
      {
        globdata.getStateData().setLastStatementNumber( "0000000037" );
        f_0_trace();
        if ( trace_ret_code != 8 )
        {
          w_oa.ExpErrorIyy1ComponentReasonCode = IntAttr.valueOf((int)TIRD2DEC.TIRD2DC1((double) 
            w_la.LocDontChangeReasonCodesQ12ListEmpty, 0, TIRD2DEC.ROUND_NONE, 5));
        }
      }
      
    }
  }
  
  
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // SUBORDINATE FUNCTIONS
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  
  
  public void f_20972777()
  	throws ABException
  {
    func_0020972777_esc_flag = false;
    f_0020972777_esctag: 
    {
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  
      //    !!!!!!!!!!!!!!!!!!!!!                                           
      //    Choose General->Select Clause Isolation Level property as       
      //    "Uncommitted / Browse" and                                      
      //    DB2 MVS (XDB)->Optimize for N rows property as                  
      //    "Use the value: 1".                                             
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      sl_29360156 = ErrorData.NOT_FOUND_FL_LS;
      globdata.getStateData().setLastStatementNumber( "0000000019" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        read_each_0068158039_esc_flag = false;
        f_29360156_open();
        if ( sl_29360156.equals( ErrorData.SUCCEEDS_FL_LS ) )
        {
          f_29360156_fetch();
          while ((sl_29360156.equals( ErrorData.SUCCEEDS_FL_LS ) == true) && (read_each_0068158039_esc_flag != true))
          {
            {
              f_20972439();
            }
            globdata.getStateData().setLastStatementNumber( "0000000019" );
            if ( read_each_0068158039_esc_flag != true )
            f_29360156_fetch();
          }
          if ( read_each_0068158039_esc_flag != true )
          {
            if ( !((sl_29360156.equals( ErrorData.SUCCEEDS_FL_LS ) == false) && (sl_29360156.equals( ErrorData.NOT_FOUND_FL_LS ) == 
              false)) )
            {
              f_29360156_esc_close();
            }
            f_29360156_close();
          }
        }
        if ( (sl_29360156.equals( ErrorData.SUCCEEDS_FL_LS ) == false) && (sl_29360156.equals( ErrorData.NOT_FOUND_FL_LS ) == false) 
          )
        {
          globdata.getErrorData().setStatus( ErrorData.FATAL_ERROR_FL_LS );
          globdata.getErrorData().setLastStatus( sl_29360156 );
          globdata.getErrorData().setErrorEncounteredSW( ErrorData.ERROR_FOUND_SW );
          throw new ABException();
        }
      }
    }
  }
  
  public void f_20972788()
  	throws ABException
  {
    func_0020972788_esc_flag = false;
    f_0020972788_esctag: 
    {
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  
      //    !!!!!!!!!!!!!!!!!!!!!                                           
      //    Choose General->Select Clause Isolation Level property as       
      //    "Uncommitted / Browse" and                                      
      //    DB2 MVS (XDB)->Optimize for N rows property as                  
      //    "Use the value: 1".                                             
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      sl_29360170 = ErrorData.NOT_FOUND_FL_LS;
      globdata.getStateData().setLastStatementNumber( "0000000028" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        read_each_0068157665_esc_flag = false;
        f_29360170_open();
        if ( sl_29360170.equals( ErrorData.SUCCEEDS_FL_LS ) )
        {
          f_29360170_fetch();
          while ((sl_29360170.equals( ErrorData.SUCCEEDS_FL_LS ) == true) && (read_each_0068157665_esc_flag != true))
          {
            {
              f_20971875();
            }
            globdata.getStateData().setLastStatementNumber( "0000000028" );
            if ( read_each_0068157665_esc_flag != true )
            f_29360170_fetch();
          }
          if ( read_each_0068157665_esc_flag != true )
          {
            if ( !((sl_29360170.equals( ErrorData.SUCCEEDS_FL_LS ) == false) && (sl_29360170.equals( ErrorData.NOT_FOUND_FL_LS ) == 
              false)) )
            {
              f_29360170_esc_close();
            }
            f_29360170_close();
          }
        }
        if ( (sl_29360170.equals( ErrorData.SUCCEEDS_FL_LS ) == false) && (sl_29360170.equals( ErrorData.NOT_FOUND_FL_LS ) == false) 
          )
        {
          globdata.getErrorData().setStatus( ErrorData.FATAL_ERROR_FL_LS );
          globdata.getErrorData().setLastStatus( sl_29360170 );
          globdata.getErrorData().setErrorEncounteredSW( ErrorData.ERROR_FOUND_SW );
          throw new ABException();
        }
      }
    }
  }
  
  public void f_20972439()
  	throws ABException
  {
    func_0020972439_esc_flag = false;
    f_0020972439_esctag: 
    {
      globdata.getStateData().setLastStatementNumber( "0000000020" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        if ( (ExpGroupList_PS_001 < (double) w_ia.ImpFilterIyy1ListScrollAmount) )
        {
          f_20972547();
        }
        else 
        {
          globdata.getStateData().setLastSubStatementNumber( "1" );
          f_0_trace();
          {
            f_20972246();
          }
        }
        
      }
    }
  }
  
  public void f_20971875()
  	throws ABException
  {
    func_0020971875_esc_flag = false;
    f_0020971875_esctag: 
    {
      globdata.getStateData().setLastStatementNumber( "0000000029" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        if ( (ExpGroupList_PS_001 < (double) w_ia.ImpFilterIyy1ListScrollAmount) )
        {
          f_20971976();
        }
        else 
        {
          globdata.getStateData().setLastSubStatementNumber( "1" );
          f_0_trace();
          {
            f_20972527();
          }
        }
        
      }
    }
  }
  
  public void f_20972547()
  	throws ABException
  {
    func_0020972547_esc_flag = false;
    globdata.getStateData().setLastStatementNumber( "0000000021" );
    f_0_trace();
    if ( trace_ret_code != 8 )
    {
      if ( CompareExit.compareTo(w_la.LocFilterIyy1ListScrollType, "S") == 0 )
      {
        globdata.getStateData().setLastStatementNumber( "0000000022" );
        f_0_trace();
        if ( trace_ret_code != 8 )
        {
          w_la.LocFilterIyy1ListScrollType = FixedStringAttr.valueOf(SPACES, (short)1);
        }
      }
      else 
      {
        globdata.getStateData().setLastSubStatementNumber( "1" );
        f_0_trace();
        {
          globdata.getStateData().setLastStatementNumber( "0000000023" );
          f_0_trace();
          if ( trace_ret_code != 8 )
          {
            ExpGroupList_PS_001 = (int)TIRD2DEC.TIRD2DC1(((double)ExpGroupList_PS_001 + 1), 0, TIRD2DEC.ROUND_NONE, 0);
            if ( (ExpGroupList_PS_001 > w_oa.ExpGroupList_MA) && (ExpGroupList_PS_001 <= 48) )
            w_oa.ExpGroupList_MA = IntAttr.valueOf(ExpGroupList_PS_001);
          }
          globdata.getStateData().setLastStatementNumber( "0000000024" );
          f_0_trace();
          if ( trace_ret_code != 8 )
          {
            f_173015114_rgvc();
            w_oa.ExpGListChildCinstanceId[ExpGroupList_PS_001-1] = TimestampAttr.valueOf(w_ea.ChildCinstanceId);
            w_oa.ExpGListChildCreferenceId[ExpGroupList_PS_001-1] = TimestampAttr.valueOf(w_ea.ChildCreferenceId);
            w_oa.ExpGListChildCcreateUserId[ExpGroupList_PS_001-1] = FixedStringAttr.valueOf(w_ea.ChildCcreateUserId, (short)8);
            w_oa.ExpGListChildCupdateUserId[ExpGroupList_PS_001-1] = FixedStringAttr.valueOf(w_ea.ChildCupdateUserId, (short)8);
            w_oa.ExpGListChildCparentPkeyAttrText[ExpGroupList_PS_001-1] = FixedStringAttr.valueOf(w_ea.ChildCparentPkeyAttrText, (
              short)5);
            w_oa.ExpGListChildCkeyAttrNum[ExpGroupList_PS_001-1] = IntAttr.valueOf(w_ea.ChildCkeyAttrNum);
            w_oa.ExpGListChildCsearchAttrText[ExpGroupList_PS_001-1] = FixedStringAttr.valueOf(w_ea.ChildCsearchAttrText, (short)25)
              ;
            w_oa.ExpGListChildCotherAttrText[ExpGroupList_PS_001-1] = FixedStringAttr.valueOf(w_ea.ChildCotherAttrText, (short)25);
          }
        }
      }
      
    }
  }
  
  public void f_20972246()
  	throws ABException
  {
    func_0020972246_esc_flag = false;
    f_0020972246_esctag: 
    {
      globdata.getStateData().setLastStatementNumber( "0000000025" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        w_oa.ExpErrorIyy1ComponentReasonCode = IntAttr.valueOf((int)TIRD2DEC.TIRD2DC1((double) 
          w_la.LocDontChangeReasonCodesQ11ListFull, 0, TIRD2DEC.ROUND_NONE, 5));
      }
      globdata.getStateData().setLastStatementNumber( "0000000026" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        func_0020972246_esc_flag = true;
        func_0020972439_esc_flag = true;
        f_29360156_esc_close();
        read_each_0068158039_esc_flag = true;
      }
    }
  }
  
  public void f_20971976()
  	throws ABException
  {
    func_0020971976_esc_flag = false;
    globdata.getStateData().setLastStatementNumber( "0000000030" );
    f_0_trace();
    if ( trace_ret_code != 8 )
    {
      if ( CompareExit.compareTo(w_la.LocFilterIyy1ListScrollType, "S") == 0 )
      {
        globdata.getStateData().setLastStatementNumber( "0000000031" );
        f_0_trace();
        if ( trace_ret_code != 8 )
        {
          w_la.LocFilterIyy1ListScrollType = FixedStringAttr.valueOf(SPACES, (short)1);
        }
      }
      else 
      {
        globdata.getStateData().setLastSubStatementNumber( "1" );
        f_0_trace();
        {
          globdata.getStateData().setLastStatementNumber( "0000000032" );
          f_0_trace();
          if ( trace_ret_code != 8 )
          {
            ExpGroupList_PS_001 = (int)TIRD2DEC.TIRD2DC1(((double)ExpGroupList_PS_001 + 1), 0, TIRD2DEC.ROUND_NONE, 0);
            if ( (ExpGroupList_PS_001 > w_oa.ExpGroupList_MA) && (ExpGroupList_PS_001 <= 48) )
            w_oa.ExpGroupList_MA = IntAttr.valueOf(ExpGroupList_PS_001);
          }
          globdata.getStateData().setLastStatementNumber( "0000000033" );
          f_0_trace();
          if ( trace_ret_code != 8 )
          {
            f_173015114_rgvc();
            w_oa.ExpGListChildCinstanceId[ExpGroupList_PS_001-1] = TimestampAttr.valueOf(w_ea.ChildCinstanceId);
            w_oa.ExpGListChildCreferenceId[ExpGroupList_PS_001-1] = TimestampAttr.valueOf(w_ea.ChildCreferenceId);
            w_oa.ExpGListChildCcreateUserId[ExpGroupList_PS_001-1] = FixedStringAttr.valueOf(w_ea.ChildCcreateUserId, (short)8);
            w_oa.ExpGListChildCupdateUserId[ExpGroupList_PS_001-1] = FixedStringAttr.valueOf(w_ea.ChildCupdateUserId, (short)8);
            w_oa.ExpGListChildCparentPkeyAttrText[ExpGroupList_PS_001-1] = FixedStringAttr.valueOf(w_ea.ChildCparentPkeyAttrText, (
              short)5);
            w_oa.ExpGListChildCkeyAttrNum[ExpGroupList_PS_001-1] = IntAttr.valueOf(w_ea.ChildCkeyAttrNum);
            w_oa.ExpGListChildCsearchAttrText[ExpGroupList_PS_001-1] = FixedStringAttr.valueOf(w_ea.ChildCsearchAttrText, (short)25)
              ;
            w_oa.ExpGListChildCotherAttrText[ExpGroupList_PS_001-1] = FixedStringAttr.valueOf(w_ea.ChildCotherAttrText, (short)25);
          }
        }
      }
      
    }
  }
  
  public void f_20972527()
  	throws ABException
  {
    func_0020972527_esc_flag = false;
    f_0020972527_esctag: 
    {
      globdata.getStateData().setLastStatementNumber( "0000000034" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        w_oa.ExpErrorIyy1ComponentReasonCode = IntAttr.valueOf((int)TIRD2DEC.TIRD2DC1((double) 
          w_la.LocDontChangeReasonCodesQ11ListFull, 0, TIRD2DEC.ROUND_NONE, 5));
      }
      globdata.getStateData().setLastStatementNumber( "0000000035" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        func_0020972527_esc_flag = true;
        func_0020971875_esc_flag = true;
        f_29360170_esc_close();
        read_each_0068157665_esc_flag = true;
      }
    }
  }
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // INITIALIZATION UTILITY FUNCTIONS 
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  
  public void f_22020318_localAlloc(String abname)
  {
    // Request localview allocation 
    w_la = (gen.ort.yyy.DYYY0251_LA)(iefRuntimeParm2.getInstance("gen.ort.yyy.DYYY0251_LA"));
    if ( w_la == null )
    {
      globdata.getStateData().setCurrentABId( "0022020318" );
      globdata.getStateData().setCurrentABName( abname );
      globdata.getErrorData().setErrorEncounteredSW( ErrorData.ERROR_FOUND_SW );
      globdata.getErrorData().setLastStatus( ErrorData.IEF_ALLOCATION_ERROR_FL_LS );
    }
  }
  
  public void f_22020318_init()
  	throws ABException
  {
    
    ckey_attr_001EF = 0;
    ckey_attr_002EN = 0;
    csearch_attr_003EF = SPACES;
    csearch_attr_004EN = SPACES;
    cother_attr_005EF = SPACES;
    cother_attr_006EN = SPACES;
    ccreate_userid_007EF = SPACES;
    ccreate_userid_008EN = SPACES;
    cupdate_userid_009EF = SPACES;
    cupdate_userid_010EN = SPACES;
    cinstance_id_011EF = TIRVW2S.TIRVW2S(globdata, "IEFDB", "00010101000000000000");
    cinstance_id_012EN = TIRVW2S.TIRVW2S(globdata, "IEFDB", "00010101000000000000");
    creference_id_013EF = TIRVW2S.TIRVW2S(globdata, "IEFDB", "00010101000000000000");
    creference_id_014EN = TIRVW2S.TIRVW2S(globdata, "IEFDB", "00010101000000000000");
    cparent_pkey_attr_015EF = SPACES;
    cparent_pkey_attr_016EN = SPACES;
    if ( nestingLevel < 2 )
    {
      w_la.reset();
    }
    w_ea.reset();
    w_oa.ExpGroupList_MA = 0;
    for(ExpGroupList_PS_001 = 1; ExpGroupList_PS_001 <= 48; ++(ExpGroupList_PS_001))
    {
      w_oa.ExpGListChildCinstanceId[ExpGroupList_PS_001-1] = "00000000000000000000";
      w_oa.ExpGListChildCreferenceId[ExpGroupList_PS_001-1] = "00000000000000000000";
      w_oa.ExpGListChildCcreateUserId[ExpGroupList_PS_001-1] = "        ";
      w_oa.ExpGListChildCupdateUserId[ExpGroupList_PS_001-1] = "        ";
      w_oa.ExpGListChildCparentPkeyAttrText[ExpGroupList_PS_001-1] = "     ";
      w_oa.ExpGListChildCkeyAttrNum[ExpGroupList_PS_001-1] = 0;
      w_oa.ExpGListChildCsearchAttrText[ExpGroupList_PS_001-1] = "                         ";
      w_oa.ExpGListChildCotherAttrText[ExpGroupList_PS_001-1] = "                         ";
    }
    w_oa.ExpErrorIyy1ComponentSeverityCode = " ";
    w_oa.ExpErrorIyy1ComponentRollbackIndicator = " ";
    w_oa.ExpErrorIyy1ComponentOriginServid = 0.0;
    w_oa.ExpErrorIyy1ComponentContextString = "";
    w_oa.ExpErrorIyy1ComponentReturnCode = 0;
    w_oa.ExpErrorIyy1ComponentReasonCode = 0;
    w_oa.ExpErrorIyy1ComponentChecksum = "               ";
    Child_es = ABBase.EV_UNUSABLE;
    Child_lk = ABBase.EVW_UNLOCKED;
    w_ea.ChildCinstanceId = "00000000000000000000";
    w_ea.ChildCreferenceId = "00000000000000000000";
    ExpGroupList_PS_001 = 1;
  }
  
  public void f_0_trace()
  	throws ABException
  {
    trace_ret_code = TIRTRCE.TIRTRCE(iefRuntimeParm1, iefRuntimeParm2, globdata, padtext, padview);
    if ( trace_ret_code == 20 )
    {
      throw new ABException();
    }
  }
  
  public void padview_init()
  {
padview[0] = PadView.getInstance("IMPORT                          ", 0, 0, 0, (short)1, PadView.VT_BASE, PadView.DT_NONE, w_ia, 
      "w_ia");
    padview[1] = PadView.getInstance("IMP_ERROR                       ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_ia, 
      null);
    padview[2] = PadView.getInstance("IYY1_COMPONENT                  ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, w_ia,
       null);
    padview[3] = PadView.getInstance("SEVERITY_CODE                   ", 1, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_ia, "ImpErrorIyy1ComponentSeverityCode");
    padview[4] = PadView.getInstance("ROLLBACK_INDICATOR              ", 1, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_ia, "ImpErrorIyy1ComponentRollbackIndicator");
    padview[5] = PadView.getInstance("ORIGIN_SERVID                   ", 15, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_ia, "ImpErrorIyy1ComponentOriginServid");
    padview[6] = PadView.getInstance("CONTEXT_STRING                  ", 512, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_VARCHAR, w_ia, "ImpErrorIyy1ComponentContextString");
    padview[7] = PadView.getInstance("RETURN_CODE                     ", 5, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_NUMERIC,
       w_ia, "ImpErrorIyy1ComponentReturnCode");
    padview[8] = PadView.getInstance("REASON_CODE                     ", 5, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_NUMERIC,
       w_ia, "ImpErrorIyy1ComponentReasonCode");
    padview[9] = PadView.getInstance("CHECKSUM                        ", 15, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_ia, "ImpErrorIyy1ComponentChecksum");
    padview[10] = PadView.getInstance("IMP_FILTER                      ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_ia, 
      null);
    padview[11] = PadView.getInstance("IYY1_LIST                       ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_ia, null);
    padview[12] = PadView.getInstance("SORT_OPTION                     ", 3, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_ia, "ImpFilterIyy1ListSortOption");
    padview[13] = PadView.getInstance("SCROLL_TYPE                     ", 1, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_ia, "ImpFilterIyy1ListScrollType");
    padview[14] = PadView.getInstance("LIST_DIRECTION                  ", 1, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_ia, "ImpFilterIyy1ListListDirection");
    padview[15] = PadView.getInstance("SCROLL_AMOUNT                   ", 5, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_ia, "ImpFilterIyy1ListScrollAmount");
    padview[16] = PadView.getInstance("ORDER_BY_FIELD_NUM              ", 1, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_ia, "ImpFilterIyy1ListOrderByFieldNum");
    padview[17] = PadView.getInstance("IMP_FROM                        ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_ia, 
      null);
    padview[18] = PadView.getInstance("CHILD                           ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_ia, null);
    padview[19] = PadView.getInstance("CINSTANCE_ID                    ", 20, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_TIMESTAMP, w_ia, "ImpFromChildCinstanceId");
    padview[20] = PadView.getInstance("CPARENT_PKEY_ATTR_TEXT          ", 5, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_ia, "ImpFromChildCparentPkeyAttrText");
    padview[21] = PadView.getInstance("CKEY_ATTR_NUM                   ", 6, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_ia, "ImpFromChildCkeyAttrNum");
    padview[22] = PadView.getInstance("IMP_FILTER_START                ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_ia, 
      null);
    padview[23] = PadView.getInstance("CHILD                           ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_ia, null);
    padview[24] = PadView.getInstance("CPARENT_PKEY_ATTR_TEXT          ", 5, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_ia, "ImpFilterStartChildCparentPkeyAttrText");
    padview[25] = PadView.getInstance("CKEY_ATTR_NUM                   ", 6, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_ia, "ImpFilterStartChildCkeyAttrNum");
    padview[26] = PadView.getInstance("IMP_FILTER_STOP                 ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_ia, 
      null);
    padview[27] = PadView.getInstance("CHILD                           ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_ia, null);
    padview[28] = PadView.getInstance("CPARENT_PKEY_ATTR_TEXT          ", 5, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_ia, "ImpFilterStopChildCparentPkeyAttrText");
    padview[29] = PadView.getInstance("CKEY_ATTR_NUM                   ", 6, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_ia, "ImpFilterStopChildCkeyAttrNum");
    padview[30] = PadView.getInstance("IMP_FILTER                      ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_ia, 
      null);
    padview[31] = PadView.getInstance("CHILD                           ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_ia, null);
    padview[32] = PadView.getInstance("CSEARCH_ATTR_TEXT               ", 25, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_ia, "ImpFilterChildCsearchAttrText");
    padview[33] = PadView.getInstance("EXPORT                          ", 0, 0, 0, (short)1, PadView.VT_BASE, PadView.DT_NONE, w_oa, 
      "w_oa");
    padview[34] = PadView.getInstance("EXP_GROUP_LIST                  ", 0, 0, 48, (short)2, PadView.VT_GROUP, PadView.DT_NONE, 
      w_oa, "ExpGroupList_MA");
    padview[35] = PadView.getInstance("EXP_G_LIST                      ", 0, 0, 0, (short)3, PadView.VT_VIEW, PadView.DT_NONE, w_oa, 
      null);
    padview[36] = PadView.getInstance("CHILD                           ", 0, 0, 0, (short)4, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_oa, null);
    padview[37] = PadView.getInstance("CINSTANCE_ID                    ", 20, 0, 0, (short)4, PadView.VT_PREDICATE, 
      PadView.DT_TIMESTAMP, w_oa, "ExpGListChildCinstanceId");
    padview[38] = PadView.getInstance("CREFERENCE_ID                   ", 20, 0, 0, (short)4, PadView.VT_PREDICATE, 
      PadView.DT_TIMESTAMP, w_oa, "ExpGListChildCreferenceId");
    padview[39] = PadView.getInstance("CCREATE_USER_ID                 ", 8, 0, 0, (short)4, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_oa, "ExpGListChildCcreateUserId");
    padview[40] = PadView.getInstance("CUPDATE_USER_ID                 ", 8, 0, 0, (short)4, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_oa, "ExpGListChildCupdateUserId");
    padview[41] = PadView.getInstance("CPARENT_PKEY_ATTR_TEXT          ", 5, 0, 0, (short)4, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_oa, "ExpGListChildCparentPkeyAttrText");
    padview[42] = PadView.getInstance("CKEY_ATTR_NUM                   ", 6, 0, 0, (short)4, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_oa, "ExpGListChildCkeyAttrNum");
    padview[43] = PadView.getInstance("CSEARCH_ATTR_TEXT               ", 25, 0, 0, (short)4, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_oa, "ExpGListChildCsearchAttrText");
    padview[44] = PadView.getInstance("COTHER_ATTR_TEXT                ", 25, 0, 0, (short)4, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_oa, "ExpGListChildCotherAttrText");
    padview[45] = PadView.getInstance("EXP_ERROR                       ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_oa, 
      null);
    padview[46] = PadView.getInstance("IYY1_COMPONENT                  ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_oa, null);
    padview[47] = PadView.getInstance("SEVERITY_CODE                   ", 1, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_oa, "ExpErrorIyy1ComponentSeverityCode");
    padview[48] = PadView.getInstance("ROLLBACK_INDICATOR              ", 1, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_oa, "ExpErrorIyy1ComponentRollbackIndicator");
    padview[49] = PadView.getInstance("ORIGIN_SERVID                   ", 15, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_oa, "ExpErrorIyy1ComponentOriginServid");
    padview[50] = PadView.getInstance("CONTEXT_STRING                  ", 512, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_VARCHAR, w_oa, "ExpErrorIyy1ComponentContextString");
    padview[51] = PadView.getInstance("RETURN_CODE                     ", 5, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_oa, "ExpErrorIyy1ComponentReturnCode");
    padview[52] = PadView.getInstance("REASON_CODE                     ", 5, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_oa, "ExpErrorIyy1ComponentReasonCode");
    padview[53] = PadView.getInstance("CHECKSUM                        ", 15, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_oa, "ExpErrorIyy1ComponentChecksum");
    padview[54] = PadView.getInstance("ENTITY                          ", 0, 0, 0, (short)1, PadView.VT_BASE, PadView.DT_NONE, w_ea, 
      "w_ea");
    padview[55] = PadView.getInstance("                                ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_ea, 
      null);
    padview[56] = PadView.getInstance("CHILD                           ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_ea, null);
    padview[57] = PadView.getInstance("CINSTANCE_ID                    ", 20, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_TIMESTAMP, w_ea, "ChildCinstanceId");
    padview[58] = PadView.getInstance("CREFERENCE_ID                   ", 20, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_TIMESTAMP, w_ea, "ChildCreferenceId");
    padview[59] = PadView.getInstance("CCREATE_USER_ID                 ", 8, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_ea, "ChildCcreateUserId");
    padview[60] = PadView.getInstance("CUPDATE_USER_ID                 ", 8, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_ea, "ChildCupdateUserId");
    padview[61] = PadView.getInstance("CPARENT_PKEY_ATTR_TEXT          ", 5, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_ea, "ChildCparentPkeyAttrText");
    padview[62] = PadView.getInstance("CKEY_ATTR_NUM                   ", 6, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_ea, "ChildCkeyAttrNum");
    padview[63] = PadView.getInstance("CSEARCH_ATTR_TEXT               ", 25, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_ea, "ChildCsearchAttrText");
    padview[64] = PadView.getInstance("COTHER_ATTR_TEXT                ", 25, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_ea, "ChildCotherAttrText");
    padview[65] = PadView.getInstance("LOCAL                           ", 0, 0, 0, (short)1, PadView.VT_BASE, PadView.DT_NONE, w_la, 
      "w_la");
    padview[66] = PadView.getInstance("LOC_FILTER                      ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_la, 
      null);
    padview[67] = PadView.getInstance("IYY1_LIST                       ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_la, null);
    padview[68] = PadView.getInstance("SCROLL_TYPE                     ", 1, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_la, "LocFilterIyy1ListScrollType");
    padview[69] = PadView.getInstance("LOC                             ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_la, 
      null);
    padview[70] = PadView.getInstance("DONT_CHANGE_RETURN_CODES        ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_la, null);
    padview[71] = PadView.getInstance("1_OK                            ", 5, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_la, "LocDontChangeReturnCodesQ1Ok");
    padview[72] = PadView.getInstance("LOC                             ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_la, 
      null);
    padview[73] = PadView.getInstance("DONT_CHANGE_REASON_CODES        ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_la, null);
    padview[74] = PadView.getInstance("1_DEFAULT                       ", 5, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_la, "LocDontChangeReasonCodesQ1Default");
    padview[75] = PadView.getInstance("11_LIST_FULL                    ", 5, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_la, "LocDontChangeReasonCodesQ11ListFull");
    padview[76] = PadView.getInstance("12_LIST_EMPTY                   ", 5, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_la, "LocDontChangeReasonCodesQ12ListEmpty");
    padview[77] = PadView.getInstance("******** BOTTOM OF DATA ********", 0, 0, 0, (short)0, PadView.VT_END, PadView.DT_NONE, w_la, 
      null);
  }
  public void f_29360156_open()
  	throws ABException
  {
    sl_29360156 = ErrorData.SUCCEEDS_FL_LS;
    Child_001cd = ABBase.PV_SELECT;
    Child_lk = ABBase.EVW_UNLOCKED;
    f_29360156_moveb();
    
    if ( sl_29360156.equals( ErrorData.SUCCEEDS_FL_LS ) == true )
    {
      valChkDeadlockTimeout = false;
      valChkDBError = false;
      Child_es = ABBase.EV_USABLE;
      sqlException = null;
      try {
        SQLStatement.setLength(0);
        SQLStatement.append("SELECT ");
        SQLStatement.append("VDVYYYC01.`CINSTANCE_ID`,");
        SQLStatement.append("VDVYYYC01.`CREFERENCE_ID`,");
        SQLStatement.append("VDVYYYC01.`CCREATE_USERID`,");
        SQLStatement.append("VDVYYYC01.`CUPDATE_USERID`,");
        SQLStatement.append("VDVYYYC01.`CPARENT_PKEY_ATTR`,");
        SQLStatement.append("VDVYYYC01.`CKEY_ATTR`,");
        SQLStatement.append("VDVYYYC01.`CSEARCH_ATTR`,");
        SQLStatement.append("VDVYYYC01.`COTHER_ATTR`");
        SQLStatement.append(" FROM ");
        SQLStatement.append("`VDVYYYC` VDVYYYC01");
        SQLStatement.append(" WHERE ");
        SQLStatement.append("(");
        SQLStatement.append(
          "VDVYYYC01.`CPARENT_PKEY_ATTR` >= ? AND (VDVYYYC01.`CPARENT_PKEY_ATTR` > ? OR (VDVYYYC01.`CPARENT_PKEY_ATTR` = ? AND VDVY")
          ;
        SQLStatement.append(
          "YYC01.`CKEY_ATTR` >= ?)) AND (VDVYYYC01.`CPARENT_PKEY_ATTR` > ? OR (VDVYYYC01.`CPARENT_PKEY_ATTR` = ? AND VDVYYYC01.`CKE")
          ;
        SQLStatement.append(
          "Y_ATTR` >= ?)) AND (VDVYYYC01.`CPARENT_PKEY_ATTR` < ? OR (VDVYYYC01.`CPARENT_PKEY_ATTR` = ? AND VDVYYYC01.`CKEY_ATTR` <=")
          ;
        SQLStatement.append(" ?)) AND VDVYYYC01.`CSEARCH_ATTR` LIKE ?");
        SQLStatement.append(")");
        SQLStatement.append("  ORDER BY 5 ASC ,");
        SQLStatement.append(" 6 ASC ");
        if ( globdata.getDBMSData().getDBMSManager().isDBMS("IEFDB", "DB2") )
        {
          SQLStatement.append(" WITH UR ");
        }
        hstmt_0037881828_1 = globdata.getDBMSData().getDBMSManager().getStatement(globdata, iefRuntimeParm2, "IEFDB", 
          SQLStatement.toString());
        globdata.getDBMSData().getDBMSManager().bindParameterString("IEFDB", hstmt_0037881828_1, 1, CparentPkeyAttrText_001TP);
        globdata.getDBMSData().getDBMSManager().bindParameterString("IEFDB", hstmt_0037881828_1, 2, CparentPkeyAttrText_001TP);
        globdata.getDBMSData().getDBMSManager().bindParameterString("IEFDB", hstmt_0037881828_1, 3, CparentPkeyAttrText_001TP);
        hstmt_0037881828_1.setInt(4, CkeyAttrNum_002TP);
        globdata.getDBMSData().getDBMSManager().bindParameterString("IEFDB", hstmt_0037881828_1, 5, CparentPkeyAttrText_003TP);
        globdata.getDBMSData().getDBMSManager().bindParameterString("IEFDB", hstmt_0037881828_1, 6, CparentPkeyAttrText_003TP);
        hstmt_0037881828_1.setInt(7, CkeyAttrNum_004TP);
        globdata.getDBMSData().getDBMSManager().bindParameterString("IEFDB", hstmt_0037881828_1, 8, CparentPkeyAttrText_005TP);
        globdata.getDBMSData().getDBMSManager().bindParameterString("IEFDB", hstmt_0037881828_1, 9, CparentPkeyAttrText_005TP);
        hstmt_0037881828_1.setInt(10, CkeyAttrNum_006TP);
        globdata.getDBMSData().getDBMSManager().bindParameterString("IEFDB", hstmt_0037881828_1, 11, CsearchAttrText_007TP);
        hstmt_0037881828_1.execute();
        hstmt_0037881828_1_rs = hstmt_0037881828_1.getResultSet();
      } catch( SQLException e ) {
        sqlException = e;
      }
      if ( !((globdata.getDBMSData().getDBMSManager().wasSuccessful(sqlException))) )
      {
          f_29360156_jdbc_dberror();
      }
    }
  }
  
  public void f_29360156_fetch()
  	throws ABException
  {
    sqlException = null;
    try {
      if ( hstmt_0037881828_1_rs.next() == false )
      {
        throw new SQLException("No data found");
      }
      cinstance_id_011EF = hstmt_0037881828_1_rs.getTimestamp(1);
      creference_id_013EF = hstmt_0037881828_1_rs.getTimestamp(2);
      ccreate_userid_007EF = globdata.getDBMSData().getDBMSManager().getStringFromResultSet("IEFDB", hstmt_0037881828_1_rs, 3);
      cupdate_userid_009EF = globdata.getDBMSData().getDBMSManager().getStringFromResultSet("IEFDB", hstmt_0037881828_1_rs, 4);
      cparent_pkey_attr_015EF = globdata.getDBMSData().getDBMSManager().getStringFromResultSet("IEFDB", hstmt_0037881828_1_rs, 5);
      ckey_attr_001EF = hstmt_0037881828_1_rs.getInt(6);
      csearch_attr_003EF = globdata.getDBMSData().getDBMSManager().getStringFromResultSet("IEFDB", hstmt_0037881828_1_rs, 7);
      cother_attr_005EF = globdata.getDBMSData().getDBMSManager().getStringFromResultSet("IEFDB", hstmt_0037881828_1_rs, 8);
    } catch( SQLException e ) {
      sqlException = e;
    }
    
    if ( globdata.getDBMSData().getDBMSManager().wasSuccessful(sqlException) )
    {
      f_29360156_movea();
      if ( sl_29360156.equals( ErrorData.SUCCEEDS_FL_LS ) )
      {
        Child_es = ABBase.EV_USABLE;
      }
      else {
        Child_es = ABBase.EV_UNUSABLE;
      }
    }
    else if ( globdata.getDBMSData().getDBMSManager().wasNoDataFound(sqlException) )
    {
      sl_29360156 = ErrorData.NOT_FOUND_FL_LS;
      Child_es = ABBase.EV_UNUSABLE;
    }
    else {
      f_29360156_jdbc_dberror();
    }
  }
  
  public void f_29360156_esc_close()
  	throws ABException
  {
    try {
      if ( hstmt_0037881828_1_rs != null )
      {
        hstmt_0037881828_1_rs.close();
        hstmt_0037881828_1_rs = null;
      }
      if ( hstmt_0037881828_1 != null )
      {
        hstmt_0037881828_1.close();
        hstmt_0037881828_1 = null;
      }
    } catch( SQLException e ) {
      if ( globdata.getDBMSData().getDBMSManager().wasSuccessful(e) == false )
      {
        sqlException = e;
        f_29360156_jdbc_dberror();
      }
    }
  }
  public void f_29360156_close()
  	throws ABException
  {
    Child_es = ABBase.EV_UNUSABLE;
  }
  
  public void f_29360156_jdbc_dberror()
  	throws ABException
  {
    globdata.getErrorData().setStatus( ErrorData.FATAL_ERROR_FL_LS );
    globdata.getDBMSData().setActionId( 19 );
    globdata.getErrorData().setLastStatus( ErrorData.DB_ERROR_FL_LS );
    if ( sqlException != null )
    {
      globdata.getErrorData().setErrorMessage(sqlException);
      if ( globdata.getDBMSData().getDBMSManager().wasDeadlockOrTimeout("IEFDB", sqlException) )
      {
        globdata.getErrorData().setLastStatus( ErrorData.DB_DEADLOCK_TIMEOUT_FL_LS );
      }
    }
    sl_29360156 = globdata.getErrorData().getLastStatus();
    throw new ABException();
  }
  
  public void f_29360156_moveb()
  	throws ABException
  {
    CparentPkeyAttrText_001TP = w_ia.ImpFromChildCparentPkeyAttrText;
    CparentPkeyAttrText_001TP = w_ia.ImpFromChildCparentPkeyAttrText;
    CkeyAttrNum_002TP = w_ia.ImpFromChildCkeyAttrNum;
    CparentPkeyAttrText_003TP = w_ia.ImpFilterStartChildCparentPkeyAttrText;
    CkeyAttrNum_004TP = w_ia.ImpFilterStartChildCkeyAttrNum;
    CparentPkeyAttrText_005TP = w_ia.ImpFilterStopChildCparentPkeyAttrText;
    CkeyAttrNum_006TP = w_ia.ImpFilterStopChildCkeyAttrNum;
    CsearchAttrText_007TP = w_ia.ImpFilterChildCsearchAttrText;
  }
  
  public void f_29360156_movea()
  	throws ABException
  {
    w_ea.ChildCinstanceId = TimestampAttr.valueOf(TIRS2VW.TIRS2VW(globdata, "IEFDB", cinstance_id_011EF));
    w_ea.ChildCreferenceId = TimestampAttr.valueOf(TIRS2VW.TIRS2VW(globdata, "IEFDB", creference_id_013EF));
    w_ea.ChildCcreateUserId = FixedStringAttr.valueOf(ccreate_userid_007EF, (short)8);
    w_ea.ChildCupdateUserId = FixedStringAttr.valueOf(cupdate_userid_009EF, (short)8);
    w_ea.ChildCparentPkeyAttrText = FixedStringAttr.valueOf(cparent_pkey_attr_015EF, (short)5);
    w_ea.ChildCkeyAttrNum = IntAttr.valueOf(ckey_attr_001EF);
    w_ea.ChildCsearchAttrText = FixedStringAttr.valueOf(csearch_attr_003EF, (short)25);
    w_ea.ChildCotherAttrText = FixedStringAttr.valueOf(cother_attr_005EF, (short)25);
  }
  public void f_29360170_open()
  	throws ABException
  {
    sl_29360170 = ErrorData.SUCCEEDS_FL_LS;
    Child_001cd = ABBase.PV_SELECT;
    Child_lk = ABBase.EVW_UNLOCKED;
    f_29360170_moveb();
    
    if ( sl_29360170.equals( ErrorData.SUCCEEDS_FL_LS ) == true )
    {
      valChkDeadlockTimeout = false;
      valChkDBError = false;
      Child_es = ABBase.EV_USABLE;
      sqlException = null;
      try {
        SQLStatement.setLength(0);
        SQLStatement.append("SELECT ");
        SQLStatement.append("VDVYYYC01.`CINSTANCE_ID`,");
        SQLStatement.append("VDVYYYC01.`CREFERENCE_ID`,");
        SQLStatement.append("VDVYYYC01.`CCREATE_USERID`,");
        SQLStatement.append("VDVYYYC01.`CUPDATE_USERID`,");
        SQLStatement.append("VDVYYYC01.`CPARENT_PKEY_ATTR`,");
        SQLStatement.append("VDVYYYC01.`CKEY_ATTR`,");
        SQLStatement.append("VDVYYYC01.`CSEARCH_ATTR`,");
        SQLStatement.append("VDVYYYC01.`COTHER_ATTR`");
        SQLStatement.append(" FROM ");
        SQLStatement.append("`VDVYYYC` VDVYYYC01");
        SQLStatement.append(" WHERE ");
        SQLStatement.append("(");
        SQLStatement.append(
          "VDVYYYC01.`CPARENT_PKEY_ATTR` <= ? AND (VDVYYYC01.`CPARENT_PKEY_ATTR` < ? OR (VDVYYYC01.`CPARENT_PKEY_ATTR` = ? AND VDVY")
          ;
        SQLStatement.append(
          "YYC01.`CKEY_ATTR` <= ?)) AND (VDVYYYC01.`CPARENT_PKEY_ATTR` > ? OR (VDVYYYC01.`CPARENT_PKEY_ATTR` = ? AND VDVYYYC01.`CKE")
          ;
        SQLStatement.append(
          "Y_ATTR` >= ?)) AND (VDVYYYC01.`CPARENT_PKEY_ATTR` < ? OR (VDVYYYC01.`CPARENT_PKEY_ATTR` = ? AND VDVYYYC01.`CKEY_ATTR` <=")
          ;
        SQLStatement.append(" ?)) AND VDVYYYC01.`CSEARCH_ATTR` LIKE ?");
        SQLStatement.append(")");
        SQLStatement.append("  ORDER BY 5 DESC ,");
        SQLStatement.append(" 6 DESC ");
        if ( globdata.getDBMSData().getDBMSManager().isDBMS("IEFDB", "DB2") )
        {
          SQLStatement.append(" WITH UR ");
        }
        hstmt_0038075225_1 = globdata.getDBMSData().getDBMSManager().getStatement(globdata, iefRuntimeParm2, "IEFDB", 
          SQLStatement.toString());
        globdata.getDBMSData().getDBMSManager().bindParameterString("IEFDB", hstmt_0038075225_1, 1, CparentPkeyAttrText_001TP);
        globdata.getDBMSData().getDBMSManager().bindParameterString("IEFDB", hstmt_0038075225_1, 2, CparentPkeyAttrText_001TP);
        globdata.getDBMSData().getDBMSManager().bindParameterString("IEFDB", hstmt_0038075225_1, 3, CparentPkeyAttrText_001TP);
        hstmt_0038075225_1.setInt(4, CkeyAttrNum_002TP);
        globdata.getDBMSData().getDBMSManager().bindParameterString("IEFDB", hstmt_0038075225_1, 5, CparentPkeyAttrText_003TP);
        globdata.getDBMSData().getDBMSManager().bindParameterString("IEFDB", hstmt_0038075225_1, 6, CparentPkeyAttrText_003TP);
        hstmt_0038075225_1.setInt(7, CkeyAttrNum_004TP);
        globdata.getDBMSData().getDBMSManager().bindParameterString("IEFDB", hstmt_0038075225_1, 8, CparentPkeyAttrText_005TP);
        globdata.getDBMSData().getDBMSManager().bindParameterString("IEFDB", hstmt_0038075225_1, 9, CparentPkeyAttrText_005TP);
        hstmt_0038075225_1.setInt(10, CkeyAttrNum_006TP);
        globdata.getDBMSData().getDBMSManager().bindParameterString("IEFDB", hstmt_0038075225_1, 11, CsearchAttrText_007TP);
        hstmt_0038075225_1.execute();
        hstmt_0038075225_1_rs = hstmt_0038075225_1.getResultSet();
      } catch( SQLException e ) {
        sqlException = e;
      }
      if ( !((globdata.getDBMSData().getDBMSManager().wasSuccessful(sqlException))) )
      {
          f_29360170_jdbc_dberror();
      }
    }
  }
  
  public void f_29360170_fetch()
  	throws ABException
  {
    sqlException = null;
    try {
      if ( hstmt_0038075225_1_rs.next() == false )
      {
        throw new SQLException("No data found");
      }
      cinstance_id_011EF = hstmt_0038075225_1_rs.getTimestamp(1);
      creference_id_013EF = hstmt_0038075225_1_rs.getTimestamp(2);
      ccreate_userid_007EF = globdata.getDBMSData().getDBMSManager().getStringFromResultSet("IEFDB", hstmt_0038075225_1_rs, 3);
      cupdate_userid_009EF = globdata.getDBMSData().getDBMSManager().getStringFromResultSet("IEFDB", hstmt_0038075225_1_rs, 4);
      cparent_pkey_attr_015EF = globdata.getDBMSData().getDBMSManager().getStringFromResultSet("IEFDB", hstmt_0038075225_1_rs, 5);
      ckey_attr_001EF = hstmt_0038075225_1_rs.getInt(6);
      csearch_attr_003EF = globdata.getDBMSData().getDBMSManager().getStringFromResultSet("IEFDB", hstmt_0038075225_1_rs, 7);
      cother_attr_005EF = globdata.getDBMSData().getDBMSManager().getStringFromResultSet("IEFDB", hstmt_0038075225_1_rs, 8);
    } catch( SQLException e ) {
      sqlException = e;
    }
    
    if ( globdata.getDBMSData().getDBMSManager().wasSuccessful(sqlException) )
    {
      f_29360170_movea();
      if ( sl_29360170.equals( ErrorData.SUCCEEDS_FL_LS ) )
      {
        Child_es = ABBase.EV_USABLE;
      }
      else {
        Child_es = ABBase.EV_UNUSABLE;
      }
    }
    else if ( globdata.getDBMSData().getDBMSManager().wasNoDataFound(sqlException) )
    {
      sl_29360170 = ErrorData.NOT_FOUND_FL_LS;
      Child_es = ABBase.EV_UNUSABLE;
    }
    else {
      f_29360170_jdbc_dberror();
    }
  }
  
  public void f_29360170_esc_close()
  	throws ABException
  {
    try {
      if ( hstmt_0038075225_1_rs != null )
      {
        hstmt_0038075225_1_rs.close();
        hstmt_0038075225_1_rs = null;
      }
      if ( hstmt_0038075225_1 != null )
      {
        hstmt_0038075225_1.close();
        hstmt_0038075225_1 = null;
      }
    } catch( SQLException e ) {
      if ( globdata.getDBMSData().getDBMSManager().wasSuccessful(e) == false )
      {
        sqlException = e;
        f_29360170_jdbc_dberror();
      }
    }
  }
  public void f_29360170_close()
  	throws ABException
  {
    Child_es = ABBase.EV_UNUSABLE;
  }
  
  public void f_29360170_jdbc_dberror()
  	throws ABException
  {
    globdata.getErrorData().setStatus( ErrorData.FATAL_ERROR_FL_LS );
    globdata.getDBMSData().setActionId( 28 );
    globdata.getErrorData().setLastStatus( ErrorData.DB_ERROR_FL_LS );
    if ( sqlException != null )
    {
      globdata.getErrorData().setErrorMessage(sqlException);
      if ( globdata.getDBMSData().getDBMSManager().wasDeadlockOrTimeout("IEFDB", sqlException) )
      {
        globdata.getErrorData().setLastStatus( ErrorData.DB_DEADLOCK_TIMEOUT_FL_LS );
      }
    }
    sl_29360170 = globdata.getErrorData().getLastStatus();
    throw new ABException();
  }
  
  public void f_29360170_moveb()
  	throws ABException
  {
    CparentPkeyAttrText_001TP = w_ia.ImpFromChildCparentPkeyAttrText;
    CparentPkeyAttrText_001TP = w_ia.ImpFromChildCparentPkeyAttrText;
    CkeyAttrNum_002TP = w_ia.ImpFromChildCkeyAttrNum;
    CparentPkeyAttrText_003TP = w_ia.ImpFilterStartChildCparentPkeyAttrText;
    CkeyAttrNum_004TP = w_ia.ImpFilterStartChildCkeyAttrNum;
    CparentPkeyAttrText_005TP = w_ia.ImpFilterStopChildCparentPkeyAttrText;
    CkeyAttrNum_006TP = w_ia.ImpFilterStopChildCkeyAttrNum;
    CsearchAttrText_007TP = w_ia.ImpFilterChildCsearchAttrText;
  }
  
  public void f_29360170_movea()
  	throws ABException
  {
    w_ea.ChildCinstanceId = TimestampAttr.valueOf(TIRS2VW.TIRS2VW(globdata, "IEFDB", cinstance_id_011EF));
    w_ea.ChildCreferenceId = TimestampAttr.valueOf(TIRS2VW.TIRS2VW(globdata, "IEFDB", creference_id_013EF));
    w_ea.ChildCcreateUserId = FixedStringAttr.valueOf(ccreate_userid_007EF, (short)8);
    w_ea.ChildCupdateUserId = FixedStringAttr.valueOf(cupdate_userid_009EF, (short)8);
    w_ea.ChildCparentPkeyAttrText = FixedStringAttr.valueOf(cparent_pkey_attr_015EF, (short)5);
    w_ea.ChildCkeyAttrNum = IntAttr.valueOf(ckey_attr_001EF);
    w_ea.ChildCsearchAttrText = FixedStringAttr.valueOf(csearch_attr_003EF, (short)25);
    w_ea.ChildCotherAttrText = FixedStringAttr.valueOf(cother_attr_005EF, (short)25);
  }
  public void f_173015114_rgvc()
  	throws ABException
  {
    if ( (ExpGroupList_PS_001 > 48) || (ExpGroupList_PS_001 < 1) )
    {
      globdata.getErrorData().setViewOverflowSW( ErrorData.ERROR_FOUND_SW );
      {
        throw new ABException();
      }
    }
  }
}// end class


package gen.ort.yyy;
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
//
//                    Source Code Generated by
//                           CA Gen 8.6
//
//    Copyright (c) 2023 CA Technologies. All rights reserved.
//
//    Name: DYYY0251_IA                      Date: 2023/07/05
//    User: HakanBal                         Time: 15:09:05
//
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// Import Statements
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
import java.lang.*;
import java.io.*;
import java.util.*;
import java.math.*;
import java.sql.*;
import com.ca.gen.vwrt.*;
import com.ca.gen.vwrt.types.*;
import com.ca.gen.vwrt.vdf.*;
import com.ca.gen.csu.exception.*;

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// START OF IMPORT VIEW
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
/**
 * Internal data view storage for: DYYY0251_IA
 **/
public class DYYY0251_IA extends ViewBase implements IImportView, Serializable
{
  // Entity View: IMP_ERROR
  //        Type: IYY1_COMPONENT
  /**
   * Attribute missing flag for: ImpErrorIyy1ComponentSeverityCode
   **/
  public char ImpErrorIyy1ComponentSeverityCode_AS;
  /**
   * Attribute for: ImpErrorIyy1ComponentSeverityCode
   * Domain: Text
   * Length: 1
   * Varying Length: N
   **/
  public String ImpErrorIyy1ComponentSeverityCode;
  /**
   * Attribute missing flag for: ImpErrorIyy1ComponentRollbackIndicator
   **/
  public char ImpErrorIyy1ComponentRollbackIndicator_AS;
  /**
   * Attribute for: ImpErrorIyy1ComponentRollbackIndicator
   * Domain: Text
   * Length: 1
   * Varying Length: N
   **/
  public String ImpErrorIyy1ComponentRollbackIndicator;
  /**
   * Attribute missing flag for: ImpErrorIyy1ComponentOriginServid
   **/
  public char ImpErrorIyy1ComponentOriginServid_AS;
  /**
   * Attribute for: ImpErrorIyy1ComponentOriginServid
   * Domain: Number
   * Length: 15
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public double ImpErrorIyy1ComponentOriginServid;
  /**
   * Attribute missing flag for: ImpErrorIyy1ComponentContextString
   **/
  public char ImpErrorIyy1ComponentContextString_AS;
  /**
   * Attribute for: ImpErrorIyy1ComponentContextString
   * Domain: Text
   * Length: 512
   * Varying Length: Y
   **/
  public String ImpErrorIyy1ComponentContextString;
  /**
   * Attribute missing flag for: ImpErrorIyy1ComponentReturnCode
   **/
  public char ImpErrorIyy1ComponentReturnCode_AS;
  /**
   * Attribute for: ImpErrorIyy1ComponentReturnCode
   * Domain: Number
   * Length: 5
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public int ImpErrorIyy1ComponentReturnCode;
  /**
   * Attribute missing flag for: ImpErrorIyy1ComponentReasonCode
   **/
  public char ImpErrorIyy1ComponentReasonCode_AS;
  /**
   * Attribute for: ImpErrorIyy1ComponentReasonCode
   * Domain: Number
   * Length: 5
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public int ImpErrorIyy1ComponentReasonCode;
  /**
   * Attribute missing flag for: ImpErrorIyy1ComponentChecksum
   **/
  public char ImpErrorIyy1ComponentChecksum_AS;
  /**
   * Attribute for: ImpErrorIyy1ComponentChecksum
   * Domain: Text
   * Length: 15
   * Varying Length: N
   **/
  public String ImpErrorIyy1ComponentChecksum;
  // Entity View: IMP_FILTER
  //        Type: IYY1_LIST
  /**
   * Attribute missing flag for: ImpFilterIyy1ListSortOption
   **/
  public char ImpFilterIyy1ListSortOption_AS;
  /**
   * Attribute for: ImpFilterIyy1ListSortOption
   * Domain: Text
   * Length: 3
   * Varying Length: N
   **/
  public String ImpFilterIyy1ListSortOption;
  /**
   * Attribute missing flag for: ImpFilterIyy1ListScrollType
   **/
  public char ImpFilterIyy1ListScrollType_AS;
  /**
   * Attribute for: ImpFilterIyy1ListScrollType
   * Domain: Text
   * Length: 1
   * Varying Length: N
   **/
  public String ImpFilterIyy1ListScrollType;
  /**
   * Attribute missing flag for: ImpFilterIyy1ListListDirection
   **/
  public char ImpFilterIyy1ListListDirection_AS;
  /**
   * Attribute for: ImpFilterIyy1ListListDirection
   * Domain: Text
   * Length: 1
   * Varying Length: N
   **/
  public String ImpFilterIyy1ListListDirection;
  /**
   * Attribute missing flag for: ImpFilterIyy1ListScrollAmount
   **/
  public char ImpFilterIyy1ListScrollAmount_AS;
  /**
   * Attribute for: ImpFilterIyy1ListScrollAmount
   * Domain: Number
   * Length: 5
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public int ImpFilterIyy1ListScrollAmount;
  /**
   * Attribute missing flag for: ImpFilterIyy1ListOrderByFieldNum
   **/
  public char ImpFilterIyy1ListOrderByFieldNum_AS;
  /**
   * Attribute for: ImpFilterIyy1ListOrderByFieldNum
   * Domain: Number
   * Length: 1
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public short ImpFilterIyy1ListOrderByFieldNum;
  // Entity View: IMP_FROM
  //        Type: CHILD
  /**
   * Attribute missing flag for: ImpFromChildCinstanceId
   **/
  public char ImpFromChildCinstanceId_AS;
  /**
   * Attribute for: ImpFromChildCinstanceId
   * Domain: Timestamp
   * Length: 20
   **/
  public String ImpFromChildCinstanceId;
  /**
   * Attribute missing flag for: ImpFromChildCparentPkeyAttrText
   **/
  public char ImpFromChildCparentPkeyAttrText_AS;
  /**
   * Attribute for: ImpFromChildCparentPkeyAttrText
   * Domain: Text
   * Length: 5
   * Varying Length: N
   **/
  public String ImpFromChildCparentPkeyAttrText;
  /**
   * Attribute missing flag for: ImpFromChildCkeyAttrNum
   **/
  public char ImpFromChildCkeyAttrNum_AS;
  /**
   * Attribute for: ImpFromChildCkeyAttrNum
   * Domain: Number
   * Length: 6
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public int ImpFromChildCkeyAttrNum;
  // Entity View: IMP_FILTER_START
  //        Type: CHILD
  /**
   * Attribute missing flag for: ImpFilterStartChildCparentPkeyAttrText
   **/
  public char ImpFilterStartChildCparentPkeyAttrText_AS;
  /**
   * Attribute for: ImpFilterStartChildCparentPkeyAttrText
   * Domain: Text
   * Length: 5
   * Varying Length: N
   **/
  public String ImpFilterStartChildCparentPkeyAttrText;
  /**
   * Attribute missing flag for: ImpFilterStartChildCkeyAttrNum
   **/
  public char ImpFilterStartChildCkeyAttrNum_AS;
  /**
   * Attribute for: ImpFilterStartChildCkeyAttrNum
   * Domain: Number
   * Length: 6
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public int ImpFilterStartChildCkeyAttrNum;
  // Entity View: IMP_FILTER_STOP
  //        Type: CHILD
  /**
   * Attribute missing flag for: ImpFilterStopChildCparentPkeyAttrText
   **/
  public char ImpFilterStopChildCparentPkeyAttrText_AS;
  /**
   * Attribute for: ImpFilterStopChildCparentPkeyAttrText
   * Domain: Text
   * Length: 5
   * Varying Length: N
   **/
  public String ImpFilterStopChildCparentPkeyAttrText;
  /**
   * Attribute missing flag for: ImpFilterStopChildCkeyAttrNum
   **/
  public char ImpFilterStopChildCkeyAttrNum_AS;
  /**
   * Attribute for: ImpFilterStopChildCkeyAttrNum
   * Domain: Number
   * Length: 6
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public int ImpFilterStopChildCkeyAttrNum;
  // Entity View: IMP_FILTER
  //        Type: CHILD
  /**
   * Attribute missing flag for: ImpFilterChildCsearchAttrText
   **/
  public char ImpFilterChildCsearchAttrText_AS;
  /**
   * Attribute for: ImpFilterChildCsearchAttrText
   * Domain: Text
   * Length: 25
   * Varying Length: N
   **/
  public String ImpFilterChildCsearchAttrText;
  /**
   * Default Constructor
   **/
  
  public DYYY0251_IA()
  {
    reset();
  }
  /**
   * Copy Constructor
   **/
  
  public DYYY0251_IA(DYYY0251_IA orig)
  {
    copyFrom(orig);
  }
  /**
   * Static instance creator function
   **/
  
  public static DYYY0251_IA getInstance()
  {
    return new DYYY0251_IA();
  }
  /**
   * Static free instance method
   **/
  
  public void freeInstance()
  {
  }
  /**
   * clone constructor
   **/
  
  @Override public Object clone()
  	throws CloneNotSupportedException
  {
    return(new DYYY0251_IA(this));
  }
  /**
   * Resets all properties to the defaults.
   **/
  
  public void reset()
  {
    ImpErrorIyy1ComponentSeverityCode_AS = ' ';
    ImpErrorIyy1ComponentSeverityCode = " ";
    ImpErrorIyy1ComponentRollbackIndicator_AS = ' ';
    ImpErrorIyy1ComponentRollbackIndicator = " ";
    ImpErrorIyy1ComponentOriginServid_AS = ' ';
    ImpErrorIyy1ComponentOriginServid = 0.0;
    ImpErrorIyy1ComponentContextString_AS = ' ';
    ImpErrorIyy1ComponentContextString = "";
    ImpErrorIyy1ComponentReturnCode_AS = ' ';
    ImpErrorIyy1ComponentReturnCode = 0;
    ImpErrorIyy1ComponentReasonCode_AS = ' ';
    ImpErrorIyy1ComponentReasonCode = 0;
    ImpErrorIyy1ComponentChecksum_AS = ' ';
    ImpErrorIyy1ComponentChecksum = "               ";
    ImpFilterIyy1ListSortOption_AS = ' ';
    ImpFilterIyy1ListSortOption = "   ";
    ImpFilterIyy1ListScrollType_AS = ' ';
    ImpFilterIyy1ListScrollType = " ";
    ImpFilterIyy1ListListDirection_AS = ' ';
    ImpFilterIyy1ListListDirection = " ";
    ImpFilterIyy1ListScrollAmount_AS = ' ';
    ImpFilterIyy1ListScrollAmount = 0;
    ImpFilterIyy1ListOrderByFieldNum_AS = ' ';
    ImpFilterIyy1ListOrderByFieldNum = 0;
    ImpFromChildCinstanceId_AS = ' ';
    ImpFromChildCinstanceId = "00000000000000000000";
    ImpFromChildCparentPkeyAttrText_AS = ' ';
    ImpFromChildCparentPkeyAttrText = "     ";
    ImpFromChildCkeyAttrNum_AS = ' ';
    ImpFromChildCkeyAttrNum = 0;
    ImpFilterStartChildCparentPkeyAttrText_AS = ' ';
    ImpFilterStartChildCparentPkeyAttrText = "     ";
    ImpFilterStartChildCkeyAttrNum_AS = ' ';
    ImpFilterStartChildCkeyAttrNum = 0;
    ImpFilterStopChildCparentPkeyAttrText_AS = ' ';
    ImpFilterStopChildCparentPkeyAttrText = "     ";
    ImpFilterStopChildCkeyAttrNum_AS = ' ';
    ImpFilterStopChildCkeyAttrNum = 0;
    ImpFilterChildCsearchAttrText_AS = ' ';
    ImpFilterChildCsearchAttrText = "                         ";
  }
  /**
   * Gets the VDF version of the current state of the instance.
   **/
  public VDF getVDF()
  {
    throw new RuntimeException("can only execute getVDF for a Procedure Step.");
  }
  
  /**
   * Sets the current state of the instance to the VDF version.
   **/
  public void setFromVDF(VDF vdf)
  {
    throw new RuntimeException("can only execute setFromVDF for a Procedure Step.");
  }
  
  /**
   * Sets the current instance based on the passed view.
   **/
  public void copyFrom(IImportView orig)
  {
    this.copyFrom((DYYY0251_IA) orig);
  }
  
  /**
   * Sets the current instance based on the passed view.
   **/
  public void copyFrom(DYYY0251_IA orig)
  {
    ImpErrorIyy1ComponentSeverityCode_AS = orig.ImpErrorIyy1ComponentSeverityCode_AS;
    ImpErrorIyy1ComponentSeverityCode = orig.ImpErrorIyy1ComponentSeverityCode;
    ImpErrorIyy1ComponentRollbackIndicator_AS = orig.ImpErrorIyy1ComponentRollbackIndicator_AS;
    ImpErrorIyy1ComponentRollbackIndicator = orig.ImpErrorIyy1ComponentRollbackIndicator;
    ImpErrorIyy1ComponentOriginServid_AS = orig.ImpErrorIyy1ComponentOriginServid_AS;
    ImpErrorIyy1ComponentOriginServid = orig.ImpErrorIyy1ComponentOriginServid;
    ImpErrorIyy1ComponentContextString_AS = orig.ImpErrorIyy1ComponentContextString_AS;
    ImpErrorIyy1ComponentContextString = orig.ImpErrorIyy1ComponentContextString;
    ImpErrorIyy1ComponentReturnCode_AS = orig.ImpErrorIyy1ComponentReturnCode_AS;
    ImpErrorIyy1ComponentReturnCode = orig.ImpErrorIyy1ComponentReturnCode;
    ImpErrorIyy1ComponentReasonCode_AS = orig.ImpErrorIyy1ComponentReasonCode_AS;
    ImpErrorIyy1ComponentReasonCode = orig.ImpErrorIyy1ComponentReasonCode;
    ImpErrorIyy1ComponentChecksum_AS = orig.ImpErrorIyy1ComponentChecksum_AS;
    ImpErrorIyy1ComponentChecksum = orig.ImpErrorIyy1ComponentChecksum;
    ImpFilterIyy1ListSortOption_AS = orig.ImpFilterIyy1ListSortOption_AS;
    ImpFilterIyy1ListSortOption = orig.ImpFilterIyy1ListSortOption;
    ImpFilterIyy1ListScrollType_AS = orig.ImpFilterIyy1ListScrollType_AS;
    ImpFilterIyy1ListScrollType = orig.ImpFilterIyy1ListScrollType;
    ImpFilterIyy1ListListDirection_AS = orig.ImpFilterIyy1ListListDirection_AS;
    ImpFilterIyy1ListListDirection = orig.ImpFilterIyy1ListListDirection;
    ImpFilterIyy1ListScrollAmount_AS = orig.ImpFilterIyy1ListScrollAmount_AS;
    ImpFilterIyy1ListScrollAmount = orig.ImpFilterIyy1ListScrollAmount;
    ImpFilterIyy1ListOrderByFieldNum_AS = orig.ImpFilterIyy1ListOrderByFieldNum_AS;
    ImpFilterIyy1ListOrderByFieldNum = orig.ImpFilterIyy1ListOrderByFieldNum;
    ImpFromChildCinstanceId_AS = orig.ImpFromChildCinstanceId_AS;
    ImpFromChildCinstanceId = orig.ImpFromChildCinstanceId;
    ImpFromChildCparentPkeyAttrText_AS = orig.ImpFromChildCparentPkeyAttrText_AS;
    ImpFromChildCparentPkeyAttrText = orig.ImpFromChildCparentPkeyAttrText;
    ImpFromChildCkeyAttrNum_AS = orig.ImpFromChildCkeyAttrNum_AS;
    ImpFromChildCkeyAttrNum = orig.ImpFromChildCkeyAttrNum;
    ImpFilterStartChildCparentPkeyAttrText_AS = orig.ImpFilterStartChildCparentPkeyAttrText_AS;
    ImpFilterStartChildCparentPkeyAttrText = orig.ImpFilterStartChildCparentPkeyAttrText;
    ImpFilterStartChildCkeyAttrNum_AS = orig.ImpFilterStartChildCkeyAttrNum_AS;
    ImpFilterStartChildCkeyAttrNum = orig.ImpFilterStartChildCkeyAttrNum;
    ImpFilterStopChildCparentPkeyAttrText_AS = orig.ImpFilterStopChildCparentPkeyAttrText_AS;
    ImpFilterStopChildCparentPkeyAttrText = orig.ImpFilterStopChildCparentPkeyAttrText;
    ImpFilterStopChildCkeyAttrNum_AS = orig.ImpFilterStopChildCkeyAttrNum_AS;
    ImpFilterStopChildCkeyAttrNum = orig.ImpFilterStopChildCkeyAttrNum;
    ImpFilterChildCsearchAttrText_AS = orig.ImpFilterChildCsearchAttrText_AS;
    ImpFilterChildCsearchAttrText = orig.ImpFilterChildCsearchAttrText;
  }
}

package gen.ort.yyy;
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
//
//                    Source Code Generated by
//                           CA Gen 8.6
//
//    Copyright (c) 2023 CA Technologies. All rights reserved.
//
//    Name: DYYY0251_LA                      Date: 2023/07/05
//    User: HakanBal                         Time: 15:09:05
//
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// Import Statements
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
import java.lang.*;
import java.io.*;
import java.util.*;
import java.math.*;
import java.sql.*;
import com.ca.gen.vwrt.*;
import com.ca.gen.vwrt.types.*;
import com.ca.gen.vwrt.vdf.*;
import com.ca.gen.csu.exception.*;

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// START OF LOCAL VIEW
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
/**
 * Internal data view storage for: DYYY0251_LA
 **/
public class DYYY0251_LA extends ViewBase implements ILocalView, Serializable
{
  // Entity View: LOC_FILTER
  //        Type: IYY1_LIST
  /**
   * Attribute missing flag for: LocFilterIyy1ListScrollType
   **/
  public char LocFilterIyy1ListScrollType_AS;
  /**
   * Attribute for: LocFilterIyy1ListScrollType
   * Domain: Text
   * Length: 1
   * Varying Length: N
   **/
  public String LocFilterIyy1ListScrollType;
  // Entity View: LOC
  //        Type: DONT_CHANGE_RETURN_CODES
  /**
   * Attribute missing flag for: LocDontChangeReturnCodesQ1Ok
   **/
  public char LocDontChangeReturnCodesQ1Ok_AS;
  /**
   * Attribute for: LocDontChangeReturnCodesQ1Ok
   * Domain: Number
   * Length: 5
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public int LocDontChangeReturnCodesQ1Ok;
  // Entity View: LOC
  //        Type: DONT_CHANGE_REASON_CODES
  /**
   * Attribute missing flag for: LocDontChangeReasonCodesQ1Default
   **/
  public char LocDontChangeReasonCodesQ1Default_AS;
  /**
   * Attribute for: LocDontChangeReasonCodesQ1Default
   * Domain: Number
   * Length: 5
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public int LocDontChangeReasonCodesQ1Default;
  /**
   * Attribute missing flag for: LocDontChangeReasonCodesQ11ListFull
   **/
  public char LocDontChangeReasonCodesQ11ListFull_AS;
  /**
   * Attribute for: LocDontChangeReasonCodesQ11ListFull
   * Domain: Number
   * Length: 5
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public int LocDontChangeReasonCodesQ11ListFull;
  /**
   * Attribute missing flag for: LocDontChangeReasonCodesQ12ListEmpty
   **/
  public char LocDontChangeReasonCodesQ12ListEmpty_AS;
  /**
   * Attribute for: LocDontChangeReasonCodesQ12ListEmpty
   * Domain: Number
   * Length: 5
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public int LocDontChangeReasonCodesQ12ListEmpty;
  /**
   * Default Constructor
   **/
  
  public DYYY0251_LA()
  {
    reset();
  }
  /**
   * Copy Constructor
   **/
  
  public DYYY0251_LA(DYYY0251_LA orig)
  {
    LocFilterIyy1ListScrollType_AS = orig.LocFilterIyy1ListScrollType_AS;
    LocFilterIyy1ListScrollType = orig.LocFilterIyy1ListScrollType;
    LocDontChangeReturnCodesQ1Ok_AS = orig.LocDontChangeReturnCodesQ1Ok_AS;
    LocDontChangeReturnCodesQ1Ok = orig.LocDontChangeReturnCodesQ1Ok;
    LocDontChangeReasonCodesQ1Default_AS = orig.LocDontChangeReasonCodesQ1Default_AS;
    LocDontChangeReasonCodesQ1Default = orig.LocDontChangeReasonCodesQ1Default;
    LocDontChangeReasonCodesQ11ListFull_AS = orig.LocDontChangeReasonCodesQ11ListFull_AS;
    LocDontChangeReasonCodesQ11ListFull = orig.LocDontChangeReasonCodesQ11ListFull;
    LocDontChangeReasonCodesQ12ListEmpty_AS = orig.LocDontChangeReasonCodesQ12ListEmpty_AS;
    LocDontChangeReasonCodesQ12ListEmpty = orig.LocDontChangeReasonCodesQ12ListEmpty;
  }
  /**
   * Static instance creator function
   **/
  
  public static DYYY0251_LA getInstance()
  {
    return new DYYY0251_LA();
  }
  /**
   * Static free instance method
   **/
  
  public void freeInstance()
  {
  }
  /**
   * clone constructor
   **/
  
  @Override public Object clone()
  	throws CloneNotSupportedException
  {
    return(new DYYY0251_LA(this));
  }
  /**
   * Resets all properties to the defaults.
   **/
  
  public void reset()
  {
    LocFilterIyy1ListScrollType_AS = ' ';
    LocFilterIyy1ListScrollType = " ";
    LocDontChangeReturnCodesQ1Ok_AS = ' ';
    LocDontChangeReturnCodesQ1Ok = 0;
    LocDontChangeReasonCodesQ1Default_AS = ' ';
    LocDontChangeReasonCodesQ1Default = 0;
    LocDontChangeReasonCodesQ11ListFull_AS = ' ';
    LocDontChangeReasonCodesQ11ListFull = 0;
    LocDontChangeReasonCodesQ12ListEmpty_AS = ' ';
    LocDontChangeReasonCodesQ12ListEmpty = 0;
  }
}

package gen.ort.yyy;
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
//
//                    Source Code Generated by
//                           CA Gen 8.6
//
//    Copyright (c) 2023 CA Technologies. All rights reserved.
//
//    Name: DYYY0251_OA                      Date: 2023/07/05
//    User: HakanBal                         Time: 15:09:05
//
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// Import Statements
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
import java.lang.*;
import java.io.*;
import java.util.*;
import java.math.*;
import java.sql.*;
import com.ca.gen.vwrt.*;
import com.ca.gen.vwrt.types.*;
import com.ca.gen.vwrt.vdf.*;
import com.ca.gen.csu.exception.*;

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// START OF EXPORT VIEW
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
/**
 * Internal data view storage for: DYYY0251_OA
 **/
public class DYYY0251_OA extends ViewBase implements IExportView, Serializable
{
  // Repeating GV:  EXP_GROUP_LIST
  //     Repeats: 48 times
  /**
   * Repeating group view count
   **/
  public int ExpGroupList_MA;
  /**
   * Repeating group view occurrance array
   **/
  public char ExpGroupList_AC[] = new char[48];
  // Entity View: EXP_G_LIST
  //        Type: CHILD
  /**
   * Attribute missing flag for: ExpGListChildCinstanceId
   **/
  public char ExpGListChildCinstanceId_AS[] = new char[48];
  /**
   * Attribute for: ExpGListChildCinstanceId
   * Domain: Timestamp
   * Length: 20
   **/
  public String ExpGListChildCinstanceId[] = new String[48];
  /**
   * Attribute missing flag for: ExpGListChildCreferenceId
   **/
  public char ExpGListChildCreferenceId_AS[] = new char[48];
  /**
   * Attribute for: ExpGListChildCreferenceId
   * Domain: Timestamp
   * Length: 20
   **/
  public String ExpGListChildCreferenceId[] = new String[48];
  /**
   * Attribute missing flag for: ExpGListChildCcreateUserId
   **/
  public char ExpGListChildCcreateUserId_AS[] = new char[48];
  /**
   * Attribute for: ExpGListChildCcreateUserId
   * Domain: Text
   * Length: 8
   * Varying Length: N
   **/
  public String ExpGListChildCcreateUserId[] = new String[48];
  /**
   * Attribute missing flag for: ExpGListChildCupdateUserId
   **/
  public char ExpGListChildCupdateUserId_AS[] = new char[48];
  /**
   * Attribute for: ExpGListChildCupdateUserId
   * Domain: Text
   * Length: 8
   * Varying Length: N
   **/
  public String ExpGListChildCupdateUserId[] = new String[48];
  /**
   * Attribute missing flag for: ExpGListChildCparentPkeyAttrText
   **/
  public char ExpGListChildCparentPkeyAttrText_AS[] = new char[48];
  /**
   * Attribute for: ExpGListChildCparentPkeyAttrText
   * Domain: Text
   * Length: 5
   * Varying Length: N
   **/
  public String ExpGListChildCparentPkeyAttrText[] = new String[48];
  /**
   * Attribute missing flag for: ExpGListChildCkeyAttrNum
   **/
  public char ExpGListChildCkeyAttrNum_AS[] = new char[48];
  /**
   * Attribute for: ExpGListChildCkeyAttrNum
   * Domain: Number
   * Length: 6
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public int ExpGListChildCkeyAttrNum[] = new int[48];
  /**
   * Attribute missing flag for: ExpGListChildCsearchAttrText
   **/
  public char ExpGListChildCsearchAttrText_AS[] = new char[48];
  /**
   * Attribute for: ExpGListChildCsearchAttrText
   * Domain: Text
   * Length: 25
   * Varying Length: N
   **/
  public String ExpGListChildCsearchAttrText[] = new String[48];
  /**
   * Attribute missing flag for: ExpGListChildCotherAttrText
   **/
  public char ExpGListChildCotherAttrText_AS[] = new char[48];
  /**
   * Attribute for: ExpGListChildCotherAttrText
   * Domain: Text
   * Length: 25
   * Varying Length: N
   **/
  public String ExpGListChildCotherAttrText[] = new String[48];
  // Entity View: EXP_ERROR
  //        Type: IYY1_COMPONENT
  /**
   * Attribute missing flag for: ExpErrorIyy1ComponentSeverityCode
   **/
  public char ExpErrorIyy1ComponentSeverityCode_AS;
  /**
   * Attribute for: ExpErrorIyy1ComponentSeverityCode
   * Domain: Text
   * Length: 1
   * Varying Length: N
   **/
  public String ExpErrorIyy1ComponentSeverityCode;
  /**
   * Attribute missing flag for: ExpErrorIyy1ComponentRollbackIndicator
   **/
  public char ExpErrorIyy1ComponentRollbackIndicator_AS;
  /**
   * Attribute for: ExpErrorIyy1ComponentRollbackIndicator
   * Domain: Text
   * Length: 1
   * Varying Length: N
   **/
  public String ExpErrorIyy1ComponentRollbackIndicator;
  /**
   * Attribute missing flag for: ExpErrorIyy1ComponentOriginServid
   **/
  public char ExpErrorIyy1ComponentOriginServid_AS;
  /**
   * Attribute for: ExpErrorIyy1ComponentOriginServid
   * Domain: Number
   * Length: 15
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public double ExpErrorIyy1ComponentOriginServid;
  /**
   * Attribute missing flag for: ExpErrorIyy1ComponentContextString
   **/
  public char ExpErrorIyy1ComponentContextString_AS;
  /**
   * Attribute for: ExpErrorIyy1ComponentContextString
   * Domain: Text
   * Length: 512
   * Varying Length: Y
   **/
  public String ExpErrorIyy1ComponentContextString;
  /**
   * Attribute missing flag for: ExpErrorIyy1ComponentReturnCode
   **/
  public char ExpErrorIyy1ComponentReturnCode_AS;
  /**
   * Attribute for: ExpErrorIyy1ComponentReturnCode
   * Domain: Number
   * Length: 5
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public int ExpErrorIyy1ComponentReturnCode;
  /**
   * Attribute missing flag for: ExpErrorIyy1ComponentReasonCode
   **/
  public char ExpErrorIyy1ComponentReasonCode_AS;
  /**
   * Attribute for: ExpErrorIyy1ComponentReasonCode
   * Domain: Number
   * Length: 5
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public int ExpErrorIyy1ComponentReasonCode;
  /**
   * Attribute missing flag for: ExpErrorIyy1ComponentChecksum
   **/
  public char ExpErrorIyy1ComponentChecksum_AS;
  /**
   * Attribute for: ExpErrorIyy1ComponentChecksum
   * Domain: Text
   * Length: 15
   * Varying Length: N
   **/
  public String ExpErrorIyy1ComponentChecksum;
  /**
   * Default Constructor
   **/
  
  public DYYY0251_OA()
  {
    reset();
  }
  /**
   * Copy Constructor
   **/
  
  public DYYY0251_OA(DYYY0251_OA orig)
  {
    copyFrom(orig);
  }
  /**
   * Static instance creator function
   **/
  
  public static DYYY0251_OA getInstance()
  {
    return new DYYY0251_OA();
  }
  /**
   * Static free instance method
   **/
  
  public void freeInstance()
  {
  }
  /**
   * clone constructor
   **/
  
  @Override public Object clone()
  	throws CloneNotSupportedException
  {
    return(new DYYY0251_OA(this));
  }
  /**
   * Resets all properties to the defaults.
   **/
  
  public void reset()
  {
    ExpGroupList_MA = 0;
    for(int a = 0; a < 48; a++)
    {
      ExpGroupList_AC[a] = ' ';
      ExpGListChildCinstanceId_AS[a] = ' ';
      ExpGListChildCinstanceId[a] = "00000000000000000000";
      ExpGListChildCreferenceId_AS[a] = ' ';
      ExpGListChildCreferenceId[a] = "00000000000000000000";
      ExpGListChildCcreateUserId_AS[a] = ' ';
      ExpGListChildCcreateUserId[a] = "        ";
      ExpGListChildCupdateUserId_AS[a] = ' ';
      ExpGListChildCupdateUserId[a] = "        ";
      ExpGListChildCparentPkeyAttrText_AS[a] = ' ';
      ExpGListChildCparentPkeyAttrText[a] = "     ";
      ExpGListChildCkeyAttrNum_AS[a] = ' ';
      ExpGListChildCkeyAttrNum[a] = 0;
      ExpGListChildCsearchAttrText_AS[a] = ' ';
      ExpGListChildCsearchAttrText[a] = "                         ";
      ExpGListChildCotherAttrText_AS[a] = ' ';
      ExpGListChildCotherAttrText[a] = "                         ";
    }
    ExpErrorIyy1ComponentSeverityCode_AS = ' ';
    ExpErrorIyy1ComponentSeverityCode = " ";
    ExpErrorIyy1ComponentRollbackIndicator_AS = ' ';
    ExpErrorIyy1ComponentRollbackIndicator = " ";
    ExpErrorIyy1ComponentOriginServid_AS = ' ';
    ExpErrorIyy1ComponentOriginServid = 0.0;
    ExpErrorIyy1ComponentContextString_AS = ' ';
    ExpErrorIyy1ComponentContextString = "";
    ExpErrorIyy1ComponentReturnCode_AS = ' ';
    ExpErrorIyy1ComponentReturnCode = 0;
    ExpErrorIyy1ComponentReasonCode_AS = ' ';
    ExpErrorIyy1ComponentReasonCode = 0;
    ExpErrorIyy1ComponentChecksum_AS = ' ';
    ExpErrorIyy1ComponentChecksum = "               ";
  }
  /**
   * Sets the current state of the instance to the VDF version.
   **/
  public void setFromVDF(VDF vdf)
  {
    throw new RuntimeException("can only execute setFromVDF for a Procedure Step.");
  }
  
  /**
   * Gets the VDF version of the current state of the instance.
   **/
  public VDF getVDF()
  {
    throw new RuntimeException("can only execute getVDF for a Procedure Step.");
  }
  
  /**
   * Sets the current instance based on the passed view.
   **/
  public void copyFrom(IExportView orig)
  {
    this.copyFrom((DYYY0251_OA) orig);
  }
  
  /**
   * Sets the current instance based on the passed view.
   **/
  public void copyFrom(DYYY0251_OA orig)
  {
    ExpGroupList_MA = orig.ExpGroupList_MA;
    for(int a = 0; a < 48; a++)
    {
      ExpGroupList_AC[a] = orig.ExpGroupList_AC[a];
      ExpGListChildCinstanceId_AS[a] = orig.ExpGListChildCinstanceId_AS[a];
      ExpGListChildCinstanceId[a] = orig.ExpGListChildCinstanceId[a];
      ExpGListChildCreferenceId_AS[a] = orig.ExpGListChildCreferenceId_AS[a];
      ExpGListChildCreferenceId[a] = orig.ExpGListChildCreferenceId[a];
      ExpGListChildCcreateUserId_AS[a] = orig.ExpGListChildCcreateUserId_AS[a];
      ExpGListChildCcreateUserId[a] = orig.ExpGListChildCcreateUserId[a];
      ExpGListChildCupdateUserId_AS[a] = orig.ExpGListChildCupdateUserId_AS[a];
      ExpGListChildCupdateUserId[a] = orig.ExpGListChildCupdateUserId[a];
      ExpGListChildCparentPkeyAttrText_AS[a] = orig.ExpGListChildCparentPkeyAttrText_AS[a];
      ExpGListChildCparentPkeyAttrText[a] = orig.ExpGListChildCparentPkeyAttrText[a];
      ExpGListChildCkeyAttrNum_AS[a] = orig.ExpGListChildCkeyAttrNum_AS[a];
      ExpGListChildCkeyAttrNum[a] = orig.ExpGListChildCkeyAttrNum[a];
      ExpGListChildCsearchAttrText_AS[a] = orig.ExpGListChildCsearchAttrText_AS[a];
      ExpGListChildCsearchAttrText[a] = orig.ExpGListChildCsearchAttrText[a];
      ExpGListChildCotherAttrText_AS[a] = orig.ExpGListChildCotherAttrText_AS[a];
      ExpGListChildCotherAttrText[a] = orig.ExpGListChildCotherAttrText[a];
    }
    ExpErrorIyy1ComponentSeverityCode_AS = orig.ExpErrorIyy1ComponentSeverityCode_AS;
    ExpErrorIyy1ComponentSeverityCode = orig.ExpErrorIyy1ComponentSeverityCode;
    ExpErrorIyy1ComponentRollbackIndicator_AS = orig.ExpErrorIyy1ComponentRollbackIndicator_AS;
    ExpErrorIyy1ComponentRollbackIndicator = orig.ExpErrorIyy1ComponentRollbackIndicator;
    ExpErrorIyy1ComponentOriginServid_AS = orig.ExpErrorIyy1ComponentOriginServid_AS;
    ExpErrorIyy1ComponentOriginServid = orig.ExpErrorIyy1ComponentOriginServid;
    ExpErrorIyy1ComponentContextString_AS = orig.ExpErrorIyy1ComponentContextString_AS;
    ExpErrorIyy1ComponentContextString = orig.ExpErrorIyy1ComponentContextString;
    ExpErrorIyy1ComponentReturnCode_AS = orig.ExpErrorIyy1ComponentReturnCode_AS;
    ExpErrorIyy1ComponentReturnCode = orig.ExpErrorIyy1ComponentReturnCode;
    ExpErrorIyy1ComponentReasonCode_AS = orig.ExpErrorIyy1ComponentReasonCode_AS;
    ExpErrorIyy1ComponentReasonCode = orig.ExpErrorIyy1ComponentReasonCode;
    ExpErrorIyy1ComponentChecksum_AS = orig.ExpErrorIyy1ComponentChecksum_AS;
    ExpErrorIyy1ComponentChecksum = orig.ExpErrorIyy1ComponentChecksum;
  }
}
