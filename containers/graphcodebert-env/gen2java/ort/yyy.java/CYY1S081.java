
package gen.ort.yyy;

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
//
//                    Source Code Generated by
//                           CA Gen 8.6
//
//    Copyright (c) 2023 CA Technologies. All rights reserved.
//
//    Name: CYY1S081_TYPE_LIST               Date: 2023/07/05
//    Target OS:   JVM                       Time: 15:09:28
//    Target DBMS: JDBC                      User: HakanBal
//    Access Method: JDBC           
//
//    Generation options:
//    Debug trace option selected
//    Data modeling constraint enforcement not selected
//    Optimized import view initialization not selected
//    Enforce default values with DBMS not selected
//    Init unspecified optional fields to NULL not selected
//
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// Import Statements
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
import java.lang.*;
import java.io.*;
import java.util.*;
import java.math.*;
import java.sql.*;
import com.ca.gen.vwrt.*;
import com.ca.gen.vwrt.types.*;
import com.ca.gen.vwrt.vdf.*;

import com.ca.gen.abrt.*;
import com.ca.gen.abrt.functions.*;
import com.ca.gen.abrt.cascade.*;
import com.ca.gen.abrt.trace.*;
import com.ca.gen.exits.common.*;
import com.ca.gen.odc.*;

public class CYY1S081 extends ABBase
{
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // IMPORT VIEW CLASS VARIABLE
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  CYY1S081_IA w_ia;
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // EXPORT VIEW CLASS VARIABLE
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  CYY1S081_OA w_oa;
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // LOCAL VIEW CLASS VARIABLE
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  CYY1S081_LA w_la;
  
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // ACTION BLOCK IMPORT/EXPORT VIEWS CLASS VARIABLES
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  gen.ort.yyy.CYYY9001_OA cyyy9001_oa;
  gen.ort.yyy.CYY1A131_OA cyy1a131_oa;
  gen.ort.yyy.CYY1A121_IA cyy1a121_ia;
  gen.ort.yyy.CYY1A121_OA cyy1a121_oa;
  gen.ort.yyy.CYYY9141_IA cyyy9141_ia;
  gen.ort.yyy.CYYY9141_OA cyyy9141_oa;
  gen.ort.yyy.CYYY0351_IA cyyy0351_ia;
  gen.ort.yyy.CYYY0351_OA cyyy0351_oa;
  gen.ort.yyy.ISC1Z021_IA isc1z021_ia;
  gen.ort.yyy.ISC1Z021_OA isc1z021_oa;
  gen.ort.yyy.CYYY9831_IA cyyy9831_ia;
  gen.ort.yyy.CYYY9831_OA cyyy9831_oa;
  gen.ort.yyy.IXX10002_OA ixx10002_oa;
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // REPEATING GROUP VIEW STATUS FIELDS 
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  boolean ExpGroupList_FL_001;
  int ExpGroupList_PS_001;
  boolean ExpGroupList_RF_001;
  public final static int ExpGroupList_MM_001 = 48;
  boolean LocGroupContext_FL_002;
  int LocGroupContext_PS_002;
  boolean LocGroupContext_RF_002;
  public final static int LocGroupContext_MM_002 = 9;
  boolean ImpGroupContext_FL_003;
  int ImpGroupContext_PS_003;
  boolean ImpGroupContext_RF_003;
  public final static int ImpGroupContext_MM_003 = 9;
  boolean ExpGroupList_FL_004;
  int ExpGroupList_PS_004;
  boolean ExpGroupList_RF_004;
  public final static int ExpGroupList_MM_004 = 48;
  boolean ImpGroupTrans_FL_005;
  int ImpGroupTrans_PS_005;
  boolean ImpGroupTrans_RF_005;
  public final static int ImpGroupTrans_MM_005 = 30;
  
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // MISC DECLARATIONS AND PROTOTYPES 
  //    FOLLOW AS NEEDED:             
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  boolean func_0022020321_esc_flag;
  boolean func_0020972307_esc_flag;
  boolean func_0020972303_esc_flag;
  boolean func_0020972510_esc_flag;
  boolean func_0020972516_esc_flag;
  boolean func_0020971528_esc_flag;
  boolean func_0020971609_esc_flag;
  PadView padview[] = new PadView [125];
  int trace_ret_code;
  PadText padtext[] = initPadText();
  public PadText [] initPadText()
  {
    PadText [] result = new PadText [PADTEXT_SIZE];
    result[0] = PadText.getInstance(   0,"+->   CYY1S081_TYPE_LIST                07/05/2023  15:09");
    result[1] = PadText.getInstance(   0,"!       IMPORTS:");
    result[2] = PadText.getInstance(   0,"!         Work View imp_command iyy1_component (Transient, Mandatory, Import only)");
    result[3] = PadText.getInstance(   0,"!           send_command");
    result[4] = PadText.getInstance(   0,"!         Work View imp_dialect iyy1_component (Transient, Mandatory, Import only)");
    result[5] = PadText.getInstance(   0,"!           dialect_cd");
    result[6] = PadText.getInstance(   0,"!         Entity View imp isc1_authorization_info (Transient, Mandatory, Import only)");
    result[7] = PadText.getInstance(   0,"!           userid");
    result[8] = PadText.getInstance(   0,"!           token_id");
    result[9] = PadText.getInstance(   0,"!           module_id");
    result[10] = PadText.getInstance(   0,"!           authority_object_id");
    result[11] = PadText.getInstance(   0,"!           version");
    result[12] = PadText.getInstance(   0,"!           working_unit_num");
    result[13] = PadText.getInstance(   0,"!         Work View imp_filter iyy1_list (Transient, Optional, Import only)");
    result[14] = PadText.getInstance(   0,"!           sort_option");
    result[15] = PadText.getInstance(   0,"!           scroll_type");
    result[16] = PadText.getInstance(   0,"!           list_direction");
    result[17] = PadText.getInstance(   0,"!           scroll_amount");
    result[18] = PadText.getInstance(   0,"!           order_by_field_num");
    result[19] = PadText.getInstance(   0,"!         Entity View imp_from type (Transient, Optional, Import only)");
    result[20] = PadText.getInstance(   0,"!           tinstance_id");
    result[21] = PadText.getInstance(   0,"!           tkey_attr_text");
    result[22] = PadText.getInstance(   0,"!           tsearch_attr_text");
    result[23] = PadText.getInstance(   0,"!         Entity View imp_filter_start type (Transient, Optional, Import only)");
    result[24] = PadText.getInstance(   0,"!           tkey_attr_text");
    result[25] = PadText.getInstance(   0,"!         Entity View imp_filter_stop type (Transient, Optional, Import only)");
    result[26] = PadText.getInstance(   0,"!           tkey_attr_text");
    result[27] = PadText.getInstance(   0,"!         Entity View imp_filter type (Transient, Optional, Import only)");
    result[28] = PadText.getInstance(   0,"!           tsearch_attr_text");
    result[29] = PadText.getInstance(   0,"!           tother_attr_text");
    result[30] = PadText.getInstance(   0,"!       EXPORTS:");
    result[31] = PadText.getInstance(   0,"!         Work View exp_reference iyy1_server_data (Transient, Export only)");
    result[32] = PadText.getInstance(   0,"!           server_date");
    result[33] = PadText.getInstance(   0,"!           server_time");
    result[34] = PadText.getInstance(   0,"!           reference_id");
    result[35] = PadText.getInstance(   0,"!         Entity View exp isc1_authorization_info (Transient, Export only)");
    result[36] = PadText.getInstance(   0,"!           token_id");
    result[37] = PadText.getInstance(   0,"!           authority_ind");
    result[38] = PadText.getInstance(   0,"!           authority_status_r");
    result[39] = PadText.getInstance(   0,"!           authority_status_u");
    result[40] = PadText.getInstance(   0,"!           authority_status_d");
    result[41] = PadText.getInstance(   0,"!           authority_status_l");
    result[42] = PadText.getInstance(   0,"!         Group View (48) exp_group_list");
    result[43] = PadText.getInstance(   0,"!           Entity View exp_g_list type (Transient, Export only)");
    result[44] = PadText.getInstance(   0,"!             tinstance_id");
    result[45] = PadText.getInstance(   0,"!             treference_id");
    result[46] = PadText.getInstance(   0,"!             tcreate_user_id");
    result[47] = PadText.getInstance(   0,"!             tupdate_user_id");
    result[48] = PadText.getInstance(   0,"!             tkey_attr_text");
    result[49] = PadText.getInstance(   0,"!             tsearch_attr_text");
    result[50] = PadText.getInstance(   0,"!             tother_attr_text");
    result[51] = PadText.getInstance(   0,"!             tother_attr_date");
    result[52] = PadText.getInstance(   0,"!             tother_attr_time");
    result[53] = PadText.getInstance(   0,"!             tother_attr_amount");
    result[54] = PadText.getInstance(   0,"!         Work View exp_msg iyy1_component (Transient, Export only)");
    result[55] = PadText.getInstance(   0,"!           severity_code");
    result[56] = PadText.getInstance(   0,"!           message_tx");
    result[57] = PadText.getInstance(   0,"!         Work View exp_error iyy1_component (Transient, Export only)");
    result[58] = PadText.getInstance(   0,"!           severity_code");
    result[59] = PadText.getInstance(   0,"!           rollback_indicator");
    result[60] = PadText.getInstance(   0,"!           origin_servid");
    result[61] = PadText.getInstance(   0,"!           context_string");
    result[62] = PadText.getInstance(   0,"!           return_code");
    result[63] = PadText.getInstance(   0,"!           reason_code");
    result[64] = PadText.getInstance(   0,"!           checksum");
    result[65] = PadText.getInstance(   0,"!       LOCALS:");
    result[66] = PadText.getInstance(   0,"!         Entity View loc_exp_client ixx1_client_runtime_info");
    result[67] = PadText.getInstance(   0,"!           token_text");
    result[68] = PadText.getInstance(   0,"!           ws_name_text");
    result[69] = PadText.getInstance(   0,"!           ws_ip_addr_text");
    result[70] = PadText.getInstance(   0,"!           ws_local_ts");
    result[71] = PadText.getInstance(   0,"!         Work View loc_reference iyy1_server_data");
    result[72] = PadText.getInstance(   0,"!           userid");
    result[73] = PadText.getInstance(   0,"!           server_date");
    result[74] = PadText.getInstance(   0,"!           server_time");
    result[75] = PadText.getInstance(   0,"!           reference_id");
    result[76] = PadText.getInstance(   0,"!           server_timestamp");
    result[77] = PadText.getInstance(   0,"!         Work View loc_error isc1_component");
    result[78] = PadText.getInstance(   0,"!           severity_code");
    result[79] = PadText.getInstance(   0,"!           rollback_indicator");
    result[80] = PadText.getInstance(   0,"!           origin_servid");
    result[81] = PadText.getInstance(   0,"!           context_string");
    result[82] = PadText.getInstance(   0,"!           return_code");
    result[83] = PadText.getInstance(   0,"!           reason_code");
    result[84] = PadText.getInstance(   0,"!           checksum");
    result[85] = PadText.getInstance(   0,"!         Group View (9) loc_group_context");
    result[86] = PadText.getInstance(   0,"!           Work View loc_g_context dont_change_text");
    result[87] = PadText.getInstance(   0,"!             text_150");
    result[88] = PadText.getInstance(   0,"!         Work View loc_error iyy1_component");
    result[89] = PadText.getInstance(   0,"!           severity_code");
    result[90] = PadText.getInstance(   0,"!           rollback_indicator");
    result[91] = PadText.getInstance(   0,"!           origin_servid");
    result[92] = PadText.getInstance(   0,"!           context_string");
    result[93] = PadText.getInstance(   0,"!           return_code");
    result[94] = PadText.getInstance(   0,"!           reason_code");
    result[95] = PadText.getInstance(   0,"!           checksum");
    result[96] = PadText.getInstance(   0,"!         Work View loc_context iyy1_component");
    result[97] = PadText.getInstance(   0,"!           context_string");
    result[98] = PadText.getInstance(   0,"!         Work View loc dont_change_return_codes");
    result[99] = PadText.getInstance(   0,"!           1_ok");
    result[100] = PadText.getInstance(   0,"!           n1110_unauthorized_operation");
    result[101] = PadText.getInstance(   0,"!           n1120_invalid_command");
    result[102] = PadText.getInstance(   0,"!         Work View loc dont_change_reason_codes");
    result[103] = PadText.getInstance(   0,"!           1_default");
    result[104] = PadText.getInstance(   0,"!");
    result[105] = PadText.getInstance(   0,"!     PROCEDURE STATEMENTS");
    result[106] = PadText.getInstance(   0,"!");
    result[107] = PadText.getInstance(   1,"!  NOTE: ");
    result[108] = PadText.getInstance(   1,"!  PURPOSE(CONTINUED)");
    result[109] = PadText.getInstance(   2,"!   ");
    result[110] = PadText.getInstance(   3,"!  NOTE: ");
    result[111] = PadText.getInstance(   3,"!  PRE-CONDITION:");
    result[112] = PadText.getInstance(   3,"!  INIT command, user info is given.");
    result[113] = PadText.getInstance(   3,"!  POST-CONDITION:");
    result[114] = PadText.getInstance(   3,"!  Security check results are generated.");
    result[115] = PadText.getInstance(   3,"!  RETURN CODE = 1, REASON CODE = 1");
    result[116] = PadText.getInstance(   4,"!   ");
    result[117] = PadText.getInstance(   5,"!  NOTE: ");
    result[118] = PadText.getInstance(   5,"!  PRE-CONDITION:");
    result[119] = PadText.getInstance(   5,"!  LIST command, filters, listing options are given.");
    result[120] = PadText.getInstance(   5,"!  POST-CONDITION:");
    result[121] = PadText.getInstance(   5,
      "!  EXP_GROUP list is generated based on records being read in coherence with listing options and filters.");
    result[122] = PadText.getInstance(   5,"!  RETURN CODE = 1, REASON CODE = 1");
    result[123] = PadText.getInstance(   6,"!   ");
    result[124] = PadText.getInstance(   7,"!  NOTE: ");
    result[125] = PadText.getInstance(   7,"!  PRE-CONDITION:");
    result[126] = PadText.getInstance(   7,"!  An invalid operation code is given.");
    result[127] = PadText.getInstance(   7,"!  POST-CONDITION:");
    result[128] = PadText.getInstance(   7,"!  No result is generated.");
    result[129] = PadText.getInstance(   7,"!  RETURN CODE = -1120, REASON CODE = 1");
    result[130] = PadText.getInstance(   7,"!  ");
    result[131] = PadText.getInstance(   8,"!  NOTE: ");
    result[132] = PadText.getInstance(   8,"!  PRE-CONDITION:");
    result[133] = PadText.getInstance(   8,"!  User is not authorized for the operation wanted.");
    result[134] = PadText.getInstance(   8,"!  POST-CONDITION:");
    result[135] = PadText.getInstance(   8,"!  No result is generated.");
    result[136] = PadText.getInstance(   8,"!  RETURN CODE = -1110, REASON CODE = 1");
    result[137] = PadText.getInstance(   8,"!  ");
    result[138] = PadText.getInstance(   9,"!  NOTE: ");
    result[139] = PadText.getInstance(   9,"!  RETURN / REASON  CODES");
    result[140] = PadText.getInstance(   9,"!  +1/1 Normal");
    result[141] = PadText.getInstance(   9,"!  -1110/1 Unathorized access");
    result[142] = PadText.getInstance(   9,"!  -1120/1 Erronous command");
    result[143] = PadText.getInstance(  10,"!   ");
    result[144] = PadText.getInstance(  11,"!  NOTE: ");
    result[145] = PadText.getInstance(  11,"!  RELEASE HISTORY");
    result[146] = PadText.getInstance(  11,"!  01_00 23-02-1998 New release");
    result[147] = PadText.getInstance(  12,"!   ");
    result[148] = PadText.getInstance(  13,"!  USE cyyy9001_exception_hndlng_dflt");
    result[149] = PadText.getInstance(  13,
      "!     WHICH EXPORTS: Work View exp_error iyy1_component FROM Work View exp_error iyy1_component");
    result[150] = PadText.getInstance(  14,"!   ");
    result[151] = PadText.getInstance(  15,"!  USE ixx10002_security_token_get");
    result[152] = PadText.getInstance(  15,
      "!     WHICH EXPORTS: Entity View loc_exp_client ixx1_client_runtime_info FROM Entity View exp ixx1_client_runtime_info");
    result[153] = PadText.getInstance(  16,"!  NOTE: ");
    result[154] = PadText.getInstance(  16,"!  **************************************************************");
    result[155] = PadText.getInstance(  16,"!  Return/Reason code values");
    result[156] = PadText.getInstance(  16,"!  ");
    result[157] = PadText.getInstance(  17,"!  NOTE: ");
    result[158] = PadText.getInstance(  17,"!  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
    result[159] = PadText.getInstance(  17,"!  Set the values of the return code/reason codes used");
    result[160] = PadText.getInstance(  17,"!  ");
    result[161] = PadText.getInstance(  18,"!  SET loc dont_change_return_codes 1_ok TO 1 ");
    result[162] = PadText.getInstance(  19,"!  SET loc dont_change_return_codes n1110_unauthorized_operation TO -1110 ");
    result[163] = PadText.getInstance(  20,"!  SET loc dont_change_return_codes n1120_invalid_command TO -1120 ");
    result[164] = PadText.getInstance(  21,"!   ");
    result[165] = PadText.getInstance(  22,"!  SET loc dont_change_reason_codes 1_default TO 1 ");
    result[166] = PadText.getInstance(  23,"!   ");
    result[167] = PadText.getInstance(  24,"!  NOTE: ");
    result[168] = PadText.getInstance(  24,"!  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
    result[169] = PadText.getInstance(  24,"!  Name the procedure below");
    result[170] = PadText.getInstance(  24,"!  ");
    result[171] = PadText.getInstance(  25,"!  SET SUBSCRIPT OF loc_group_context TO 1 ");
    result[172] = PadText.getInstance(  26,"!  SET loc_g_context dont_change_text text_150 TO \"CYY1S081\" ");
    result[173] = PadText.getInstance(  27,"!  SET SUBSCRIPT OF loc_group_context TO 2 ");
    result[174] = PadText.getInstance(  28,
      "!  SET loc_g_context dont_change_text text_150 TO imp_command iyy1_component send_command ");
    result[175] = PadText.getInstance(  29,"!   ");
    result[176] = PadText.getInstance(  30,"!  USE cyy1a131_server_init");
    result[177] = PadText.getInstance(  30,
      "!     WHICH EXPORTS: Work View loc_reference iyy1_server_data FROM Work View exp_reference iyy1_server_data");
    result[178] = PadText.getInstance(  31,"!  MOVE loc_reference iyy1_server_data TO exp_reference iyy1_server_data");
    result[179] = PadText.getInstance(  32,"!   ");
    result[180] = PadText.getInstance(  33,"!  NOTE: ");
    result[181] = PadText.getInstance(  33,"!  ****************************************************************");
    result[182] = PadText.getInstance(  33,"!  Security check");
    result[183] = PadText.getInstance(  33,"!  ");
    result[184] = PadText.getInstance(  34,"!  USE isc1z021_o_authorization_check_s");
    result[185] = PadText.getInstance(  34,
      "!     WHICH IMPORTS: Entity View imp isc1_authorization_info TO Entity View imp isc1_authorization_info");
    result[186] = PadText.getInstance(  34,
      "!     WHICH EXPORTS: Entity View exp isc1_authorization_info FROM Entity View exp isc1_authorization_info");
    result[187] = PadText.getInstance(  34,
      "!                    Work View loc_error isc1_component FROM Work View exp_error isc1_component");
    result[188] = PadText.getInstance(  35,"!   ");
    result[189] = PadText.getInstance(  36,"!  +->IF loc_error isc1_component return_code < loc dont_change_return_codes 1_ok");
    result[190] = PadText.getInstance(  37,"!  !  USE cyyy9831_mv_sc1_to_yy1");
    result[191] = PadText.getInstance(  37,
      "!  !     WHICH IMPORTS: Work View loc_error isc1_component TO Work View imp_error isc1_component");
    result[192] = PadText.getInstance(  37,
      "!  !     WHICH EXPORTS: Work View exp_error iyy1_component FROM Work View exp_error iyy1_component");
    result[193] = PadText.getInstance(  36,"!  +--");
    result[194] = PadText.getInstance(  38,"!   ");
    result[195] = PadText.getInstance(  39,"!  NOTE: ");
    result[196] = PadText.getInstance(  39,"!  ****************************************************************");
    result[197] = PadText.getInstance(  39,"!  All essential Server controls are being made...");
    result[198] = PadText.getInstance(  39,"!  ");
    result[199] = PadText.getInstance(  40,"!  +->IF exp_error iyy1_component return_code = loc dont_change_return_codes 1_ok");
    result[200] = PadText.getInstance(  41,"!  !   ");
    result[201] = PadText.getInstance(  42,"!  !  NOTE: ");
    result[202] = PadText.getInstance(  42,"!  !  ****************************************************************");
    result[203] = PadText.getInstance(  42,"!  !  Check the operation wanted.");
    result[204] = PadText.getInstance(  42,"!  !  ");
    result[205] = PadText.getInstance(  43,"!  !  SET loc_reference iyy1_server_data userid TO imp isc1_authorization_info userid ")
      ;
    result[206] = PadText.getInstance(  44,"!  !   ");
    result[207] = PadText.getInstance(  45,"!  !  +->CASE OF imp_command iyy1_component send_command");
    result[208] = PadText.getInstance(  45, 1, "!  !  +> CASE \"INIT\"");
    result[209] = PadText.getInstance(  45, 2, "!  !  +> CASE \"LIST\"");
    result[210] = PadText.getInstance(  46,"!  !  !  +->IF exp isc1_authorization_info authority_status_l ^= \"Y\"");
    result[211] = PadText.getInstance(  47,
      "!  !  !  !  SET exp_error iyy1_component return_code TO loc dont_change_return_codes n1110_unauthorized_operation ");
    result[212] = PadText.getInstance(  48,
      "!  !  !  !  SET exp_error iyy1_component reason_code TO loc dont_change_reason_codes 1_default ");
    result[213] = PadText.getInstance(  49,"!  !  !  !  SET SUBSCRIPT OF loc_group_context TO 3 ");
    result[214] = PadText.getInstance(  50,"!  !  !  !  SET loc_g_context dont_change_text text_150 TO CLIENT_USER_ID ");
    result[215] = PadText.getInstance(  46,"!  !  !  +--");
    result[216] = PadText.getInstance(  45, 3, "!  !  +> OTHERWISE");
    result[217] = PadText.getInstance(  51,
      "!  !  !  SET exp_error iyy1_component return_code TO loc dont_change_return_codes n1120_invalid_command ");
    result[218] = PadText.getInstance(  52,
      "!  !  !  SET exp_error iyy1_component reason_code TO loc dont_change_reason_codes 1_default ");
    result[219] = PadText.getInstance(  53,"!  !  !  SET SUBSCRIPT OF loc_group_context TO 3 ");
    result[220] = PadText.getInstance(  54,
      "!  !  !  SET loc_g_context dont_change_text text_150 TO imp_command iyy1_component send_command ");
    result[221] = PadText.getInstance(  45,"!  !  +--");
    result[222] = PadText.getInstance(  55,"!  !   ");
    result[223] = PadText.getInstance(  56,"!  !  NOTE: ");
    result[224] = PadText.getInstance(  56,"!  !  ****************************************************************");
    result[225] = PadText.getInstance(  56,"!  !  OK. Nothing left to control. Let' s build Context string.");
    result[226] = PadText.getInstance(  56,"!  !  ");
    result[227] = PadText.getInstance(  57,"!  !  NOTE: ");
    result[228] = PadText.getInstance(  57,"!  !  ****************************************************************");
    result[229] = PadText.getInstance(  57,"!  !  Generate Context string whether there is an error or not.");
    result[230] = PadText.getInstance(  57,"!  !  There' s message to return in error-free condition.");
    result[231] = PadText.getInstance(  57,"!  !  ");
    result[232] = PadText.getInstance(  58,"!  !  USE cyyy9141_context_string_set");
    result[233] = PadText.getInstance(  58,"!  !     WHICH IMPORTS: Group View  loc_group_context TO Group View imp_group_context");
    result[234] = PadText.getInstance(  58,
      "!  !     WHICH EXPORTS: Work View loc_error iyy1_component FROM Work View exp_error iyy1_component");
    result[235] = PadText.getInstance(  58,
      "!  !                    Work View loc_context iyy1_component FROM Work View exp_context iyy1_component");
    result[236] = PadText.getInstance(  59,"!  !  +->IF loc_error iyy1_component return_code < loc dont_change_return_codes 1_ok");
    result[237] = PadText.getInstance(  60,"!  !  !  MOVE loc_error iyy1_component TO exp_error iyy1_component");
    result[238] = PadText.getInstance(  59, 1, "!  !  +> ELSE");
    result[239] = PadText.getInstance(  61,
      "!  !  !  SET exp_error iyy1_component context_string TO loc_context iyy1_component context_string ");
    result[240] = PadText.getInstance(  59,"!  !  +--");
    result[241] = PadText.getInstance(  40,"!  +--");
    result[242] = PadText.getInstance(  62,"!   ");
    result[243] = PadText.getInstance(  63,"!  NOTE: ");
    result[244] = PadText.getInstance(  63,"!  ****************************************************************");
    result[245] = PadText.getInstance(  63,"!  Everything is Ok.");
    result[246] = PadText.getInstance(  63,"!  ");
    result[247] = PadText.getInstance(  64,"!  +->IF exp_error iyy1_component return_code = loc dont_change_return_codes 1_ok");
    result[248] = PadText.getInstance(  65,"!  !   ");
    result[249] = PadText.getInstance(  66,"!  !  +->CASE OF imp_command iyy1_component send_command");
    result[250] = PadText.getInstance(  66, 1, "!  !  +> CASE \"INIT\"");
    result[251] = PadText.getInstance(  67,"!  !  !   ");
    result[252] = PadText.getInstance(  68,"!  !  !  NOTE: ");
    result[253] = PadText.getInstance(  68,"!  !  !  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
    result[254] = PadText.getInstance(  68,
"!  !  !  Codes in this section can run ONLY IF when you UNCOMMENT The code at Client \"UD_PRIMARY_OPN\" event at INIT section.");
    result[255] = PadText.getInstance(  68,"!  !  !  ");
    result[256] = PadText.getInstance(  69,"!  !  !  NOTE: ");
    result[257] = PadText.getInstance(  69,"!  !  !  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
    result[258] = PadText.getInstance(  69,"!  !  !  Write code here that has to run at server initializition time");
    result[259] = PadText.getInstance(  69,"!  !  !  ");
    result[260] = PadText.getInstance(  66, 2, "!  !  +> CASE \"LIST\"");
    result[261] = PadText.getInstance(  70,"!  !  !  USE cyyy0351_type_list");
    result[262] = PadText.getInstance(  70,
      "!  !  !     WHICH IMPORTS: Work View imp_filter iyy1_list TO Work View imp_filter iyy1_list");
    result[263] = PadText.getInstance(  70,"!  !  !                    Entity View imp_filter type TO Entity View imp_filter type");
    result[264] = PadText.getInstance(  70,
      "!  !  !                    Entity View imp_filter_stop type TO Entity View imp_filter_stop type");
    result[265] = PadText.getInstance(  70,
      "!  !  !                    Entity View imp_filter_start type TO Entity View imp_filter_start type");
    result[266] = PadText.getInstance(  70,"!  !  !                    Entity View imp_from type TO Entity View imp_from type");
    result[267] = PadText.getInstance(  70,"!  !  !     WHICH EXPORTS: Group View  exp_group_list FROM Group View exp_group_list");
    result[268] = PadText.getInstance(  70,
      "!  !  !                    Work View loc_error iyy1_component FROM Work View exp_error iyy1_component");
    result[269] = PadText.getInstance(  71,"!  !  !  +->IF loc_error iyy1_component return_code < loc dont_change_return_codes 1_ok")
      ;
    result[270] = PadText.getInstance(  72,"!  !  !  !  NOTE: ");
    result[271] = PadText.getInstance(  72,"!  !  !  !  ****************************************************************");
    result[272] = PadText.getInstance(  72,"!  !  !  !  In case of error...");
    result[273] = PadText.getInstance(  72,"!  !  !  !  ");
    result[274] = PadText.getInstance(  73,"!  !  !  !  MOVE loc_error iyy1_component TO exp_error iyy1_component");
    result[275] = PadText.getInstance(  71,"!  !  !  +--");
    result[276] = PadText.getInstance(  66,"!  !  +--");
    result[277] = PadText.getInstance(  64,"!  +--");
    result[278] = PadText.getInstance(  74,"!   ");
    result[279] = PadText.getInstance(  75,"!  USE cyy1a121_server_termination");
    result[280] = PadText.getInstance(  75,
      "!     WHICH IMPORTS: Work View imp_dialect iyy1_component TO Work View imp_dialect iyy1_component");
    result[281] = PadText.getInstance(  75,
      "!                    Work View exp_error iyy1_component TO Work View imp_error iyy1_component");
    result[282] = PadText.getInstance(  75,
      "!     WHICH EXPORTS: Work View exp_error iyy1_component FROM Work View exp_error iyy1_component");
    result[283] = PadText.getInstance(  75,
      "!                    Work View exp_msg iyy1_component FROM Work View exp_error_msg iyy1_component");
    result[284] = PadText.getInstance(   0,"+---");
    result[285] = PadText.getInstance(PadText.LASTLINE,"************************* BOTTOM OF DATA *************************");
    return result;
  }
  final static int PADTEXT_SIZE = 286;
  //       +->   CYY1S081_TYPE_LIST                07/05/2023  15:09
  //       !       IMPORTS:
  //       !         Work View imp_command iyy1_component (Transient, Mandatory, Import only)
  //       !           send_command
  //       !         Work View imp_dialect iyy1_component (Transient, Mandatory, Import only)
  //       !           dialect_cd
  //       !         Entity View imp isc1_authorization_info (Transient, Mandatory, Import only)
  //       !           userid
  //       !           token_id
  //       !           module_id
  //       !           authority_object_id
  //       !           version
  //       !           working_unit_num
  //       !         Work View imp_filter iyy1_list (Transient, Optional, Import only)
  //       !           sort_option
  //       !           scroll_type
  //       !           list_direction
  //       !           scroll_amount
  //       !           order_by_field_num
  //       !         Entity View imp_from type (Transient, Optional, Import only)
  //       !           tinstance_id
  //       !           tkey_attr_text
  //       !           tsearch_attr_text
  //       !         Entity View imp_filter_start type (Transient, Optional, Import only)
  //       !           tkey_attr_text
  //       !         Entity View imp_filter_stop type (Transient, Optional, Import only)
  //       !           tkey_attr_text
  //       !         Entity View imp_filter type (Transient, Optional, Import only)
  //       !           tsearch_attr_text
  //       !           tother_attr_text
  //       !       EXPORTS:
  //       !         Work View exp_reference iyy1_server_data (Transient, Export only)
  //       !           server_date
  //       !           server_time
  //       !           reference_id
  //       !         Entity View exp isc1_authorization_info (Transient, Export only)
  //       !           token_id
  //       !           authority_ind
  //       !           authority_status_r
  //       !           authority_status_u
  //       !           authority_status_d
  //       !           authority_status_l
  //       !         Group View (48) exp_group_list
  //       !           Entity View exp_g_list type (Transient, Export only)
  //       !             tinstance_id
  //       !             treference_id
  //       !             tcreate_user_id
  //       !             tupdate_user_id
  //       !             tkey_attr_text
  //       !             tsearch_attr_text
  //       !             tother_attr_text
  //       !             tother_attr_date
  //       !             tother_attr_time
  //       !             tother_attr_amount
  //       !         Work View exp_msg iyy1_component (Transient, Export only)
  //       !           severity_code
  //       !           message_tx
  //       !         Work View exp_error iyy1_component (Transient, Export only)
  //       !           severity_code
  //       !           rollback_indicator
  //       !           origin_servid
  //       !           context_string
  //       !           return_code
  //       !           reason_code
  //       !           checksum
  //       !       LOCALS:
  //       !         Entity View loc_exp_client ixx1_client_runtime_info
  //       !           token_text
  //       !           ws_name_text
  //       !           ws_ip_addr_text
  //       !           ws_local_ts
  //       !         Work View loc_reference iyy1_server_data
  //       !           userid
  //       !           server_date
  //       !           server_time
  //       !           reference_id
  //       !           server_timestamp
  //       !         Work View loc_error isc1_component
  //       !           severity_code
  //       !           rollback_indicator
  //       !           origin_servid
  //       !           context_string
  //       !           return_code
  //       !           reason_code
  //       !           checksum
  //       !         Group View (9) loc_group_context
  //       !           Work View loc_g_context dont_change_text
  //       !             text_150
  //       !         Work View loc_error iyy1_component
  //       !           severity_code
  //       !           rollback_indicator
  //       !           origin_servid
  //       !           context_string
  //       !           return_code
  //       !           reason_code
  //       !           checksum
  //       !         Work View loc_context iyy1_component
  //       !           context_string
  //       !         Work View loc dont_change_return_codes
  //       !           1_ok
  //       !           n1110_unauthorized_operation
  //       !           n1120_invalid_command
  //       !         Work View loc dont_change_reason_codes
  //       !           1_default
  //       !
  //       !     PROCEDURE STATEMENTS
  //       !
  //     1 !  NOTE: 
  //     1 !  PURPOSE(CONTINUED)
  //     2 !   
  //     3 !  NOTE: 
  //     3 !  PRE-CONDITION:
  //     3 !  INIT command, user info is given.
  //     3 !  POST-CONDITION:
  //     3 !  Security check results are generated.
  //     3 !  RETURN CODE = 1, REASON CODE = 1
  //     4 !   
  //     5 !  NOTE: 
  //     5 !  PRE-CONDITION:
  //     5 !  LIST command, filters, listing options are given.
  //     5 !  POST-CONDITION:
  //     5 !  EXP_GROUP list is generated based on records being read in coherence with listing options and filters.
  //     5 !  RETURN CODE = 1, REASON CODE = 1
  //     6 !   
  //     7 !  NOTE: 
  //     7 !  PRE-CONDITION:
  //     7 !  An invalid operation code is given.
  //     7 !  POST-CONDITION:
  //     7 !  No result is generated.
  //     7 !  RETURN CODE = -1120, REASON CODE = 1
  //     7 !  
  //     8 !  NOTE: 
  //     8 !  PRE-CONDITION:
  //     8 !  User is not authorized for the operation wanted.
  //     8 !  POST-CONDITION:
  //     8 !  No result is generated.
  //     8 !  RETURN CODE = -1110, REASON CODE = 1
  //     8 !  
  //     9 !  NOTE: 
  //     9 !  RETURN / REASON  CODES
  //     9 !  +1/1 Normal
  //     9 !  -1110/1 Unathorized access
  //     9 !  -1120/1 Erronous command
  //    10 !   
  //    11 !  NOTE: 
  //    11 !  RELEASE HISTORY
  //    11 !  01_00 23-02-1998 New release
  //    12 !   
  //    13 !  USE cyyy9001_exception_hndlng_dflt
  //    13 !     WHICH EXPORTS: Work View exp_error iyy1_component FROM Work View exp_error iyy1_component
  //    14 !   
  //    15 !  USE ixx10002_security_token_get
  //    15 !     WHICH EXPORTS: Entity View loc_exp_client ixx1_client_runtime_info FROM Entity View exp ixx1_client_runtime_info
  //    16 !  NOTE: 
  //    16 !  **************************************************************
  //    16 !  Return/Reason code values
  //    16 !  
  //    17 !  NOTE: 
  //    17 !  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  //    17 !  Set the values of the return code/reason codes used
  //    17 !  
  //    18 !  SET loc dont_change_return_codes 1_ok TO 1 
  //    19 !  SET loc dont_change_return_codes n1110_unauthorized_operation TO -1110 
  //    20 !  SET loc dont_change_return_codes n1120_invalid_command TO -1120 
  //    21 !   
  //    22 !  SET loc dont_change_reason_codes 1_default TO 1 
  //    23 !   
  //    24 !  NOTE: 
  //    24 !  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  //    24 !  Name the procedure below
  //    24 !  
  //    25 !  SET SUBSCRIPT OF loc_group_context TO 1 
  //    26 !  SET loc_g_context dont_change_text text_150 TO "CYY1S081" 
  //    27 !  SET SUBSCRIPT OF loc_group_context TO 2 
  //    28 !  SET loc_g_context dont_change_text text_150 TO imp_command iyy1_component send_command 
  //    29 !   
  //    30 !  USE cyy1a131_server_init
  //    30 !     WHICH EXPORTS: Work View loc_reference iyy1_server_data FROM Work View exp_reference iyy1_server_data
  //    31 !  MOVE loc_reference iyy1_server_data TO exp_reference iyy1_server_data
  //    32 !   
  //    33 !  NOTE: 
  //    33 !  ****************************************************************
  //    33 !  Security check
  //    33 !  
  //    34 !  USE isc1z021_o_authorization_check_s
  //    34 !     WHICH IMPORTS: Entity View imp isc1_authorization_info TO Entity View imp isc1_authorization_info
  //    34 !     WHICH EXPORTS: Entity View exp isc1_authorization_info FROM Entity View exp isc1_authorization_info
  //    34 !                    Work View loc_error isc1_component FROM Work View exp_error isc1_component
  //    35 !   
  //    36 !  +->IF loc_error isc1_component return_code < loc dont_change_return_codes 1_ok
  //    37 !  !  USE cyyy9831_mv_sc1_to_yy1
  //    37 !  !     WHICH IMPORTS: Work View loc_error isc1_component TO Work View imp_error isc1_component
  //    37 !  !     WHICH EXPORTS: Work View exp_error iyy1_component FROM Work View exp_error iyy1_component
  //    36 !  +--
  //    38 !   
  //    39 !  NOTE: 
  //    39 !  ****************************************************************
  //    39 !  All essential Server controls are being made...
  //    39 !  
  //    40 !  +->IF exp_error iyy1_component return_code = loc dont_change_return_codes 1_ok
  //    41 !  !   
  //    42 !  !  NOTE: 
  //    42 !  !  ****************************************************************
  //    42 !  !  Check the operation wanted.
  //    42 !  !  
  //    43 !  !  SET loc_reference iyy1_server_data userid TO imp isc1_authorization_info userid 
  //    44 !  !   
  //    45 !  !  +->CASE OF imp_command iyy1_component send_command
  //    45 !  !  +> CASE "INIT"
  //    45 !  !  +> CASE "LIST"
  //    46 !  !  !  +->IF exp isc1_authorization_info authority_status_l ^= "Y"
  //    47 !  !  !  !  SET exp_error iyy1_component return_code TO loc dont_change_return_codes n1110_unauthorized_operation 
  //    48 !  !  !  !  SET exp_error iyy1_component reason_code TO loc dont_change_reason_codes 1_default 
  //    49 !  !  !  !  SET SUBSCRIPT OF loc_group_context TO 3 
  //    50 !  !  !  !  SET loc_g_context dont_change_text text_150 TO CLIENT_USER_ID 
  //    46 !  !  !  +--
  //    45 !  !  +> OTHERWISE
  //    51 !  !  !  SET exp_error iyy1_component return_code TO loc dont_change_return_codes n1120_invalid_command 
  //    52 !  !  !  SET exp_error iyy1_component reason_code TO loc dont_change_reason_codes 1_default 
  //    53 !  !  !  SET SUBSCRIPT OF loc_group_context TO 3 
  //    54 !  !  !  SET loc_g_context dont_change_text text_150 TO imp_command iyy1_component send_command 
  //    45 !  !  +--
  //    55 !  !   
  //    56 !  !  NOTE: 
  //    56 !  !  ****************************************************************
  //    56 !  !  OK. Nothing left to control. Let' s build Context string.
  //    56 !  !  
  //    57 !  !  NOTE: 
  //    57 !  !  ****************************************************************
  //    57 !  !  Generate Context string whether there is an error or not.
  //    57 !  !  There' s message to return in error-free condition.
  //    57 !  !  
  //    58 !  !  USE cyyy9141_context_string_set
  //    58 !  !     WHICH IMPORTS: Group View  loc_group_context TO Group View imp_group_context
  //    58 !  !     WHICH EXPORTS: Work View loc_error iyy1_component FROM Work View exp_error iyy1_component
  //    58 !  !                    Work View loc_context iyy1_component FROM Work View exp_context iyy1_component
  //    59 !  !  +->IF loc_error iyy1_component return_code < loc dont_change_return_codes 1_ok
  //    60 !  !  !  MOVE loc_error iyy1_component TO exp_error iyy1_component
  //    59 !  !  +> ELSE
  //    61 !  !  !  SET exp_error iyy1_component context_string TO loc_context iyy1_component context_string 
  //    59 !  !  +--
  //    40 !  +--
  //    62 !   
  //    63 !  NOTE: 
  //    63 !  ****************************************************************
  //    63 !  Everything is Ok.
  //    63 !  
  //    64 !  +->IF exp_error iyy1_component return_code = loc dont_change_return_codes 1_ok
  //    65 !  !   
  //    66 !  !  +->CASE OF imp_command iyy1_component send_command
  //    66 !  !  +> CASE "INIT"
  //    67 !  !  !   
  //    68 !  !  !  NOTE: 
  //    68 !  !  !  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  //    68 !  !  !  Codes in this section can run ONLY IF when you UNCOMMENT The code at Client "UD_PRIMARY_OPN" event at INIT 
  // section.
  //    68 !  !  !  
  //    69 !  !  !  NOTE: 
  //    69 !  !  !  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  //    69 !  !  !  Write code here that has to run at server initializition time
  //    69 !  !  !  
  //    66 !  !  +> CASE "LIST"
  //    70 !  !  !  USE cyyy0351_type_list
  //    70 !  !  !     WHICH IMPORTS: Work View imp_filter iyy1_list TO Work View imp_filter iyy1_list
  //    70 !  !  !                    Entity View imp_filter type TO Entity View imp_filter type
  //    70 !  !  !                    Entity View imp_filter_stop type TO Entity View imp_filter_stop type
  //    70 !  !  !                    Entity View imp_filter_start type TO Entity View imp_filter_start type
  //    70 !  !  !                    Entity View imp_from type TO Entity View imp_from type
  //    70 !  !  !     WHICH EXPORTS: Group View  exp_group_list FROM Group View exp_group_list
  //    70 !  !  !                    Work View loc_error iyy1_component FROM Work View exp_error iyy1_component
  //    71 !  !  !  +->IF loc_error iyy1_component return_code < loc dont_change_return_codes 1_ok
  //    72 !  !  !  !  NOTE: 
  //    72 !  !  !  !  ****************************************************************
  //    72 !  !  !  !  In case of error...
  //    72 !  !  !  !  
  //    73 !  !  !  !  MOVE loc_error iyy1_component TO exp_error iyy1_component
  //    71 !  !  !  +--
  //    66 !  !  +--
  //    64 !  +--
  //    74 !   
  //    75 !  USE cyy1a121_server_termination
  //    75 !     WHICH IMPORTS: Work View imp_dialect iyy1_component TO Work View imp_dialect iyy1_component
  //    75 !                    Work View exp_error iyy1_component TO Work View imp_error iyy1_component
  //    75 !     WHICH EXPORTS: Work View exp_error iyy1_component FROM Work View exp_error iyy1_component
  //    75 !                    Work View exp_msg iyy1_component FROM Work View exp_error_msg iyy1_component
  //       +---
  
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  //  CONSTRUCTOR FOR THE CLASS       
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  public CYY1S081()
  {
    iefCGenRlse = "CA Gen 8.6";
    ssCopyright = "Copyright (c) 2023 CA Technologies. All rights reserved.";
    iefCGenDate = "2023/07/05";
    iefCGenTime = "15:09:28";
    iefCGenEncy = "9.2.A6";
    iefCGenUserId = "HakanBal";
    iefCGenModel = "N8I_ORT_YYY_0112_TEMPLATE";
    iefCGenSubset = "ALL";
    iefCGenName = "CYY1S081_TYPE_LIST";
    nestingLevel = 0;
    valChkDeadlockTimeout = false;
    valChkDBError = false;
  }
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // ACTION BLOCK FUNCTION DECLARATIONS 
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  
  public void CYY1S081( Object in_runtime_parm1, 
  	IRuntimePStepContext in_runtime_parm2, 
  	GlobData in_globdata, 
  	CYY1S081_IA import_view, 
  	CYY1S081_OA export_view )
  {
    iefRuntimeParm1 = in_runtime_parm1;
    iefRuntimeParm2 = in_runtime_parm2;
    globdata = in_globdata;
    w_ia = import_view;
    w_oa = export_view;
    _CYY1S081();
  }
  
  private void _CYY1S081()
  {
    
    f_22020321_localAlloc("CYY1S081_TYPE_LIST");
    if ( globdata.getErrorData().getLastStatus() == ErrorData.IEF_ALLOCATION_ERROR_FL_LS )
    	return;
    
    ++(nestingLevel);
    try {
      f_22020321_init();
      f_22020321();
    } catch( ABException e ) {
    } finally {
      --(nestingLevel);
    }
    String last_stmt_num_saved = globdata.getStateData().getLastStatementNumber();
    globdata.getStateData().setLastStatementNumber( "9999999999" );
    try {
      f_0_trace();
    } catch( ABException e ) {
    }
    globdata.getStateData().setLastStatementNumber( last_stmt_num_saved );
  }
  public void f_22020321()
  	throws ABException
  {
    func_0022020321_esc_flag = false;
    globdata.getStateData().setCurrentABId( "0022020321" );
    globdata.getStateData().setCurrentABName( "CYY1S081_TYPE_LIST" );
    padview_init();
    globdata.getStateData().setLastStatementNumber( "0000000000" );
    f_0_trace();
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    //    PURPOSE(CONTINUED)                                              
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    //    PRE-CONDITION:                                                  
    //    INIT command, user info is given.                               
    //    POST-CONDITION:                                                 
    //    Security check results are generated.                           
    //    RETURN CODE = 1, REASON CODE = 1                                
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    //    PRE-CONDITION:                                                  
    //    LIST command, filters, listing options are given.               
    //    POST-CONDITION:                                                 
    //    EXP_GROUP list is generated based on records being read in coh  
    //    erence with listing options and filters.                        
    //    RETURN CODE = 1, REASON CODE = 1                                
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    //    PRE-CONDITION:                                                  
    //    An invalid operation code is given.                             
    //    POST-CONDITION:                                                 
    //    No result is generated.                                         
    //    RETURN CODE = -1120, REASON CODE = 1                            
    //                                                                    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    //    PRE-CONDITION:                                                  
    //    User is not authorized for the operation wanted.                
    //    POST-CONDITION:                                                 
    //    No result is generated.                                         
    //    RETURN CODE = -1110, REASON CODE = 1                            
    //                                                                    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    //    RETURN / REASON  CODES                                          
    //    +1/1 Normal                                                     
    //    -1110/1 Unathorized access                                      
    //    -1120/1 Erronous command                                        
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    //    RELEASE HISTORY                                                 
    //    01_00 23-02-1998 New release                                    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    
    globdata.getStateData().setLastStatementNumber( "0000000013" );
    f_0_trace();
    if ( trace_ret_code != 8 )
    {
      
      cyyy9001_oa = (gen.ort.yyy.CYYY9001_OA)(iefRuntimeParm2.getInstance("gen.ort.yyy.CYYY9001_OA"));
      globdata.getErrorData().setErrorEncounteredSW( ErrorData.NO_ERROR_FOUND_SW );
      iefRuntimeParm2.useActionBlock("gen.ort.yyy.CYYY9001", "CYYY9001", null, cyyy9001_oa);
      if ( ((!(globdata.getErrorData().getStatus().equals( ErrorData.NONE_SF ))) || (globdata.getErrorData().getErrorEncounteredSW() 
        != ErrorData.NO_ERROR_FOUND_SW)) || (globdata.getErrorData().getViewOverflowSW() != ErrorData.NO_ERROR_FOUND_SW) )
      {
        throw new ABException();
      }
      globdata.getStateData().setCurrentABId( "0022020321" );
      globdata.getStateData().setCurrentABName( "CYY1S081_TYPE_LIST" );
      globdata.getStateData().setLastStatementNumber( "0000000013" );
      w_oa.ExpErrorIyy1ComponentSeverityCode = FixedStringAttr.valueOf(cyyy9001_oa.ExpErrorIyy1ComponentSeverityCode, (short)1);
      w_oa.ExpErrorIyy1ComponentRollbackIndicator = FixedStringAttr.valueOf(cyyy9001_oa.ExpErrorIyy1ComponentRollbackIndicator, (
        short)1);
      w_oa.ExpErrorIyy1ComponentOriginServid = DoubleAttr.valueOf(cyyy9001_oa.ExpErrorIyy1ComponentOriginServid);
      w_oa.ExpErrorIyy1ComponentContextString = StringAttr.valueOf(cyyy9001_oa.ExpErrorIyy1ComponentContextString, (short)512);
      w_oa.ExpErrorIyy1ComponentReturnCode = IntAttr.valueOf(cyyy9001_oa.ExpErrorIyy1ComponentReturnCode);
      w_oa.ExpErrorIyy1ComponentReasonCode = IntAttr.valueOf(cyyy9001_oa.ExpErrorIyy1ComponentReasonCode);
      w_oa.ExpErrorIyy1ComponentChecksum = FixedStringAttr.valueOf(cyyy9001_oa.ExpErrorIyy1ComponentChecksum, (short)15);
      cyyy9001_oa.freeInstance();
      cyyy9001_oa = null;
    }
    
    globdata.getStateData().setLastStatementNumber( "0000000015" );
    f_0_trace();
    if ( trace_ret_code != 8 )
    {
      
      ixx10002_oa = (gen.ort.yyy.IXX10002_OA)(iefRuntimeParm2.getInstance("gen.ort.yyy.IXX10002_OA"));
      globdata.getErrorData().setErrorEncounteredSW( ErrorData.NO_ERROR_FOUND_SW );
      iefRuntimeParm2.useActionBlock("gen.ort.yyy.IXX10002", "IXX10002", null, ixx10002_oa);
      if ( ((!(globdata.getErrorData().getStatus().equals( ErrorData.NONE_SF ))) || (globdata.getErrorData().getErrorEncounteredSW() 
        != ErrorData.NO_ERROR_FOUND_SW)) || (globdata.getErrorData().getViewOverflowSW() != ErrorData.NO_ERROR_FOUND_SW) )
      {
        throw new ABException();
      }
      globdata.getStateData().setCurrentABId( "0022020321" );
      globdata.getStateData().setCurrentABName( "CYY1S081_TYPE_LIST" );
      globdata.getStateData().setLastStatementNumber( "0000000015" );
      w_la.LocExpClientIxx1ClientRuntimeInfoTokenText = FixedStringAttr.valueOf(ixx10002_oa.ExpIxx1ClientRuntimeInfoTokenText, (
        short)32);
      w_la.LocExpClientIxx1ClientRuntimeInfoWsNameText = FixedStringAttr.valueOf(ixx10002_oa.ExpIxx1ClientRuntimeInfoWsNameText, (
        short)10);
      w_la.LocExpClientIxx1ClientRuntimeInfoWsIpAddrText = FixedStringAttr.valueOf(ixx10002_oa.ExpIxx1ClientRuntimeInfoWsIpAddrText, 
        (short)15);
      w_la.LocExpClientIxx1ClientRuntimeInfoWsLocalTs = TimestampAttr.valueOf(ixx10002_oa.ExpIxx1ClientRuntimeInfoWsLocalTs);
      ixx10002_oa.freeInstance();
      ixx10002_oa = null;
    }
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    //    **************************************************************  
    //    Return/Reason code values                                       
    //                                                                    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    //    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!     
    //    Set the values of the return code/reason codes used             
    //                                                                    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    globdata.getStateData().setLastStatementNumber( "0000000018" );
    f_0_trace();
    if ( trace_ret_code != 8 )
    {
      w_la.LocDontChangeReturnCodesQ1Ok = IntAttr.valueOf((int)TIRD2DEC.TIRD2DC1(1, 0, TIRD2DEC.ROUND_NONE, 5));
    }
    globdata.getStateData().setLastStatementNumber( "0000000019" );
    f_0_trace();
    if ( trace_ret_code != 8 )
    {
      w_la.LocDontChangeReturnCodesN1110UnauthorizedOperation = IntAttr.valueOf((int)TIRD2DEC.TIRD2DC1(-1110, 0, TIRD2DEC.ROUND_NONE,
         5));
    }
    globdata.getStateData().setLastStatementNumber( "0000000020" );
    f_0_trace();
    if ( trace_ret_code != 8 )
    {
      w_la.LocDontChangeReturnCodesN1120InvalidCommand = IntAttr.valueOf((int)TIRD2DEC.TIRD2DC1(-1120, 0, TIRD2DEC.ROUND_NONE, 5));
    }
    
    globdata.getStateData().setLastStatementNumber( "0000000022" );
    f_0_trace();
    if ( trace_ret_code != 8 )
    {
      w_la.LocDontChangeReasonCodesQ1Default = IntAttr.valueOf((int)TIRD2DEC.TIRD2DC1(1, 0, TIRD2DEC.ROUND_NONE, 5));
    }
    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    //    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!                      
    //    Name the procedure below                                        
    //                                                                    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    globdata.getStateData().setLastStatementNumber( "0000000025" );
    f_0_trace();
    if ( trace_ret_code != 8 )
    {
      LocGroupContext_PS_002 = (int)TIRD2DEC.TIRD2DC1(1, 0, TIRD2DEC.ROUND_NONE, 0);
      if ( (LocGroupContext_PS_002 > w_la.LocGroupContext_MA) && (LocGroupContext_PS_002 <= 9) )
      w_la.LocGroupContext_MA = IntAttr.valueOf(LocGroupContext_PS_002);
    }
    globdata.getStateData().setLastStatementNumber( "0000000026" );
    f_0_trace();
    if ( trace_ret_code != 8 )
    {
      w_la.LocGContextDontChangeTextText150[LocGroupContext_PS_002-1] = FixedStringAttr.valueOf("CYY1S081", (short)150);
      f_173015135_rgvc();
    }
    globdata.getStateData().setLastStatementNumber( "0000000027" );
    f_0_trace();
    if ( trace_ret_code != 8 )
    {
      LocGroupContext_PS_002 = (int)TIRD2DEC.TIRD2DC1(2, 0, TIRD2DEC.ROUND_NONE, 0);
      if ( (LocGroupContext_PS_002 > w_la.LocGroupContext_MA) && (LocGroupContext_PS_002 <= 9) )
      w_la.LocGroupContext_MA = IntAttr.valueOf(LocGroupContext_PS_002);
    }
    globdata.getStateData().setLastStatementNumber( "0000000028" );
    f_0_trace();
    if ( trace_ret_code != 8 )
    {
      w_la.LocGContextDontChangeTextText150[LocGroupContext_PS_002-1] = FixedStringAttr.valueOf(
        w_ia.ImpCommandIyy1ComponentSendCommand, (short)150);
      f_173015135_rgvc();
    }
    
    globdata.getStateData().setLastStatementNumber( "0000000030" );
    f_0_trace();
    if ( trace_ret_code != 8 )
    {
      
      cyy1a131_oa = (gen.ort.yyy.CYY1A131_OA)(iefRuntimeParm2.getInstance("gen.ort.yyy.CYY1A131_OA"));
      globdata.getErrorData().setErrorEncounteredSW( ErrorData.NO_ERROR_FOUND_SW );
      iefRuntimeParm2.useActionBlock("gen.ort.yyy.CYY1A131", "CYY1A131", null, cyy1a131_oa);
      if ( ((!(globdata.getErrorData().getStatus().equals( ErrorData.NONE_SF ))) || (globdata.getErrorData().getErrorEncounteredSW() 
        != ErrorData.NO_ERROR_FOUND_SW)) || (globdata.getErrorData().getViewOverflowSW() != ErrorData.NO_ERROR_FOUND_SW) )
      {
        throw new ABException();
      }
      globdata.getStateData().setCurrentABId( "0022020321" );
      globdata.getStateData().setCurrentABName( "CYY1S081_TYPE_LIST" );
      globdata.getStateData().setLastStatementNumber( "0000000030" );
      w_la.LocReferenceIyy1ServerDataServerDate = DateAttr.valueOf(cyy1a131_oa.ExpReferenceIyy1ServerDataServerDate);
      w_la.LocReferenceIyy1ServerDataServerTime = TimeAttr.valueOf(cyy1a131_oa.ExpReferenceIyy1ServerDataServerTime);
      w_la.LocReferenceIyy1ServerDataReferenceId = TimestampAttr.valueOf(cyy1a131_oa.ExpReferenceIyy1ServerDataReferenceId);
      w_la.LocReferenceIyy1ServerDataServerTimestamp = TimestampAttr.valueOf(cyy1a131_oa.ExpReferenceIyy1ServerDataServerTimestamp);
      cyy1a131_oa.freeInstance();
      cyy1a131_oa = null;
    }
    globdata.getStateData().setLastStatementNumber( "0000000031" );
    f_0_trace();
    if ( trace_ret_code != 8 )
    {
      w_oa.ExpReferenceIyy1ServerDataServerDate = DateAttr.valueOf(w_la.LocReferenceIyy1ServerDataServerDate);
      w_oa.ExpReferenceIyy1ServerDataServerTime = TimeAttr.valueOf(w_la.LocReferenceIyy1ServerDataServerTime);
      w_oa.ExpReferenceIyy1ServerDataReferenceId = TimestampAttr.valueOf(w_la.LocReferenceIyy1ServerDataReferenceId);
    }
    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    //    **************************************************************  
    //    **                                                              
    //    Security check                                                  
    //                                                                    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    globdata.getStateData().setLastStatementNumber( "0000000034" );
    f_0_trace();
    if ( trace_ret_code != 8 )
    {
      
      isc1z021_ia = (gen.ort.yyy.ISC1Z021_IA)(iefRuntimeParm2.getInstance("gen.ort.yyy.ISC1Z021_IA"));
      isc1z021_oa = (gen.ort.yyy.ISC1Z021_OA)(iefRuntimeParm2.getInstance("gen.ort.yyy.ISC1Z021_OA"));
      isc1z021_ia.ImpIsc1AuthorizationInfoUserid = FixedStringAttr.valueOf(w_ia.ImpIsc1AuthorizationInfoUserid, (short)20);
      isc1z021_ia.ImpIsc1AuthorizationInfoTokenId = FixedStringAttr.valueOf(w_ia.ImpIsc1AuthorizationInfoTokenId, (short)32);
      isc1z021_ia.ImpIsc1AuthorizationInfoModuleId = FixedStringAttr.valueOf(w_ia.ImpIsc1AuthorizationInfoModuleId, (short)20);
      isc1z021_ia.ImpIsc1AuthorizationInfoAuthorityObjectId = FixedStringAttr.valueOf(w_ia.ImpIsc1AuthorizationInfoAuthorityObjectId,
         (short)20);
      isc1z021_ia.ImpIsc1AuthorizationInfoVersion = FixedStringAttr.valueOf(w_ia.ImpIsc1AuthorizationInfoVersion, (short)4);
      isc1z021_ia.ImpIsc1AuthorizationInfoWorkingUnitNum = IntAttr.valueOf(w_ia.ImpIsc1AuthorizationInfoWorkingUnitNum);
      globdata.getErrorData().setErrorEncounteredSW( ErrorData.NO_ERROR_FOUND_SW );
      iefRuntimeParm2.useActionBlock("gen.ort.yyy.ISC1Z021", "ISC1Z021", isc1z021_ia, isc1z021_oa);
      if ( ((!(globdata.getErrorData().getStatus().equals( ErrorData.NONE_SF ))) || (globdata.getErrorData().getErrorEncounteredSW() 
        != ErrorData.NO_ERROR_FOUND_SW)) || (globdata.getErrorData().getViewOverflowSW() != ErrorData.NO_ERROR_FOUND_SW) )
      {
        throw new ABException();
      }
      globdata.getStateData().setCurrentABId( "0022020321" );
      globdata.getStateData().setCurrentABName( "CYY1S081_TYPE_LIST" );
      globdata.getStateData().setLastStatementNumber( "0000000034" );
      w_la.LocErrorIsc1ComponentSeverityCode = FixedStringAttr.valueOf(isc1z021_oa.ExpErrorIsc1ComponentSeverityCode, (short)1);
      w_la.LocErrorIsc1ComponentRollbackIndicator = FixedStringAttr.valueOf(isc1z021_oa.ExpErrorIsc1ComponentRollbackIndicator, (
        short)1);
      w_la.LocErrorIsc1ComponentOriginServid = DoubleAttr.valueOf(isc1z021_oa.ExpErrorIsc1ComponentOriginServid);
      w_la.LocErrorIsc1ComponentContextString = StringAttr.valueOf(isc1z021_oa.ExpErrorIsc1ComponentContextString, (short)512);
      w_la.LocErrorIsc1ComponentReturnCode = IntAttr.valueOf(isc1z021_oa.ExpErrorIsc1ComponentReturnCode);
      w_la.LocErrorIsc1ComponentReasonCode = IntAttr.valueOf(isc1z021_oa.ExpErrorIsc1ComponentReasonCode);
      w_la.LocErrorIsc1ComponentChecksum = FixedStringAttr.valueOf(isc1z021_oa.ExpErrorIsc1ComponentChecksum, (short)15);
      w_oa.ExpIsc1AuthorizationInfoTokenId = FixedStringAttr.valueOf(isc1z021_oa.ExpIsc1AuthorizationInfoTokenId, (short)32);
      w_oa.ExpIsc1AuthorizationInfoAuthorityInd = FixedStringAttr.valueOf(isc1z021_oa.ExpIsc1AuthorizationInfoAuthorityInd, (short)1)
        ;
      w_oa.ExpIsc1AuthorizationInfoAuthorityStatusR = FixedStringAttr.valueOf(isc1z021_oa.ExpIsc1AuthorizationInfoAuthorityStatusR, (
        short)1);
      w_oa.ExpIsc1AuthorizationInfoAuthorityStatusU = FixedStringAttr.valueOf(isc1z021_oa.ExpIsc1AuthorizationInfoAuthorityStatusU, (
        short)1);
      w_oa.ExpIsc1AuthorizationInfoAuthorityStatusD = FixedStringAttr.valueOf(isc1z021_oa.ExpIsc1AuthorizationInfoAuthorityStatusD, (
        short)1);
      w_oa.ExpIsc1AuthorizationInfoAuthorityStatusL = FixedStringAttr.valueOf(isc1z021_oa.ExpIsc1AuthorizationInfoAuthorityStatusL, (
        short)1);
      isc1z021_ia.freeInstance();
      isc1z021_ia = null;
      isc1z021_oa.freeInstance();
      isc1z021_oa = null;
    }
    
    globdata.getStateData().setLastStatementNumber( "0000000036" );
    f_0_trace();
    if ( trace_ret_code != 8 )
    {
      if ( ((double) w_la.LocErrorIsc1ComponentReturnCode < (double) w_la.LocDontChangeReturnCodesQ1Ok) )
      {
        globdata.getStateData().setLastStatementNumber( "0000000037" );
        f_0_trace();
        if ( trace_ret_code != 8 )
        {
          
          cyyy9831_ia = (gen.ort.yyy.CYYY9831_IA)(iefRuntimeParm2.getInstance("gen.ort.yyy.CYYY9831_IA"));
          cyyy9831_oa = (gen.ort.yyy.CYYY9831_OA)(iefRuntimeParm2.getInstance("gen.ort.yyy.CYYY9831_OA"));
          cyyy9831_ia.ImpErrorIsc1ComponentSeverityCode = FixedStringAttr.valueOf(w_la.LocErrorIsc1ComponentSeverityCode, (short)1);
          cyyy9831_ia.ImpErrorIsc1ComponentRollbackIndicator = FixedStringAttr.valueOf(w_la.LocErrorIsc1ComponentRollbackIndicator, (
            short)1);
          cyyy9831_ia.ImpErrorIsc1ComponentOriginServid = DoubleAttr.valueOf(w_la.LocErrorIsc1ComponentOriginServid);
          cyyy9831_ia.ImpErrorIsc1ComponentContextString = StringAttr.valueOf(w_la.LocErrorIsc1ComponentContextString, (short)512);
          cyyy9831_ia.ImpErrorIsc1ComponentReturnCode = IntAttr.valueOf(w_la.LocErrorIsc1ComponentReturnCode);
          cyyy9831_ia.ImpErrorIsc1ComponentReasonCode = IntAttr.valueOf(w_la.LocErrorIsc1ComponentReasonCode);
          cyyy9831_ia.ImpErrorIsc1ComponentChecksum = FixedStringAttr.valueOf(w_la.LocErrorIsc1ComponentChecksum, (short)15);
          globdata.getErrorData().setErrorEncounteredSW( ErrorData.NO_ERROR_FOUND_SW );
          iefRuntimeParm2.useActionBlock("gen.ort.yyy.CYYY9831", "CYYY9831", cyyy9831_ia, cyyy9831_oa);
          if ( ((!(globdata.getErrorData().getStatus().equals( ErrorData.NONE_SF ))) || (globdata.getErrorData()
            .getErrorEncounteredSW() != ErrorData.NO_ERROR_FOUND_SW)) || (globdata.getErrorData().getViewOverflowSW() != 
            ErrorData.NO_ERROR_FOUND_SW) )
          {
            throw new ABException();
          }
          globdata.getStateData().setCurrentABId( "0022020321" );
          globdata.getStateData().setCurrentABName( "CYY1S081_TYPE_LIST" );
          globdata.getStateData().setLastStatementNumber( "0000000037" );
          w_oa.ExpErrorIyy1ComponentSeverityCode = FixedStringAttr.valueOf(cyyy9831_oa.ExpErrorIyy1ComponentSeverityCode, (short)1);
          w_oa.ExpErrorIyy1ComponentRollbackIndicator = FixedStringAttr.valueOf(cyyy9831_oa.ExpErrorIyy1ComponentRollbackIndicator, (
            short)1);
          w_oa.ExpErrorIyy1ComponentOriginServid = DoubleAttr.valueOf(cyyy9831_oa.ExpErrorIyy1ComponentOriginServid);
          w_oa.ExpErrorIyy1ComponentContextString = StringAttr.valueOf(cyyy9831_oa.ExpErrorIyy1ComponentContextString, (short)512);
          w_oa.ExpErrorIyy1ComponentReturnCode = IntAttr.valueOf(cyyy9831_oa.ExpErrorIyy1ComponentReturnCode);
          w_oa.ExpErrorIyy1ComponentReasonCode = IntAttr.valueOf(cyyy9831_oa.ExpErrorIyy1ComponentReasonCode);
          w_oa.ExpErrorIyy1ComponentChecksum = FixedStringAttr.valueOf(cyyy9831_oa.ExpErrorIyy1ComponentChecksum, (short)15);
          cyyy9831_ia.freeInstance();
          cyyy9831_ia = null;
          cyyy9831_oa.freeInstance();
          cyyy9831_oa = null;
        }
      }
      
    }
    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    //    **************************************************************  
    //    **                                                              
    //    All essential Server controls are being made...                 
    //                                                                    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    globdata.getStateData().setLastStatementNumber( "0000000040" );
    f_0_trace();
    if ( trace_ret_code != 8 )
    {
      if ( ((double) w_oa.ExpErrorIyy1ComponentReturnCode == (double) w_la.LocDontChangeReturnCodesQ1Ok) )
      {
        f_20972307();
      }
      
    }
    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    //    **************************************************************  
    //    **                                                              
    //    Everything is Ok.                                               
    //                                                                    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    globdata.getStateData().setLastStatementNumber( "0000000064" );
    f_0_trace();
    if ( trace_ret_code != 8 )
    {
      if ( ((double) w_oa.ExpErrorIyy1ComponentReturnCode == (double) w_la.LocDontChangeReturnCodesQ1Ok) )
      {
        f_20972303();
      }
      
    }
    
    globdata.getStateData().setLastStatementNumber( "0000000075" );
    f_0_trace();
    if ( trace_ret_code != 8 )
    {
      
      cyy1a121_ia = (gen.ort.yyy.CYY1A121_IA)(iefRuntimeParm2.getInstance("gen.ort.yyy.CYY1A121_IA"));
      cyy1a121_oa = (gen.ort.yyy.CYY1A121_OA)(iefRuntimeParm2.getInstance("gen.ort.yyy.CYY1A121_OA"));
      cyy1a121_ia.ImpErrorIyy1ComponentSeverityCode = FixedStringAttr.valueOf(w_oa.ExpErrorIyy1ComponentSeverityCode, (short)1);
      cyy1a121_ia.ImpErrorIyy1ComponentRollbackIndicator = FixedStringAttr.valueOf(w_oa.ExpErrorIyy1ComponentRollbackIndicator, (
        short)1);
      cyy1a121_ia.ImpErrorIyy1ComponentOriginServid = DoubleAttr.valueOf(w_oa.ExpErrorIyy1ComponentOriginServid);
      cyy1a121_ia.ImpErrorIyy1ComponentContextString = StringAttr.valueOf(w_oa.ExpErrorIyy1ComponentContextString, (short)512);
      cyy1a121_ia.ImpErrorIyy1ComponentReturnCode = IntAttr.valueOf(w_oa.ExpErrorIyy1ComponentReturnCode);
      cyy1a121_ia.ImpErrorIyy1ComponentReasonCode = IntAttr.valueOf(w_oa.ExpErrorIyy1ComponentReasonCode);
      cyy1a121_ia.ImpErrorIyy1ComponentChecksum = FixedStringAttr.valueOf(w_oa.ExpErrorIyy1ComponentChecksum, (short)15);
      cyy1a121_ia.ImpDialectIyy1ComponentDialectCd = FixedStringAttr.valueOf(w_ia.ImpDialectIyy1ComponentDialectCd, (short)2);
      globdata.getErrorData().setErrorEncounteredSW( ErrorData.NO_ERROR_FOUND_SW );
      iefRuntimeParm2.useActionBlock("gen.ort.yyy.CYY1A121", "CYY1A121", cyy1a121_ia, cyy1a121_oa);
      if ( ((!(globdata.getErrorData().getStatus().equals( ErrorData.NONE_SF ))) || (globdata.getErrorData().getErrorEncounteredSW() 
        != ErrorData.NO_ERROR_FOUND_SW)) || (globdata.getErrorData().getViewOverflowSW() != ErrorData.NO_ERROR_FOUND_SW) )
      {
        throw new ABException();
      }
      globdata.getStateData().setCurrentABId( "0022020321" );
      globdata.getStateData().setCurrentABName( "CYY1S081_TYPE_LIST" );
      globdata.getStateData().setLastStatementNumber( "0000000075" );
      w_oa.ExpMsgIyy1ComponentSeverityCode = FixedStringAttr.valueOf(cyy1a121_oa.ExpErrorMsgIyy1ComponentSeverityCode, (short)1);
      w_oa.ExpMsgIyy1ComponentMessageTx = StringAttr.valueOf(cyy1a121_oa.ExpErrorMsgIyy1ComponentMessageTx, (short)512);
      w_oa.ExpErrorIyy1ComponentSeverityCode = FixedStringAttr.valueOf(cyy1a121_oa.ExpErrorIyy1ComponentSeverityCode, (short)1);
      w_oa.ExpErrorIyy1ComponentRollbackIndicator = FixedStringAttr.valueOf(cyy1a121_oa.ExpErrorIyy1ComponentRollbackIndicator, (
        short)1);
      w_oa.ExpErrorIyy1ComponentOriginServid = DoubleAttr.valueOf(cyy1a121_oa.ExpErrorIyy1ComponentOriginServid);
      w_oa.ExpErrorIyy1ComponentContextString = StringAttr.valueOf(cyy1a121_oa.ExpErrorIyy1ComponentContextString, (short)512);
      w_oa.ExpErrorIyy1ComponentReturnCode = IntAttr.valueOf(cyy1a121_oa.ExpErrorIyy1ComponentReturnCode);
      w_oa.ExpErrorIyy1ComponentReasonCode = IntAttr.valueOf(cyy1a121_oa.ExpErrorIyy1ComponentReasonCode);
      w_oa.ExpErrorIyy1ComponentChecksum = FixedStringAttr.valueOf(cyy1a121_oa.ExpErrorIyy1ComponentChecksum, (short)15);
      cyy1a121_ia.freeInstance();
      cyy1a121_ia = null;
      cyy1a121_oa.freeInstance();
      cyy1a121_oa = null;
    }
  }
  
  
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // SUBORDINATE FUNCTIONS
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  
  
  public void f_20972307()
  	throws ABException
  {
    func_0020972307_esc_flag = false;
    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    //    **************************************************************  
    //    **                                                              
    //    Check the operation wanted.                                     
    //                                                                    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    globdata.getStateData().setLastStatementNumber( "0000000043" );
    f_0_trace();
    if ( trace_ret_code != 8 )
    {
      w_la.LocReferenceIyy1ServerDataUserid = FixedStringAttr.valueOf(w_ia.ImpIsc1AuthorizationInfoUserid, (short)8);
    }
    
    globdata.getStateData().setLastStatementNumber( "0000000045" );
    f_0_trace();
    if ( trace_ret_code != 8 )
    {
      if ( CompareExit.compareTo(w_ia.ImpCommandIyy1ComponentSendCommand, "INIT") == 0 )
      {
        globdata.getStateData().setLastSubStatementNumber( "1" );
        f_0_trace();
        {
          // Empty statement here.
          ;
        }
      }
      else if ( CompareExit.compareTo(w_ia.ImpCommandIyy1ComponentSendCommand, "LIST") == 0 )
      {
        globdata.getStateData().setLastSubStatementNumber( "2" );
        f_0_trace();
        {
          f_20972510();
        }
      }
      else {
        globdata.getStateData().setLastSubStatementNumber( "3" );
        f_0_trace();
        {
          f_20972516();
        }
      }
    }
    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    //    **************************************************************  
    //    **                                                              
    //    OK. Nothing left to control. Let' s build Context string.       
    //                                                                    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    //    **************************************************************  
    //    **                                                              
    //    Generate Context string whether there is an error or not.       
    //    There' s message to return in error-free condition.             
    //                                                                    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    globdata.getStateData().setLastStatementNumber( "0000000058" );
    f_0_trace();
    if ( trace_ret_code != 8 )
    {
      
      cyyy9141_ia = (gen.ort.yyy.CYYY9141_IA)(iefRuntimeParm2.getInstance("gen.ort.yyy.CYYY9141_IA"));
      cyyy9141_oa = (gen.ort.yyy.CYYY9141_OA)(iefRuntimeParm2.getInstance("gen.ort.yyy.CYYY9141_OA"));
      cyyy9141_ia.ImpGroupContext_MA = IntAttr.valueOf(w_la.LocGroupContext_MA);
      for(adim1 = 1; adim1 <= w_la.LocGroupContext_MA; ++(adim1))
      {
        cyyy9141_ia.ImpGContextDontChangeTextText150[adim1-1] = FixedStringAttr.valueOf(w_la.LocGContextDontChangeTextText150[
          adim1-1], (short)150);
      }
      for(adim1 = w_la.LocGroupContext_MA + 1; adim1 <= 9; ++(adim1))
      {
        cyyy9141_ia.ImpGContextDontChangeTextText150[adim1-1] = 
"                                                                                                                                                      "
          ;
      }
      globdata.getErrorData().setErrorEncounteredSW( ErrorData.NO_ERROR_FOUND_SW );
      iefRuntimeParm2.useActionBlock("gen.ort.yyy.CYYY9141", "CYYY9141", cyyy9141_ia, cyyy9141_oa);
      if ( ((!(globdata.getErrorData().getStatus().equals( ErrorData.NONE_SF ))) || (globdata.getErrorData().getErrorEncounteredSW() 
        != ErrorData.NO_ERROR_FOUND_SW)) || (globdata.getErrorData().getViewOverflowSW() != ErrorData.NO_ERROR_FOUND_SW) )
      {
        throw new ABException();
      }
      globdata.getStateData().setCurrentABId( "0022020321" );
      globdata.getStateData().setCurrentABName( "CYY1S081_TYPE_LIST" );
      globdata.getStateData().setLastStatementNumber( "0000000058" );
      w_la.LocContextIyy1ComponentContextString = StringAttr.valueOf(cyyy9141_oa.ExpContextIyy1ComponentContextString, (short)512);
      w_la.LocErrorIyy1ComponentSeverityCode = FixedStringAttr.valueOf(cyyy9141_oa.ExpErrorIyy1ComponentSeverityCode, (short)1);
      w_la.LocErrorIyy1ComponentRollbackIndicator = FixedStringAttr.valueOf(cyyy9141_oa.ExpErrorIyy1ComponentRollbackIndicator, (
        short)1);
      w_la.LocErrorIyy1ComponentOriginServid = DoubleAttr.valueOf(cyyy9141_oa.ExpErrorIyy1ComponentOriginServid);
      w_la.LocErrorIyy1ComponentContextString = StringAttr.valueOf(cyyy9141_oa.ExpErrorIyy1ComponentContextString, (short)512);
      w_la.LocErrorIyy1ComponentReturnCode = IntAttr.valueOf(cyyy9141_oa.ExpErrorIyy1ComponentReturnCode);
      w_la.LocErrorIyy1ComponentReasonCode = IntAttr.valueOf(cyyy9141_oa.ExpErrorIyy1ComponentReasonCode);
      w_la.LocErrorIyy1ComponentChecksum = FixedStringAttr.valueOf(cyyy9141_oa.ExpErrorIyy1ComponentChecksum, (short)15);
      cyyy9141_ia.freeInstance();
      cyyy9141_ia = null;
      cyyy9141_oa.freeInstance();
      cyyy9141_oa = null;
    }
    globdata.getStateData().setLastStatementNumber( "0000000059" );
    f_0_trace();
    if ( trace_ret_code != 8 )
    {
      if ( ((double) w_la.LocErrorIyy1ComponentReturnCode < (double) w_la.LocDontChangeReturnCodesQ1Ok) )
      {
        globdata.getStateData().setLastStatementNumber( "0000000060" );
        f_0_trace();
        if ( trace_ret_code != 8 )
        {
          w_oa.ExpErrorIyy1ComponentSeverityCode = FixedStringAttr.valueOf(w_la.LocErrorIyy1ComponentSeverityCode, (short)1);
          w_oa.ExpErrorIyy1ComponentRollbackIndicator = FixedStringAttr.valueOf(w_la.LocErrorIyy1ComponentRollbackIndicator, (short)
            1);
          w_oa.ExpErrorIyy1ComponentOriginServid = DoubleAttr.valueOf(w_la.LocErrorIyy1ComponentOriginServid);
          w_oa.ExpErrorIyy1ComponentContextString = StringAttr.valueOf(w_la.LocErrorIyy1ComponentContextString, (short)512);
          w_oa.ExpErrorIyy1ComponentReturnCode = IntAttr.valueOf(w_la.LocErrorIyy1ComponentReturnCode);
          w_oa.ExpErrorIyy1ComponentReasonCode = IntAttr.valueOf(w_la.LocErrorIyy1ComponentReasonCode);
          w_oa.ExpErrorIyy1ComponentChecksum = FixedStringAttr.valueOf(w_la.LocErrorIyy1ComponentChecksum, (short)15);
        }
      }
      else 
      {
        globdata.getStateData().setLastSubStatementNumber( "1" );
        f_0_trace();
        {
          globdata.getStateData().setLastStatementNumber( "0000000061" );
          f_0_trace();
          if ( trace_ret_code != 8 )
          {
            w_oa.ExpErrorIyy1ComponentContextString = StringAttr.valueOf(w_la.LocContextIyy1ComponentContextString, (short)512);
          }
        }
      }
      
    }
  }
  
  public void f_20972303()
  	throws ABException
  {
    func_0020972303_esc_flag = false;
    
    globdata.getStateData().setLastStatementNumber( "0000000066" );
    f_0_trace();
    if ( trace_ret_code != 8 )
    {
      if ( CompareExit.compareTo(w_ia.ImpCommandIyy1ComponentSendCommand, "INIT") == 0 )
      {
        globdata.getStateData().setLastSubStatementNumber( "1" );
        f_0_trace();
        {
          f_20971528();
        }
      }
      else if ( CompareExit.compareTo(w_ia.ImpCommandIyy1ComponentSendCommand, "LIST") == 0 )
      {
        globdata.getStateData().setLastSubStatementNumber( "2" );
        f_0_trace();
        {
          f_20971609();
        }
      }
    }
  }
  
  public void f_20972510()
  	throws ABException
  {
    func_0020972510_esc_flag = false;
    globdata.getStateData().setLastStatementNumber( "0000000046" );
    f_0_trace();
    if ( trace_ret_code != 8 )
    {
      if ( CompareExit.compareTo(w_oa.ExpIsc1AuthorizationInfoAuthorityStatusL, "Y") != 0 )
      {
        globdata.getStateData().setLastStatementNumber( "0000000047" );
        f_0_trace();
        if ( trace_ret_code != 8 )
        {
          w_oa.ExpErrorIyy1ComponentReturnCode = IntAttr.valueOf((int)TIRD2DEC.TIRD2DC1((double) 
            w_la.LocDontChangeReturnCodesN1110UnauthorizedOperation, 0, TIRD2DEC.ROUND_NONE, 5));
        }
        globdata.getStateData().setLastStatementNumber( "0000000048" );
        f_0_trace();
        if ( trace_ret_code != 8 )
        {
          w_oa.ExpErrorIyy1ComponentReasonCode = IntAttr.valueOf((int)TIRD2DEC.TIRD2DC1((double) 
            w_la.LocDontChangeReasonCodesQ1Default, 0, TIRD2DEC.ROUND_NONE, 5));
        }
        globdata.getStateData().setLastStatementNumber( "0000000049" );
        f_0_trace();
        if ( trace_ret_code != 8 )
        {
          LocGroupContext_PS_002 = (int)TIRD2DEC.TIRD2DC1(3, 0, TIRD2DEC.ROUND_NONE, 0);
          if ( (LocGroupContext_PS_002 > w_la.LocGroupContext_MA) && (LocGroupContext_PS_002 <= 9) )
          w_la.LocGroupContext_MA = IntAttr.valueOf(LocGroupContext_PS_002);
        }
        globdata.getStateData().setLastStatementNumber( "0000000050" );
        f_0_trace();
        if ( trace_ret_code != 8 )
        {
          w_la.LocGContextDontChangeTextText150[LocGroupContext_PS_002-1] = FixedStringAttr.valueOf(globdata.getStateData()
            .getClientUserId(), (short)150);
          f_173015135_rgvc();
        }
      }
      
    }
  }
  
  public void f_20972516()
  	throws ABException
  {
    func_0020972516_esc_flag = false;
    globdata.getStateData().setLastStatementNumber( "0000000051" );
    f_0_trace();
    if ( trace_ret_code != 8 )
    {
      w_oa.ExpErrorIyy1ComponentReturnCode = IntAttr.valueOf((int)TIRD2DEC.TIRD2DC1((double) 
        w_la.LocDontChangeReturnCodesN1120InvalidCommand, 0, TIRD2DEC.ROUND_NONE, 5));
    }
    globdata.getStateData().setLastStatementNumber( "0000000052" );
    f_0_trace();
    if ( trace_ret_code != 8 )
    {
      w_oa.ExpErrorIyy1ComponentReasonCode = IntAttr.valueOf((int)TIRD2DEC.TIRD2DC1((double) w_la.LocDontChangeReasonCodesQ1Default, 
        0, TIRD2DEC.ROUND_NONE, 5));
    }
    globdata.getStateData().setLastStatementNumber( "0000000053" );
    f_0_trace();
    if ( trace_ret_code != 8 )
    {
      LocGroupContext_PS_002 = (int)TIRD2DEC.TIRD2DC1(3, 0, TIRD2DEC.ROUND_NONE, 0);
      if ( (LocGroupContext_PS_002 > w_la.LocGroupContext_MA) && (LocGroupContext_PS_002 <= 9) )
      w_la.LocGroupContext_MA = IntAttr.valueOf(LocGroupContext_PS_002);
    }
    globdata.getStateData().setLastStatementNumber( "0000000054" );
    f_0_trace();
    if ( trace_ret_code != 8 )
    {
      w_la.LocGContextDontChangeTextText150[LocGroupContext_PS_002-1] = FixedStringAttr.valueOf(
        w_ia.ImpCommandIyy1ComponentSendCommand, (short)150);
      f_173015135_rgvc();
    }
  }
  
  public void f_20971528()
  	throws ABException
  {
    func_0020971528_esc_flag = false;
    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    //    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  
    //    !!                                                              
    //    Codes in this section can run ONLY IF when you UNCOMMENT        
    //    The code at Client "UD_PRIMARY_OPN" event at INIT section.      
    //                                                                    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    //    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  
    //    !!                                                              
    //    Write code here that has to run at server initializition time   
    //                                                                    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  }
  
  public void f_20971609()
  	throws ABException
  {
    func_0020971609_esc_flag = false;
    globdata.getStateData().setLastStatementNumber( "0000000070" );
    f_0_trace();
    if ( trace_ret_code != 8 )
    {
      
      cyyy0351_ia = (gen.ort.yyy.CYYY0351_IA)(iefRuntimeParm2.getInstance("gen.ort.yyy.CYYY0351_IA"));
      cyyy0351_oa = (gen.ort.yyy.CYYY0351_OA)(iefRuntimeParm2.getInstance("gen.ort.yyy.CYYY0351_OA"));
      cyyy0351_ia.ImpFromTypeTinstanceId = TimestampAttr.valueOf(w_ia.ImpFromTypeTinstanceId);
      cyyy0351_ia.ImpFromTypeTkeyAttrText = FixedStringAttr.valueOf(w_ia.ImpFromTypeTkeyAttrText, (short)4);
      cyyy0351_ia.ImpFromTypeTsearchAttrText = FixedStringAttr.valueOf(w_ia.ImpFromTypeTsearchAttrText, (short)20);
      cyyy0351_ia.ImpFilterStartTypeTkeyAttrText = FixedStringAttr.valueOf(w_ia.ImpFilterStartTypeTkeyAttrText, (short)4);
      cyyy0351_ia.ImpFilterStopTypeTkeyAttrText = FixedStringAttr.valueOf(w_ia.ImpFilterStopTypeTkeyAttrText, (short)4);
      cyyy0351_ia.ImpFilterTypeTsearchAttrText = FixedStringAttr.valueOf(w_ia.ImpFilterTypeTsearchAttrText, (short)20);
      cyyy0351_ia.ImpFilterTypeTotherAttrText = FixedStringAttr.valueOf(w_ia.ImpFilterTypeTotherAttrText, (short)2);
      cyyy0351_ia.ImpFilterIyy1ListSortOption = FixedStringAttr.valueOf(w_ia.ImpFilterIyy1ListSortOption, (short)3);
      cyyy0351_ia.ImpFilterIyy1ListScrollType = FixedStringAttr.valueOf(w_ia.ImpFilterIyy1ListScrollType, (short)1);
      cyyy0351_ia.ImpFilterIyy1ListListDirection = FixedStringAttr.valueOf(w_ia.ImpFilterIyy1ListListDirection, (short)1);
      cyyy0351_ia.ImpFilterIyy1ListScrollAmount = IntAttr.valueOf(w_ia.ImpFilterIyy1ListScrollAmount);
      cyyy0351_ia.ImpFilterIyy1ListOrderByFieldNum = ShortAttr.valueOf(w_ia.ImpFilterIyy1ListOrderByFieldNum);
      globdata.getErrorData().setErrorEncounteredSW( ErrorData.NO_ERROR_FOUND_SW );
      iefRuntimeParm2.useActionBlock("gen.ort.yyy.CYYY0351", "CYYY0351", cyyy0351_ia, cyyy0351_oa);
      if ( ((!(globdata.getErrorData().getStatus().equals( ErrorData.NONE_SF ))) || (globdata.getErrorData().getErrorEncounteredSW() 
        != ErrorData.NO_ERROR_FOUND_SW)) || (globdata.getErrorData().getViewOverflowSW() != ErrorData.NO_ERROR_FOUND_SW) )
      {
        throw new ABException();
      }
      globdata.getStateData().setCurrentABId( "0022020321" );
      globdata.getStateData().setCurrentABName( "CYY1S081_TYPE_LIST" );
      globdata.getStateData().setLastStatementNumber( "0000000070" );
      w_la.LocErrorIyy1ComponentSeverityCode = FixedStringAttr.valueOf(cyyy0351_oa.ExpErrorIyy1ComponentSeverityCode, (short)1);
      w_la.LocErrorIyy1ComponentRollbackIndicator = FixedStringAttr.valueOf(cyyy0351_oa.ExpErrorIyy1ComponentRollbackIndicator, (
        short)1);
      w_la.LocErrorIyy1ComponentOriginServid = DoubleAttr.valueOf(cyyy0351_oa.ExpErrorIyy1ComponentOriginServid);
      w_la.LocErrorIyy1ComponentContextString = StringAttr.valueOf(cyyy0351_oa.ExpErrorIyy1ComponentContextString, (short)512);
      w_la.LocErrorIyy1ComponentReturnCode = IntAttr.valueOf(cyyy0351_oa.ExpErrorIyy1ComponentReturnCode);
      w_la.LocErrorIyy1ComponentReasonCode = IntAttr.valueOf(cyyy0351_oa.ExpErrorIyy1ComponentReasonCode);
      w_la.LocErrorIyy1ComponentChecksum = FixedStringAttr.valueOf(cyyy0351_oa.ExpErrorIyy1ComponentChecksum, (short)15);
      w_oa.ExpGroupList_MA = IntAttr.valueOf(cyyy0351_oa.ExpGroupList_MA);
      for(adim1 = 1; adim1 <= w_oa.ExpGroupList_MA; ++(adim1))
      {
        w_oa.ExpGListTypeTinstanceId[adim1-1] = TimestampAttr.valueOf(cyyy0351_oa.ExpGListTypeTinstanceId[adim1-1]);
        w_oa.ExpGListTypeTreferenceId[adim1-1] = TimestampAttr.valueOf(cyyy0351_oa.ExpGListTypeTreferenceId[adim1-1]);
        w_oa.ExpGListTypeTcreateUserId[adim1-1] = FixedStringAttr.valueOf(cyyy0351_oa.ExpGListTypeTcreateUserId[adim1-1], (short)8);
        w_oa.ExpGListTypeTupdateUserId[adim1-1] = FixedStringAttr.valueOf(cyyy0351_oa.ExpGListTypeTupdateUserId[adim1-1], (short)8);
        w_oa.ExpGListTypeTkeyAttrText[adim1-1] = FixedStringAttr.valueOf(cyyy0351_oa.ExpGListTypeTkeyAttrText[adim1-1], (short)4);
        w_oa.ExpGListTypeTsearchAttrText[adim1-1] = FixedStringAttr.valueOf(cyyy0351_oa.ExpGListTypeTsearchAttrText[adim1-1], (short)
          20);
        w_oa.ExpGListTypeTotherAttrText[adim1-1] = FixedStringAttr.valueOf(cyyy0351_oa.ExpGListTypeTotherAttrText[adim1-1], (short)2)
          ;
        w_oa.ExpGListTypeTotherAttrDate[adim1-1] = DateAttr.valueOf(cyyy0351_oa.ExpGListTypeTotherAttrDate[adim1-1]);
        w_oa.ExpGListTypeTotherAttrTime[adim1-1] = TimeAttr.valueOf(cyyy0351_oa.ExpGListTypeTotherAttrTime[adim1-1]);
        w_oa.ExpGListTypeTotherAttrAmount[adim1-1] = BigDecimalAttr.valueOf(cyyy0351_oa.ExpGListTypeTotherAttrAmount[adim1-1]);
      }
      cyyy0351_ia.freeInstance();
      cyyy0351_ia = null;
      cyyy0351_oa.freeInstance();
      cyyy0351_oa = null;
    }
    globdata.getStateData().setLastStatementNumber( "0000000071" );
    f_0_trace();
    if ( trace_ret_code != 8 )
    {
      if ( ((double) w_la.LocErrorIyy1ComponentReturnCode < (double) w_la.LocDontChangeReturnCodesQ1Ok) )
      {
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        //    **************************************************************  
        //    **                                                              
        //    In case of error...                                             
        //                                                                    
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        globdata.getStateData().setLastStatementNumber( "0000000073" );
        f_0_trace();
        if ( trace_ret_code != 8 )
        {
          w_oa.ExpErrorIyy1ComponentSeverityCode = FixedStringAttr.valueOf(w_la.LocErrorIyy1ComponentSeverityCode, (short)1);
          w_oa.ExpErrorIyy1ComponentRollbackIndicator = FixedStringAttr.valueOf(w_la.LocErrorIyy1ComponentRollbackIndicator, (short)
            1);
          w_oa.ExpErrorIyy1ComponentOriginServid = DoubleAttr.valueOf(w_la.LocErrorIyy1ComponentOriginServid);
          w_oa.ExpErrorIyy1ComponentContextString = StringAttr.valueOf(w_la.LocErrorIyy1ComponentContextString, (short)512);
          w_oa.ExpErrorIyy1ComponentReturnCode = IntAttr.valueOf(w_la.LocErrorIyy1ComponentReturnCode);
          w_oa.ExpErrorIyy1ComponentReasonCode = IntAttr.valueOf(w_la.LocErrorIyy1ComponentReasonCode);
          w_oa.ExpErrorIyy1ComponentChecksum = FixedStringAttr.valueOf(w_la.LocErrorIyy1ComponentChecksum, (short)15);
        }
      }
      
    }
  }
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // INITIALIZATION UTILITY FUNCTIONS 
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  
  public void f_22020321_localAlloc(String abname)
  {
    // Request localview allocation 
    w_la = (gen.ort.yyy.CYY1S081_LA)(iefRuntimeParm2.getInstance("gen.ort.yyy.CYY1S081_LA"));
    if ( w_la == null )
    {
      globdata.getStateData().setCurrentABId( "0022020321" );
      globdata.getStateData().setCurrentABName( abname );
      globdata.getErrorData().setErrorEncounteredSW( ErrorData.ERROR_FOUND_SW );
      globdata.getErrorData().setLastStatus( ErrorData.IEF_ALLOCATION_ERROR_FL_LS );
    }
  }
  
  public void f_22020321_init()
  	throws ABException
  {
    if ( nestingLevel < 2 )
    {
      w_la.reset();
    }
    w_la.LocGroupContext_MA = 0;
    for(LocGroupContext_PS_002 = 1; LocGroupContext_PS_002 <= 9; ++(LocGroupContext_PS_002))
    {
    }
    w_oa.ExpReferenceIyy1ServerDataServerDate = 00000000;
    w_oa.ExpReferenceIyy1ServerDataServerTime = 00000000;
    w_oa.ExpReferenceIyy1ServerDataReferenceId = "00000000000000000000";
    w_oa.ExpIsc1AuthorizationInfoTokenId = "                                ";
    w_oa.ExpIsc1AuthorizationInfoAuthorityInd = " ";
    w_oa.ExpIsc1AuthorizationInfoAuthorityStatusR = " ";
    w_oa.ExpIsc1AuthorizationInfoAuthorityStatusU = " ";
    w_oa.ExpIsc1AuthorizationInfoAuthorityStatusD = " ";
    w_oa.ExpIsc1AuthorizationInfoAuthorityStatusL = " ";
    w_oa.ExpGroupList_MA = 0;
    for(ExpGroupList_PS_001 = 1; ExpGroupList_PS_001 <= 48; ++(ExpGroupList_PS_001))
    {
      w_oa.ExpGListTypeTinstanceId[ExpGroupList_PS_001-1] = "00000000000000000000";
      w_oa.ExpGListTypeTreferenceId[ExpGroupList_PS_001-1] = "00000000000000000000";
      w_oa.ExpGListTypeTcreateUserId[ExpGroupList_PS_001-1] = "        ";
      w_oa.ExpGListTypeTupdateUserId[ExpGroupList_PS_001-1] = "        ";
      w_oa.ExpGListTypeTkeyAttrText[ExpGroupList_PS_001-1] = "    ";
      w_oa.ExpGListTypeTsearchAttrText[ExpGroupList_PS_001-1] = "                    ";
      w_oa.ExpGListTypeTotherAttrText[ExpGroupList_PS_001-1] = "  ";
      w_oa.ExpGListTypeTotherAttrDate[ExpGroupList_PS_001-1] = 00000000;
      w_oa.ExpGListTypeTotherAttrTime[ExpGroupList_PS_001-1] = 00000000;
      w_oa.ExpGListTypeTotherAttrAmount[ExpGroupList_PS_001-1] = BigDecimalAttr.getDefaultValue();
    }
    w_oa.ExpMsgIyy1ComponentSeverityCode = " ";
    w_oa.ExpMsgIyy1ComponentMessageTx = "";
    w_oa.ExpErrorIyy1ComponentSeverityCode = " ";
    w_oa.ExpErrorIyy1ComponentRollbackIndicator = " ";
    w_oa.ExpErrorIyy1ComponentOriginServid = 0.0;
    w_oa.ExpErrorIyy1ComponentContextString = "";
    w_oa.ExpErrorIyy1ComponentReturnCode = 0;
    w_oa.ExpErrorIyy1ComponentReasonCode = 0;
    w_oa.ExpErrorIyy1ComponentChecksum = "               ";
    ExpGroupList_PS_001 = 1;
    LocGroupContext_PS_002 = 1;
  }
  
  public void f_0_trace()
  	throws ABException
  {
    trace_ret_code = TIRTRCE.TIRTRCE(iefRuntimeParm1, iefRuntimeParm2, globdata, padtext, padview);
    if ( trace_ret_code == 20 )
    {
      throw new ABException();
    }
  }
  
  public void padview_init()
  {
padview[0] = PadView.getInstance("IMPORT                          ", 0, 0, 0, (short)1, PadView.VT_BASE, PadView.DT_NONE, w_ia, 
      "w_ia");
    padview[1] = PadView.getInstance("IMP_COMMAND                     ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_ia, 
      null);
    padview[2] = PadView.getInstance("IYY1_COMPONENT                  ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, w_ia,
       null);
    padview[3] = PadView.getInstance("SEND_COMMAND                    ", 8, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_ia, "ImpCommandIyy1ComponentSendCommand");
    padview[4] = PadView.getInstance("IMP_DIALECT                     ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_ia, 
      null);
    padview[5] = PadView.getInstance("IYY1_COMPONENT                  ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, w_ia,
       null);
    padview[6] = PadView.getInstance("DIALECT_CD                      ", 2, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_ia, "ImpDialectIyy1ComponentDialectCd");
    padview[7] = PadView.getInstance("IMP                             ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_ia, 
      null);
    padview[8] = PadView.getInstance("ISC1_AUTHORIZATION_INFO         ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, w_ia,
       null);
    padview[9] = PadView.getInstance("USERID                          ", 20, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_ia, "ImpIsc1AuthorizationInfoUserid");
    padview[10] = PadView.getInstance("TOKEN_ID                        ", 32, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_ia, "ImpIsc1AuthorizationInfoTokenId");
    padview[11] = PadView.getInstance("MODULE_ID                       ", 20, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_ia, "ImpIsc1AuthorizationInfoModuleId");
    padview[12] = PadView.getInstance("AUTHORITY_OBJECT_ID             ", 20, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_ia, "ImpIsc1AuthorizationInfoAuthorityObjectId");
    padview[13] = PadView.getInstance("VERSION                         ", 4, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_ia, "ImpIsc1AuthorizationInfoVersion");
    padview[14] = PadView.getInstance("WORKING_UNIT_NUM                ", 5, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_ia, "ImpIsc1AuthorizationInfoWorkingUnitNum");
    padview[15] = PadView.getInstance("IMP_FILTER                      ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_ia, 
      null);
    padview[16] = PadView.getInstance("IYY1_LIST                       ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_ia, null);
    padview[17] = PadView.getInstance("SORT_OPTION                     ", 3, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_ia, "ImpFilterIyy1ListSortOption");
    padview[18] = PadView.getInstance("SCROLL_TYPE                     ", 1, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_ia, "ImpFilterIyy1ListScrollType");
    padview[19] = PadView.getInstance("LIST_DIRECTION                  ", 1, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_ia, "ImpFilterIyy1ListListDirection");
    padview[20] = PadView.getInstance("SCROLL_AMOUNT                   ", 5, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_ia, "ImpFilterIyy1ListScrollAmount");
    padview[21] = PadView.getInstance("ORDER_BY_FIELD_NUM              ", 1, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_ia, "ImpFilterIyy1ListOrderByFieldNum");
    padview[22] = PadView.getInstance("IMP_FROM                        ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_ia, 
      null);
    padview[23] = PadView.getInstance("TYPE                            ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_ia, null);
    padview[24] = PadView.getInstance("TINSTANCE_ID                    ", 20, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_TIMESTAMP, w_ia, "ImpFromTypeTinstanceId");
    padview[25] = PadView.getInstance("TKEY_ATTR_TEXT                  ", 4, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_ia, "ImpFromTypeTkeyAttrText");
    padview[26] = PadView.getInstance("TSEARCH_ATTR_TEXT               ", 20, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_ia, "ImpFromTypeTsearchAttrText");
    padview[27] = PadView.getInstance("IMP_FILTER_START                ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_ia, 
      null);
    padview[28] = PadView.getInstance("TYPE                            ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_ia, null);
    padview[29] = PadView.getInstance("TKEY_ATTR_TEXT                  ", 4, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_ia, "ImpFilterStartTypeTkeyAttrText");
    padview[30] = PadView.getInstance("IMP_FILTER_STOP                 ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_ia, 
      null);
    padview[31] = PadView.getInstance("TYPE                            ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_ia, null);
    padview[32] = PadView.getInstance("TKEY_ATTR_TEXT                  ", 4, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_ia, "ImpFilterStopTypeTkeyAttrText");
    padview[33] = PadView.getInstance("IMP_FILTER                      ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_ia, 
      null);
    padview[34] = PadView.getInstance("TYPE                            ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_ia, null);
    padview[35] = PadView.getInstance("TSEARCH_ATTR_TEXT               ", 20, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_ia, "ImpFilterTypeTsearchAttrText");
    padview[36] = PadView.getInstance("TOTHER_ATTR_TEXT                ", 2, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_ia, "ImpFilterTypeTotherAttrText");
    padview[37] = PadView.getInstance("EXPORT                          ", 0, 0, 0, (short)1, PadView.VT_BASE, PadView.DT_NONE, w_oa, 
      "w_oa");
    padview[38] = PadView.getInstance("EXP_REFERENCE                   ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_oa, 
      null);
    padview[39] = PadView.getInstance("IYY1_SERVER_DATA                ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_oa, null);
    padview[40] = PadView.getInstance("SERVER_DATE                     ", 8, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_DATE, 
      w_oa, "ExpReferenceIyy1ServerDataServerDate");
    padview[41] = PadView.getInstance("SERVER_TIME                     ", 6, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TIME, 
      w_oa, "ExpReferenceIyy1ServerDataServerTime");
    padview[42] = PadView.getInstance("REFERENCE_ID                    ", 20, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_TIMESTAMP, w_oa, "ExpReferenceIyy1ServerDataReferenceId");
    padview[43] = PadView.getInstance("EXP                             ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_oa, 
      null);
    padview[44] = PadView.getInstance("ISC1_AUTHORIZATION_INFO         ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_oa, null);
    padview[45] = PadView.getInstance("TOKEN_ID                        ", 32, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_oa, "ExpIsc1AuthorizationInfoTokenId");
    padview[46] = PadView.getInstance("AUTHORITY_IND                   ", 1, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_oa, "ExpIsc1AuthorizationInfoAuthorityInd");
    padview[47] = PadView.getInstance("AUTHORITY_STATUS_R              ", 1, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_oa, "ExpIsc1AuthorizationInfoAuthorityStatusR");
    padview[48] = PadView.getInstance("AUTHORITY_STATUS_U              ", 1, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_oa, "ExpIsc1AuthorizationInfoAuthorityStatusU");
    padview[49] = PadView.getInstance("AUTHORITY_STATUS_D              ", 1, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_oa, "ExpIsc1AuthorizationInfoAuthorityStatusD");
    padview[50] = PadView.getInstance("AUTHORITY_STATUS_L              ", 1, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_oa, "ExpIsc1AuthorizationInfoAuthorityStatusL");
    padview[51] = PadView.getInstance("EXP_GROUP_LIST                  ", 0, 0, 48, (short)2, PadView.VT_GROUP, PadView.DT_NONE, 
      w_oa, "ExpGroupList_MA");
    padview[52] = PadView.getInstance("EXP_G_LIST                      ", 0, 0, 0, (short)3, PadView.VT_VIEW, PadView.DT_NONE, w_oa, 
      null);
    padview[53] = PadView.getInstance("TYPE                            ", 0, 0, 0, (short)4, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_oa, null);
    padview[54] = PadView.getInstance("TINSTANCE_ID                    ", 20, 0, 0, (short)4, PadView.VT_PREDICATE, 
      PadView.DT_TIMESTAMP, w_oa, "ExpGListTypeTinstanceId");
    padview[55] = PadView.getInstance("TREFERENCE_ID                   ", 20, 0, 0, (short)4, PadView.VT_PREDICATE, 
      PadView.DT_TIMESTAMP, w_oa, "ExpGListTypeTreferenceId");
    padview[56] = PadView.getInstance("TCREATE_USER_ID                 ", 8, 0, 0, (short)4, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_oa, "ExpGListTypeTcreateUserId");
    padview[57] = PadView.getInstance("TUPDATE_USER_ID                 ", 8, 0, 0, (short)4, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_oa, "ExpGListTypeTupdateUserId");
    padview[58] = PadView.getInstance("TKEY_ATTR_TEXT                  ", 4, 0, 0, (short)4, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_oa, "ExpGListTypeTkeyAttrText");
    padview[59] = PadView.getInstance("TSEARCH_ATTR_TEXT               ", 20, 0, 0, (short)4, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_oa, "ExpGListTypeTsearchAttrText");
    padview[60] = PadView.getInstance("TOTHER_ATTR_TEXT                ", 2, 0, 0, (short)4, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_oa, "ExpGListTypeTotherAttrText");
    padview[61] = PadView.getInstance("TOTHER_ATTR_DATE                ", 8, 0, 0, (short)4, PadView.VT_PREDICATE, PadView.DT_DATE, 
      w_oa, "ExpGListTypeTotherAttrDate");
    padview[62] = PadView.getInstance("TOTHER_ATTR_TIME                ", 6, 0, 0, (short)4, PadView.VT_PREDICATE, PadView.DT_TIME, 
      w_oa, "ExpGListTypeTotherAttrTime");
    padview[63] = PadView.getInstance("TOTHER_ATTR_AMOUNT              ", 17, 2, 0, (short)4, PadView.VT_PREDICATE, PadView.DT_FIXED,
       w_oa, "ExpGListTypeTotherAttrAmount");
    padview[64] = PadView.getInstance("EXP_MSG                         ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_oa, 
      null);
    padview[65] = PadView.getInstance("IYY1_COMPONENT                  ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_oa, null);
    padview[66] = PadView.getInstance("SEVERITY_CODE                   ", 1, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_oa, "ExpMsgIyy1ComponentSeverityCode");
    padview[67] = PadView.getInstance("MESSAGE_TX                      ", 512, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_VARCHAR, w_oa, "ExpMsgIyy1ComponentMessageTx");
    padview[68] = PadView.getInstance("EXP_ERROR                       ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_oa, 
      null);
    padview[69] = PadView.getInstance("IYY1_COMPONENT                  ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_oa, null);
    padview[70] = PadView.getInstance("SEVERITY_CODE                   ", 1, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_oa, "ExpErrorIyy1ComponentSeverityCode");
    padview[71] = PadView.getInstance("ROLLBACK_INDICATOR              ", 1, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_oa, "ExpErrorIyy1ComponentRollbackIndicator");
    padview[72] = PadView.getInstance("ORIGIN_SERVID                   ", 15, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_oa, "ExpErrorIyy1ComponentOriginServid");
    padview[73] = PadView.getInstance("CONTEXT_STRING                  ", 512, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_VARCHAR, w_oa, "ExpErrorIyy1ComponentContextString");
    padview[74] = PadView.getInstance("RETURN_CODE                     ", 5, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_oa, "ExpErrorIyy1ComponentReturnCode");
    padview[75] = PadView.getInstance("REASON_CODE                     ", 5, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_oa, "ExpErrorIyy1ComponentReasonCode");
    padview[76] = PadView.getInstance("CHECKSUM                        ", 15, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_oa, "ExpErrorIyy1ComponentChecksum");
    padview[77] = PadView.getInstance("LOCAL                           ", 0, 0, 0, (short)1, PadView.VT_BASE, PadView.DT_NONE, w_la, 
      "w_la");
    padview[78] = PadView.getInstance("LOC_EXP_CLIENT                  ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_la, 
      null);
    padview[79] = PadView.getInstance("IXX1_CLIENT_RUNTIME_INFO        ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_la, null);
    padview[80] = PadView.getInstance("TOKEN_TEXT                      ", 32, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_la, "LocExpClientIxx1ClientRuntimeInfoTokenText");
    padview[81] = PadView.getInstance("WS_NAME_TEXT                    ", 10, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_la, "LocExpClientIxx1ClientRuntimeInfoWsNameText");
    padview[82] = PadView.getInstance("WS_IP_ADDR_TEXT                 ", 15, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_la, "LocExpClientIxx1ClientRuntimeInfoWsIpAddrText");
    padview[83] = PadView.getInstance("WS_LOCAL_TS                     ", 20, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_TIMESTAMP, w_la, "LocExpClientIxx1ClientRuntimeInfoWsLocalTs");
    padview[84] = PadView.getInstance("LOC_REFERENCE                   ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_la, 
      null);
    padview[85] = PadView.getInstance("IYY1_SERVER_DATA                ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_la, null);
    padview[86] = PadView.getInstance("USERID                          ", 8, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_la, "LocReferenceIyy1ServerDataUserid");
    padview[87] = PadView.getInstance("SERVER_DATE                     ", 8, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_DATE, 
      w_la, "LocReferenceIyy1ServerDataServerDate");
    padview[88] = PadView.getInstance("SERVER_TIME                     ", 6, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TIME, 
      w_la, "LocReferenceIyy1ServerDataServerTime");
    padview[89] = PadView.getInstance("REFERENCE_ID                    ", 20, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_TIMESTAMP, w_la, "LocReferenceIyy1ServerDataReferenceId");
    padview[90] = PadView.getInstance("SERVER_TIMESTAMP                ", 20, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_TIMESTAMP, w_la, "LocReferenceIyy1ServerDataServerTimestamp");
    padview[91] = PadView.getInstance("LOC_ERROR                       ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_la, 
      null);
    padview[92] = PadView.getInstance("ISC1_COMPONENT                  ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_la, null);
    padview[93] = PadView.getInstance("SEVERITY_CODE                   ", 1, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_la, "LocErrorIsc1ComponentSeverityCode");
    padview[94] = PadView.getInstance("ROLLBACK_INDICATOR              ", 1, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_la, "LocErrorIsc1ComponentRollbackIndicator");
    padview[95] = PadView.getInstance("ORIGIN_SERVID                   ", 15, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_la, "LocErrorIsc1ComponentOriginServid");
    padview[96] = PadView.getInstance("CONTEXT_STRING                  ", 512, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_VARCHAR, w_la, "LocErrorIsc1ComponentContextString");
    padview[97] = PadView.getInstance("RETURN_CODE                     ", 5, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_la, "LocErrorIsc1ComponentReturnCode");
    padview[98] = PadView.getInstance("REASON_CODE                     ", 5, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_la, "LocErrorIsc1ComponentReasonCode");
    padview[99] = PadView.getInstance("CHECKSUM                        ", 15, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_la, "LocErrorIsc1ComponentChecksum");
    padview[100] = PadView.getInstance("LOC_GROUP_CONTEXT               ", 0, 0, 9, (short)2, PadView.VT_GROUP, PadView.DT_NONE, 
      w_la, "LocGroupContext_MA");
    padview[101] = PadView.getInstance("LOC_G_CONTEXT                   ", 0, 0, 0, (short)3, PadView.VT_VIEW, PadView.DT_NONE, w_la,
       null);
    padview[102] = PadView.getInstance("DONT_CHANGE_TEXT                ", 0, 0, 0, (short)4, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_la, null);
    padview[103] = PadView.getInstance("TEXT_150                        ", 150, 0, 0, (short)4, PadView.VT_PREDICATE, 
      PadView.DT_TEXT, w_la, "LocGContextDontChangeTextText150");
    padview[104] = PadView.getInstance("LOC_ERROR                       ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_la,
       null);
    padview[105] = PadView.getInstance("IYY1_COMPONENT                  ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_la, null);
    padview[106] = PadView.getInstance("SEVERITY_CODE                   ", 1, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_la, "LocErrorIyy1ComponentSeverityCode");
    padview[107] = PadView.getInstance("ROLLBACK_INDICATOR              ", 1, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_la, "LocErrorIyy1ComponentRollbackIndicator");
    padview[108] = PadView.getInstance("ORIGIN_SERVID                   ", 15, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_la, "LocErrorIyy1ComponentOriginServid");
    padview[109] = PadView.getInstance("CONTEXT_STRING                  ", 512, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_VARCHAR, w_la, "LocErrorIyy1ComponentContextString");
    padview[110] = PadView.getInstance("RETURN_CODE                     ", 5, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_la, "LocErrorIyy1ComponentReturnCode");
    padview[111] = PadView.getInstance("REASON_CODE                     ", 5, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_la, "LocErrorIyy1ComponentReasonCode");
    padview[112] = PadView.getInstance("CHECKSUM                        ", 15, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT,
       w_la, "LocErrorIyy1ComponentChecksum");
    padview[113] = PadView.getInstance("LOC_CONTEXT                     ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_la,
       null);
    padview[114] = PadView.getInstance("IYY1_COMPONENT                  ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_la, null);
    padview[115] = PadView.getInstance("CONTEXT_STRING                  ", 512, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_VARCHAR, w_la, "LocContextIyy1ComponentContextString");
    padview[116] = PadView.getInstance("LOC                             ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_la,
       null);
    padview[117] = PadView.getInstance("DONT_CHANGE_RETURN_CODES        ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_la, null);
    padview[118] = PadView.getInstance("1_OK                            ", 5, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_la, "LocDontChangeReturnCodesQ1Ok");
    padview[119] = PadView.getInstance("N1110_UNAUTHORIZED_OPERATION    ", 5, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_la, "LocDontChangeReturnCodesN1110UnauthorizedOperation");
    padview[120] = PadView.getInstance("N1120_INVALID_COMMAND           ", 5, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_la, "LocDontChangeReturnCodesN1120InvalidCommand");
    padview[121] = PadView.getInstance("LOC                             ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_la,
       null);
    padview[122] = PadView.getInstance("DONT_CHANGE_REASON_CODES        ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_la, null);
    padview[123] = PadView.getInstance("1_DEFAULT                       ", 5, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_la, "LocDontChangeReasonCodesQ1Default");
    padview[124] = PadView.getInstance("******** BOTTOM OF DATA ********", 0, 0, 0, (short)0, PadView.VT_END, PadView.DT_NONE, w_la, 
      null);
  }
  public void f_173015135_rgvc()
  	throws ABException
  {
    if ( (LocGroupContext_PS_002 > 9) || (LocGroupContext_PS_002 < 1) )
    {
      globdata.getErrorData().setViewOverflowSW( ErrorData.ERROR_FOUND_SW );
      {
        throw new ABException();
      }
    }
  }
}// end class


package gen.ort.yyy;
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
//
//                    Source Code Generated by
//                           CA Gen 8.6
//
//    Copyright (c) 2023 CA Technologies. All rights reserved.
//
//    Name: CYY1S081_TYPE_LIST               Date: 2023/07/05
//    User: HakanBal                         Time: 15:09:25
//
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// import Statements
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
import java.lang.*;
import java.io.*;
import java.text.*;
import java.math.*;
import com.ca.gen.vwrt.types.*;

/**
 * Contains the export request data returned from the 'CYY1S081_TYPE_LIST' server.
 * @see Cyy1s081TypeList
 **/
@javax.xml.bind.annotation.XmlType(name="Cyy1s081TypeListExport",
          propOrder={"command",
            "exitState",
            "exitStateType",
            "exitStateMessage",
            "expReferenceIyy1ServerData",
            "expIsc1AuthorizationInfo",
            "expGroupList",
            "expMsgIyy1Component",
          "expErrorIyy1Component"}
)
public class Cyy1s081TypeListExport  implements Externalizable, Cloneable
{
  private final static long serialVersionUID = 427830044L;
  /**
   * Default Constructor.
   **/
  public Cyy1s081TypeListExport()
  {
  }
  /**
   * Internal storage for TrustClients property.
   **/
  private boolean _TrustClients = false;
  /**
   * Gets the export view TrustClients property.
   * 
   * This property indicates whether the Export view should trust the data passed to it via the clients.  If a client is trusted, 
    then the data is accepted as specified.   If the client is not trusted, then the data will be validated that it is acceptable 
    data and/or transformed to acceptable data.  Setting the TrustClients property to true may result in invalid data being sent to 
    the server and should be used with caution.
   * 
   * The default value is: false
   * 
   * @return a boolean with the TrustClients property
   **/
  @javax.xml.bind.annotation.XmlTransient
  public boolean getTrustClients() {
    return(_TrustClients);
  }
  /**
   * Sets the export view TrustClients property.
   * 
   * This property indicates whether the Export view should trust the data passed to it via the clients.  If a client is trusted, 
    then the data is accepted as specified.   If the client is not trusted, then the data will be validated that it is acceptable 
    data and/or transformed to acceptable data.  Setting the TrustClients property to true may result in invalid data being sent to 
    the server and should be used with caution.
   * 
   * @param value the TrustClients value
   * 
   * The default value is: false
   **/
  public void setTrustClients(boolean value) {
    _TrustClients = value;
    _ExpGroupList.setTrustClients(_TrustClients);
    _ExpReferenceIyy1ServerData.setTrustClients(_TrustClients);
    _ExpIsc1AuthorizationInfo.setTrustClients(_TrustClients);
    _ExpMsgIyy1Component.setTrustClients(_TrustClients);
    _ExpErrorIyy1Component.setTrustClients(_TrustClients);
  }
  
  /**
   * Internal storage for Command property.
   **/
  private String _Command = "";
  /**
   * Gets the export view Command property.
   * 
   * Retrieves the command returned from the server.  Valid values are server application specific.  The field may be blank if no 
    value was returned.
   * 
   * The default value is: ""
   * 
   * @return a String with the Command
   **/
  @javax.xml.bind.annotation.XmlAttribute(name="command")
  public String getCommand() {
    return(_Command);
  }
  /**
   * Sets the export view Command property.
   * 
   * Contains the command returned from the server.  Valid values are server application specific.  The field may be blank if no 
    value was returned.
   * 
   * @param value the command value
   * 
   * The default value is: ""
   **/
  public void setCommand(String value) {
    if ( _TrustClients == true )
    {
      _Command = value;
      return;
    }
    if ( value == null )
    {
      _Command = "";
    }
    else 
    {
      _Command = value;
    }
  }
  
  /**
   * Constant representing an informational exit state type.
   **/
  public final static int INFORMATIONAL = 0;
  /**
   * Constant representing a warning exit state type.
   **/
  public final static int WARNING = 1;
  /**
   * Constant representing an error exit state type.
   **/
  public final static int ERROR = 2;
  /**
   * Constant representing an unknown exit state type.
   **/
  public final static int UNKNOWN = 3;
  /**
   * Internal storage for ExitStateType property.
   **/
  private int _ExitStateType = UNKNOWN;
  /**
   * Gets the export view ExitStateType property.
   * Valid values are INFORMATIONAL, WARNING, ERROR, and UNKNOWN.
   * The default value is: UNKNOWN
   * 
   * Retrieves the type of the exit state returned from the server.
   * 
   * @return an int with the ExitState type
   * 
   * @see #INFORMATIONAL
   * @see #WARNING
   * @see #ERROR
   * @see #UNKNOWN
   **/
  @javax.xml.bind.annotation.XmlAttribute(name="exitStateType")
  public int getExitStateType() {
    return(_ExitStateType);
  }
  /**
   * Sets the export view ExitStateType property.
   * 
   * Contains the type of the exit state returned from the server.
   * Valid values are INFORMATIONAL, WARNING, ERROR, and UNKNOWN.
   * The default value is: UNKNOWN
   * 
   * @param value the exitstate type value
   * 
   * @throws IllegalArgumentException if the value is not one of the valid types.
   * 
   * @see #INFORMATIONAL
   * @see #WARNING
   * @see #ERROR
   * @see #UNKNOWN
   **/
  public void setExitStateType(int value) throws IllegalArgumentException {
    if ( _TrustClients == true )
    {
      _ExitStateType = value;
      return;
    }
    if ( (value == UNKNOWN) || ((value == ERROR) || ((value == WARNING) || (value == INFORMATIONAL))) )
    {
      _ExitStateType = value;
    }
    else {
      throw new IllegalArgumentException("value must be ERROR, WARNING, INFORMATIONAL, or UNKNOWN");
    }
  }
  
  /**
   * Internal storage for ExitState property.
   **/
  private int _ExitState = 0;
  /**
   * Gets the export view ExitState property.
   * 
   * Retrieves the exit state returned from the server.  Valid values are server application specific.
   * 
   * The default value is: 0
   * 
   * @return an int with the ExitState
   **/
  @javax.xml.bind.annotation.XmlAttribute(name="exitState")
  public int getExitState(){
    return(_ExitState);
  }
  /**
   * Sets the export view ExitState property.
   * 
   * Contains the exit state returned from the server.  Valid values are server application specific.
   * 
   * @param value the exitstate value
   * 
   * The default value is: 0
   **/
  public void setExitState(int value) {
    _ExitState = value;
  }
  
  /**
   * Internal storage for ExitStateMessage property.
   **/
  private String _ExitStateMessage = "";
  /**
   * Gets the export view ExitStateMessage property.
   * 
   * Retrieves the exit state message returned from the server.
   * 
   * The default value is: ""
   * 
   * @return a String with the ExitState message
   **/
  @javax.xml.bind.annotation.XmlAttribute(name="exitStateMsg")
  public String getExitStateMessage() {
    return(_ExitStateMessage);
  }
  /**
   * Sets the export view ExitStateMessage property.
   * 
   * Contains the exit state message returned from the server.
   * 
   * @param value the exitstate message value
   * 
   * The default value is: ""
   **/
  public void setExitStateMessage(String value) {
    if ( _TrustClients == true )
    {
      _ExitStateMessage = value;
      return;
    }
    if ( value == null )
    {
      _ExitStateMessage = "";
    }
    else 
    {
      _ExitStateMessage = value;
    }
  }
  
  /**
   * Internal storage for ExpGroupList group view property.
   **/
  private ExpGroupList _ExpGroupList = new ExpGroupList(_TrustClients);
  /**
   * Gets the ExpGroupList property
   * 
   * @return a ExpGroupList
   **/
  @javax.xml.bind.annotation.XmlElement(name="ExpGroupList")
  public ExpGroupList getExpGroupList(){
    return(_ExpGroupList);
  }
  
  /**
   * Sets the ExpGroupList property
   * 
   * @param value the ExpGroupList value
   **/
  public void setExpGroupList(ExpGroupList value){
    _ExpGroupList = value;
  }
  
  /**
   * Internal storage for ExpReferenceIyy1ServerData entity view property.
   **/
  private ExpReferenceIyy1ServerData _ExpReferenceIyy1ServerData = new ExpReferenceIyy1ServerData(_TrustClients);
  /**
   * Gets the ExpReferenceIyy1ServerData property
   * 
   * @return a ExpReferenceIyy1ServerData
   **/
  @javax.xml.bind.annotation.XmlElement(name="ExpReferenceIyy1ServerData")
  public ExpReferenceIyy1ServerData getExpReferenceIyy1ServerData(){
    return(_ExpReferenceIyy1ServerData);
  }
  
  /**
   * Sets the ExpReferenceIyy1ServerData property
   * 
   * @param value the ExpReferenceIyy1ServerData value
   **/
  public void setExpReferenceIyy1ServerData(ExpReferenceIyy1ServerData value){
    _ExpReferenceIyy1ServerData = value;
  }
  
  /**
   * Internal storage for ExpIsc1AuthorizationInfo entity view property.
   **/
  private ExpIsc1AuthorizationInfo _ExpIsc1AuthorizationInfo = new ExpIsc1AuthorizationInfo(_TrustClients);
  /**
   * Gets the ExpIsc1AuthorizationInfo property
   * 
   * @return a ExpIsc1AuthorizationInfo
   **/
  @javax.xml.bind.annotation.XmlElement(name="ExpIsc1AuthorizationInfo")
  public ExpIsc1AuthorizationInfo getExpIsc1AuthorizationInfo(){
    return(_ExpIsc1AuthorizationInfo);
  }
  
  /**
   * Sets the ExpIsc1AuthorizationInfo property
   * 
   * @param value the ExpIsc1AuthorizationInfo value
   **/
  public void setExpIsc1AuthorizationInfo(ExpIsc1AuthorizationInfo value){
    _ExpIsc1AuthorizationInfo = value;
  }
  
  /**
   * Internal storage for ExpMsgIyy1Component entity view property.
   **/
  private ExpMsgIyy1Component _ExpMsgIyy1Component = new ExpMsgIyy1Component(_TrustClients);
  /**
   * Gets the ExpMsgIyy1Component property
   * 
   * @return a ExpMsgIyy1Component
   **/
  @javax.xml.bind.annotation.XmlElement(name="ExpMsgIyy1Component")
  public ExpMsgIyy1Component getExpMsgIyy1Component(){
    return(_ExpMsgIyy1Component);
  }
  
  /**
   * Sets the ExpMsgIyy1Component property
   * 
   * @param value the ExpMsgIyy1Component value
   **/
  public void setExpMsgIyy1Component(ExpMsgIyy1Component value){
    _ExpMsgIyy1Component = value;
  }
  
  /**
   * Internal storage for ExpErrorIyy1Component entity view property.
   **/
  private ExpErrorIyy1Component _ExpErrorIyy1Component = new ExpErrorIyy1Component(_TrustClients);
  /**
   * Gets the ExpErrorIyy1Component property
   * 
   * @return a ExpErrorIyy1Component
   **/
  @javax.xml.bind.annotation.XmlElement(name="ExpErrorIyy1Component")
  public ExpErrorIyy1Component getExpErrorIyy1Component(){
    return(_ExpErrorIyy1Component);
  }
  
  /**
   * Sets the ExpErrorIyy1Component property
   * 
   * @param value the ExpErrorIyy1Component value
   **/
  public void setExpErrorIyy1Component(ExpErrorIyy1Component value){
    _ExpErrorIyy1Component = value;
  }
  
  /**
   * Creates a copy of the instance.
   * 
   * @return A copy of the instance.
   **/
  @Override public Object clone()
  {
    Cyy1s081TypeListExport copy = new Cyy1s081TypeListExport();
    copy._TrustClients = _TrustClients;
    copy._Command = _Command;
    copy._ExitStateType = _ExitStateType;
    copy._ExitState = _ExitState;
    copy._ExitStateMessage = _ExitStateMessage;
    copy._ExpGroupList = (ExpGroupList)_ExpGroupList.clone();
    copy._ExpReferenceIyy1ServerData = (ExpReferenceIyy1ServerData)_ExpReferenceIyy1ServerData.clone();
    copy._ExpIsc1AuthorizationInfo = (ExpIsc1AuthorizationInfo)_ExpIsc1AuthorizationInfo.clone();
    copy._ExpMsgIyy1Component = (ExpMsgIyy1Component)_ExpMsgIyy1Component.clone();
    copy._ExpErrorIyy1Component = (ExpErrorIyy1Component)_ExpErrorIyy1Component.clone();
    return(copy);
  }
  /**
   * Resets the Cyy1s081TypeListExport class properties to all of their default values.
   **/
  public void reset()
  {
    _TrustClients = false;
    _Command = "";
    _ExitStateType = UNKNOWN;
    _ExitState = 0;
    _ExitStateMessage = "";
    _ExpGroupList.reset();
    _ExpReferenceIyy1ServerData.reset();
    _ExpIsc1AuthorizationInfo.reset();
    _ExpMsgIyy1Component.reset();
    _ExpErrorIyy1Component.reset();
  }
  
  /**
   * Validates all the property values on the instance.
   * @throws IllegalArgumentException Thrown if any property is invalid.
   **/
  public void validate()
  	throws IllegalArgumentException
  {
    _ExpGroupList.validate();
    _ExpReferenceIyy1ServerData.validate();
    _ExpIsc1AuthorizationInfo.validate();
    _ExpMsgIyy1Component.validate();
    _ExpErrorIyy1Component.validate();
  }
  
  /**
   * Unserializes the Cyy1s081TypeListExport class from the ObjectInput.
   * @throws IOException Thrown If an I/O error has occurred.
   **/
  public void readExternal(ObjectInput in)
  	throws IOException
  {
    _TrustClients = in.readBoolean();
    _Command = in.readUTF();
    _ExitStateType = in.readInt();
    _ExitState = in.readInt();
    _ExitStateMessage = in.readUTF();
    _ExpGroupList.readExternal(in);
    _ExpReferenceIyy1ServerData.readExternal(in);
    _ExpIsc1AuthorizationInfo.readExternal(in);
    _ExpMsgIyy1Component.readExternal(in);
    _ExpErrorIyy1Component.readExternal(in);
  }
  
  /**
   * Serializes the Cyy1s081TypeListExport class to the ObjectOutput.
   * @throws IOException Thrown If an I/O error has occurred.
   **/
  public void writeExternal(ObjectOutput out)
  	throws IOException
  {
    out.writeBoolean(_TrustClients);
    out.writeUTF(_Command);
    out.writeInt(_ExitStateType);
    out.writeInt(_ExitState);
    out.writeUTF(_ExitStateMessage);
    _ExpGroupList.writeExternal(out);
    _ExpReferenceIyy1ServerData.writeExternal(out);
    _ExpIsc1AuthorizationInfo.writeExternal(out);
    _ExpMsgIyy1Component.writeExternal(out);
    _ExpErrorIyy1Component.writeExternal(out);
  }
  
  /**
   * Gets a String representation of the instance.
   * 
   * @return A String representation of the instance.
   **/
  @Override public String toString()
  {
    StringBuffer result = new StringBuffer();
    result.append("TrustClients = \"" + _TrustClients + "\"");
    result.append("Command = \"" + _Command + "\"");
    result.append(", ExitStateType = \"" + _ExitStateType + "\"");
    result.append(", ExitState = " + _ExitState);
    result.append(", ExitStateMessage = \"" + _ExitStateMessage + "\"");
    result.append(", ExpGroupList (" + _ExpGroupList + ")");
    result.append(", ExpReferenceIyy1ServerData (" + _ExpReferenceIyy1ServerData + ")");
    result.append(", ExpIsc1AuthorizationInfo (" + _ExpIsc1AuthorizationInfo + ")");
    result.append(", ExpMsgIyy1Component (" + _ExpMsgIyy1Component + ")");
    result.append(", ExpErrorIyy1Component (" + _ExpErrorIyy1Component + ")");
    return(result.toString());
  }
  
  /**
   * Contains the data for the ExpGroupList group view.
   **/
  @javax.xml.bind.annotation.XmlType(name="",
            propOrder={"rows"})
  static public class ExpGroupList  implements Externalizable, Cloneable
  {
    /**
     * Default Constructor.
     **/
    public ExpGroupList()
    {
    }
    /**
     * Constructor.
     **/
    public ExpGroupList(boolean TrustClients)
    {
      _TrustClients = TrustClients;
    }
    /**
     * Internal storage for TrustClients property.
     **/
    private boolean _TrustClients = false;
    @javax.xml.bind.annotation.XmlTransient
    public boolean getTrustClients() {
      return(_TrustClients);
    }
    
    public void setTrustClients(boolean value) {
      _TrustClients = value;
      for(int i = 0; i < _Length; i++)
      {
        getRows()[i].setTrustClients(_TrustClients);
      }
    }
    
    /**
     * Gets the maximum value of the Length property.
     **/
    public final static int Capacity = 48;
    /**
     * Internal storage for ExpGroupList group view property rows.
     **/
    private ExpGroupListRow[] _Rows = null;
    /**
     * Gets the ExpGroupList rows property
     * 
     * @return a ExpGroupListRow[]
     **/
    @javax.xml.bind.annotation.XmlElement(name="row")
    public ExpGroupListRow[] getRows() {
      if ( _Rows == null )
      {
        _Rows = new ExpGroupListRow[_Length];
        for(int i=0; i < _Length; i++)
        {
          _Rows[i] = new ExpGroupListRow();
        }
      }
      return(_Rows);
    }
    
    /**
     * Sets the ExpGroupList rows property
     * 
     * @param Rows ExpGroupListRow
     **/
    public void setRows(ExpGroupListRow[] Rows) {
      if ( Rows != null )
      {
        setLength(Rows.length);
        for(int i=0; i < _Length; i++)
        {
          getRows()[i] = Rows[i];
        }
      }
      else 
      {
        setLength(0);
      }
    }
    
    /**
     * Internal storage for Length property.
     **/
    private int _Length = 0;
    /**
     * Gets the number of valid (populated) rows in the repeating group view.
     * 
     * Retrieves the number of rows contained within the repeating group.  Valid values are from 0 to the group views Capacity 
      value.
     * 
     * The default value is: 0
     * 
     * @return an int with the current group view length
     **/
    @javax.xml.bind.annotation.XmlTransient
    public int getLength() {
      return(_Length);
    }
    /**
     * Sets the number of valid (populated) rows in the repeating group view.
     * 
     * Specifies the number of rows contained within the repeating group.  Valid values are from 0 to the group views Capacity 
      value.
     * 
     * The default value is: 0
     * 
     * @param value the length of the group view
     * 
     * Throws an IllegalArgumentException if the index less than 0 or greater than or equal to Length.
     * 
     * @throws IllegalArgumentException Thrown index is invalid.
     **/
    public void setLength(int value) throws IllegalArgumentException {
      if ( value != _Length )
      {
        if ( _TrustClients == false )
        {
          if ( (value < 0) || (value > Capacity) )
          {
            throw new IllegalArgumentException();
          }
        }
        ExpGroupListRow[] _NewRows = new ExpGroupListRow[value];
        int smaller_between_length_and_value = value < _Length ? value : _Length;
        for(int i = 0; i < smaller_between_length_and_value; i++)
        {
          _NewRows[i] = getRows()[i];
        }
        if ( value > _Length )
        {
          for(int i = _Length; i < value; i++)
          {
            _NewRows[i] = new ExpGroupListRow();
            _NewRows[i].setTrustClients(_TrustClients);
          }
        }
        _Rows = _NewRows;
        _Length = value;
      }
    }
    
    /**
     * Creates a copy of the instance.
     * 
     * @return A copy of the instance.
     **/
    @Override public Object clone()
    {
      ExpGroupList copy = new ExpGroupList(_TrustClients);
      copy._Length = _Length;
      for(int i = 0; i < _Length; i++)
      {
        copy.getRows()[i] = (ExpGroupListRow)getRows()[i].clone();
      }
      return(copy);
    }
    
    /**
     * Resets the ExpGroupList class properties to all of their default values.
     * 
     * The Length property will be reset to zero.
     **/
    public void reset()
    {
      for(int i = 0; i < _Length; i++)
      {
        getRows()[i].reset();
      }
      _Length = 0;
    }
    
    /**
     * Validates all the property values on the rows of this instance.
     * 
     * Only those rows that are indicated as populated by the Length property are validated.
     * 
     * @throws IllegalArgumentException Thrown if any property is invalid.
     **/
    public void validate()
    	throws IllegalArgumentException
    {
      for(int i = 0; i < _Length; i++)
      {
        getRows()[i].validate();
      }
    }
    
    /**
     * Unserializes the ExpGroupList Group View class from the ObjectInput.
     * @throws IOException Thrown If an I/O error has occurred.
     **/
    public void readExternal(ObjectInput in)
    	throws IOException
    {
      _TrustClients = in.readBoolean();
      _Length = in.readInt();
      for(int i = 0; i < _Length; i++)
      {
        getRows()[i].readExternal(in);
      }
    }
    
    /**
     * Serializes the ExpGroupList Group View class from the ObjectOutput.
     * @throws IOException Thrown If an I/O error has occurred.
     **/
    public void writeExternal(ObjectOutput out)
    	throws IOException
    {
      out.writeBoolean(_TrustClients);
      out.writeInt(_Length);
      for(int i = 0; i < _Length; i++)
      {
        getRows()[i].writeExternal(out);
      }
    }
    
    /**
     * Gets a String representation of the instance.
     * 
     * @return A String representation of the instance.
     **/
    @Override public String toString()
    {
      StringBuffer result = new StringBuffer();
      result.append("Length = " + _Length);
      for(int i = 0; i < _Length; i++)
      {
        result.append(", [" + i + "]: " + getRows()[i].toString());
      }
      return(result.toString());
    }
    
  };
  
  /**
   * Contains the data for a row in the the ExpGroupList repeating group view.
   **/
  @javax.xml.bind.annotation.XmlType(name="",
            propOrder={          "expGListType"}
  )
  static public class ExpGroupListRow  implements Externalizable, Cloneable
  {
    /**
     * Default Constructor.
     **/
    public ExpGroupListRow()
    {
    }
    /**
     * Constructor.
     **/
    public ExpGroupListRow(boolean TrustClients)
    {
      _TrustClients = TrustClients;
    }
    /**
     * Internal storage for TrustClients property.
     **/
    private boolean _TrustClients = false;
    @javax.xml.bind.annotation.XmlTransient
    public boolean getTrustClients() {
      return(_TrustClients);
    }
    
    public void setTrustClients(boolean value) {
      _TrustClients = value;
      _ExpGListType.setTrustClients(_TrustClients);
    }
    
    /**
     * Internal storage for ExpGListType entity view property.
     **/
    private ExpGListType _ExpGListType = new ExpGListType(_TrustClients);
    /**
     * Gets the ExpGListType property
     * 
     * @return a ExpGListType
     **/
    @javax.xml.bind.annotation.XmlElement(name="ExpGListType")
    public ExpGListType getExpGListType(){
      return(_ExpGListType);
    }
    
    /**
     * Sets the ExpGListType property
     * 
     * @param value the ExpGListType value
     **/
    public void setExpGListType(ExpGListType value){
      _ExpGListType = value;
    }
    
    /**
     * Resets the ExpGroupListRow class properties to all of their default values.
     **/
    public void reset()
    {
      _ExpGListType.reset();
    }
    
    /**
     * Creates a copy of the instance.
     * 
     * @return A copy of the instance.
     **/
    @Override public Object clone()
    {
      ExpGroupListRow copy = new ExpGroupListRow(_TrustClients);
      copy._ExpGListType = (ExpGListType)_ExpGListType.clone();
      return(copy);
    }
    
    /**
     * Validates all the property values on the instance.
     * @throws IllegalArgumentException Thrown if any property is invalid.
     **/
    public void validate()
    	throws IllegalArgumentException
    {
      _ExpGListType.validate();
    }
    
    /**
     * Unserializes the ExpGroupList Group View class from the ObjectInput.
     * @throws IOException Thrown If an I/O error has occurred.
     **/
    public void readExternal(ObjectInput in)
    	throws IOException
    {
      _TrustClients = in.readBoolean();
      _ExpGListType.readExternal(in);
    }
    
    /**
     * Serializes the ExpGroupList Group View class from the ObjectOutput.
     * @throws IOException Thrown If an I/O error has occurred.
     **/
    public void writeExternal(ObjectOutput out)
    	throws IOException
    {
      out.writeBoolean(_TrustClients);
      _ExpGListType.writeExternal(out);
    }
    
    /**
     * Gets a String representation of the instance.
     * 
     * @return A String representation of the instance.
     **/
    @Override public String toString()
    {
      StringBuffer result = new StringBuffer();
      result.append("ExpGListType (" + _ExpGListType + ")");
      return(result.toString());
    }
  };
  
  /**
   * Contains the data for the ExpGListType entity view.
   **/
  @javax.xml.bind.annotation.XmlType(name="",
            propOrder={          "tinstanceId",
              "treferenceId",
              "tcreateUserId",
              "tupdateUserId",
              "tkeyAttrText",
              "tsearchAttrText",
              "totherAttrText",
              "totherAttrDate",
              "totherAttrTime",
            "totherAttrAmount"}
  )
  static public class ExpGListType  implements Externalizable, Cloneable
  {
    /**
     * Default Constructor.
     **/
    public ExpGListType()
    {
    }
    /**
     * Constructor.
     **/
    public ExpGListType(boolean TrustClients)
    {
      _TrustClients = TrustClients;
    }
    /**
     * Internal storage for TrustClients property.
     **/
    private boolean _TrustClients = false;
    @javax.xml.bind.annotation.XmlTransient
    public boolean getTrustClients() {
      return(_TrustClients);
    }
    
    public void setTrustClients(boolean value) {
      _TrustClients = value;
    }
    
    /**
     * Internal storage for TinstanceId property.
     **/
    private java.sql.Timestamp _TinstanceId = null;
    /**
     * Gets the TinstanceId property
     * 
     * "Instance id. Kayıt ilk yaratıldığında verilen ve silininceye kadar kaydı unique olarak belirleyen değer. Değer, 
      INSTANCE_ID_GENERATE ab tarafından verilir. 
    "
     * 
     * @return a java.sql.Timestamp containing the value or null
     * 
     * The default value is: null
     * 
     * @see #setTinstanceId(java.sql.Timestamp)
     * @see #resetTinstanceId()
     * @see #validateTinstanceId()
     **/
    @javax.xml.bind.annotation.XmlElement(name="TinstanceId",
                                          required=true)
    public java.sql.Timestamp getTinstanceId() {
      return(_TinstanceId);
    }
    /**
     * Sets the TinstanceId property
     * 
     * "Instance id. Kayıt ilk yaratıldığında verilen ve silininceye kadar kaydı unique olarak belirleyen değer. Değer, 
      INSTANCE_ID_GENERATE ab tarafından verilir. 
    "
     * 
     * @param value the new value for the property or null.
     * 
     * Throws IllegalArgumentException if the value is invalid.
     * 
     * The default value is: null
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getTinstanceId()
     * @see #resetTinstanceId()
     * @see #validateTinstanceId()
     **/
    public void setTinstanceId(java.sql.Timestamp value) throws IllegalArgumentException {
      if ( _TrustClients == true )
      {
        _TinstanceId = value;
        return;
      }
      _TinstanceId = value;
    }
    
    /**
     * Internal method to check values for the TinstanceId property.
     **/
    private  void checkTinstanceId( java.sql.Timestamp value ) throws IllegalArgumentException 
    {
      if ( value == null )
      {
        throw new IllegalArgumentException("Property ExpGListType.TinstanceId is required and cannot be zero or empty");
      }
    }
    
    /**
     * Resets the TinstanceId property to its default value of null.
     * @see #getTinstanceId()
     * @see #setTinstanceId(java.sql.Timestamp)
     * @see #validateTinstanceId()
     **/
    public  void resetTinstanceId()
    {
      _TinstanceId = null;
    }
    
    /**
     * Validates the current TinstanceId property value.
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getTinstanceId()
     * @see #setTinstanceId(java.sql.Timestamp)
     * @see #resetTinstanceId()
     **/
    public  void validateTinstanceId() throws IllegalArgumentException 
    {
      checkTinstanceId(_TinstanceId);
    }
    
    /**
     * Internal storage for TreferenceId property.
     **/
    private java.sql.Timestamp _TreferenceId = null;
    /**
     * Gets the TreferenceId property
     * 
     * "Reference id. Kayıt her değiştiğinde, yeni değeri, IMP_REFERENCE.SERVER_TIMESTAMP olur.
    "
     * 
     * @return a java.sql.Timestamp containing the value or null
     * 
     * The default value is: null
     * 
     * @see #setTreferenceId(java.sql.Timestamp)
     * @see #resetTreferenceId()
     * @see #validateTreferenceId()
     **/
    @javax.xml.bind.annotation.XmlElement(name="TreferenceId",
                                          required=true)
    public java.sql.Timestamp getTreferenceId() {
      return(_TreferenceId);
    }
    /**
     * Sets the TreferenceId property
     * 
     * "Reference id. Kayıt her değiştiğinde, yeni değeri, IMP_REFERENCE.SERVER_TIMESTAMP olur.
    "
     * 
     * @param value the new value for the property or null.
     * 
     * Throws IllegalArgumentException if the value is invalid.
     * 
     * The default value is: null
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getTreferenceId()
     * @see #resetTreferenceId()
     * @see #validateTreferenceId()
     **/
    public void setTreferenceId(java.sql.Timestamp value) throws IllegalArgumentException {
      if ( _TrustClients == true )
      {
        _TreferenceId = value;
        return;
      }
      _TreferenceId = value;
    }
    
    /**
     * Internal method to check values for the TreferenceId property.
     **/
    private  void checkTreferenceId( java.sql.Timestamp value ) throws IllegalArgumentException 
    {
      if ( value == null )
      {
        throw new IllegalArgumentException("Property ExpGListType.TreferenceId is required and cannot be zero or empty");
      }
    }
    
    /**
     * Resets the TreferenceId property to its default value of null.
     * @see #getTreferenceId()
     * @see #setTreferenceId(java.sql.Timestamp)
     * @see #validateTreferenceId()
     **/
    public  void resetTreferenceId()
    {
      _TreferenceId = null;
    }
    
    /**
     * Validates the current TreferenceId property value.
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getTreferenceId()
     * @see #setTreferenceId(java.sql.Timestamp)
     * @see #resetTreferenceId()
     **/
    public  void validateTreferenceId() throws IllegalArgumentException 
    {
      checkTreferenceId(_TreferenceId);
    }
    
    /**
     * Internal storage for TcreateUserId property.
     **/
    private String _TcreateUserId = "        ";
    /**
     * Gets the TcreateUserId property
     * 
     * "Kaydı yaratan client userid.
    "
     * 
     * @return a String containing the value
     * 
     * The default value is: "        "
     * 
     * @see #setTcreateUserId(String)
     * @see #resetTcreateUserId()
     * @see #validateTcreateUserId()
     **/
    @javax.xml.bind.annotation.XmlElement(name="TcreateUserId",
                                          required=true)
    public String getTcreateUserId() {
      return(_TcreateUserId);
    }
    /**
     * Sets the TcreateUserId property
     * 
     * "Kaydı yaratan client userid.
    "
     * 
     * @param value the new value for the property.
     * 
     * Throws IllegalArgumentException if the value is invalid.
     * 
     * The default value is: "        "
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getTcreateUserId()
     * @see #resetTcreateUserId()
     * @see #validateTcreateUserId()
     **/
    public void setTcreateUserId(String value) throws IllegalArgumentException {
      if ( _TrustClients == true )
      {
        _TcreateUserId = value;
        return;
      }
      if ( value == null )
      {
        value = "";
      }
      if ( value.length() < 8 )
      {
        value += "        ".substring(0, 8-value.length());
      }
      _TcreateUserId = value;
    }
    
    /**
     * Internal method to check values for the TcreateUserId property.
     **/
    private  void checkTcreateUserId( String value ) throws IllegalArgumentException 
    {
      if ( value.length() > 8 )
      {
        throw new IllegalArgumentException("Property ExpGListType.TcreateUserId cannot be more than 8 characters");
      }
      if ( value.trim().length() == 0 )
      {
        throw new IllegalArgumentException("Property ExpGListType.TcreateUserId is required and cannot be zero or empty");
      }
    }
    
    /**
     * Resets the TcreateUserId property to its default value of "        ".
     * @see #getTcreateUserId()
     * @see #setTcreateUserId(String)
     * @see #validateTcreateUserId()
     **/
    public  void resetTcreateUserId()
    {
      _TcreateUserId = "        ";
    }
    
    /**
     * Validates the current TcreateUserId property value.
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getTcreateUserId()
     * @see #setTcreateUserId(String)
     * @see #resetTcreateUserId()
     **/
    public  void validateTcreateUserId() throws IllegalArgumentException 
    {
      checkTcreateUserId(_TcreateUserId);
    }
    
    /**
     * Internal storage for TupdateUserId property.
     **/
    private String _TupdateUserId = "        ";
    /**
     * Gets the TupdateUserId property
     * 
     * "Kaydı enson değiştiren client userid.
    "
     * 
     * @return a String containing the value
     * 
     * The default value is: "        "
     * 
     * @see #setTupdateUserId(String)
     * @see #resetTupdateUserId()
     * @see #validateTupdateUserId()
     **/
    @javax.xml.bind.annotation.XmlElement(name="TupdateUserId",
                                          required=true)
    public String getTupdateUserId() {
      return(_TupdateUserId);
    }
    /**
     * Sets the TupdateUserId property
     * 
     * "Kaydı enson değiştiren client userid.
    "
     * 
     * @param value the new value for the property.
     * 
     * Throws IllegalArgumentException if the value is invalid.
     * 
     * The default value is: "        "
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getTupdateUserId()
     * @see #resetTupdateUserId()
     * @see #validateTupdateUserId()
     **/
    public void setTupdateUserId(String value) throws IllegalArgumentException {
      if ( _TrustClients == true )
      {
        _TupdateUserId = value;
        return;
      }
      if ( value == null )
      {
        value = "";
      }
      if ( value.length() < 8 )
      {
        value += "        ".substring(0, 8-value.length());
      }
      _TupdateUserId = value;
    }
    
    /**
     * Internal method to check values for the TupdateUserId property.
     **/
    private  void checkTupdateUserId( String value ) throws IllegalArgumentException 
    {
      if ( value.length() > 8 )
      {
        throw new IllegalArgumentException("Property ExpGListType.TupdateUserId cannot be more than 8 characters");
      }
      if ( value.trim().length() == 0 )
      {
        throw new IllegalArgumentException("Property ExpGListType.TupdateUserId is required and cannot be zero or empty");
      }
    }
    
    /**
     * Resets the TupdateUserId property to its default value of "        ".
     * @see #getTupdateUserId()
     * @see #setTupdateUserId(String)
     * @see #validateTupdateUserId()
     **/
    public  void resetTupdateUserId()
    {
      _TupdateUserId = "        ";
    }
    
    /**
     * Validates the current TupdateUserId property value.
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getTupdateUserId()
     * @see #setTupdateUserId(String)
     * @see #resetTupdateUserId()
     **/
    public  void validateTupdateUserId() throws IllegalArgumentException 
    {
      checkTupdateUserId(_TupdateUserId);
    }
    
    /**
     * Internal storage for TkeyAttrText property.
     **/
    private String _TkeyAttrText = "    ";
    /**
     * Gets the TkeyAttrText property
     * 
     * "Key (Primary Identifier) attribute.
    "
     * 
     * @return a String containing the value
     * 
     * The default value is: "    "
     * 
     * @see #setTkeyAttrText(String)
     * @see #resetTkeyAttrText()
     * @see #validateTkeyAttrText()
     **/
    @javax.xml.bind.annotation.XmlElement(name="TkeyAttrText",
                                          required=true)
    public String getTkeyAttrText() {
      return(_TkeyAttrText);
    }
    /**
     * Sets the TkeyAttrText property
     * 
     * "Key (Primary Identifier) attribute.
    "
     * 
     * @param value the new value for the property.
     * 
     * Throws IllegalArgumentException if the value is invalid.
     * 
     * The default value is: "    "
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getTkeyAttrText()
     * @see #resetTkeyAttrText()
     * @see #validateTkeyAttrText()
     **/
    public void setTkeyAttrText(String value) throws IllegalArgumentException {
      if ( _TrustClients == true )
      {
        _TkeyAttrText = value;
        return;
      }
      if ( value == null )
      {
        value = "";
      }
      if ( value.length() < 4 )
      {
        value += "    ".substring(0, 4-value.length());
      }
      _TkeyAttrText = value;
    }
    
    /**
     * Internal method to check values for the TkeyAttrText property.
     **/
    private  void checkTkeyAttrText( String value ) throws IllegalArgumentException 
    {
      if ( value.length() > 4 )
      {
        throw new IllegalArgumentException("Property ExpGListType.TkeyAttrText cannot be more than 4 characters");
      }
      if ( value.trim().length() == 0 )
      {
        throw new IllegalArgumentException("Property ExpGListType.TkeyAttrText is required and cannot be zero or empty");
      }
    }
    
    /**
     * Resets the TkeyAttrText property to its default value of "    ".
     * @see #getTkeyAttrText()
     * @see #setTkeyAttrText(String)
     * @see #validateTkeyAttrText()
     **/
    public  void resetTkeyAttrText()
    {
      _TkeyAttrText = "    ";
    }
    
    /**
     * Validates the current TkeyAttrText property value.
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getTkeyAttrText()
     * @see #setTkeyAttrText(String)
     * @see #resetTkeyAttrText()
     **/
    public  void validateTkeyAttrText() throws IllegalArgumentException 
    {
      checkTkeyAttrText(_TkeyAttrText);
    }
    
    /**
     * Internal storage for TsearchAttrText property.
     **/
    private String _TsearchAttrText = "                    ";
    /**
     * Gets the TsearchAttrText property
     * 
     * "Search attribute.
    "
     * 
     * @return a String containing the value
     * 
     * The default value is: "                    "
     * 
     * @see #setTsearchAttrText(String)
     * @see #resetTsearchAttrText()
     * @see #validateTsearchAttrText()
     **/
    @javax.xml.bind.annotation.XmlElement(name="TsearchAttrText",
                                          required=true)
    public String getTsearchAttrText() {
      return(_TsearchAttrText);
    }
    /**
     * Sets the TsearchAttrText property
     * 
     * "Search attribute.
    "
     * 
     * @param value the new value for the property.
     * 
     * Throws IllegalArgumentException if the value is invalid.
     * 
     * The default value is: "                    "
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getTsearchAttrText()
     * @see #resetTsearchAttrText()
     * @see #validateTsearchAttrText()
     **/
    public void setTsearchAttrText(String value) throws IllegalArgumentException {
      if ( _TrustClients == true )
      {
        _TsearchAttrText = value;
        return;
      }
      if ( value == null )
      {
        value = "";
      }
      if ( value.length() < 20 )
      {
        value += "                    ".substring(0, 20-value.length());
      }
      _TsearchAttrText = value;
    }
    
    /**
     * Internal method to check values for the TsearchAttrText property.
     **/
    private  void checkTsearchAttrText( String value ) throws IllegalArgumentException 
    {
      if ( value.length() > 20 )
      {
        throw new IllegalArgumentException("Property ExpGListType.TsearchAttrText cannot be more than 20 characters");
      }
      if ( value.trim().length() == 0 )
      {
        throw new IllegalArgumentException("Property ExpGListType.TsearchAttrText is required and cannot be zero or empty");
      }
    }
    
    /**
     * Resets the TsearchAttrText property to its default value of "                    ".
     * @see #getTsearchAttrText()
     * @see #setTsearchAttrText(String)
     * @see #validateTsearchAttrText()
     **/
    public  void resetTsearchAttrText()
    {
      _TsearchAttrText = "                    ";
    }
    
    /**
     * Validates the current TsearchAttrText property value.
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getTsearchAttrText()
     * @see #setTsearchAttrText(String)
     * @see #resetTsearchAttrText()
     **/
    public  void validateTsearchAttrText() throws IllegalArgumentException 
    {
      checkTsearchAttrText(_TsearchAttrText);
    }
    
    /**
     * Internal storage for TotherAttrText property.
     **/
    private String _TotherAttrText = "  ";
    /**
     * Gets the TotherAttrText property
     * 
     * "Other attribute.
    "
     * 
     * @return a String containing the value
     * 
     * The default value is: "  "
     * 
     * @see #setTotherAttrText(String)
     * @see #resetTotherAttrText()
     * @see #validateTotherAttrText()
     **/
    @javax.xml.bind.annotation.XmlElement(name="TotherAttrText",
                                          required=true)
    public String getTotherAttrText() {
      return(_TotherAttrText);
    }
    /**
     * Sets the TotherAttrText property
     * 
     * "Other attribute.
    "
     * 
     * @param value the new value for the property.
     * 
     * Throws IllegalArgumentException if the value is invalid.
     * 
     * The default value is: "  "
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getTotherAttrText()
     * @see #resetTotherAttrText()
     * @see #validateTotherAttrText()
     **/
    public void setTotherAttrText(String value) throws IllegalArgumentException {
      if ( _TrustClients == true )
      {
        _TotherAttrText = value;
        return;
      }
      if ( value == null )
      {
        value = "";
      }
      if ( value.length() < 2 )
      {
        value += "  ".substring(0, 2-value.length());
      }
      _TotherAttrText = value;
    }
    
    /**
     * Internal method to check values for the TotherAttrText property.
     **/
    private  void checkTotherAttrText( String value ) throws IllegalArgumentException 
    {
      if ( value.length() > 2 )
      {
        throw new IllegalArgumentException("Property ExpGListType.TotherAttrText cannot be more than 2 characters");
      }
      if ( value.trim().length() == 0 )
      {
        throw new IllegalArgumentException("Property ExpGListType.TotherAttrText is required and cannot be zero or empty");
      }
    }
    
    /**
     * Resets the TotherAttrText property to its default value of "  ".
     * @see #getTotherAttrText()
     * @see #setTotherAttrText(String)
     * @see #validateTotherAttrText()
     **/
    public  void resetTotherAttrText()
    {
      _TotherAttrText = "  ";
    }
    
    /**
     * Validates the current TotherAttrText property value.
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getTotherAttrText()
     * @see #setTotherAttrText(String)
     * @see #resetTotherAttrText()
     **/
    public  void validateTotherAttrText() throws IllegalArgumentException 
    {
      checkTotherAttrText(_TotherAttrText);
    }
    
    /**
     * Internal storage for TotherAttrDate property.
     **/
    private java.sql.Date _TotherAttrDate = null;
    /**
     * Gets the TotherAttrDate property
     * 
     * "Other Date attribute.
    "
     * 
     * @return a java.sql.Date containing the value or null
     * 
     * The default value is: null
     * 
     * @see #setTotherAttrDate(java.sql.Date)
     * @see #resetTotherAttrDate()
     * @see #validateTotherAttrDate()
     **/
    @javax.xml.bind.annotation.XmlElement(name="TotherAttrDate",
                                          required=true)
    public java.sql.Date getTotherAttrDate() {
      return(_TotherAttrDate);
    }
    /**
     * Sets the TotherAttrDate property
     * 
     * "Other Date attribute.
    "
     * 
     * @param value the new value for the property or null.
     * 
     * Throws IllegalArgumentException if the value is invalid.
     * 
     * The default value is: null
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getTotherAttrDate()
     * @see #resetTotherAttrDate()
     * @see #validateTotherAttrDate()
     **/
    public void setTotherAttrDate(java.sql.Date value) throws IllegalArgumentException {
      if ( _TrustClients == true )
      {
        _TotherAttrDate = value;
        return;
      }
      _TotherAttrDate = value;
    }
    
    /**
     * Internal method to check values for the TotherAttrDate property.
     **/
    private  void checkTotherAttrDate( java.sql.Date value ) throws IllegalArgumentException 
    {
      if ( value == null )
      {
        throw new IllegalArgumentException("Property ExpGListType.TotherAttrDate is required and cannot be zero or empty");
      }
    }
    
    /**
     * Resets the TotherAttrDate property to its default value of null.
     * @see #getTotherAttrDate()
     * @see #setTotherAttrDate(java.sql.Date)
     * @see #validateTotherAttrDate()
     **/
    public  void resetTotherAttrDate()
    {
      _TotherAttrDate = null;
    }
    
    /**
     * Validates the current TotherAttrDate property value.
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getTotherAttrDate()
     * @see #setTotherAttrDate(java.sql.Date)
     * @see #resetTotherAttrDate()
     **/
    public  void validateTotherAttrDate() throws IllegalArgumentException 
    {
      checkTotherAttrDate(_TotherAttrDate);
    }
    
    /**
     * Internal storage for TotherAttrTime property.
     **/
    private java.sql.Time _TotherAttrTime = null;
    /**
     * Gets the TotherAttrTime property
     * 
     * "Other Time attribute.
    "
     * 
     * @return a java.sql.Time containing the value or null
     * 
     * The default value is: null
     * 
     * @see #setTotherAttrTime(java.sql.Time)
     * @see #resetTotherAttrTime()
     * @see #validateTotherAttrTime()
     **/
    @javax.xml.bind.annotation.XmlElement(name="TotherAttrTime",
                                          required=true)
    public java.sql.Time getTotherAttrTime() {
      return(_TotherAttrTime);
    }
    /**
     * Sets the TotherAttrTime property
     * 
     * "Other Time attribute.
    "
     * 
     * @param value the new value for the property or null.
     * 
     * Throws IllegalArgumentException if the value is invalid.
     * 
     * The default value is: null
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getTotherAttrTime()
     * @see #resetTotherAttrTime()
     * @see #validateTotherAttrTime()
     **/
    public void setTotherAttrTime(java.sql.Time value) throws IllegalArgumentException {
      if ( _TrustClients == true )
      {
        _TotherAttrTime = value;
        return;
      }
      _TotherAttrTime = value;
    }
    
    /**
     * Internal method to check values for the TotherAttrTime property.
     **/
    private  void checkTotherAttrTime( java.sql.Time value ) throws IllegalArgumentException 
    {
      if ( value == null )
      {
        throw new IllegalArgumentException("Property ExpGListType.TotherAttrTime is required and cannot be zero or empty");
      }
    }
    
    /**
     * Resets the TotherAttrTime property to its default value of null.
     * @see #getTotherAttrTime()
     * @see #setTotherAttrTime(java.sql.Time)
     * @see #validateTotherAttrTime()
     **/
    public  void resetTotherAttrTime()
    {
      _TotherAttrTime = null;
    }
    
    /**
     * Validates the current TotherAttrTime property value.
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getTotherAttrTime()
     * @see #setTotherAttrTime(java.sql.Time)
     * @see #resetTotherAttrTime()
     **/
    public  void validateTotherAttrTime() throws IllegalArgumentException 
    {
      checkTotherAttrTime(_TotherAttrTime);
    }
    
    /**
     * Internal storage for TotherAttrAmount property.
     **/
    private BigDecimal _TotherAttrAmount = new BigDecimal("0.00");
    /**
     * Gets the TotherAttrAmount property
     * 
     * "Other Amount (17,2) attribute.
    "
     * 
     * @return a BigDecimal containing the value
     * 
     * The default value is: 0.00
     * 
     * @see #setTotherAttrAmount(BigDecimal)
     * @see #resetTotherAttrAmount()
     * @see #validateTotherAttrAmount()
     **/
    @javax.xml.bind.annotation.XmlElement(name="TotherAttrAmount",
                                          required=true)
    public BigDecimal getTotherAttrAmount() {
      return(_TotherAttrAmount);
    }
    /**
     * Sets the TotherAttrAmount property
     * 
     * "Other Amount (17,2) attribute.
    "
     * 
     * @param value the new value for the property.
     * 
     * Throws IllegalArgumentException if the value is invalid.
     * 
     * The default value is: 0.00
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getTotherAttrAmount()
     * @see #resetTotherAttrAmount()
     * @see #validateTotherAttrAmount()
     **/
    public void setTotherAttrAmount(BigDecimal value) throws IllegalArgumentException {
      if ( _TrustClients == true )
      {
        _TotherAttrAmount = value;
        return;
      }
      _TotherAttrAmount = value;
    }
    
    /**
     * Internal method to check values for the TotherAttrAmount property.
     **/
    private  void checkTotherAttrAmount( BigDecimal value ) throws IllegalArgumentException 
    {
      if ( value.scale() > 2 )
      {
        throw new IllegalArgumentException("Property ExpGListType.TotherAttrAmount cannot be more than 2 fractional digits");
      }
      if ( (value.precision() - value.scale()) > 15 )
      {
        throw new IllegalArgumentException("Property ExpGListType.TotherAttrAmount cannot be more than 15 integral digits");
      }
      if ( value.signum() == 0 )
      {
        throw new IllegalArgumentException("Property ExpGListType.TotherAttrAmount is required and cannot be zero or empty");
      }
    }
    
    /**
     * Resets the TotherAttrAmount property to its default value of 0.00.
     * @see #getTotherAttrAmount()
     * @see #setTotherAttrAmount(BigDecimal)
     * @see #validateTotherAttrAmount()
     **/
    public  void resetTotherAttrAmount()
    {
      _TotherAttrAmount = new BigDecimal("0.00");
    }
    
    /**
     * Validates the current TotherAttrAmount property value.
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getTotherAttrAmount()
     * @see #setTotherAttrAmount(BigDecimal)
     * @see #resetTotherAttrAmount()
     **/
    public  void validateTotherAttrAmount() throws IllegalArgumentException 
    {
      checkTotherAttrAmount(_TotherAttrAmount);
    }
    
    /**
     * Resets the ExpGListType class properties to all of their default values.
     **/
    public void reset()
    {
      resetTinstanceId();
      resetTreferenceId();
      resetTcreateUserId();
      resetTupdateUserId();
      resetTkeyAttrText();
      resetTsearchAttrText();
      resetTotherAttrText();
      resetTotherAttrDate();
      resetTotherAttrTime();
      resetTotherAttrAmount();
    }
    
    /**
     * Creates a copy of the instance.
     * 
     * @return A copy of the instance.
     **/
    @Override public Object clone()
    {
      ExpGListType copy = new ExpGListType(_TrustClients);
      copy._TinstanceId = _TinstanceId;
      copy._TreferenceId = _TreferenceId;
      copy._TcreateUserId = _TcreateUserId;
      copy._TupdateUserId = _TupdateUserId;
      copy._TkeyAttrText = _TkeyAttrText;
      copy._TsearchAttrText = _TsearchAttrText;
      copy._TotherAttrText = _TotherAttrText;
      copy._TotherAttrDate = _TotherAttrDate;
      copy._TotherAttrTime = _TotherAttrTime;
      copy._TotherAttrAmount = _TotherAttrAmount;
      return(copy);
    }
    
    /**
     * Validates all the property values on the instance.
     * @throws IllegalArgumentException Thrown if any property is invalid.
     **/
    public void validate()
    	throws IllegalArgumentException
    {
      validateTinstanceId();
      validateTreferenceId();
      validateTcreateUserId();
      validateTupdateUserId();
      validateTkeyAttrText();
      validateTsearchAttrText();
      validateTotherAttrText();
      validateTotherAttrDate();
      validateTotherAttrTime();
      validateTotherAttrAmount();
    }
    
    /**
     * Unserializes the ExpGListType Entity View class from the ObjectInput.
     * @throws IOException Thrown If an I/O error has occurred.
     **/
    public void readExternal(ObjectInput in)
    	throws IOException
    {
      _TrustClients = in.readBoolean();
      if ( in.readBoolean() == true )
      {
        _TinstanceId = new java.sql.Timestamp(in.readInt(), in.readInt(), in.readInt(), in.readInt(), in.readInt(), in.readInt(), 
          in.readInt());
      }
      else 
      {
        _TinstanceId = null;
      }
      
      if ( in.readBoolean() == true )
      {
        _TreferenceId = new java.sql.Timestamp(in.readInt(), in.readInt(), in.readInt(), in.readInt(), in.readInt(), in.readInt(), 
          in.readInt());
      }
      else 
      {
        _TreferenceId = null;
      }
      
      _TcreateUserId = in.readUTF();
      _TupdateUserId = in.readUTF();
      _TkeyAttrText = in.readUTF();
      _TsearchAttrText = in.readUTF();
      _TotherAttrText = in.readUTF();
      if ( in.readBoolean() == true )
      {
        _TotherAttrDate = new java.sql.Date(in.readInt(), in.readInt(), in.readInt());
      }
      else 
      {
        _TotherAttrDate = null;
      }
      
      if ( in.readBoolean() == true )
      {
        _TotherAttrTime = new java.sql.Time(in.readInt(), in.readInt(), in.readInt());
      }
      else 
      {
        _TotherAttrTime = null;
      }
      
      _TotherAttrAmount = new BigDecimal(in.readUTF());
    }
    
    /**
     * Serializes the ExpGListType Entity View class from the ObjectOutput.
     * @throws IOException Thrown If an I/O error has occurred.
     **/
    public void writeExternal(ObjectOutput out)
    	throws IOException
    {
      out.writeBoolean(_TrustClients);
      if ( _TinstanceId != null )
      {
        out.writeBoolean(true);
        out.writeInt(_TinstanceId.getYear());
        out.writeInt(_TinstanceId.getMonth());
        out.writeInt(_TinstanceId.getDate());
        out.writeInt(_TinstanceId.getHours());
        out.writeInt(_TinstanceId.getMinutes());
        out.writeInt(_TinstanceId.getSeconds());
        out.writeInt(_TinstanceId.getNanos());
      }
      else 
      {
        out.writeBoolean(false);
      }
      
      if ( _TreferenceId != null )
      {
        out.writeBoolean(true);
        out.writeInt(_TreferenceId.getYear());
        out.writeInt(_TreferenceId.getMonth());
        out.writeInt(_TreferenceId.getDate());
        out.writeInt(_TreferenceId.getHours());
        out.writeInt(_TreferenceId.getMinutes());
        out.writeInt(_TreferenceId.getSeconds());
        out.writeInt(_TreferenceId.getNanos());
      }
      else 
      {
        out.writeBoolean(false);
      }
      
      out.writeUTF(_TcreateUserId);
      out.writeUTF(_TupdateUserId);
      out.writeUTF(_TkeyAttrText);
      out.writeUTF(_TsearchAttrText);
      out.writeUTF(_TotherAttrText);
      if ( _TotherAttrDate != null )
      {
        out.writeBoolean(true);
        out.writeInt(_TotherAttrDate.getYear());
        out.writeInt(_TotherAttrDate.getMonth());
        out.writeInt(_TotherAttrDate.getDate());
      }
      else 
      {
        out.writeBoolean(false);
      }
      
      if ( _TotherAttrTime != null )
      {
        out.writeBoolean(true);
        out.writeInt(_TotherAttrTime.getHours());
        out.writeInt(_TotherAttrTime.getMinutes());
        out.writeInt(_TotherAttrTime.getSeconds());
      }
      else 
      {
        out.writeBoolean(false);
      }
      
      out.writeUTF(_TotherAttrAmount.toPlainString());
    }
    
    /**
     * Gets a String representation of the instance.
     * 
     * @return A String representation of the instance.
     **/
    @Override public String toString()
    {
      StringBuffer result = new StringBuffer();
      if ( _TinstanceId == null )
      {
        result.append("TinstanceId = \"null\"");
      }
      
      else 
      {
        result.append("TinstanceId = \"" + _TinstanceId.toString() + "\"");
      }
      
      if ( _TreferenceId == null )
      {
        result.append(", TreferenceId = \"null\"");
      }
      
      else 
      {
        result.append(", TreferenceId = \"" + _TreferenceId.toString() + "\"");
      }
      
      result.append(", TcreateUserId = \"" + _TcreateUserId + "\"");
      result.append(", TupdateUserId = \"" + _TupdateUserId + "\"");
      result.append(", TkeyAttrText = \"" + _TkeyAttrText + "\"");
      result.append(", TsearchAttrText = \"" + _TsearchAttrText + "\"");
      result.append(", TotherAttrText = \"" + _TotherAttrText + "\"");
      if ( _TotherAttrDate == null )
      {
        result.append(", TotherAttrDate = \"null\"");
      }
      
      else 
      {
        result.append(", TotherAttrDate = \"" + _TotherAttrDate.toString() + "\"");
      }
      
      if ( _TotherAttrTime == null )
      {
        result.append(", TotherAttrTime = \"null\"");
      }
      
      else 
      {
        result.append(", TotherAttrTime = \"" + _TotherAttrTime.toString() + "\"");
      }
      
      result.append(", TotherAttrAmount = \"" + _TotherAttrAmount + "\"");
      return(result.toString());
    }
  };
  
  /**
   * Contains the data for the ExpReferenceIyy1ServerData entity view.
   **/
  @javax.xml.bind.annotation.XmlType(name="",
            propOrder={          "serverDate",
              "serverTime",
            "referenceId"}
  )
  static public class ExpReferenceIyy1ServerData  implements Externalizable, Cloneable
  {
    /**
     * Default Constructor.
     **/
    public ExpReferenceIyy1ServerData()
    {
    }
    /**
     * Constructor.
     **/
    public ExpReferenceIyy1ServerData(boolean TrustClients)
    {
      _TrustClients = TrustClients;
    }
    /**
     * Internal storage for TrustClients property.
     **/
    private boolean _TrustClients = false;
    @javax.xml.bind.annotation.XmlTransient
    public boolean getTrustClients() {
      return(_TrustClients);
    }
    
    public void setTrustClients(boolean value) {
      _TrustClients = value;
    }
    
    /**
     * Internal storage for ServerDate property.
     **/
    private java.sql.Date _ServerDate = null;
    /**
     * Gets the ServerDate property
     * 
     * "Server tarihi
    "
     * 
     * @return a java.sql.Date containing the value or null
     * 
     * The default value is: null
     * 
     * @see #setServerDate(java.sql.Date)
     * @see #resetServerDate()
     * @see #validateServerDate()
     **/
    @javax.xml.bind.annotation.XmlElement(name="ServerDate",
                                          required=true)
    public java.sql.Date getServerDate() {
      return(_ServerDate);
    }
    /**
     * Sets the ServerDate property
     * 
     * "Server tarihi
    "
     * 
     * @param value the new value for the property or null.
     * 
     * Throws IllegalArgumentException if the value is invalid.
     * 
     * The default value is: null
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getServerDate()
     * @see #resetServerDate()
     * @see #validateServerDate()
     **/
    public void setServerDate(java.sql.Date value) throws IllegalArgumentException {
      if ( _TrustClients == true )
      {
        _ServerDate = value;
        return;
      }
      _ServerDate = value;
    }
    
    /**
     * Internal method to check values for the ServerDate property.
     **/
    private  void checkServerDate( java.sql.Date value ) throws IllegalArgumentException 
    {
      if ( value == null )
      {
        throw new IllegalArgumentException("Property ExpReferenceIyy1ServerData.ServerDate is required and cannot be zero or empty")
          ;
      }
    }
    
    /**
     * Resets the ServerDate property to its default value of null.
     * @see #getServerDate()
     * @see #setServerDate(java.sql.Date)
     * @see #validateServerDate()
     **/
    public  void resetServerDate()
    {
      _ServerDate = null;
    }
    
    /**
     * Validates the current ServerDate property value.
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getServerDate()
     * @see #setServerDate(java.sql.Date)
     * @see #resetServerDate()
     **/
    public  void validateServerDate() throws IllegalArgumentException 
    {
      checkServerDate(_ServerDate);
    }
    
    /**
     * Internal storage for ServerTime property.
     **/
    private java.sql.Time _ServerTime = null;
    /**
     * Gets the ServerTime property
     * 
     * "Server saati
    "
     * 
     * @return a java.sql.Time containing the value or null
     * 
     * The default value is: null
     * 
     * @see #setServerTime(java.sql.Time)
     * @see #resetServerTime()
     * @see #validateServerTime()
     **/
    @javax.xml.bind.annotation.XmlElement(name="ServerTime",
                                          required=true)
    public java.sql.Time getServerTime() {
      return(_ServerTime);
    }
    /**
     * Sets the ServerTime property
     * 
     * "Server saati
    "
     * 
     * @param value the new value for the property or null.
     * 
     * Throws IllegalArgumentException if the value is invalid.
     * 
     * The default value is: null
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getServerTime()
     * @see #resetServerTime()
     * @see #validateServerTime()
     **/
    public void setServerTime(java.sql.Time value) throws IllegalArgumentException {
      if ( _TrustClients == true )
      {
        _ServerTime = value;
        return;
      }
      _ServerTime = value;
    }
    
    /**
     * Internal method to check values for the ServerTime property.
     **/
    private  void checkServerTime( java.sql.Time value ) throws IllegalArgumentException 
    {
      if ( value == null )
      {
        throw new IllegalArgumentException("Property ExpReferenceIyy1ServerData.ServerTime is required and cannot be zero or empty")
          ;
      }
    }
    
    /**
     * Resets the ServerTime property to its default value of null.
     * @see #getServerTime()
     * @see #setServerTime(java.sql.Time)
     * @see #validateServerTime()
     **/
    public  void resetServerTime()
    {
      _ServerTime = null;
    }
    
    /**
     * Validates the current ServerTime property value.
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getServerTime()
     * @see #setServerTime(java.sql.Time)
     * @see #resetServerTime()
     **/
    public  void validateServerTime() throws IllegalArgumentException 
    {
      checkServerTime(_ServerTime);
    }
    
    /**
     * Internal storage for ReferenceId property.
     **/
    private java.sql.Timestamp _ReferenceId = null;
    /**
     * Gets the ReferenceId property
     * 
     * "Server referans bilgisi. Server başlangıcında değer atanır ve yapılan her değişiklikte, değişen kayıtların REFERENCE_ID 
      sahasına atanır.
    "
     * 
     * @return a java.sql.Timestamp containing the value or null
     * 
     * The default value is: null
     * 
     * @see #setReferenceId(java.sql.Timestamp)
     * @see #resetReferenceId()
     * @see #validateReferenceId()
     **/
    @javax.xml.bind.annotation.XmlElement(name="ReferenceId",
                                          required=true)
    public java.sql.Timestamp getReferenceId() {
      return(_ReferenceId);
    }
    /**
     * Sets the ReferenceId property
     * 
     * "Server referans bilgisi. Server başlangıcında değer atanır ve yapılan her değişiklikte, değişen kayıtların REFERENCE_ID 
      sahasına atanır.
    "
     * 
     * @param value the new value for the property or null.
     * 
     * Throws IllegalArgumentException if the value is invalid.
     * 
     * The default value is: null
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getReferenceId()
     * @see #resetReferenceId()
     * @see #validateReferenceId()
     **/
    public void setReferenceId(java.sql.Timestamp value) throws IllegalArgumentException {
      if ( _TrustClients == true )
      {
        _ReferenceId = value;
        return;
      }
      _ReferenceId = value;
    }
    
    /**
     * Internal method to check values for the ReferenceId property.
     **/
    private  void checkReferenceId( java.sql.Timestamp value ) throws IllegalArgumentException 
    {
      if ( value == null )
      {
        throw new IllegalArgumentException("Property ExpReferenceIyy1ServerData.ReferenceId is required and cannot be zero or empty")
          ;
      }
    }
    
    /**
     * Resets the ReferenceId property to its default value of null.
     * @see #getReferenceId()
     * @see #setReferenceId(java.sql.Timestamp)
     * @see #validateReferenceId()
     **/
    public  void resetReferenceId()
    {
      _ReferenceId = null;
    }
    
    /**
     * Validates the current ReferenceId property value.
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getReferenceId()
     * @see #setReferenceId(java.sql.Timestamp)
     * @see #resetReferenceId()
     **/
    public  void validateReferenceId() throws IllegalArgumentException 
    {
      checkReferenceId(_ReferenceId);
    }
    
    /**
     * Resets the ExpReferenceIyy1ServerData class properties to all of their default values.
     **/
    public void reset()
    {
      resetServerDate();
      resetServerTime();
      resetReferenceId();
    }
    
    /**
     * Creates a copy of the instance.
     * 
     * @return A copy of the instance.
     **/
    @Override public Object clone()
    {
      ExpReferenceIyy1ServerData copy = new ExpReferenceIyy1ServerData(_TrustClients);
      copy._ServerDate = _ServerDate;
      copy._ServerTime = _ServerTime;
      copy._ReferenceId = _ReferenceId;
      return(copy);
    }
    
    /**
     * Validates all the property values on the instance.
     * @throws IllegalArgumentException Thrown if any property is invalid.
     **/
    public void validate()
    	throws IllegalArgumentException
    {
      validateServerDate();
      validateServerTime();
      validateReferenceId();
    }
    
    /**
     * Unserializes the ExpReferenceIyy1ServerData Entity View class from the ObjectInput.
     * @throws IOException Thrown If an I/O error has occurred.
     **/
    public void readExternal(ObjectInput in)
    	throws IOException
    {
      _TrustClients = in.readBoolean();
      if ( in.readBoolean() == true )
      {
        _ServerDate = new java.sql.Date(in.readInt(), in.readInt(), in.readInt());
      }
      else 
      {
        _ServerDate = null;
      }
      
      if ( in.readBoolean() == true )
      {
        _ServerTime = new java.sql.Time(in.readInt(), in.readInt(), in.readInt());
      }
      else 
      {
        _ServerTime = null;
      }
      
      if ( in.readBoolean() == true )
      {
        _ReferenceId = new java.sql.Timestamp(in.readInt(), in.readInt(), in.readInt(), in.readInt(), in.readInt(), in.readInt(), 
          in.readInt());
      }
      else 
      {
        _ReferenceId = null;
      }
      
    }
    
    /**
     * Serializes the ExpReferenceIyy1ServerData Entity View class from the ObjectOutput.
     * @throws IOException Thrown If an I/O error has occurred.
     **/
    public void writeExternal(ObjectOutput out)
    	throws IOException
    {
      out.writeBoolean(_TrustClients);
      if ( _ServerDate != null )
      {
        out.writeBoolean(true);
        out.writeInt(_ServerDate.getYear());
        out.writeInt(_ServerDate.getMonth());
        out.writeInt(_ServerDate.getDate());
      }
      else 
      {
        out.writeBoolean(false);
      }
      
      if ( _ServerTime != null )
      {
        out.writeBoolean(true);
        out.writeInt(_ServerTime.getHours());
        out.writeInt(_ServerTime.getMinutes());
        out.writeInt(_ServerTime.getSeconds());
      }
      else 
      {
        out.writeBoolean(false);
      }
      
      if ( _ReferenceId != null )
      {
        out.writeBoolean(true);
        out.writeInt(_ReferenceId.getYear());
        out.writeInt(_ReferenceId.getMonth());
        out.writeInt(_ReferenceId.getDate());
        out.writeInt(_ReferenceId.getHours());
        out.writeInt(_ReferenceId.getMinutes());
        out.writeInt(_ReferenceId.getSeconds());
        out.writeInt(_ReferenceId.getNanos());
      }
      else 
      {
        out.writeBoolean(false);
      }
      
    }
    
    /**
     * Gets a String representation of the instance.
     * 
     * @return A String representation of the instance.
     **/
    @Override public String toString()
    {
      StringBuffer result = new StringBuffer();
      if ( _ServerDate == null )
      {
        result.append("ServerDate = \"null\"");
      }
      
      else 
      {
        result.append("ServerDate = \"" + _ServerDate.toString() + "\"");
      }
      
      if ( _ServerTime == null )
      {
        result.append(", ServerTime = \"null\"");
      }
      
      else 
      {
        result.append(", ServerTime = \"" + _ServerTime.toString() + "\"");
      }
      
      if ( _ReferenceId == null )
      {
        result.append(", ReferenceId = \"null\"");
      }
      
      else 
      {
        result.append(", ReferenceId = \"" + _ReferenceId.toString() + "\"");
      }
      
      return(result.toString());
    }
  };
  
  /**
   * Contains the data for the ExpIsc1AuthorizationInfo entity view.
   **/
  @javax.xml.bind.annotation.XmlType(name="",
            propOrder={          "tokenId",
              "authorityInd",
              "authorityStatusR",
              "authorityStatusU",
              "authorityStatusD",
            "authorityStatusL"}
  )
  static public class ExpIsc1AuthorizationInfo  implements Externalizable, Cloneable
  {
    /**
     * Default Constructor.
     **/
    public ExpIsc1AuthorizationInfo()
    {
    }
    /**
     * Constructor.
     **/
    public ExpIsc1AuthorizationInfo(boolean TrustClients)
    {
      _TrustClients = TrustClients;
    }
    /**
     * Internal storage for TrustClients property.
     **/
    private boolean _TrustClients = false;
    @javax.xml.bind.annotation.XmlTransient
    public boolean getTrustClients() {
      return(_TrustClients);
    }
    
    public void setTrustClients(boolean value) {
      _TrustClients = value;
    }
    
    /**
     * Internal storage for TokenId property.
     **/
    private String _TokenId = "                                ";
    /**
     * Gets the TokenId property
     * 
     * "System wide Session id
    "
     * 
     * @return a String containing the value
     * 
     * The default value is: "                                "
     * 
     * @see #setTokenId(String)
     * @see #resetTokenId()
     * @see #validateTokenId()
     **/
    @javax.xml.bind.annotation.XmlElement(name="TokenId",
                                          required=true)
    public String getTokenId() {
      return(_TokenId);
    }
    /**
     * Sets the TokenId property
     * 
     * "System wide Session id
    "
     * 
     * @param value the new value for the property.
     * 
     * Throws IllegalArgumentException if the value is invalid.
     * 
     * The default value is: "                                "
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getTokenId()
     * @see #resetTokenId()
     * @see #validateTokenId()
     **/
    public void setTokenId(String value) throws IllegalArgumentException {
      if ( _TrustClients == true )
      {
        _TokenId = value;
        return;
      }
      if ( value == null )
      {
        value = "";
      }
      if ( value.length() < 32 )
      {
        value += "                                ".substring(0, 32-value.length());
      }
      _TokenId = value;
    }
    
    /**
     * Internal method to check values for the TokenId property.
     **/
    private  void checkTokenId( String value ) throws IllegalArgumentException 
    {
      if ( value.length() > 32 )
      {
        throw new IllegalArgumentException("Property ExpIsc1AuthorizationInfo.TokenId cannot be more than 32 characters");
      }
    }
    
    /**
     * Resets the TokenId property to its default value of "                                ".
     * @see #getTokenId()
     * @see #setTokenId(String)
     * @see #validateTokenId()
     **/
    public  void resetTokenId()
    {
      _TokenId = "                                ";
    }
    
    /**
     * Validates the current TokenId property value.
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getTokenId()
     * @see #setTokenId(String)
     * @see #resetTokenId()
     **/
    public  void validateTokenId() throws IllegalArgumentException 
    {
      checkTokenId(_TokenId);
    }
    
    /**
     * Internal storage for AuthorityInd property.
     **/
    private String _AuthorityInd = " ";
    /**
     * Gets the AuthorityInd property
     * 
     * "Is the user is authorized for this operation?
    "
     * 
     * @return a String containing the value
     * 
     * The default value is: " "
     * 
     * @see #setAuthorityInd(String)
     * @see #resetAuthorityInd()
     * @see #validateAuthorityInd()
     **/
    @javax.xml.bind.annotation.XmlElement(name="AuthorityInd",
                                          required=true)
    public String getAuthorityInd() {
      return(_AuthorityInd);
    }
    /**
     * Sets the AuthorityInd property
     * 
     * "Is the user is authorized for this operation?
    "
     * 
     * @param value the new value for the property.
     * 
     * Throws IllegalArgumentException if the value is invalid.
     * 
     * The default value is: " "
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getAuthorityInd()
     * @see #resetAuthorityInd()
     * @see #validateAuthorityInd()
     **/
    public void setAuthorityInd(String value) throws IllegalArgumentException {
      if ( _TrustClients == true )
      {
        _AuthorityInd = value;
        return;
      }
      if ( value == null )
      {
        value = "";
      }
      if ( value.length() < 1 )
      {
        value += " ".substring(0, 1-value.length());
      }
      _AuthorityInd = value;
    }
    
    /**
     * Internal method to check values for the AuthorityInd property.
     **/
    private  void checkAuthorityInd( String value ) throws IllegalArgumentException 
    {
      if ( value.length() > 1 )
      {
        throw new IllegalArgumentException("Property ExpIsc1AuthorizationInfo.AuthorityInd cannot be more than 1 characters");
      }
    }
    
    /**
     * Resets the AuthorityInd property to its default value of " ".
     * @see #getAuthorityInd()
     * @see #setAuthorityInd(String)
     * @see #validateAuthorityInd()
     **/
    public  void resetAuthorityInd()
    {
      _AuthorityInd = " ";
    }
    
    /**
     * Validates the current AuthorityInd property value.
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getAuthorityInd()
     * @see #setAuthorityInd(String)
     * @see #resetAuthorityInd()
     **/
    public  void validateAuthorityInd() throws IllegalArgumentException 
    {
      checkAuthorityInd(_AuthorityInd);
    }
    
    /**
     * Internal storage for AuthorityStatusR property.
     **/
    private String _AuthorityStatusR = " ";
    /**
     * Gets the AuthorityStatusR property
     * 
     * "Authorization indicator. It is used for enabling and disabling the main menü options and authorizing the operations in other 
      screens. If set to 'Y', the user is authorized.
    STATUS_R -Create
    STATUS_R - Read
    STATUS_U - Update
    STATUS_D - Delete
    STATUS_L - List
    STATUS_01 - First operations authorization indicator.
    STATUS_02 - Second operations authorization indicator.
    STATUS_03 - Third operations authorization indicator.
    etc.	   
    "
     * 
     * @return a String containing the value
     * 
     * The default value is: " "
     * 
     * @see #setAuthorityStatusR(String)
     * @see #resetAuthorityStatusR()
     * @see #validateAuthorityStatusR()
     **/
    @javax.xml.bind.annotation.XmlElement(name="AuthorityStatusR",
                                          required=true)
    public String getAuthorityStatusR() {
      return(_AuthorityStatusR);
    }
    /**
     * Sets the AuthorityStatusR property
     * 
     * "Authorization indicator. It is used for enabling and disabling the main menü options and authorizing the operations in other 
      screens. If set to 'Y', the user is authorized.
    STATUS_R -Create
    STATUS_R - Read
    STATUS_U - Update
    STATUS_D - Delete
    STATUS_L - List
    STATUS_01 - First operations authorization indicator.
    STATUS_02 - Second operations authorization indicator.
    STATUS_03 - Third operations authorization indicator.
    etc.	   
    "
     * 
     * @param value the new value for the property.
     * 
     * Throws IllegalArgumentException if the value is invalid.
     * 
     * The default value is: " "
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getAuthorityStatusR()
     * @see #resetAuthorityStatusR()
     * @see #validateAuthorityStatusR()
     **/
    public void setAuthorityStatusR(String value) throws IllegalArgumentException {
      if ( _TrustClients == true )
      {
        _AuthorityStatusR = value;
        return;
      }
      if ( value == null )
      {
        value = "";
      }
      if ( value.length() < 1 )
      {
        value += " ".substring(0, 1-value.length());
      }
      _AuthorityStatusR = value;
    }
    
    /**
     * Internal method to check values for the AuthorityStatusR property.
     **/
    private  void checkAuthorityStatusR( String value ) throws IllegalArgumentException 
    {
      if ( value.length() > 1 )
      {
        throw new IllegalArgumentException("Property ExpIsc1AuthorizationInfo.AuthorityStatusR cannot be more than 1 characters");
      }
    }
    
    /**
     * Resets the AuthorityStatusR property to its default value of " ".
     * @see #getAuthorityStatusR()
     * @see #setAuthorityStatusR(String)
     * @see #validateAuthorityStatusR()
     **/
    public  void resetAuthorityStatusR()
    {
      _AuthorityStatusR = " ";
    }
    
    /**
     * Validates the current AuthorityStatusR property value.
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getAuthorityStatusR()
     * @see #setAuthorityStatusR(String)
     * @see #resetAuthorityStatusR()
     **/
    public  void validateAuthorityStatusR() throws IllegalArgumentException 
    {
      checkAuthorityStatusR(_AuthorityStatusR);
    }
    
    /**
     * Internal storage for AuthorityStatusU property.
     **/
    private String _AuthorityStatusU = " ";
    /**
     * Gets the AuthorityStatusU property
     * 
     * @return a String containing the value
     * 
     * The default value is: " "
     * 
     * @see #setAuthorityStatusU(String)
     * @see #resetAuthorityStatusU()
     * @see #validateAuthorityStatusU()
     **/
    @javax.xml.bind.annotation.XmlElement(name="AuthorityStatusU",
                                          required=true)
    public String getAuthorityStatusU() {
      return(_AuthorityStatusU);
    }
    /**
     * Sets the AuthorityStatusU property
     * 
     * @param value the new value for the property.
     * 
     * Throws IllegalArgumentException if the value is invalid.
     * 
     * The default value is: " "
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getAuthorityStatusU()
     * @see #resetAuthorityStatusU()
     * @see #validateAuthorityStatusU()
     **/
    public void setAuthorityStatusU(String value) throws IllegalArgumentException {
      if ( _TrustClients == true )
      {
        _AuthorityStatusU = value;
        return;
      }
      if ( value == null )
      {
        value = "";
      }
      if ( value.length() < 1 )
      {
        value += " ".substring(0, 1-value.length());
      }
      _AuthorityStatusU = value;
    }
    
    /**
     * Internal method to check values for the AuthorityStatusU property.
     **/
    private  void checkAuthorityStatusU( String value ) throws IllegalArgumentException 
    {
      if ( value.length() > 1 )
      {
        throw new IllegalArgumentException("Property ExpIsc1AuthorizationInfo.AuthorityStatusU cannot be more than 1 characters");
      }
    }
    
    /**
     * Resets the AuthorityStatusU property to its default value of " ".
     * @see #getAuthorityStatusU()
     * @see #setAuthorityStatusU(String)
     * @see #validateAuthorityStatusU()
     **/
    public  void resetAuthorityStatusU()
    {
      _AuthorityStatusU = " ";
    }
    
    /**
     * Validates the current AuthorityStatusU property value.
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getAuthorityStatusU()
     * @see #setAuthorityStatusU(String)
     * @see #resetAuthorityStatusU()
     **/
    public  void validateAuthorityStatusU() throws IllegalArgumentException 
    {
      checkAuthorityStatusU(_AuthorityStatusU);
    }
    
    /**
     * Internal storage for AuthorityStatusD property.
     **/
    private String _AuthorityStatusD = " ";
    /**
     * Gets the AuthorityStatusD property
     * 
     * @return a String containing the value
     * 
     * The default value is: " "
     * 
     * @see #setAuthorityStatusD(String)
     * @see #resetAuthorityStatusD()
     * @see #validateAuthorityStatusD()
     **/
    @javax.xml.bind.annotation.XmlElement(name="AuthorityStatusD",
                                          required=true)
    public String getAuthorityStatusD() {
      return(_AuthorityStatusD);
    }
    /**
     * Sets the AuthorityStatusD property
     * 
     * @param value the new value for the property.
     * 
     * Throws IllegalArgumentException if the value is invalid.
     * 
     * The default value is: " "
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getAuthorityStatusD()
     * @see #resetAuthorityStatusD()
     * @see #validateAuthorityStatusD()
     **/
    public void setAuthorityStatusD(String value) throws IllegalArgumentException {
      if ( _TrustClients == true )
      {
        _AuthorityStatusD = value;
        return;
      }
      if ( value == null )
      {
        value = "";
      }
      if ( value.length() < 1 )
      {
        value += " ".substring(0, 1-value.length());
      }
      _AuthorityStatusD = value;
    }
    
    /**
     * Internal method to check values for the AuthorityStatusD property.
     **/
    private  void checkAuthorityStatusD( String value ) throws IllegalArgumentException 
    {
      if ( value.length() > 1 )
      {
        throw new IllegalArgumentException("Property ExpIsc1AuthorizationInfo.AuthorityStatusD cannot be more than 1 characters");
      }
    }
    
    /**
     * Resets the AuthorityStatusD property to its default value of " ".
     * @see #getAuthorityStatusD()
     * @see #setAuthorityStatusD(String)
     * @see #validateAuthorityStatusD()
     **/
    public  void resetAuthorityStatusD()
    {
      _AuthorityStatusD = " ";
    }
    
    /**
     * Validates the current AuthorityStatusD property value.
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getAuthorityStatusD()
     * @see #setAuthorityStatusD(String)
     * @see #resetAuthorityStatusD()
     **/
    public  void validateAuthorityStatusD() throws IllegalArgumentException 
    {
      checkAuthorityStatusD(_AuthorityStatusD);
    }
    
    /**
     * Internal storage for AuthorityStatusL property.
     **/
    private String _AuthorityStatusL = " ";
    /**
     * Gets the AuthorityStatusL property
     * 
     * @return a String containing the value
     * 
     * The default value is: " "
     * 
     * @see #setAuthorityStatusL(String)
     * @see #resetAuthorityStatusL()
     * @see #validateAuthorityStatusL()
     **/
    @javax.xml.bind.annotation.XmlElement(name="AuthorityStatusL",
                                          required=true)
    public String getAuthorityStatusL() {
      return(_AuthorityStatusL);
    }
    /**
     * Sets the AuthorityStatusL property
     * 
     * @param value the new value for the property.
     * 
     * Throws IllegalArgumentException if the value is invalid.
     * 
     * The default value is: " "
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getAuthorityStatusL()
     * @see #resetAuthorityStatusL()
     * @see #validateAuthorityStatusL()
     **/
    public void setAuthorityStatusL(String value) throws IllegalArgumentException {
      if ( _TrustClients == true )
      {
        _AuthorityStatusL = value;
        return;
      }
      if ( value == null )
      {
        value = "";
      }
      if ( value.length() < 1 )
      {
        value += " ".substring(0, 1-value.length());
      }
      _AuthorityStatusL = value;
    }
    
    /**
     * Internal method to check values for the AuthorityStatusL property.
     **/
    private  void checkAuthorityStatusL( String value ) throws IllegalArgumentException 
    {
      if ( value.length() > 1 )
      {
        throw new IllegalArgumentException("Property ExpIsc1AuthorizationInfo.AuthorityStatusL cannot be more than 1 characters");
      }
    }
    
    /**
     * Resets the AuthorityStatusL property to its default value of " ".
     * @see #getAuthorityStatusL()
     * @see #setAuthorityStatusL(String)
     * @see #validateAuthorityStatusL()
     **/
    public  void resetAuthorityStatusL()
    {
      _AuthorityStatusL = " ";
    }
    
    /**
     * Validates the current AuthorityStatusL property value.
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getAuthorityStatusL()
     * @see #setAuthorityStatusL(String)
     * @see #resetAuthorityStatusL()
     **/
    public  void validateAuthorityStatusL() throws IllegalArgumentException 
    {
      checkAuthorityStatusL(_AuthorityStatusL);
    }
    
    /**
     * Resets the ExpIsc1AuthorizationInfo class properties to all of their default values.
     **/
    public void reset()
    {
      resetTokenId();
      resetAuthorityInd();
      resetAuthorityStatusR();
      resetAuthorityStatusU();
      resetAuthorityStatusD();
      resetAuthorityStatusL();
    }
    
    /**
     * Creates a copy of the instance.
     * 
     * @return A copy of the instance.
     **/
    @Override public Object clone()
    {
      ExpIsc1AuthorizationInfo copy = new ExpIsc1AuthorizationInfo(_TrustClients);
      copy._TokenId = _TokenId;
      copy._AuthorityInd = _AuthorityInd;
      copy._AuthorityStatusR = _AuthorityStatusR;
      copy._AuthorityStatusU = _AuthorityStatusU;
      copy._AuthorityStatusD = _AuthorityStatusD;
      copy._AuthorityStatusL = _AuthorityStatusL;
      return(copy);
    }
    
    /**
     * Validates all the property values on the instance.
     * @throws IllegalArgumentException Thrown if any property is invalid.
     **/
    public void validate()
    	throws IllegalArgumentException
    {
      validateTokenId();
      validateAuthorityInd();
      validateAuthorityStatusR();
      validateAuthorityStatusU();
      validateAuthorityStatusD();
      validateAuthorityStatusL();
    }
    
    /**
     * Unserializes the ExpIsc1AuthorizationInfo Entity View class from the ObjectInput.
     * @throws IOException Thrown If an I/O error has occurred.
     **/
    public void readExternal(ObjectInput in)
    	throws IOException
    {
      _TrustClients = in.readBoolean();
      _TokenId = in.readUTF();
      _AuthorityInd = in.readUTF();
      _AuthorityStatusR = in.readUTF();
      _AuthorityStatusU = in.readUTF();
      _AuthorityStatusD = in.readUTF();
      _AuthorityStatusL = in.readUTF();
    }
    
    /**
     * Serializes the ExpIsc1AuthorizationInfo Entity View class from the ObjectOutput.
     * @throws IOException Thrown If an I/O error has occurred.
     **/
    public void writeExternal(ObjectOutput out)
    	throws IOException
    {
      out.writeBoolean(_TrustClients);
      out.writeUTF(_TokenId);
      out.writeUTF(_AuthorityInd);
      out.writeUTF(_AuthorityStatusR);
      out.writeUTF(_AuthorityStatusU);
      out.writeUTF(_AuthorityStatusD);
      out.writeUTF(_AuthorityStatusL);
    }
    
    /**
     * Gets a String representation of the instance.
     * 
     * @return A String representation of the instance.
     **/
    @Override public String toString()
    {
      StringBuffer result = new StringBuffer();
      result.append("TokenId = \"" + _TokenId + "\"");
      result.append(", AuthorityInd = \"" + _AuthorityInd + "\"");
      result.append(", AuthorityStatusR = \"" + _AuthorityStatusR + "\"");
      result.append(", AuthorityStatusU = \"" + _AuthorityStatusU + "\"");
      result.append(", AuthorityStatusD = \"" + _AuthorityStatusD + "\"");
      result.append(", AuthorityStatusL = \"" + _AuthorityStatusL + "\"");
      return(result.toString());
    }
  };
  
  /**
   * Contains the data for the ExpMsgIyy1Component entity view.
   **/
  @javax.xml.bind.annotation.XmlType(name="",
            propOrder={          "severityCode",
            "messageTx"}
  )
  static public class ExpMsgIyy1Component  implements Externalizable, Cloneable
  {
    /**
     * Default Constructor.
     **/
    public ExpMsgIyy1Component()
    {
    }
    /**
     * Constructor.
     **/
    public ExpMsgIyy1Component(boolean TrustClients)
    {
      _TrustClients = TrustClients;
    }
    /**
     * Internal storage for TrustClients property.
     **/
    private boolean _TrustClients = false;
    @javax.xml.bind.annotation.XmlTransient
    public boolean getTrustClients() {
      return(_TrustClients);
    }
    
    public void setTrustClients(boolean value) {
      _TrustClients = value;
    }
    
    /**
     * Internal storage for SeverityCode property.
     **/
    private String _SeverityCode = "E";
    /**
     * Gets the SeverityCode property
     * 
     * "Full Name: Exception Severity Code
    
    Description: 
    A flag indicating the severity of the exception.  Current values would be I- Information, W-Warning and E-Error. The Severity 
      Code is used in conjunction with the exception message to determine how to format the message for a system user.  For instance 
      in Block Mode, the Severity Code would be used to dtermine the colour of the message returned on a screen.  In GUI, the 
      severity code would indicate which Icon should be associated with the message in a message box.
    The severity code is not to be used for program logic.  Program logic should be on the exception which is indicated by the 
      return code"
     * 
     * @return a String containing the value
     * 
     * The default value is: "E"
     * 
     * @see #setSeverityCode(String)
     * @see #resetSeverityCode()
     * @see #validateSeverityCode()
     **/
    @javax.xml.bind.annotation.XmlElement(name="SeverityCode",
                                          required=true)
    public String getSeverityCode() {
      return(_SeverityCode);
    }
    /**
     * Sets the SeverityCode property
     * 
     * "Full Name: Exception Severity Code
    
    Description: 
    A flag indicating the severity of the exception.  Current values would be I- Information, W-Warning and E-Error. The Severity 
      Code is used in conjunction with the exception message to determine how to format the message for a system user.  For instance 
      in Block Mode, the Severity Code would be used to dtermine the colour of the message returned on a screen.  In GUI, the 
      severity code would indicate which Icon should be associated with the message in a message box.
    The severity code is not to be used for program logic.  Program logic should be on the exception which is indicated by the 
      return code"
     * 
     * @param value the new value for the property.
     * 
     * Throws IllegalArgumentException if the value is invalid.
     * 
     * The default value is: "E"
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getSeverityCode()
     * @see #resetSeverityCode()
     * @see #validateSeverityCode()
     **/
    public void setSeverityCode(String value) throws IllegalArgumentException {
      if ( _TrustClients == true )
      {
        _SeverityCode = value;
        return;
      }
      if ( value == null )
      {
        value = "";
      }
      if ( value.length() < 1 )
      {
        value += " ".substring(0, 1-value.length());
      }
      _SeverityCode = value;
    }
    
    /**
     * Internal method to check values for the SeverityCode property.
     **/
    private  void checkSeverityCode( String value ) throws IllegalArgumentException 
    {
      if ( value.length() > 1 )
      {
        throw new IllegalArgumentException("Property ExpMsgIyy1Component.SeverityCode cannot be more than 1 characters");
      }
      if ( value.trim().length() == 0 )
      {
        throw new IllegalArgumentException("Property ExpMsgIyy1Component.SeverityCode is required and cannot be zero or empty");
      }
      int x = value.length() - 1;
      while (x >= 0 && value.charAt(x) == ' ') x -= 1;
      value = value.substring(0,x+1);
      if ( !(((value.equals( "E" )) || (value.equals( "I" ))) || (value.equals( "W" ))) )
      {
        throw new IllegalArgumentException("Permitted value violation for property ExpMsgIyy1Component.SeverityCode value: '" + 
          value + "'");
      }
    }
    
    /**
     * Resets the SeverityCode property to its default value of "E".
     * @see #getSeverityCode()
     * @see #setSeverityCode(String)
     * @see #validateSeverityCode()
     **/
    public  void resetSeverityCode()
    {
      _SeverityCode = "E";
    }
    
    /**
     * Validates the current SeverityCode property value.
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getSeverityCode()
     * @see #setSeverityCode(String)
     * @see #resetSeverityCode()
     **/
    public  void validateSeverityCode() throws IllegalArgumentException 
    {
      checkSeverityCode(_SeverityCode);
    }
    
    /**
     * Internal storage for MessageTx property.
     **/
    private String _MessageTx = "";
    /**
     * Gets the MessageTx property
     * 
     * "Full Name: Exception Message Text
    
    Description:
    This string returns the message (via other component exception messaging services) to the application for use.  It is also used 
      internal to the component if the application has requested that the component display a message.  Note, if the message is to 
      be used by Composer as an exit state message, it can only support 80 characters of data.
    "
     * 
     * @return a String containing the value
     * 
     * The default value is: ""
     * 
     * @see #setMessageTx(String)
     * @see #resetMessageTx()
     * @see #validateMessageTx()
     **/
    @javax.xml.bind.annotation.XmlElement(name="MessageTx",
                                          required=true)
    public String getMessageTx() {
      return(_MessageTx);
    }
    /**
     * Sets the MessageTx property
     * 
     * "Full Name: Exception Message Text
    
    Description:
    This string returns the message (via other component exception messaging services) to the application for use.  It is also used 
      internal to the component if the application has requested that the component display a message.  Note, if the message is to 
      be used by Composer as an exit state message, it can only support 80 characters of data.
    "
     * 
     * @param value the new value for the property.
     * 
     * Throws IllegalArgumentException if the value is invalid.
     * 
     * The default value is: ""
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getMessageTx()
     * @see #resetMessageTx()
     * @see #validateMessageTx()
     **/
    public void setMessageTx(String value) throws IllegalArgumentException {
      if ( _TrustClients == true )
      {
        _MessageTx = value;
        return;
      }
      if ( value == null )
      {
        value = "";
      }
      _MessageTx = value;
    }
    
    /**
     * Internal method to check values for the MessageTx property.
     **/
    private  void checkMessageTx( String value ) throws IllegalArgumentException 
    {
      if ( value.length() > 512 )
      {
        throw new IllegalArgumentException("Property ExpMsgIyy1Component.MessageTx cannot be more than 512 characters");
      }
      if ( value.length() == 0 )
      {
        throw new IllegalArgumentException("Property ExpMsgIyy1Component.MessageTx is required and cannot be zero or empty");
      }
    }
    
    /**
     * Resets the MessageTx property to its default value of "".
     * @see #getMessageTx()
     * @see #setMessageTx(String)
     * @see #validateMessageTx()
     **/
    public  void resetMessageTx()
    {
      _MessageTx = "";
    }
    
    /**
     * Validates the current MessageTx property value.
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getMessageTx()
     * @see #setMessageTx(String)
     * @see #resetMessageTx()
     **/
    public  void validateMessageTx() throws IllegalArgumentException 
    {
      checkMessageTx(_MessageTx);
    }
    
    /**
     * Resets the ExpMsgIyy1Component class properties to all of their default values.
     **/
    public void reset()
    {
      resetSeverityCode();
      resetMessageTx();
    }
    
    /**
     * Creates a copy of the instance.
     * 
     * @return A copy of the instance.
     **/
    @Override public Object clone()
    {
      ExpMsgIyy1Component copy = new ExpMsgIyy1Component(_TrustClients);
      copy._SeverityCode = _SeverityCode;
      copy._MessageTx = _MessageTx;
      return(copy);
    }
    
    /**
     * Validates all the property values on the instance.
     * @throws IllegalArgumentException Thrown if any property is invalid.
     **/
    public void validate()
    	throws IllegalArgumentException
    {
      validateSeverityCode();
      validateMessageTx();
    }
    
    /**
     * Unserializes the ExpMsgIyy1Component Entity View class from the ObjectInput.
     * @throws IOException Thrown If an I/O error has occurred.
     **/
    public void readExternal(ObjectInput in)
    	throws IOException
    {
      _TrustClients = in.readBoolean();
      _SeverityCode = in.readUTF();
      _MessageTx = in.readUTF();
    }
    
    /**
     * Serializes the ExpMsgIyy1Component Entity View class from the ObjectOutput.
     * @throws IOException Thrown If an I/O error has occurred.
     **/
    public void writeExternal(ObjectOutput out)
    	throws IOException
    {
      out.writeBoolean(_TrustClients);
      out.writeUTF(_SeverityCode);
      out.writeUTF(_MessageTx);
    }
    
    /**
     * Gets a String representation of the instance.
     * 
     * @return A String representation of the instance.
     **/
    @Override public String toString()
    {
      StringBuffer result = new StringBuffer();
      result.append("SeverityCode = \"" + _SeverityCode + "\"");
      result.append(", MessageTx = \"" + _MessageTx + "\"");
      return(result.toString());
    }
  };
  
  /**
   * Contains the data for the ExpErrorIyy1Component entity view.
   **/
  @javax.xml.bind.annotation.XmlType(name="",
            propOrder={          "severityCode",
              "rollbackIndicator",
              "originServid",
              "contextString",
              "returnCode",
              "reasonCode",
            "checksum"}
  )
  static public class ExpErrorIyy1Component  implements Externalizable, Cloneable
  {
    /**
     * Default Constructor.
     **/
    public ExpErrorIyy1Component()
    {
    }
    /**
     * Constructor.
     **/
    public ExpErrorIyy1Component(boolean TrustClients)
    {
      _TrustClients = TrustClients;
    }
    /**
     * Internal storage for TrustClients property.
     **/
    private boolean _TrustClients = false;
    @javax.xml.bind.annotation.XmlTransient
    public boolean getTrustClients() {
      return(_TrustClients);
    }
    
    public void setTrustClients(boolean value) {
      _TrustClients = value;
    }
    
    /**
     * Internal storage for SeverityCode property.
     **/
    private String _SeverityCode = "E";
    /**
     * Gets the SeverityCode property
     * 
     * "Full Name: Exception Severity Code
    
    Description: 
    A flag indicating the severity of the exception.  Current values would be I- Information, W-Warning and E-Error. The Severity 
      Code is used in conjunction with the exception message to determine how to format the message for a system user.  For instance 
      in Block Mode, the Severity Code would be used to dtermine the colour of the message returned on a screen.  In GUI, the 
      severity code would indicate which Icon should be associated with the message in a message box.
    The severity code is not to be used for program logic.  Program logic should be on the exception which is indicated by the 
      return code"
     * 
     * @return a String containing the value
     * 
     * The default value is: "E"
     * 
     * @see #setSeverityCode(String)
     * @see #resetSeverityCode()
     * @see #validateSeverityCode()
     **/
    @javax.xml.bind.annotation.XmlElement(name="SeverityCode",
                                          required=true)
    public String getSeverityCode() {
      return(_SeverityCode);
    }
    /**
     * Sets the SeverityCode property
     * 
     * "Full Name: Exception Severity Code
    
    Description: 
    A flag indicating the severity of the exception.  Current values would be I- Information, W-Warning and E-Error. The Severity 
      Code is used in conjunction with the exception message to determine how to format the message for a system user.  For instance 
      in Block Mode, the Severity Code would be used to dtermine the colour of the message returned on a screen.  In GUI, the 
      severity code would indicate which Icon should be associated with the message in a message box.
    The severity code is not to be used for program logic.  Program logic should be on the exception which is indicated by the 
      return code"
     * 
     * @param value the new value for the property.
     * 
     * Throws IllegalArgumentException if the value is invalid.
     * 
     * The default value is: "E"
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getSeverityCode()
     * @see #resetSeverityCode()
     * @see #validateSeverityCode()
     **/
    public void setSeverityCode(String value) throws IllegalArgumentException {
      if ( _TrustClients == true )
      {
        _SeverityCode = value;
        return;
      }
      if ( value == null )
      {
        value = "";
      }
      if ( value.length() < 1 )
      {
        value += " ".substring(0, 1-value.length());
      }
      _SeverityCode = value;
    }
    
    /**
     * Internal method to check values for the SeverityCode property.
     **/
    private  void checkSeverityCode( String value ) throws IllegalArgumentException 
    {
      if ( value.length() > 1 )
      {
        throw new IllegalArgumentException("Property ExpErrorIyy1Component.SeverityCode cannot be more than 1 characters");
      }
      if ( value.trim().length() == 0 )
      {
        throw new IllegalArgumentException("Property ExpErrorIyy1Component.SeverityCode is required and cannot be zero or empty");
      }
      int x = value.length() - 1;
      while (x >= 0 && value.charAt(x) == ' ') x -= 1;
      value = value.substring(0,x+1);
      if ( !(((value.equals( "E" )) || (value.equals( "I" ))) || (value.equals( "W" ))) )
      {
        throw new IllegalArgumentException("Permitted value violation for property ExpErrorIyy1Component.SeverityCode value: '" + 
          value + "'");
      }
    }
    
    /**
     * Resets the SeverityCode property to its default value of "E".
     * @see #getSeverityCode()
     * @see #setSeverityCode(String)
     * @see #validateSeverityCode()
     **/
    public  void resetSeverityCode()
    {
      _SeverityCode = "E";
    }
    
    /**
     * Validates the current SeverityCode property value.
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getSeverityCode()
     * @see #setSeverityCode(String)
     * @see #resetSeverityCode()
     **/
    public  void validateSeverityCode() throws IllegalArgumentException 
    {
      checkSeverityCode(_SeverityCode);
    }
    
    /**
     * Internal storage for RollbackIndicator property.
     **/
    private String _RollbackIndicator = " ";
    /**
     * Gets the RollbackIndicator property
     * 
     * "Description:
    A flag requesting that the operation invoker rollback changes made to persistent storage."
     * 
     * @return a String containing the value
     * 
     * The default value is: " "
     * 
     * @see #setRollbackIndicator(String)
     * @see #resetRollbackIndicator()
     * @see #validateRollbackIndicator()
     **/
    @javax.xml.bind.annotation.XmlElement(name="RollbackIndicator",
                                          required=true)
    public String getRollbackIndicator() {
      return(_RollbackIndicator);
    }
    /**
     * Sets the RollbackIndicator property
     * 
     * "Description:
    A flag requesting that the operation invoker rollback changes made to persistent storage."
     * 
     * @param value the new value for the property.
     * 
     * Throws IllegalArgumentException if the value is invalid.
     * 
     * The default value is: " "
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getRollbackIndicator()
     * @see #resetRollbackIndicator()
     * @see #validateRollbackIndicator()
     **/
    public void setRollbackIndicator(String value) throws IllegalArgumentException {
      if ( _TrustClients == true )
      {
        _RollbackIndicator = value;
        return;
      }
      if ( value == null )
      {
        value = "";
      }
      if ( value.length() < 1 )
      {
        value += " ".substring(0, 1-value.length());
      }
      _RollbackIndicator = value;
    }
    
    /**
     * Internal method to check values for the RollbackIndicator property.
     **/
    private  void checkRollbackIndicator( String value ) throws IllegalArgumentException 
    {
      if ( value.length() > 1 )
      {
        throw new IllegalArgumentException("Property ExpErrorIyy1Component.RollbackIndicator cannot be more than 1 characters");
      }
      if ( value.trim().length() == 0 )
      {
        throw new IllegalArgumentException("Property ExpErrorIyy1Component.RollbackIndicator is required and cannot be zero or empty"
          );
      }
    }
    
    /**
     * Resets the RollbackIndicator property to its default value of " ".
     * @see #getRollbackIndicator()
     * @see #setRollbackIndicator(String)
     * @see #validateRollbackIndicator()
     **/
    public  void resetRollbackIndicator()
    {
      _RollbackIndicator = " ";
    }
    
    /**
     * Validates the current RollbackIndicator property value.
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getRollbackIndicator()
     * @see #setRollbackIndicator(String)
     * @see #resetRollbackIndicator()
     **/
    public  void validateRollbackIndicator() throws IllegalArgumentException 
    {
      checkRollbackIndicator(_RollbackIndicator);
    }
    
    /**
     * Internal storage for OriginServid property.
     **/
    private double _OriginServid = 0.0;
    /**
     * Gets the OriginServid property
     * 
     * "Description:
    A unique number which identifies an installed copy of a component executable.                                                    
              Note:                                                                                         Some organizations may 
      prefer to keep the value of the origin server identifier less than 2 to the power of 32 so the value can be transferred to or 
      from widely-used 32-bit numeric fields."
     * 
     * @return a double containing the value
     * 
     * The default value is: 0.0
     * 
     * @see #setOriginServid(double)
     * @see #resetOriginServid()
     * @see #validateOriginServid()
     **/
    @javax.xml.bind.annotation.XmlElement(name="OriginServid",
                                          required=true)
    @javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter(
                               type=double.class,
                               value=com.ca.gen.vwrt.adapters.DoubleNoDecimalsAdapter.class)
    public double getOriginServid() {
      return(_OriginServid);
    }
    /**
     * Sets the OriginServid property
     * 
     * "Description:
    A unique number which identifies an installed copy of a component executable.                                                    
              Note:                                                                                         Some organizations may 
      prefer to keep the value of the origin server identifier less than 2 to the power of 32 so the value can be transferred to or 
      from widely-used 32-bit numeric fields."
     * 
     * @param value the new value for the property.
     * 
     * Throws IllegalArgumentException if the value is invalid.
     * 
     * The default value is: 0.0
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getOriginServid()
     * @see #resetOriginServid()
     * @see #validateOriginServid()
     **/
    public void setOriginServid(double value) throws IllegalArgumentException {
      if ( _TrustClients == true )
      {
        _OriginServid = value;
        return;
      }
      _OriginServid = value;
    }
    
    /**
     * Internal method to check values for the OriginServid property.
     **/
    private  void checkOriginServid( double value ) throws IllegalArgumentException 
    {
      int decimals = 0;
      boolean decimalFound = false;
      DecimalFormatSymbols symbols = new DecimalFormatSymbols();
      symbols.setDecimalSeparator('.');
      symbols.setGroupingSeparator(',');
      DecimalFormat decimalFormatter = new DecimalFormat("####################.####################", symbols);
      String temp = decimalFormatter.format(value);
      for(int i = temp.length(); i > 0; i--)
      {
        if ( temp.charAt(i-1) == '.' )
        {
          decimalFound = true;
          break;
        }
        ++(decimals);
      }
      if ( (decimalFound == true) && (decimals > 0) )
      {
        throw new IllegalArgumentException("Property ExpErrorIyy1Component.OriginServid cannot be more than 0 fractional digits");
      }
      if ( Math.floor(Math.abs(value)) >= 1000000000000000L )
      {
        throw new IllegalArgumentException("Property ExpErrorIyy1Component.OriginServid cannot be more than 15 integral digits");
      }
      if ( value == 0 )
      {
        throw new IllegalArgumentException("Property ExpErrorIyy1Component.OriginServid is required and cannot be zero or empty");
      }
    }
    
    /**
     * Resets the OriginServid property to its default value of 0.0.
     * @see #getOriginServid()
     * @see #setOriginServid(double)
     * @see #validateOriginServid()
     **/
    public  void resetOriginServid()
    {
      _OriginServid = 0.0;
    }
    
    /**
     * Validates the current OriginServid property value.
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getOriginServid()
     * @see #setOriginServid(double)
     * @see #resetOriginServid()
     **/
    public  void validateOriginServid() throws IllegalArgumentException 
    {
      checkOriginServid(_OriginServid);
    }
    
    /**
     * Internal storage for ContextString property.
     **/
    private String _ContextString = "";
    /**
     * Gets the ContextString property
     * 
     * "Full Name: Exception Context String
    
    Description:
    This string can be returned by a component and used to contain additional information about the context of the exception.  It is 
      not a message explaining the exception, but instead can contain data that could be put into a formatted message by one of the 
      exception message services.  It should use a forward slash (\\) character to separate data.  This standard allows the message 
      services to determine what data is available.  If parameter based messages are to be used, it is the responsibility of the 
      component raising the exception to format a valid Context_String, even if its only placing empty forward slashes.  If a 
      forward slash is required in the context data string, surround the string segment in double quotations to isolate the string.
    "
     * 
     * @return a String containing the value
     * 
     * The default value is: ""
     * 
     * @see #setContextString(String)
     * @see #resetContextString()
     * @see #validateContextString()
     **/
    @javax.xml.bind.annotation.XmlElement(name="ContextString",
                                          required=true)
    public String getContextString() {
      return(_ContextString);
    }
    /**
     * Sets the ContextString property
     * 
     * "Full Name: Exception Context String
    
    Description:
    This string can be returned by a component and used to contain additional information about the context of the exception.  It is 
      not a message explaining the exception, but instead can contain data that could be put into a formatted message by one of the 
      exception message services.  It should use a forward slash (\\) character to separate data.  This standard allows the message 
      services to determine what data is available.  If parameter based messages are to be used, it is the responsibility of the 
      component raising the exception to format a valid Context_String, even if its only placing empty forward slashes.  If a 
      forward slash is required in the context data string, surround the string segment in double quotations to isolate the string.
    "
     * 
     * @param value the new value for the property.
     * 
     * Throws IllegalArgumentException if the value is invalid.
     * 
     * The default value is: ""
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getContextString()
     * @see #resetContextString()
     * @see #validateContextString()
     **/
    public void setContextString(String value) throws IllegalArgumentException {
      if ( _TrustClients == true )
      {
        _ContextString = value;
        return;
      }
      if ( value == null )
      {
        value = "";
      }
      _ContextString = value;
    }
    
    /**
     * Internal method to check values for the ContextString property.
     **/
    private  void checkContextString( String value ) throws IllegalArgumentException 
    {
      if ( value.length() > 512 )
      {
        throw new IllegalArgumentException("Property ExpErrorIyy1Component.ContextString cannot be more than 512 characters");
      }
      if ( value.length() == 0 )
      {
        throw new IllegalArgumentException("Property ExpErrorIyy1Component.ContextString is required and cannot be zero or empty");
      }
    }
    
    /**
     * Resets the ContextString property to its default value of "".
     * @see #getContextString()
     * @see #setContextString(String)
     * @see #validateContextString()
     **/
    public  void resetContextString()
    {
      _ContextString = "";
    }
    
    /**
     * Validates the current ContextString property value.
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getContextString()
     * @see #setContextString(String)
     * @see #resetContextString()
     **/
    public  void validateContextString() throws IllegalArgumentException 
    {
      checkContextString(_ContextString);
    }
    
    /**
     * Internal storage for ReturnCode property.
     **/
    private int _ReturnCode = 0;
    /**
     * Gets the ReturnCode property
     * 
     * "Description:
    Return code is used to return a standardized code that indicates the type of failure or exception encountered during the 
      operation execution.                                                           Note:                                           
                                                    Refer to CBD standards for a list of standardized return codes."
     * 
     * @return a int containing the value
     * 
     * The default value is: 0
     * 
     * @see #setReturnCode(int)
     * @see #resetReturnCode()
     * @see #validateReturnCode()
     **/
    @javax.xml.bind.annotation.XmlElement(name="ReturnCode",
                                          required=true)
    public int getReturnCode() {
      return(_ReturnCode);
    }
    /**
     * Sets the ReturnCode property
     * 
     * "Description:
    Return code is used to return a standardized code that indicates the type of failure or exception encountered during the 
      operation execution.                                                           Note:                                           
                                                    Refer to CBD standards for a list of standardized return codes."
     * 
     * @param value the new value for the property.
     * 
     * Throws IllegalArgumentException if the value is invalid.
     * 
     * The default value is: 0
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getReturnCode()
     * @see #resetReturnCode()
     * @see #validateReturnCode()
     **/
    public void setReturnCode(int value) throws IllegalArgumentException {
      if ( _TrustClients == true )
      {
        _ReturnCode = value;
        return;
      }
      _ReturnCode = value;
    }
    
    /**
     * Internal method to check values for the ReturnCode property.
     **/
    private  void checkReturnCode( int value ) throws IllegalArgumentException 
    {
      if ( Math.abs(value) >= 100000 )
      {
        throw new IllegalArgumentException("Property ExpErrorIyy1Component.ReturnCode cannot be more than 5 digits");
      }
      if ( value == 0 )
      {
        throw new IllegalArgumentException("Property ExpErrorIyy1Component.ReturnCode is required and cannot be zero or empty");
      }
    }
    
    /**
     * Resets the ReturnCode property to its default value of 0.
     * @see #getReturnCode()
     * @see #setReturnCode(int)
     * @see #validateReturnCode()
     **/
    public  void resetReturnCode()
    {
      _ReturnCode = 0;
    }
    
    /**
     * Validates the current ReturnCode property value.
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getReturnCode()
     * @see #setReturnCode(int)
     * @see #resetReturnCode()
     **/
    public  void validateReturnCode() throws IllegalArgumentException 
    {
      checkReturnCode(_ReturnCode);
    }
    
    /**
     * Internal storage for ReasonCode property.
     **/
    private int _ReasonCode = 0;
    /**
     * Gets the ReasonCode property
     * 
     * "Description:                                                                              Reason code is used to provide a 
      reason why the failure or exception occurred.  Reason code values may be defined in the specification.  If so, the user of the 
      operation can code to such values.  Additional unspecified reason codes may be exported.  These may vary by implementation, so 
      component suppliers can provide explanations specific to their implementations.  
    "
     * 
     * @return a int containing the value
     * 
     * The default value is: 0
     * 
     * @see #setReasonCode(int)
     * @see #resetReasonCode()
     * @see #validateReasonCode()
     **/
    @javax.xml.bind.annotation.XmlElement(name="ReasonCode",
                                          required=true)
    public int getReasonCode() {
      return(_ReasonCode);
    }
    /**
     * Sets the ReasonCode property
     * 
     * "Description:                                                                              Reason code is used to provide a 
      reason why the failure or exception occurred.  Reason code values may be defined in the specification.  If so, the user of the 
      operation can code to such values.  Additional unspecified reason codes may be exported.  These may vary by implementation, so 
      component suppliers can provide explanations specific to their implementations.  
    "
     * 
     * @param value the new value for the property.
     * 
     * Throws IllegalArgumentException if the value is invalid.
     * 
     * The default value is: 0
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getReasonCode()
     * @see #resetReasonCode()
     * @see #validateReasonCode()
     **/
    public void setReasonCode(int value) throws IllegalArgumentException {
      if ( _TrustClients == true )
      {
        _ReasonCode = value;
        return;
      }
      _ReasonCode = value;
    }
    
    /**
     * Internal method to check values for the ReasonCode property.
     **/
    private  void checkReasonCode( int value ) throws IllegalArgumentException 
    {
      if ( Math.abs(value) >= 100000 )
      {
        throw new IllegalArgumentException("Property ExpErrorIyy1Component.ReasonCode cannot be more than 5 digits");
      }
      if ( value == 0 )
      {
        throw new IllegalArgumentException("Property ExpErrorIyy1Component.ReasonCode is required and cannot be zero or empty");
      }
    }
    
    /**
     * Resets the ReasonCode property to its default value of 0.
     * @see #getReasonCode()
     * @see #setReasonCode(int)
     * @see #validateReasonCode()
     **/
    public  void resetReasonCode()
    {
      _ReasonCode = 0;
    }
    
    /**
     * Validates the current ReasonCode property value.
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getReasonCode()
     * @see #setReasonCode(int)
     * @see #resetReasonCode()
     **/
    public  void validateReasonCode() throws IllegalArgumentException 
    {
      checkReasonCode(_ReasonCode);
    }
    
    /**
     * Internal storage for Checksum property.
     **/
    private String _Checksum = "               ";
    /**
     * Gets the Checksum property
     * 
     * "Full Name: Exception Checksum
    
    Description:
    This string represents a 32 bit checksum, calculated on a data block.  It is used to ensure that data over or under runs have 
      not occurred.  It is expected that a set of external action blocks, provided by Castek, can be used to calculate a checksum.
    "
     * 
     * @return a String containing the value
     * 
     * The default value is: "               "
     * 
     * @see #setChecksum(String)
     * @see #resetChecksum()
     * @see #validateChecksum()
     **/
    @javax.xml.bind.annotation.XmlElement(name="Checksum",
                                          required=true)
    public String getChecksum() {
      return(_Checksum);
    }
    /**
     * Sets the Checksum property
     * 
     * "Full Name: Exception Checksum
    
    Description:
    This string represents a 32 bit checksum, calculated on a data block.  It is used to ensure that data over or under runs have 
      not occurred.  It is expected that a set of external action blocks, provided by Castek, can be used to calculate a checksum.
    "
     * 
     * @param value the new value for the property.
     * 
     * Throws IllegalArgumentException if the value is invalid.
     * 
     * The default value is: "               "
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getChecksum()
     * @see #resetChecksum()
     * @see #validateChecksum()
     **/
    public void setChecksum(String value) throws IllegalArgumentException {
      if ( _TrustClients == true )
      {
        _Checksum = value;
        return;
      }
      if ( value == null )
      {
        value = "";
      }
      if ( value.length() < 15 )
      {
        value += "               ".substring(0, 15-value.length());
      }
      _Checksum = value;
    }
    
    /**
     * Internal method to check values for the Checksum property.
     **/
    private  void checkChecksum( String value ) throws IllegalArgumentException 
    {
      if ( value.length() > 15 )
      {
        throw new IllegalArgumentException("Property ExpErrorIyy1Component.Checksum cannot be more than 15 characters");
      }
      if ( value.trim().length() == 0 )
      {
        throw new IllegalArgumentException("Property ExpErrorIyy1Component.Checksum is required and cannot be zero or empty");
      }
    }
    
    /**
     * Resets the Checksum property to its default value of "               ".
     * @see #getChecksum()
     * @see #setChecksum(String)
     * @see #validateChecksum()
     **/
    public  void resetChecksum()
    {
      _Checksum = "               ";
    }
    
    /**
     * Validates the current Checksum property value.
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getChecksum()
     * @see #setChecksum(String)
     * @see #resetChecksum()
     **/
    public  void validateChecksum() throws IllegalArgumentException 
    {
      checkChecksum(_Checksum);
    }
    
    /**
     * Resets the ExpErrorIyy1Component class properties to all of their default values.
     **/
    public void reset()
    {
      resetSeverityCode();
      resetRollbackIndicator();
      resetOriginServid();
      resetContextString();
      resetReturnCode();
      resetReasonCode();
      resetChecksum();
    }
    
    /**
     * Creates a copy of the instance.
     * 
     * @return A copy of the instance.
     **/
    @Override public Object clone()
    {
      ExpErrorIyy1Component copy = new ExpErrorIyy1Component(_TrustClients);
      copy._SeverityCode = _SeverityCode;
      copy._RollbackIndicator = _RollbackIndicator;
      copy._OriginServid = _OriginServid;
      copy._ContextString = _ContextString;
      copy._ReturnCode = _ReturnCode;
      copy._ReasonCode = _ReasonCode;
      copy._Checksum = _Checksum;
      return(copy);
    }
    
    /**
     * Validates all the property values on the instance.
     * @throws IllegalArgumentException Thrown if any property is invalid.
     **/
    public void validate()
    	throws IllegalArgumentException
    {
      validateSeverityCode();
      validateRollbackIndicator();
      validateOriginServid();
      validateContextString();
      validateReturnCode();
      validateReasonCode();
      validateChecksum();
    }
    
    /**
     * Unserializes the ExpErrorIyy1Component Entity View class from the ObjectInput.
     * @throws IOException Thrown If an I/O error has occurred.
     **/
    public void readExternal(ObjectInput in)
    	throws IOException
    {
      _TrustClients = in.readBoolean();
      _SeverityCode = in.readUTF();
      _RollbackIndicator = in.readUTF();
      _OriginServid = in.readDouble();
      _ContextString = in.readUTF();
      _ReturnCode = in.readInt();
      _ReasonCode = in.readInt();
      _Checksum = in.readUTF();
    }
    
    /**
     * Serializes the ExpErrorIyy1Component Entity View class from the ObjectOutput.
     * @throws IOException Thrown If an I/O error has occurred.
     **/
    public void writeExternal(ObjectOutput out)
    	throws IOException
    {
      out.writeBoolean(_TrustClients);
      out.writeUTF(_SeverityCode);
      out.writeUTF(_RollbackIndicator);
      out.writeDouble(_OriginServid);
      out.writeUTF(_ContextString);
      out.writeInt(_ReturnCode);
      out.writeInt(_ReasonCode);
      out.writeUTF(_Checksum);
    }
    
    /**
     * Gets a String representation of the instance.
     * 
     * @return A String representation of the instance.
     **/
    @Override public String toString()
    {
      StringBuffer result = new StringBuffer();
      result.append("SeverityCode = \"" + _SeverityCode + "\"");
      result.append(", RollbackIndicator = \"" + _RollbackIndicator + "\"");
      result.append(", OriginServid = \"" + _OriginServid + "\"");
      result.append(", ContextString = \"" + _ContextString + "\"");
      result.append(", ReturnCode = \"" + _ReturnCode + "\"");
      result.append(", ReasonCode = \"" + _ReasonCode + "\"");
      result.append(", Checksum = \"" + _Checksum + "\"");
      return(result.toString());
    }
  };
  
};



package gen.ort.yyy;

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
//
//                    Source Code Generated by
//                           CA Gen 8.6
//
//    Copyright (c) 2023 CA Technologies. All rights reserved.
//
//    Name: Cyy1s081TypeListExportWrapper    Date: 2023/07/05
//    User: HakanBal                         Time: 15:09:25
//
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// import Statements
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
import java.lang.*;
import java.io.*;
import com.ca.gen.vwrt.*;
import com.ca.gen.vwrt.types.*;
import gen.ort.yyy.*;

/**
 * Wraps a Cyy1s081TypeListExport class as an IExportWrapper. Allows for the generic access by runtimes and conversions. 
 * @see IExportWrapper
 * @see Cyy1s081TypeListExport
 * @see CYY1S081_OA
 **/
public class Cyy1s081TypeListExportWrapper  implements IExportWrapper, Serializable
{
  /**
   * Returns a Cyy1s081TypeListExportWrapper instance, wrapping a default Cyy1s081TypeListExport.
   **/
  public Cyy1s081TypeListExportWrapper()
  {
  }
  
  /**
   * Returns a Cyy1s081TypeListExportWrapper instance, wrapping the Cyy1s081TypeListExport instance parameter.
   **/
  public Cyy1s081TypeListExportWrapper(Object exportView)
  {
    setExport((Cyy1s081TypeListExport)exportView);
  }
  
  /**
   * Returns a Cyy1s081TypeListExportWrapper instance, wrapping a Cyy1s081TypeListExport instance initialized with the parameters.
   **/
  public Cyy1s081TypeListExportWrapper(IExportView oa, String command, int exitStateType, int exitState, String exitStateMessage)
  {
    setOA(oa);
    setCommand(command);
    setExitStateType(exitStateType);
    setExitState(exitState);
    setExitStateMessage(exitStateMessage);
  }
  
  /**
   * Internal storage for the export view.
   **/
  private Cyy1s081TypeListExport exportView = null;
  /**
   * Gets the export view property.
   **/
  public Object getExport()
  {
    if ( exportView == null )
    {
      exportView = new Cyy1s081TypeListExport();
    }
    return(exportView);
  }
  
  /**
   * Sets the export view property.
   **/
  public void setExport(Object value)
  {
    exportView = (Cyy1s081TypeListExport)value;
  }
  
  /**
   * Gets the export view command property.
   **/
  public String getCommand()
  {
    Cyy1s081TypeListExport exportView = (Cyy1s081TypeListExport)getExport();
    return(exportView.getCommand());
  }
  
  /**
   * Sets the export view command property.
   **/
  public void setCommand(String value)
  {
    Cyy1s081TypeListExport exportView = (Cyy1s081TypeListExport)getExport();
    boolean saveTrustClients = exportView.getTrustClients();
    exportView.setTrustClients(true);
    if ( value == null )
    {
      exportView.setCommand("");
    }
    else 
    {
      exportView.setCommand(value);
    }
    exportView.setTrustClients(saveTrustClients);
  }
  
  /**
   * Gets the export view exitState type property.
   **/
  public int getExitStateType()
  {
    Cyy1s081TypeListExport exportView = (Cyy1s081TypeListExport)getExport();
    return(exportView.getExitStateType());
  }
  
  /**
   * Sets the export view exitState type property.
   **/
  public void setExitStateType(int value)
  {
    Cyy1s081TypeListExport exportView = (Cyy1s081TypeListExport)getExport();
    boolean saveTrustClients = exportView.getTrustClients();
    exportView.setTrustClients(true);
    exportView.setExitStateType(value);
    exportView.setTrustClients(saveTrustClients);
  }
  
  /**
   * Gets the export view exitState property.
   **/
  public int getExitState()
  {
    Cyy1s081TypeListExport exportView = (Cyy1s081TypeListExport)getExport();
    return(exportView.getExitState());
  }
  
  /**
   * Sets the export view exitState property.
   **/
  public void setExitState(int value)
  {
    Cyy1s081TypeListExport exportView = (Cyy1s081TypeListExport)getExport();
    boolean saveTrustClients = exportView.getTrustClients();
    exportView.setTrustClients(true);
    exportView.setExitState(value);
    exportView.setTrustClients(saveTrustClients);
  }
  
  /**
   * Gets the export view exit state message property.
   **/
  public String getExitStateMessage()
  {
    Cyy1s081TypeListExport exportView = (Cyy1s081TypeListExport)getExport();
    return(exportView.getExitStateMessage());
  }
  
  /**
   * Sets the export view exit state message property.
   **/
  public void setExitStateMessage(String value)
  {
    Cyy1s081TypeListExport exportView = (Cyy1s081TypeListExport)getExport();
    boolean saveTrustClients = exportView.getTrustClients();
    exportView.setTrustClients(true);
    if ( value == null )
    {
      exportView.setExitStateMessage("");
    }
    else 
    {
      exportView.setExitStateMessage(value);
    }
    exportView.setTrustClients(saveTrustClients);
  }
  
  /**
   * Returns a CYY1S081_OA instance based on the Cyy1s081TypeListExport export view instance.
   * No validation is performed during the mapping.
   **/
  public IExportView getOA()
  {
    CYY1S081_OA result = CYY1S081_OA.getInstance();
    
    Cyy1s081TypeListExport exportView = (Cyy1s081TypeListExport)getExport();
    
    result.ExpGroupList_MA = IntAttr.valueOf(exportView.getExpGroupList().getLength());
    for(int a = 0; a < exportView.getExpGroupList().getLength(); a++)
    {
      result.ExpGListTypeTinstanceId[a] = TimestampAttr.valueOf(exportView.getExpGroupList().getRows()[a].getExpGListType()
        .getTinstanceId());
      result.ExpGListTypeTreferenceId[a] = TimestampAttr.valueOf(exportView.getExpGroupList().getRows()[a].getExpGListType()
        .getTreferenceId());
      result.ExpGListTypeTcreateUserId[a] = FixedStringAttr.valueOf(exportView.getExpGroupList().getRows()[a].getExpGListType()
        .getTcreateUserId(), (short)8);
      result.ExpGListTypeTupdateUserId[a] = FixedStringAttr.valueOf(exportView.getExpGroupList().getRows()[a].getExpGListType()
        .getTupdateUserId(), (short)8);
      result.ExpGListTypeTkeyAttrText[a] = FixedStringAttr.valueOf(exportView.getExpGroupList().getRows()[a].getExpGListType()
        .getTkeyAttrText(), (short)4);
      result.ExpGListTypeTsearchAttrText[a] = FixedStringAttr.valueOf(exportView.getExpGroupList().getRows()[a].getExpGListType()
        .getTsearchAttrText(), (short)20);
      result.ExpGListTypeTotherAttrText[a] = FixedStringAttr.valueOf(exportView.getExpGroupList().getRows()[a].getExpGListType()
        .getTotherAttrText(), (short)2);
      result.ExpGListTypeTotherAttrDate[a] = DateAttr.valueOf(exportView.getExpGroupList().getRows()[a].getExpGListType()
        .getTotherAttrDate());
      result.ExpGListTypeTotherAttrTime[a] = TimeAttr.valueOf(exportView.getExpGroupList().getRows()[a].getExpGListType()
        .getTotherAttrTime());
      result.ExpGListTypeTotherAttrAmount[a] = BigDecimalAttr.valueOf(exportView.getExpGroupList().getRows()[a].getExpGListType()
        .getTotherAttrAmount());
    }
    result.ExpReferenceIyy1ServerDataServerDate = DateAttr.valueOf(exportView.getExpReferenceIyy1ServerData().getServerDate());
    result.ExpReferenceIyy1ServerDataServerTime = TimeAttr.valueOf(exportView.getExpReferenceIyy1ServerData().getServerTime());
    result.ExpReferenceIyy1ServerDataReferenceId = TimestampAttr.valueOf(exportView.getExpReferenceIyy1ServerData().getReferenceId())
      ;
    result.ExpIsc1AuthorizationInfoTokenId = FixedStringAttr.valueOf(exportView.getExpIsc1AuthorizationInfo().getTokenId(), (short)
      32);
    result.ExpIsc1AuthorizationInfoAuthorityInd = FixedStringAttr.valueOf(exportView.getExpIsc1AuthorizationInfo().getAuthorityInd(),
       (short)1);
    result.ExpIsc1AuthorizationInfoAuthorityStatusR = FixedStringAttr.valueOf(exportView.getExpIsc1AuthorizationInfo()
      .getAuthorityStatusR(), (short)1);
    result.ExpIsc1AuthorizationInfoAuthorityStatusU = FixedStringAttr.valueOf(exportView.getExpIsc1AuthorizationInfo()
      .getAuthorityStatusU(), (short)1);
    result.ExpIsc1AuthorizationInfoAuthorityStatusD = FixedStringAttr.valueOf(exportView.getExpIsc1AuthorizationInfo()
      .getAuthorityStatusD(), (short)1);
    result.ExpIsc1AuthorizationInfoAuthorityStatusL = FixedStringAttr.valueOf(exportView.getExpIsc1AuthorizationInfo()
      .getAuthorityStatusL(), (short)1);
    result.ExpMsgIyy1ComponentSeverityCode = FixedStringAttr.valueOf(exportView.getExpMsgIyy1Component().getSeverityCode(), (short)1)
      ;
    result.ExpMsgIyy1ComponentMessageTx = StringAttr.valueOf(exportView.getExpMsgIyy1Component().getMessageTx(), (short)512);
    result.ExpErrorIyy1ComponentSeverityCode = FixedStringAttr.valueOf(exportView.getExpErrorIyy1Component().getSeverityCode(), (
      short)1);
    result.ExpErrorIyy1ComponentRollbackIndicator = FixedStringAttr.valueOf(exportView.getExpErrorIyy1Component()
      .getRollbackIndicator(), (short)1);
    result.ExpErrorIyy1ComponentOriginServid = DoubleAttr.valueOf(exportView.getExpErrorIyy1Component().getOriginServid());
    result.ExpErrorIyy1ComponentContextString = StringAttr.valueOf(exportView.getExpErrorIyy1Component().getContextString(), (short)
      512);
    result.ExpErrorIyy1ComponentReturnCode = IntAttr.valueOf(exportView.getExpErrorIyy1Component().getReturnCode());
    result.ExpErrorIyy1ComponentReasonCode = IntAttr.valueOf(exportView.getExpErrorIyy1Component().getReasonCode());
    result.ExpErrorIyy1ComponentChecksum = FixedStringAttr.valueOf(exportView.getExpErrorIyy1Component().getChecksum(), (short)15);
    return(result);
  }
  
  /**
   * Based on the CYY1S081_OA instance set the Cyy1s081TypeListExport export view instance.
   * No validation is performed during the mapping.
   **/
  public void setOA(IExportView value)
  {
    CYY1S081_OA view = (CYY1S081_OA)value;
    
    Cyy1s081TypeListExport exportView = (Cyy1s081TypeListExport)getExport();
    
    boolean saveTrustClients = exportView.getTrustClients();
    exportView.setTrustClients(true);
    exportView.getExpGroupList().setLength(IntAttr.toInt(view.ExpGroupList_MA));
    for(int a = 0; a < exportView.getExpGroupList().getLength(); a++)
    {
      exportView.getExpGroupList().getRows()[a].getExpGListType().setTinstanceId(TimestampAttr.toSQLTimestamp(
        view.ExpGListTypeTinstanceId[a]));
      exportView.getExpGroupList().getRows()[a].getExpGListType().setTreferenceId(TimestampAttr.toSQLTimestamp(
        view.ExpGListTypeTreferenceId[a]));
      exportView.getExpGroupList().getRows()[a].getExpGListType().setTcreateUserId(FixedStringAttr.toString(
        view.ExpGListTypeTcreateUserId[a], 8));
      exportView.getExpGroupList().getRows()[a].getExpGListType().setTupdateUserId(FixedStringAttr.toString(
        view.ExpGListTypeTupdateUserId[a], 8));
      exportView.getExpGroupList().getRows()[a].getExpGListType().setTkeyAttrText(FixedStringAttr.toString(
        view.ExpGListTypeTkeyAttrText[a], 4));
      exportView.getExpGroupList().getRows()[a].getExpGListType().setTsearchAttrText(FixedStringAttr.toString(
        view.ExpGListTypeTsearchAttrText[a], 20));
      exportView.getExpGroupList().getRows()[a].getExpGListType().setTotherAttrText(FixedStringAttr.toString(
        view.ExpGListTypeTotherAttrText[a], 2));
      exportView.getExpGroupList().getRows()[a].getExpGListType().setTotherAttrDate(DateAttr.toSQLDate(
        view.ExpGListTypeTotherAttrDate[a]));
      exportView.getExpGroupList().getRows()[a].getExpGListType().setTotherAttrTime(TimeAttr.toSQLTime(
        view.ExpGListTypeTotherAttrTime[a]));
      exportView.getExpGroupList().getRows()[a].getExpGListType().setTotherAttrAmount(BigDecimalAttr.toBigDecimal(
        view.ExpGListTypeTotherAttrAmount[a]));
    }
    exportView.getExpReferenceIyy1ServerData().setServerDate(DateAttr.toSQLDate(view.ExpReferenceIyy1ServerDataServerDate));
    exportView.getExpReferenceIyy1ServerData().setServerTime(TimeAttr.toSQLTime(view.ExpReferenceIyy1ServerDataServerTime));
    exportView.getExpReferenceIyy1ServerData().setReferenceId(TimestampAttr.toSQLTimestamp(
      view.ExpReferenceIyy1ServerDataReferenceId));
    exportView.getExpIsc1AuthorizationInfo().setTokenId(FixedStringAttr.toString(view.ExpIsc1AuthorizationInfoTokenId, 32));
    exportView.getExpIsc1AuthorizationInfo().setAuthorityInd(FixedStringAttr.toString(view.ExpIsc1AuthorizationInfoAuthorityInd, 1))
      ;
    exportView.getExpIsc1AuthorizationInfo().setAuthorityStatusR(FixedStringAttr.toString(
      view.ExpIsc1AuthorizationInfoAuthorityStatusR, 1));
    exportView.getExpIsc1AuthorizationInfo().setAuthorityStatusU(FixedStringAttr.toString(
      view.ExpIsc1AuthorizationInfoAuthorityStatusU, 1));
    exportView.getExpIsc1AuthorizationInfo().setAuthorityStatusD(FixedStringAttr.toString(
      view.ExpIsc1AuthorizationInfoAuthorityStatusD, 1));
    exportView.getExpIsc1AuthorizationInfo().setAuthorityStatusL(FixedStringAttr.toString(
      view.ExpIsc1AuthorizationInfoAuthorityStatusL, 1));
    exportView.getExpMsgIyy1Component().setSeverityCode(FixedStringAttr.toString(view.ExpMsgIyy1ComponentSeverityCode, 1));
    exportView.getExpMsgIyy1Component().setMessageTx(StringAttr.toString(view.ExpMsgIyy1ComponentMessageTx));
    exportView.getExpErrorIyy1Component().setSeverityCode(FixedStringAttr.toString(view.ExpErrorIyy1ComponentSeverityCode, 1));
    exportView.getExpErrorIyy1Component().setRollbackIndicator(FixedStringAttr.toString(view.ExpErrorIyy1ComponentRollbackIndicator, 
      1));
    exportView.getExpErrorIyy1Component().setOriginServid(DoubleAttr.toDouble(view.ExpErrorIyy1ComponentOriginServid));
    exportView.getExpErrorIyy1Component().setContextString(StringAttr.toString(view.ExpErrorIyy1ComponentContextString));
    exportView.getExpErrorIyy1Component().setReturnCode(IntAttr.toInt(view.ExpErrorIyy1ComponentReturnCode));
    exportView.getExpErrorIyy1Component().setReasonCode(IntAttr.toInt(view.ExpErrorIyy1ComponentReasonCode));
    exportView.getExpErrorIyy1Component().setChecksum(FixedStringAttr.toString(view.ExpErrorIyy1ComponentChecksum, 15));
    exportView.setTrustClients(saveTrustClients);
  }
  
};


package gen.ort.yyy;
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
//
//                    Source Code Generated by
//                           CA Gen 8.6
//
//    Copyright (c) 2023 CA Technologies. All rights reserved.
//
//    Name: CYY1S081_TYPE_LIST               Date: 2023/07/05
//    User: HakanBal                         Time: 15:09:25
//
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// import Statements
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
import java.lang.*;
import java.io.*;
import java.text.*;
import java.math.*;
import com.ca.gen.vwrt.types.*;

/**
 * Contains the import request data for the 'CYY1S081_TYPE_LIST' server.
 * @see Cyy1s081TypeList
 **/
@javax.xml.bind.annotation.XmlType(name="Cyy1s081TypeListImport",
          propOrder={"command",
            "clientId",
            "clientPassword",
            "nextLocation",
            "exitState",
            "dialect",
            "impCommandIyy1Component",
            "impDialectIyy1Component",
            "impIsc1AuthorizationInfo",
            "impFilterIyy1List",
            "impFromType",
            "impFilterStartType",
            "impFilterStopType",
          "impFilterType"}
)
public class Cyy1s081TypeListImport  implements Externalizable, Cloneable
{
  private final static long serialVersionUID = 423629000L;
  /**
   * Default Constructor.
   **/
  public Cyy1s081TypeListImport()
  {
  }
  /**
   * Internal storage for TrustClients property.
   **/
  private boolean _TrustClients = false;
  /**
   * Gets the import view TrustClients property.
   * 
   * This property indicates whether the Import view should trust the data passed to it via the clients.  If a client is trusted, 
    then the data is accepted as specified.   If the client is not trusted, then the data will be validated that it is acceptable 
    data and/or transformed to acceptable data.  Setting the TrustClients property to true may result in invalid data being sent to 
    the server and should be used with caution.
   * 
   * The default value is: false
   * 
   * @return a boolean with the TrustClients property
   **/
  @javax.xml.bind.annotation.XmlTransient
  public boolean getTrustClients() {
    return(_TrustClients);
  }
  /**
   * Sets the import view TrustClients property.
   * 
   * This property indicates whether the Import view should trust the data passed to it via the clients.  If a client is trusted, 
    then the data is accepted as specified.   If the client is not trusted, then the data will be validated that it is acceptable 
    data and/or transformed to acceptable data.  Setting the TrustClients property to true may result in invalid data being sent to 
    the server and should be used with caution.
   * 
   * @param value the TrustClients value
   * 
   * The default value is: false
   **/
  public void setTrustClients(boolean value) {
    _TrustClients = value;
    _ImpCommandIyy1Component.setTrustClients(_TrustClients);
    _ImpDialectIyy1Component.setTrustClients(_TrustClients);
    _ImpIsc1AuthorizationInfo.setTrustClients(_TrustClients);
    _ImpFilterIyy1List.setTrustClients(_TrustClients);
    _ImpFromType.setTrustClients(_TrustClients);
    _ImpFilterStartType.setTrustClients(_TrustClients);
    _ImpFilterStopType.setTrustClients(_TrustClients);
    _ImpFilterType.setTrustClients(_TrustClients);
  }
  
  /**
   * Internal storage for Command property.
   **/
  private String _Command = "";
  /**
   * Gets the import view Command property.
   * 
   * Gets the command to be passed to the server.  Valid values are server application specific.  The field may be required or 
    optional depending on the server implementation.
   * 
   * The default value is: ""
   * 
   * @return a String with the Command
   **/
  @javax.xml.bind.annotation.XmlAttribute(name="command")
  public String getCommand() {
    return(_Command);
  }
  /**
   * Sets the import view Command property.
   * 
   * Specifies the command to be passed to the server.  Valid values are server application specific.  The field may be required or 
    optional depending on the server implementation.
   * 
   * @param value the Command value
   * 
   * The default value is: ""
   **/
  public void setCommand(String value) {
    if ( _TrustClients == true )
    {
      _Command = value;
      return;
    }
    if ( value == null )
    {
      _Command = "";
    }
    else 
    {
      _Command = value;
    }
  }
  
  /**
   * Internal storage for NextLocation property.
   **/
  private String _NextLocation = "";
  /**
   * Gets the import view NextLocation property.
   * 
   * Gets the next location to be passed to the server.  Valid values are server application specific.  The field may be required or 
    optional depending on the server implementation.
   * 
   * The default value is: ""
   * 
   * @return a String with the NextLocation
   **/
  @javax.xml.bind.annotation.XmlAttribute(name="nextLocation")
  public String getNextLocation() {
    return(_NextLocation);
  }
  /**
   * Sets the import view NextLocation property.
   * 
   * Specifies the next location to be passed to the server.  Valid values are server application specific.  The field may be 
    required or optional depending on the server implementation.
   * 
   * @param value the next location value
   * 
   * The default value is: ""
   **/
  public void setNextLocation(String value) {
    if ( _TrustClients == true )
    {
      _NextLocation = value;
      return;
    }
    if ( value == null )
    {
      _NextLocation = "";
    }
    else 
    {
      _NextLocation = value;
    }
  }
  
  /**
   * Internal storage for ClientId property.
   **/
  private String _ClientId = "";
  /**
   * Gets the import view ClientId property.
   * 
   * Gets the client userid to be passed to the server.  The field may be required or optional depending on the security settings on 
    the server.
   * 
   * The default value is: ""
   * 
   * @return a String with the ClientId
   **/
  @javax.xml.bind.annotation.XmlAttribute(name="clientId")
  public String getClientId() {
    return(_ClientId);
  }
  /**
   * Sets the import view ClientId property.
   * 
   * Specifies the client userid to be passed to the server.  The field may be required or optional depending on the security 
    settings on the server.
   * 
   * @param value the client userid value
   * 
   * The default value is: ""
   **/
  public void setClientId(String value){
    if ( _TrustClients == true )
    {
      _ClientId = value;
      return;
    }
    if ( value == null )
    {
      _ClientId = "";
    }
    else 
    {
      _ClientId = value;
    }
  }
  
  /**
   * Internal storage for ClientPassword property.
   **/
  private String _ClientPassword = "";
  /**
   * Gets the import view ClientPassword property.
   * 
   * Gets the client password to be passed to the server.  The field may be required or optional depending on the security settings 
    on the server.
   * 
   * The default value is: ""
   * 
   * @return a String with the ClientPassword
   **/
  @javax.xml.bind.annotation.XmlAttribute(name="clientPassword")
  public String getClientPassword() {
    return(_ClientPassword);
  }
  /**
   * Sets the import view ClientPassword property.
   * 
   * Specifies the client password to be passed to the server.  The field may be required or optional depending on the security 
    settings on the server.
   * 
   * @param value the client password value
   * 
   * The default value is: ""
   **/
  public void setClientPassword(String value) {
    if ( _TrustClients == true )
    {
      _ClientPassword = value;
      return;
    }
    if ( value == null )
    {
      _ClientPassword = "";
    }
    else 
    {
      _ClientPassword = value;
    }
  }
  
  /**
   * Internal storage for Dialect property.
   **/
  private String _Dialect = "";
  /**
   * Gets the import view Dialect property.
   * 
   * Gets the dialect to be passed to the server.  Valid values are server application specific.  The field may be required or 
    optional depending on the server implementation.
   * 
   * The default value is: ""
   * 
   * @return a String with the Dialect
   **/
  @javax.xml.bind.annotation.XmlAttribute(name="dialect")
  public String getDialect() {
    return(_Dialect);
  }
  /**
   * Sets the import view Dialect property.
   * 
   * Specifies the dialect to be passed to the server.  Valid values are server application specific.  The field may be required or 
    optional depending on the server implementation.
   * 
   * @param value the dialect value
   * 
   * The default value is: ""
   **/
  public void setDialect(String value) {
    if ( _TrustClients == true )
    {
      _Dialect = value;
      return;
    }
    if ( value == null )
    {
      _Dialect = "";
    }
    else 
    {
      _Dialect = value;
    }
  }
  
  /**
   * Internal storage for ExitState property.
   **/
  private int _ExitState = 0;
  /**
   * Gets the import view ExitState property.
   * 
   * Gets the exit state to be passed to the server.  Valid values are server application specific.  The field may be required or 
    optional depending on the server implementation.
   * 
   * The default value is: 0
   * 
   * @return an int with the ExitState
   **/
  @javax.xml.bind.annotation.XmlAttribute(name="exitState")
  public int getExitState() {
    return(_ExitState);
  }
  /**
   * Sets the import view ExitState property.
   * 
   * Specifies the exit state to be passed to the server.  Valid values are server application specific.  The field may be required 
    or optional depending on the server implementation.
   * 
   * @param value the exitstate value
   * 
   * The default value is: 0
   **/
  public void setExitState(int value) {
    _ExitState = value;
  }
  
  /**
   * Internal storage for ImpCommandIyy1Component entity view property.
   **/
  private ImpCommandIyy1Component _ImpCommandIyy1Component = new ImpCommandIyy1Component(_TrustClients);
  /**
   * Gets the ImpCommandIyy1Component property
   * 
   * @return a ImpCommandIyy1Component
   **/
  @javax.xml.bind.annotation.XmlElement(name="ImpCommandIyy1Component")
  public ImpCommandIyy1Component getImpCommandIyy1Component(){
    return(_ImpCommandIyy1Component);
  }
  
  /**
   * Sets the ImpCommandIyy1Component property
   * 
   * @param value the ImpCommandIyy1Component value
   **/
  public void setImpCommandIyy1Component(ImpCommandIyy1Component value){
    _ImpCommandIyy1Component = value;
  }
  
  /**
   * Internal storage for ImpDialectIyy1Component entity view property.
   **/
  private ImpDialectIyy1Component _ImpDialectIyy1Component = new ImpDialectIyy1Component(_TrustClients);
  /**
   * Gets the ImpDialectIyy1Component property
   * 
   * @return a ImpDialectIyy1Component
   **/
  @javax.xml.bind.annotation.XmlElement(name="ImpDialectIyy1Component")
  public ImpDialectIyy1Component getImpDialectIyy1Component(){
    return(_ImpDialectIyy1Component);
  }
  
  /**
   * Sets the ImpDialectIyy1Component property
   * 
   * @param value the ImpDialectIyy1Component value
   **/
  public void setImpDialectIyy1Component(ImpDialectIyy1Component value){
    _ImpDialectIyy1Component = value;
  }
  
  /**
   * Internal storage for ImpIsc1AuthorizationInfo entity view property.
   **/
  private ImpIsc1AuthorizationInfo _ImpIsc1AuthorizationInfo = new ImpIsc1AuthorizationInfo(_TrustClients);
  /**
   * Gets the ImpIsc1AuthorizationInfo property
   * 
   * @return a ImpIsc1AuthorizationInfo
   **/
  @javax.xml.bind.annotation.XmlElement(name="ImpIsc1AuthorizationInfo")
  public ImpIsc1AuthorizationInfo getImpIsc1AuthorizationInfo(){
    return(_ImpIsc1AuthorizationInfo);
  }
  
  /**
   * Sets the ImpIsc1AuthorizationInfo property
   * 
   * @param value the ImpIsc1AuthorizationInfo value
   **/
  public void setImpIsc1AuthorizationInfo(ImpIsc1AuthorizationInfo value){
    _ImpIsc1AuthorizationInfo = value;
  }
  
  /**
   * Internal storage for ImpFilterIyy1List entity view property.
   **/
  private ImpFilterIyy1List _ImpFilterIyy1List = new ImpFilterIyy1List(_TrustClients);
  /**
   * Gets the ImpFilterIyy1List property
   * 
   * @return a ImpFilterIyy1List
   **/
  @javax.xml.bind.annotation.XmlElement(name="ImpFilterIyy1List")
  public ImpFilterIyy1List getImpFilterIyy1List(){
    return(_ImpFilterIyy1List);
  }
  
  /**
   * Sets the ImpFilterIyy1List property
   * 
   * @param value the ImpFilterIyy1List value
   **/
  public void setImpFilterIyy1List(ImpFilterIyy1List value){
    _ImpFilterIyy1List = value;
  }
  
  /**
   * Internal storage for ImpFromType entity view property.
   **/
  private ImpFromType _ImpFromType = new ImpFromType(_TrustClients);
  /**
   * Gets the ImpFromType property
   * 
   * @return a ImpFromType
   **/
  @javax.xml.bind.annotation.XmlElement(name="ImpFromType")
  public ImpFromType getImpFromType(){
    return(_ImpFromType);
  }
  
  /**
   * Sets the ImpFromType property
   * 
   * @param value the ImpFromType value
   **/
  public void setImpFromType(ImpFromType value){
    _ImpFromType = value;
  }
  
  /**
   * Internal storage for ImpFilterStartType entity view property.
   **/
  private ImpFilterStartType _ImpFilterStartType = new ImpFilterStartType(_TrustClients);
  /**
   * Gets the ImpFilterStartType property
   * 
   * @return a ImpFilterStartType
   **/
  @javax.xml.bind.annotation.XmlElement(name="ImpFilterStartType")
  public ImpFilterStartType getImpFilterStartType(){
    return(_ImpFilterStartType);
  }
  
  /**
   * Sets the ImpFilterStartType property
   * 
   * @param value the ImpFilterStartType value
   **/
  public void setImpFilterStartType(ImpFilterStartType value){
    _ImpFilterStartType = value;
  }
  
  /**
   * Internal storage for ImpFilterStopType entity view property.
   **/
  private ImpFilterStopType _ImpFilterStopType = new ImpFilterStopType(_TrustClients);
  /**
   * Gets the ImpFilterStopType property
   * 
   * @return a ImpFilterStopType
   **/
  @javax.xml.bind.annotation.XmlElement(name="ImpFilterStopType")
  public ImpFilterStopType getImpFilterStopType(){
    return(_ImpFilterStopType);
  }
  
  /**
   * Sets the ImpFilterStopType property
   * 
   * @param value the ImpFilterStopType value
   **/
  public void setImpFilterStopType(ImpFilterStopType value){
    _ImpFilterStopType = value;
  }
  
  /**
   * Internal storage for ImpFilterType entity view property.
   **/
  private ImpFilterType _ImpFilterType = new ImpFilterType(_TrustClients);
  /**
   * Gets the ImpFilterType property
   * 
   * @return a ImpFilterType
   **/
  @javax.xml.bind.annotation.XmlElement(name="ImpFilterType")
  public ImpFilterType getImpFilterType(){
    return(_ImpFilterType);
  }
  
  /**
   * Sets the ImpFilterType property
   * 
   * @param value the ImpFilterType value
   **/
  public void setImpFilterType(ImpFilterType value){
    _ImpFilterType = value;
  }
  
  /**
   * Creates a copy of the instance.
   * 
   * @return A copy of the instance.
   **/
  @Override public Object clone()
  {
    Cyy1s081TypeListImport copy = new Cyy1s081TypeListImport();
    copy._TrustClients = _TrustClients;
    copy._Command = _Command;
    copy._Dialect = _Dialect;
    copy._ClientId = _ClientId;
    copy._ClientPassword = _ClientPassword;
    copy._NextLocation = _NextLocation;
    copy._ExitState = _ExitState;
    copy._ImpCommandIyy1Component = (ImpCommandIyy1Component)_ImpCommandIyy1Component.clone();
    copy._ImpDialectIyy1Component = (ImpDialectIyy1Component)_ImpDialectIyy1Component.clone();
    copy._ImpIsc1AuthorizationInfo = (ImpIsc1AuthorizationInfo)_ImpIsc1AuthorizationInfo.clone();
    copy._ImpFilterIyy1List = (ImpFilterIyy1List)_ImpFilterIyy1List.clone();
    copy._ImpFromType = (ImpFromType)_ImpFromType.clone();
    copy._ImpFilterStartType = (ImpFilterStartType)_ImpFilterStartType.clone();
    copy._ImpFilterStopType = (ImpFilterStopType)_ImpFilterStopType.clone();
    copy._ImpFilterType = (ImpFilterType)_ImpFilterType.clone();
    return(copy);
  }
  
  /**
   * Resets the Cyy1s081TypeListImport class properties to all of their default values.
   **/
  public void reset()
  {
    _TrustClients = false;
    _Command = "";
    _Dialect = "";
    _ClientId = "";
    _ClientPassword = "";
    _NextLocation = "";
    _ExitState = 0;
    _ImpCommandIyy1Component.reset();
    _ImpDialectIyy1Component.reset();
    _ImpIsc1AuthorizationInfo.reset();
    _ImpFilterIyy1List.reset();
    _ImpFromType.reset();
    _ImpFilterStartType.reset();
    _ImpFilterStopType.reset();
    _ImpFilterType.reset();
  }
  
  /**
   * Validates all the property values on the instance.
   * @throws IllegalArgumentException Thrown if any property is invalid.
   **/
  public void validate()
  	throws IllegalArgumentException
  {
    _ImpCommandIyy1Component.validate();
    _ImpDialectIyy1Component.validate();
    _ImpIsc1AuthorizationInfo.validate();
    _ImpFilterIyy1List.validate();
    _ImpFromType.validate();
    _ImpFilterStartType.validate();
    _ImpFilterStopType.validate();
    _ImpFilterType.validate();
  }
  
  /**
   * Unserializes the Cyy1s081TypeListImport class from the ObjectInput.
   * @throws IOException Thrown If an I/O error has occurred.
   **/
  public void readExternal(ObjectInput in)
  	throws IOException
  {
    _TrustClients = in.readBoolean();
    _Command = in.readUTF();
    _Dialect = in.readUTF();
    _ClientId = in.readUTF();
    _ClientPassword = in.readUTF();
    _NextLocation = in.readUTF();
    _ExitState = in.readInt();
    _ImpCommandIyy1Component.readExternal(in);
    _ImpDialectIyy1Component.readExternal(in);
    _ImpIsc1AuthorizationInfo.readExternal(in);
    _ImpFilterIyy1List.readExternal(in);
    _ImpFromType.readExternal(in);
    _ImpFilterStartType.readExternal(in);
    _ImpFilterStopType.readExternal(in);
    _ImpFilterType.readExternal(in);
  }
  
  /**
   * Serializes the Cyy1s081TypeListImport class to the ObjectOutput.
   * @throws IOException Thrown If an I/O error has occurred.
   **/
  public void writeExternal(ObjectOutput out)
  	throws IOException
  {
    out.writeBoolean(_TrustClients);
    out.writeUTF(_Command);
    out.writeUTF(_Dialect);
    out.writeUTF(_ClientId);
    out.writeUTF(_ClientPassword);
    out.writeUTF(_NextLocation);
    out.writeInt(_ExitState);
    _ImpCommandIyy1Component.writeExternal(out);
    _ImpDialectIyy1Component.writeExternal(out);
    _ImpIsc1AuthorizationInfo.writeExternal(out);
    _ImpFilterIyy1List.writeExternal(out);
    _ImpFromType.writeExternal(out);
    _ImpFilterStartType.writeExternal(out);
    _ImpFilterStopType.writeExternal(out);
    _ImpFilterType.writeExternal(out);
  }
  
  /**
   * Gets a String representation of the instance.
   * 
   * @return A String representation of the instance.
   **/
  @Override public String toString()
  {
    StringBuffer result = new StringBuffer();
    result.append("TrustClients = \"" + _TrustClients + "\"");
    result.append("Command = \"" + _Command + "\"");
    result.append(", Dialect = \"" + _Dialect + "\"");
    result.append(", ClientId = \"" + _ClientId + "\"");
    result.append(", ClientPassword = \"" + _ClientPassword + "\"");
    result.append(", NextLocation = \"" + _NextLocation + "\"");
    result.append(", ExitState = " + _ExitState);
    result.append(", ImpCommandIyy1Component (" + _ImpCommandIyy1Component + ")");
    result.append(", ImpDialectIyy1Component (" + _ImpDialectIyy1Component + ")");
    result.append(", ImpIsc1AuthorizationInfo (" + _ImpIsc1AuthorizationInfo + ")");
    result.append(", ImpFilterIyy1List (" + _ImpFilterIyy1List + ")");
    result.append(", ImpFromType (" + _ImpFromType + ")");
    result.append(", ImpFilterStartType (" + _ImpFilterStartType + ")");
    result.append(", ImpFilterStopType (" + _ImpFilterStopType + ")");
    result.append(", ImpFilterType (" + _ImpFilterType + ")");
    return(result.toString());
  }
  
  /**
   * Contains the data for the ImpCommandIyy1Component entity view.
   **/
  @javax.xml.bind.annotation.XmlType(name="",
            propOrder={          "sendCommand"}
  )
  static public class ImpCommandIyy1Component  implements Externalizable, Cloneable
  {
    /**
     * Default Constructor.
     **/
    public ImpCommandIyy1Component()
    {
    }
    /**
     * Constructor.
     **/
    public ImpCommandIyy1Component(boolean TrustClients)
    {
      _TrustClients = TrustClients;
    }
    /**
     * Internal storage for TrustClients property.
     **/
    private boolean _TrustClients = false;
    @javax.xml.bind.annotation.XmlTransient
    public boolean getTrustClients() {
      return(_TrustClients);
    }
    
    public void setTrustClients(boolean value) {
      _TrustClients = value;
    }
    
    /**
     * Internal storage for SendCommand property.
     **/
    private String _SendCommand = "        ";
    /**
     * Gets the SendCommand property
     * 
     * "Yapılması istenen işlemin kodu. Bu komponenti kullanan yordam bu alanı kullanarak yapılması istediği işlemi belirtir.
    "
     * 
     * @return a String containing the value
     * 
     * The default value is: "        "
     * 
     * @see #setSendCommand(String)
     * @see #resetSendCommand()
     * @see #validateSendCommand()
     **/
    @javax.xml.bind.annotation.XmlElement(name="SendCommand",
                                          required=true)
    public String getSendCommand() {
      return(_SendCommand);
    }
    /**
     * Sets the SendCommand property
     * 
     * "Yapılması istenen işlemin kodu. Bu komponenti kullanan yordam bu alanı kullanarak yapılması istediği işlemi belirtir.
    "
     * 
     * @param value the new value for the property.
     * 
     * Throws IllegalArgumentException if the value is invalid.
     * 
     * The default value is: "        "
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getSendCommand()
     * @see #resetSendCommand()
     * @see #validateSendCommand()
     **/
    public void setSendCommand(String value) throws IllegalArgumentException {
      if ( _TrustClients == true )
      {
        _SendCommand = value;
        return;
      }
      if ( value == null )
      {
        value = "";
      }
      if ( value.length() < 8 )
      {
        value += "        ".substring(0, 8-value.length());
      }
      value = value.toUpperCase();
      checkSendCommand(value);
      _SendCommand = value;
    }
    
    /**
     * Internal method to check values for the SendCommand property.
     **/
    private  void checkSendCommand( String value ) throws IllegalArgumentException 
    {
      if ( value.length() > 8 )
      {
        throw new IllegalArgumentException("Property ImpCommandIyy1Component.SendCommand cannot be more than 8 characters");
      }
    }
    
    /**
     * Resets the SendCommand property to its default value of "        ".
     * @see #getSendCommand()
     * @see #setSendCommand(String)
     * @see #validateSendCommand()
     **/
    public  void resetSendCommand()
    {
      _SendCommand = "        ";
    }
    
    /**
     * Validates the current SendCommand property value.
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getSendCommand()
     * @see #setSendCommand(String)
     * @see #resetSendCommand()
     **/
    public  void validateSendCommand() throws IllegalArgumentException 
    {
      checkSendCommand(_SendCommand);
    }
    
    /**
     * Resets the ImpCommandIyy1Component class properties to all of their default values.
     **/
    public void reset()
    {
      resetSendCommand();
    }
    
    /**
     * Creates a copy of the instance.
     * 
     * @return A copy of the instance.
     **/
    @Override public Object clone()
    {
      ImpCommandIyy1Component copy = new ImpCommandIyy1Component(_TrustClients);
      copy._SendCommand = _SendCommand;
      return(copy);
    }
    
    /**
     * Validates all the property values on the instance.
     * @throws IllegalArgumentException Thrown if any property is invalid.
     **/
    public void validate()
    	throws IllegalArgumentException
    {
      validateSendCommand();
    }
    
    /**
     * Unserializes the ImpCommandIyy1Component Entity View class from the ObjectInput.
     * @throws IOException Thrown If an I/O error has occurred.
     **/
    public void readExternal(ObjectInput in)
    	throws IOException
    {
      _TrustClients = in.readBoolean();
      _SendCommand = in.readUTF();
    }
    
    /**
     * Serializes the ImpCommandIyy1Component Entity View class from the ObjectOutput.
     * @throws IOException Thrown If an I/O error has occurred.
     **/
    public void writeExternal(ObjectOutput out)
    	throws IOException
    {
      out.writeBoolean(_TrustClients);
      out.writeUTF(_SendCommand);
    }
    
    /**
     * Gets a String representation of the instance.
     * 
     * @return A String representation of the instance.
     **/
    @Override public String toString()
    {
      StringBuffer result = new StringBuffer();
      result.append("SendCommand = \"" + _SendCommand + "\"");
      return(result.toString());
    }
  };
  
  /**
   * Contains the data for the ImpDialectIyy1Component entity view.
   **/
  @javax.xml.bind.annotation.XmlType(name="",
            propOrder={          "dialectCd"}
  )
  static public class ImpDialectIyy1Component  implements Externalizable, Cloneable
  {
    /**
     * Default Constructor.
     **/
    public ImpDialectIyy1Component()
    {
    }
    /**
     * Constructor.
     **/
    public ImpDialectIyy1Component(boolean TrustClients)
    {
      _TrustClients = TrustClients;
    }
    /**
     * Internal storage for TrustClients property.
     **/
    private boolean _TrustClients = false;
    @javax.xml.bind.annotation.XmlTransient
    public boolean getTrustClients() {
      return(_TrustClients);
    }
    
    public void setTrustClients(boolean value) {
      _TrustClients = value;
    }
    
    /**
     * Internal storage for DialectCd property.
     **/
    private String _DialectCd = "  ";
    /**
     * Gets the DialectCd property
     * 
     * "Full Name: Dialect Code
    
    Description:
    This attribute is used to define a dialect code. The dialect code is a code defining a particular dialect or language that 
      pertains to the type of data that can be handled within a component.  A dialect code is used to define the the manner in which 
      textual information should be stored or presented."
     * 
     * @return a String containing the value
     * 
     * The default value is: "  "
     * 
     * @see #setDialectCd(String)
     * @see #resetDialectCd()
     * @see #validateDialectCd()
     **/
    @javax.xml.bind.annotation.XmlElement(name="DialectCd",
                                          required=true)
    public String getDialectCd() {
      return(_DialectCd);
    }
    /**
     * Sets the DialectCd property
     * 
     * "Full Name: Dialect Code
    
    Description:
    This attribute is used to define a dialect code. The dialect code is a code defining a particular dialect or language that 
      pertains to the type of data that can be handled within a component.  A dialect code is used to define the the manner in which 
      textual information should be stored or presented."
     * 
     * @param value the new value for the property.
     * 
     * Throws IllegalArgumentException if the value is invalid.
     * 
     * The default value is: "  "
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getDialectCd()
     * @see #resetDialectCd()
     * @see #validateDialectCd()
     **/
    public void setDialectCd(String value) throws IllegalArgumentException {
      if ( _TrustClients == true )
      {
        _DialectCd = value;
        return;
      }
      if ( value == null )
      {
        value = "";
      }
      if ( value.length() < 2 )
      {
        value += "  ".substring(0, 2-value.length());
      }
      value = value.toUpperCase();
      checkDialectCd(value);
      _DialectCd = value;
    }
    
    /**
     * Internal method to check values for the DialectCd property.
     **/
    private  void checkDialectCd( String value ) throws IllegalArgumentException 
    {
      if ( value.length() > 2 )
      {
        throw new IllegalArgumentException("Property ImpDialectIyy1Component.DialectCd cannot be more than 2 characters");
      }
    }
    
    /**
     * Resets the DialectCd property to its default value of "  ".
     * @see #getDialectCd()
     * @see #setDialectCd(String)
     * @see #validateDialectCd()
     **/
    public  void resetDialectCd()
    {
      _DialectCd = "  ";
    }
    
    /**
     * Validates the current DialectCd property value.
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getDialectCd()
     * @see #setDialectCd(String)
     * @see #resetDialectCd()
     **/
    public  void validateDialectCd() throws IllegalArgumentException 
    {
      checkDialectCd(_DialectCd);
    }
    
    /**
     * Resets the ImpDialectIyy1Component class properties to all of their default values.
     **/
    public void reset()
    {
      resetDialectCd();
    }
    
    /**
     * Creates a copy of the instance.
     * 
     * @return A copy of the instance.
     **/
    @Override public Object clone()
    {
      ImpDialectIyy1Component copy = new ImpDialectIyy1Component(_TrustClients);
      copy._DialectCd = _DialectCd;
      return(copy);
    }
    
    /**
     * Validates all the property values on the instance.
     * @throws IllegalArgumentException Thrown if any property is invalid.
     **/
    public void validate()
    	throws IllegalArgumentException
    {
      validateDialectCd();
    }
    
    /**
     * Unserializes the ImpDialectIyy1Component Entity View class from the ObjectInput.
     * @throws IOException Thrown If an I/O error has occurred.
     **/
    public void readExternal(ObjectInput in)
    	throws IOException
    {
      _TrustClients = in.readBoolean();
      _DialectCd = in.readUTF();
    }
    
    /**
     * Serializes the ImpDialectIyy1Component Entity View class from the ObjectOutput.
     * @throws IOException Thrown If an I/O error has occurred.
     **/
    public void writeExternal(ObjectOutput out)
    	throws IOException
    {
      out.writeBoolean(_TrustClients);
      out.writeUTF(_DialectCd);
    }
    
    /**
     * Gets a String representation of the instance.
     * 
     * @return A String representation of the instance.
     **/
    @Override public String toString()
    {
      StringBuffer result = new StringBuffer();
      result.append("DialectCd = \"" + _DialectCd + "\"");
      return(result.toString());
    }
  };
  
  /**
   * Contains the data for the ImpIsc1AuthorizationInfo entity view.
   **/
  @javax.xml.bind.annotation.XmlType(name="",
            propOrder={          "userid",
              "tokenId",
              "moduleId",
              "authorityObjectId",
              "version",
            "workingUnitNum"}
  )
  static public class ImpIsc1AuthorizationInfo  implements Externalizable, Cloneable
  {
    /**
     * Default Constructor.
     **/
    public ImpIsc1AuthorizationInfo()
    {
    }
    /**
     * Constructor.
     **/
    public ImpIsc1AuthorizationInfo(boolean TrustClients)
    {
      _TrustClients = TrustClients;
    }
    /**
     * Internal storage for TrustClients property.
     **/
    private boolean _TrustClients = false;
    @javax.xml.bind.annotation.XmlTransient
    public boolean getTrustClients() {
      return(_TrustClients);
    }
    
    public void setTrustClients(boolean value) {
      _TrustClients = value;
    }
    
    /**
     * Internal storage for Userid property.
     **/
    private String _Userid = "                    ";
    /**
     * Gets the Userid property
     * 
     * "User id
    "
     * 
     * @return a String containing the value
     * 
     * The default value is: "                    "
     * 
     * @see #setUserid(String)
     * @see #resetUserid()
     * @see #validateUserid()
     **/
    @javax.xml.bind.annotation.XmlElement(name="Userid",
                                          required=true)
    public String getUserid() {
      return(_Userid);
    }
    /**
     * Sets the Userid property
     * 
     * "User id
    "
     * 
     * @param value the new value for the property.
     * 
     * Throws IllegalArgumentException if the value is invalid.
     * 
     * The default value is: "                    "
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getUserid()
     * @see #resetUserid()
     * @see #validateUserid()
     **/
    public void setUserid(String value) throws IllegalArgumentException {
      if ( _TrustClients == true )
      {
        _Userid = value;
        return;
      }
      if ( value == null )
      {
        value = "";
      }
      if ( value.length() < 20 )
      {
        value += "                    ".substring(0, 20-value.length());
      }
      value = value.toUpperCase();
      checkUserid(value);
      _Userid = value;
    }
    
    /**
     * Internal method to check values for the Userid property.
     **/
    private  void checkUserid( String value ) throws IllegalArgumentException 
    {
      if ( value.length() > 20 )
      {
        throw new IllegalArgumentException("Property ImpIsc1AuthorizationInfo.Userid cannot be more than 20 characters");
      }
    }
    
    /**
     * Resets the Userid property to its default value of "                    ".
     * @see #getUserid()
     * @see #setUserid(String)
     * @see #validateUserid()
     **/
    public  void resetUserid()
    {
      _Userid = "                    ";
    }
    
    /**
     * Validates the current Userid property value.
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getUserid()
     * @see #setUserid(String)
     * @see #resetUserid()
     **/
    public  void validateUserid() throws IllegalArgumentException 
    {
      checkUserid(_Userid);
    }
    
    /**
     * Internal storage for TokenId property.
     **/
    private String _TokenId = "                                ";
    /**
     * Gets the TokenId property
     * 
     * "System wide Session id
    "
     * 
     * @return a String containing the value
     * 
     * The default value is: "                                "
     * 
     * @see #setTokenId(String)
     * @see #resetTokenId()
     * @see #validateTokenId()
     **/
    @javax.xml.bind.annotation.XmlElement(name="TokenId",
                                          required=true)
    public String getTokenId() {
      return(_TokenId);
    }
    /**
     * Sets the TokenId property
     * 
     * "System wide Session id
    "
     * 
     * @param value the new value for the property.
     * 
     * Throws IllegalArgumentException if the value is invalid.
     * 
     * The default value is: "                                "
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getTokenId()
     * @see #resetTokenId()
     * @see #validateTokenId()
     **/
    public void setTokenId(String value) throws IllegalArgumentException {
      if ( _TrustClients == true )
      {
        _TokenId = value;
        return;
      }
      if ( value == null )
      {
        value = "";
      }
      if ( value.length() < 32 )
      {
        value += "                                ".substring(0, 32-value.length());
      }
      value = value.toUpperCase();
      checkTokenId(value);
      _TokenId = value;
    }
    
    /**
     * Internal method to check values for the TokenId property.
     **/
    private  void checkTokenId( String value ) throws IllegalArgumentException 
    {
      if ( value.length() > 32 )
      {
        throw new IllegalArgumentException("Property ImpIsc1AuthorizationInfo.TokenId cannot be more than 32 characters");
      }
    }
    
    /**
     * Resets the TokenId property to its default value of "                                ".
     * @see #getTokenId()
     * @see #setTokenId(String)
     * @see #validateTokenId()
     **/
    public  void resetTokenId()
    {
      _TokenId = "                                ";
    }
    
    /**
     * Validates the current TokenId property value.
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getTokenId()
     * @see #setTokenId(String)
     * @see #resetTokenId()
     **/
    public  void validateTokenId() throws IllegalArgumentException 
    {
      checkTokenId(_TokenId);
    }
    
    /**
     * Internal storage for ModuleId property.
     **/
    private String _ModuleId = "                    ";
    /**
     * Gets the ModuleId property
     * 
     * "Two character project code.
    Ex: PN - Senet project
        OB - Açık Şube project"
     * 
     * @return a String containing the value
     * 
     * The default value is: "                    "
     * 
     * @see #setModuleId(String)
     * @see #resetModuleId()
     * @see #validateModuleId()
     **/
    @javax.xml.bind.annotation.XmlElement(name="ModuleId",
                                          required=true)
    public String getModuleId() {
      return(_ModuleId);
    }
    /**
     * Sets the ModuleId property
     * 
     * "Two character project code.
    Ex: PN - Senet project
        OB - Açık Şube project"
     * 
     * @param value the new value for the property.
     * 
     * Throws IllegalArgumentException if the value is invalid.
     * 
     * The default value is: "                    "
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getModuleId()
     * @see #resetModuleId()
     * @see #validateModuleId()
     **/
    public void setModuleId(String value) throws IllegalArgumentException {
      if ( _TrustClients == true )
      {
        _ModuleId = value;
        return;
      }
      if ( value == null )
      {
        value = "";
      }
      if ( value.length() < 20 )
      {
        value += "                    ".substring(0, 20-value.length());
      }
      value = value.toUpperCase();
      checkModuleId(value);
      _ModuleId = value;
    }
    
    /**
     * Internal method to check values for the ModuleId property.
     **/
    private  void checkModuleId( String value ) throws IllegalArgumentException 
    {
      if ( value.length() > 20 )
      {
        throw new IllegalArgumentException("Property ImpIsc1AuthorizationInfo.ModuleId cannot be more than 20 characters");
      }
    }
    
    /**
     * Resets the ModuleId property to its default value of "                    ".
     * @see #getModuleId()
     * @see #setModuleId(String)
     * @see #validateModuleId()
     **/
    public  void resetModuleId()
    {
      _ModuleId = "                    ";
    }
    
    /**
     * Validates the current ModuleId property value.
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getModuleId()
     * @see #setModuleId(String)
     * @see #resetModuleId()
     **/
    public  void validateModuleId() throws IllegalArgumentException 
    {
      checkModuleId(_ModuleId);
    }
    
    /**
     * Internal storage for AuthorityObjectId property.
     **/
    private String _AuthorityObjectId = "                    ";
    /**
     * Gets the AuthorityObjectId property
     * 
     * "Object Code.
    "
     * 
     * @return a String containing the value
     * 
     * The default value is: "                    "
     * 
     * @see #setAuthorityObjectId(String)
     * @see #resetAuthorityObjectId()
     * @see #validateAuthorityObjectId()
     **/
    @javax.xml.bind.annotation.XmlElement(name="AuthorityObjectId",
                                          required=true)
    public String getAuthorityObjectId() {
      return(_AuthorityObjectId);
    }
    /**
     * Sets the AuthorityObjectId property
     * 
     * "Object Code.
    "
     * 
     * @param value the new value for the property.
     * 
     * Throws IllegalArgumentException if the value is invalid.
     * 
     * The default value is: "                    "
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getAuthorityObjectId()
     * @see #resetAuthorityObjectId()
     * @see #validateAuthorityObjectId()
     **/
    public void setAuthorityObjectId(String value) throws IllegalArgumentException {
      if ( _TrustClients == true )
      {
        _AuthorityObjectId = value;
        return;
      }
      if ( value == null )
      {
        value = "";
      }
      if ( value.length() < 20 )
      {
        value += "                    ".substring(0, 20-value.length());
      }
      value = value.toUpperCase();
      checkAuthorityObjectId(value);
      _AuthorityObjectId = value;
    }
    
    /**
     * Internal method to check values for the AuthorityObjectId property.
     **/
    private  void checkAuthorityObjectId( String value ) throws IllegalArgumentException 
    {
      if ( value.length() > 20 )
      {
        throw new IllegalArgumentException("Property ImpIsc1AuthorizationInfo.AuthorityObjectId cannot be more than 20 characters");
      }
    }
    
    /**
     * Resets the AuthorityObjectId property to its default value of "                    ".
     * @see #getAuthorityObjectId()
     * @see #setAuthorityObjectId(String)
     * @see #validateAuthorityObjectId()
     **/
    public  void resetAuthorityObjectId()
    {
      _AuthorityObjectId = "                    ";
    }
    
    /**
     * Validates the current AuthorityObjectId property value.
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getAuthorityObjectId()
     * @see #setAuthorityObjectId(String)
     * @see #resetAuthorityObjectId()
     **/
    public  void validateAuthorityObjectId() throws IllegalArgumentException 
    {
      checkAuthorityObjectId(_AuthorityObjectId);
    }
    
    /**
     * Internal storage for Version property.
     **/
    private String _Version = "    ";
    /**
     * Gets the Version property
     * 
     * @return a String containing the value
     * 
     * The default value is: "    "
     * 
     * @see #setVersion(String)
     * @see #resetVersion()
     * @see #validateVersion()
     **/
    @javax.xml.bind.annotation.XmlElement(name="Version",
                                          required=true)
    public String getVersion() {
      return(_Version);
    }
    /**
     * Sets the Version property
     * 
     * @param value the new value for the property.
     * 
     * Throws IllegalArgumentException if the value is invalid.
     * 
     * The default value is: "    "
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getVersion()
     * @see #resetVersion()
     * @see #validateVersion()
     **/
    public void setVersion(String value) throws IllegalArgumentException {
      if ( _TrustClients == true )
      {
        _Version = value;
        return;
      }
      if ( value == null )
      {
        value = "";
      }
      if ( value.length() < 4 )
      {
        value += "    ".substring(0, 4-value.length());
      }
      value = value.toUpperCase();
      checkVersion(value);
      _Version = value;
    }
    
    /**
     * Internal method to check values for the Version property.
     **/
    private  void checkVersion( String value ) throws IllegalArgumentException 
    {
      if ( value.length() > 4 )
      {
        throw new IllegalArgumentException("Property ImpIsc1AuthorizationInfo.Version cannot be more than 4 characters");
      }
    }
    
    /**
     * Resets the Version property to its default value of "    ".
     * @see #getVersion()
     * @see #setVersion(String)
     * @see #validateVersion()
     **/
    public  void resetVersion()
    {
      _Version = "    ";
    }
    
    /**
     * Validates the current Version property value.
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getVersion()
     * @see #setVersion(String)
     * @see #resetVersion()
     **/
    public  void validateVersion() throws IllegalArgumentException 
    {
      checkVersion(_Version);
    }
    
    /**
     * Internal storage for WorkingUnitNum property.
     **/
    private int _WorkingUnitNum = 0;
    /**
     * Gets the WorkingUnitNum property
     * 
     * "The unit number which the user wants to work for.
    "
     * 
     * @return a int containing the value
     * 
     * The default value is: 0
     * 
     * @see #setWorkingUnitNum(int)
     * @see #resetWorkingUnitNum()
     * @see #validateWorkingUnitNum()
     **/
    @javax.xml.bind.annotation.XmlElement(name="WorkingUnitNum",
                                          required=true)
    public int getWorkingUnitNum() {
      return(_WorkingUnitNum);
    }
    /**
     * Sets the WorkingUnitNum property
     * 
     * "The unit number which the user wants to work for.
    "
     * 
     * @param value the new value for the property.
     * 
     * Throws IllegalArgumentException if the value is invalid.
     * 
     * The default value is: 0
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getWorkingUnitNum()
     * @see #resetWorkingUnitNum()
     * @see #validateWorkingUnitNum()
     **/
    public void setWorkingUnitNum(int value) throws IllegalArgumentException {
      if ( _TrustClients == true )
      {
        _WorkingUnitNum = value;
        return;
      }
      checkWorkingUnitNum(value);
      _WorkingUnitNum = value;
    }
    
    /**
     * Internal method to check values for the WorkingUnitNum property.
     **/
    private  void checkWorkingUnitNum( int value ) throws IllegalArgumentException 
    {
      if ( Math.abs(value) >= 100000 )
      {
        throw new IllegalArgumentException("Property ImpIsc1AuthorizationInfo.WorkingUnitNum cannot be more than 5 digits");
      }
    }
    
    /**
     * Resets the WorkingUnitNum property to its default value of 0.
     * @see #getWorkingUnitNum()
     * @see #setWorkingUnitNum(int)
     * @see #validateWorkingUnitNum()
     **/
    public  void resetWorkingUnitNum()
    {
      _WorkingUnitNum = 0;
    }
    
    /**
     * Validates the current WorkingUnitNum property value.
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getWorkingUnitNum()
     * @see #setWorkingUnitNum(int)
     * @see #resetWorkingUnitNum()
     **/
    public  void validateWorkingUnitNum() throws IllegalArgumentException 
    {
      checkWorkingUnitNum(_WorkingUnitNum);
    }
    
    /**
     * Resets the ImpIsc1AuthorizationInfo class properties to all of their default values.
     **/
    public void reset()
    {
      resetUserid();
      resetTokenId();
      resetModuleId();
      resetAuthorityObjectId();
      resetVersion();
      resetWorkingUnitNum();
    }
    
    /**
     * Creates a copy of the instance.
     * 
     * @return A copy of the instance.
     **/
    @Override public Object clone()
    {
      ImpIsc1AuthorizationInfo copy = new ImpIsc1AuthorizationInfo(_TrustClients);
      copy._Userid = _Userid;
      copy._TokenId = _TokenId;
      copy._ModuleId = _ModuleId;
      copy._AuthorityObjectId = _AuthorityObjectId;
      copy._Version = _Version;
      copy._WorkingUnitNum = _WorkingUnitNum;
      return(copy);
    }
    
    /**
     * Validates all the property values on the instance.
     * @throws IllegalArgumentException Thrown if any property is invalid.
     **/
    public void validate()
    	throws IllegalArgumentException
    {
      validateUserid();
      validateTokenId();
      validateModuleId();
      validateAuthorityObjectId();
      validateVersion();
      validateWorkingUnitNum();
    }
    
    /**
     * Unserializes the ImpIsc1AuthorizationInfo Entity View class from the ObjectInput.
     * @throws IOException Thrown If an I/O error has occurred.
     **/
    public void readExternal(ObjectInput in)
    	throws IOException
    {
      _TrustClients = in.readBoolean();
      _Userid = in.readUTF();
      _TokenId = in.readUTF();
      _ModuleId = in.readUTF();
      _AuthorityObjectId = in.readUTF();
      _Version = in.readUTF();
      _WorkingUnitNum = in.readInt();
    }
    
    /**
     * Serializes the ImpIsc1AuthorizationInfo Entity View class from the ObjectOutput.
     * @throws IOException Thrown If an I/O error has occurred.
     **/
    public void writeExternal(ObjectOutput out)
    	throws IOException
    {
      out.writeBoolean(_TrustClients);
      out.writeUTF(_Userid);
      out.writeUTF(_TokenId);
      out.writeUTF(_ModuleId);
      out.writeUTF(_AuthorityObjectId);
      out.writeUTF(_Version);
      out.writeInt(_WorkingUnitNum);
    }
    
    /**
     * Gets a String representation of the instance.
     * 
     * @return A String representation of the instance.
     **/
    @Override public String toString()
    {
      StringBuffer result = new StringBuffer();
      result.append("Userid = \"" + _Userid + "\"");
      result.append(", TokenId = \"" + _TokenId + "\"");
      result.append(", ModuleId = \"" + _ModuleId + "\"");
      result.append(", AuthorityObjectId = \"" + _AuthorityObjectId + "\"");
      result.append(", Version = \"" + _Version + "\"");
      result.append(", WorkingUnitNum = \"" + _WorkingUnitNum + "\"");
      return(result.toString());
    }
  };
  
  /**
   * Contains the data for the ImpFilterIyy1List entity view.
   **/
  @javax.xml.bind.annotation.XmlType(name="",
            propOrder={          "sortOption",
              "scrollType",
              "listDirection",
              "scrollAmount",
            "orderByFieldNum"}
  )
  static public class ImpFilterIyy1List  implements Externalizable, Cloneable
  {
    /**
     * Default Constructor.
     **/
    public ImpFilterIyy1List()
    {
    }
    /**
     * Constructor.
     **/
    public ImpFilterIyy1List(boolean TrustClients)
    {
      _TrustClients = TrustClients;
    }
    /**
     * Internal storage for TrustClients property.
     **/
    private boolean _TrustClients = false;
    @javax.xml.bind.annotation.XmlTransient
    public boolean getTrustClients() {
      return(_TrustClients);
    }
    
    public void setTrustClients(boolean value) {
      _TrustClients = value;
    }
    
    /**
     * Internal storage for SortOption property.
     **/
    private String _SortOption = "ASC";
    /**
     * Gets the SortOption property
     * 
     * "DEFINITION: Liste sıralama opsiyonu. ASC ise artan, DES ise azalan sırada.
    "
     * 
     * @return a String containing the value
     * 
     * The default value is: "ASC"
     * 
     * @see #setSortOption(String)
     * @see #resetSortOption()
     * @see #validateSortOption()
     **/
    @javax.xml.bind.annotation.XmlElement(name="SortOption",
                                          required=true)
    public String getSortOption() {
      return(_SortOption);
    }
    /**
     * Sets the SortOption property
     * 
     * "DEFINITION: Liste sıralama opsiyonu. ASC ise artan, DES ise azalan sırada.
    "
     * 
     * @param value the new value for the property.
     * 
     * Throws IllegalArgumentException if the value is invalid.
     * 
     * The default value is: "ASC"
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getSortOption()
     * @see #resetSortOption()
     * @see #validateSortOption()
     **/
    public void setSortOption(String value) throws IllegalArgumentException {
      if ( _TrustClients == true )
      {
        _SortOption = value;
        return;
      }
      if ( value == null )
      {
        value = "";
      }
      if ( value.length() < 3 )
      {
        value += "   ".substring(0, 3-value.length());
      }
      value = value.toUpperCase();
      checkSortOption(value);
      _SortOption = value;
    }
    
    /**
     * Internal method to check values for the SortOption property.
     **/
    private  void checkSortOption( String value ) throws IllegalArgumentException 
    {
      if ( value.length() > 3 )
      {
        throw new IllegalArgumentException("Property ImpFilterIyy1List.SortOption cannot be more than 3 characters");
      }
      int x = value.length() - 1;
      while (x >= 0 && value.charAt(x) == ' ') x -= 1;
      value = value.substring(0,x+1);
      if ( !(((value.equals( "DES" )) || (value.equals( "ASC" ))) || (value.equals( "" ))) )
      {
throw new IllegalArgumentException("Permitted value violation for property ImpFilterIyy1List.SortOption value: '" + value + 
          "'");
      }
    }
    
    /**
     * Resets the SortOption property to its default value of "ASC".
     * @see #getSortOption()
     * @see #setSortOption(String)
     * @see #validateSortOption()
     **/
    public  void resetSortOption()
    {
      _SortOption = "ASC";
    }
    
    /**
     * Validates the current SortOption property value.
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getSortOption()
     * @see #setSortOption(String)
     * @see #resetSortOption()
     **/
    public  void validateSortOption() throws IllegalArgumentException 
    {
      checkSortOption(_SortOption);
    }
    
    /**
     * Internal storage for ScrollType property.
     **/
    private String _ScrollType = "L";
    /**
     * Gets the ScrollType property
     * 
     * "DEFINITION: Liste sayfalama opsiyonu. L ise kayıt atlamadan, S ise ilk kayıt hariç, SCROLL_AMOUNT kadar kayıt seçer. 
    "
     * 
     * @return a String containing the value
     * 
     * The default value is: "L"
     * 
     * @see #setScrollType(String)
     * @see #resetScrollType()
     * @see #validateScrollType()
     **/
    @javax.xml.bind.annotation.XmlElement(name="ScrollType",
                                          required=true)
    public String getScrollType() {
      return(_ScrollType);
    }
    /**
     * Sets the ScrollType property
     * 
     * "DEFINITION: Liste sayfalama opsiyonu. L ise kayıt atlamadan, S ise ilk kayıt hariç, SCROLL_AMOUNT kadar kayıt seçer. 
    "
     * 
     * @param value the new value for the property.
     * 
     * Throws IllegalArgumentException if the value is invalid.
     * 
     * The default value is: "L"
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getScrollType()
     * @see #resetScrollType()
     * @see #validateScrollType()
     **/
    public void setScrollType(String value) throws IllegalArgumentException {
      if ( _TrustClients == true )
      {
        _ScrollType = value;
        return;
      }
      if ( value == null )
      {
        value = "";
      }
      if ( value.length() < 1 )
      {
        value += " ".substring(0, 1-value.length());
      }
      value = value.toUpperCase();
      checkScrollType(value);
      _ScrollType = value;
    }
    
    /**
     * Internal method to check values for the ScrollType property.
     **/
    private  void checkScrollType( String value ) throws IllegalArgumentException 
    {
      if ( value.length() > 1 )
      {
        throw new IllegalArgumentException("Property ImpFilterIyy1List.ScrollType cannot be more than 1 characters");
      }
      int x = value.length() - 1;
      while (x >= 0 && value.charAt(x) == ' ') x -= 1;
      value = value.substring(0,x+1);
      if ( !(((value.equals( "S" )) || (value.equals( "L" ))) || (value.equals( "" ))) )
      {
throw new IllegalArgumentException("Permitted value violation for property ImpFilterIyy1List.ScrollType value: '" + value + 
          "'");
      }
    }
    
    /**
     * Resets the ScrollType property to its default value of "L".
     * @see #getScrollType()
     * @see #setScrollType(String)
     * @see #validateScrollType()
     **/
    public  void resetScrollType()
    {
      _ScrollType = "L";
    }
    
    /**
     * Validates the current ScrollType property value.
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getScrollType()
     * @see #setScrollType(String)
     * @see #resetScrollType()
     **/
    public  void validateScrollType() throws IllegalArgumentException 
    {
      checkScrollType(_ScrollType);
    }
    
    /**
     * Internal storage for ListDirection property.
     **/
    private String _ListDirection = "N";
    /**
     * Gets the ListDirection property
     * 
     * "DEFINITION: Liste yönü. N: İleri, P: Geri
    "
     * 
     * @return a String containing the value
     * 
     * The default value is: "N"
     * 
     * @see #setListDirection(String)
     * @see #resetListDirection()
     * @see #validateListDirection()
     **/
    @javax.xml.bind.annotation.XmlElement(name="ListDirection",
                                          required=true)
    public String getListDirection() {
      return(_ListDirection);
    }
    /**
     * Sets the ListDirection property
     * 
     * "DEFINITION: Liste yönü. N: İleri, P: Geri
    "
     * 
     * @param value the new value for the property.
     * 
     * Throws IllegalArgumentException if the value is invalid.
     * 
     * The default value is: "N"
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getListDirection()
     * @see #resetListDirection()
     * @see #validateListDirection()
     **/
    public void setListDirection(String value) throws IllegalArgumentException {
      if ( _TrustClients == true )
      {
        _ListDirection = value;
        return;
      }
      if ( value == null )
      {
        value = "";
      }
      if ( value.length() < 1 )
      {
        value += " ".substring(0, 1-value.length());
      }
      value = value.toUpperCase();
      checkListDirection(value);
      _ListDirection = value;
    }
    
    /**
     * Internal method to check values for the ListDirection property.
     **/
    private  void checkListDirection( String value ) throws IllegalArgumentException 
    {
      if ( value.length() > 1 )
      {
        throw new IllegalArgumentException("Property ImpFilterIyy1List.ListDirection cannot be more than 1 characters");
      }
      int x = value.length() - 1;
      while (x >= 0 && value.charAt(x) == ' ') x -= 1;
      value = value.substring(0,x+1);
      if ( !(((value.equals( "N" )) || (value.equals( "P" ))) || (value.equals( "" ))) )
      {
        throw new IllegalArgumentException("Permitted value violation for property ImpFilterIyy1List.ListDirection value: '" + value 
          + "'");
      }
    }
    
    /**
     * Resets the ListDirection property to its default value of "N".
     * @see #getListDirection()
     * @see #setListDirection(String)
     * @see #validateListDirection()
     **/
    public  void resetListDirection()
    {
      _ListDirection = "N";
    }
    
    /**
     * Validates the current ListDirection property value.
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getListDirection()
     * @see #setListDirection(String)
     * @see #resetListDirection()
     **/
    public  void validateListDirection() throws IllegalArgumentException 
    {
      checkListDirection(_ListDirection);
    }
    
    /**
     * Internal storage for ScrollAmount property.
     **/
    private int _ScrollAmount = 0;
    /**
     * Gets the ScrollAmount property
     * 
     * "DEFINITION: 'List Server' yordamının bir sonraki sayfa için kaç kayıt seçmesi gerektiğini belirler.
    "
     * 
     * @return a int containing the value
     * 
     * The default value is: 0
     * 
     * @see #setScrollAmount(int)
     * @see #resetScrollAmount()
     * @see #validateScrollAmount()
     **/
    @javax.xml.bind.annotation.XmlElement(name="ScrollAmount",
                                          required=true)
    public int getScrollAmount() {
      return(_ScrollAmount);
    }
    /**
     * Sets the ScrollAmount property
     * 
     * "DEFINITION: 'List Server' yordamının bir sonraki sayfa için kaç kayıt seçmesi gerektiğini belirler.
    "
     * 
     * @param value the new value for the property.
     * 
     * Throws IllegalArgumentException if the value is invalid.
     * 
     * The default value is: 0
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getScrollAmount()
     * @see #resetScrollAmount()
     * @see #validateScrollAmount()
     **/
    public void setScrollAmount(int value) throws IllegalArgumentException {
      if ( _TrustClients == true )
      {
        _ScrollAmount = value;
        return;
      }
      checkScrollAmount(value);
      _ScrollAmount = value;
    }
    
    /**
     * Internal method to check values for the ScrollAmount property.
     **/
    private  void checkScrollAmount( int value ) throws IllegalArgumentException 
    {
      if ( Math.abs(value) >= 100000 )
      {
        throw new IllegalArgumentException("Property ImpFilterIyy1List.ScrollAmount cannot be more than 5 digits");
      }
    }
    
    /**
     * Resets the ScrollAmount property to its default value of 0.
     * @see #getScrollAmount()
     * @see #setScrollAmount(int)
     * @see #validateScrollAmount()
     **/
    public  void resetScrollAmount()
    {
      _ScrollAmount = 0;
    }
    
    /**
     * Validates the current ScrollAmount property value.
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getScrollAmount()
     * @see #setScrollAmount(int)
     * @see #resetScrollAmount()
     **/
    public  void validateScrollAmount() throws IllegalArgumentException 
    {
      checkScrollAmount(_ScrollAmount);
    }
    
    /**
     * Internal storage for OrderByFieldNum property.
     **/
    private short _OrderByFieldNum = (short)1;
    /**
     * Gets the OrderByFieldNum property
     * 
     * "Bu saha imp_from ile belirtilen key sahalarından hangisine göre order by yapılacağını belirtir. (İlgili metodun 
      açıklamasında hangi field için ne olması gerektiği olmalı.)
    "
     * 
     * @return a short containing the value
     * 
     * The default value is: 1
     * 
     * @see #setOrderByFieldNum(short)
     * @see #resetOrderByFieldNum()
     * @see #validateOrderByFieldNum()
     **/
    @javax.xml.bind.annotation.XmlElement(name="OrderByFieldNum",
                                          required=true)
    public short getOrderByFieldNum() {
      return(_OrderByFieldNum);
    }
    /**
     * Sets the OrderByFieldNum property
     * 
     * "Bu saha imp_from ile belirtilen key sahalarından hangisine göre order by yapılacağını belirtir. (İlgili metodun 
      açıklamasında hangi field için ne olması gerektiği olmalı.)
    "
     * 
     * @param value the new value for the property.
     * 
     * Throws IllegalArgumentException if the value is invalid.
     * 
     * The default value is: 1
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getOrderByFieldNum()
     * @see #resetOrderByFieldNum()
     * @see #validateOrderByFieldNum()
     **/
    public void setOrderByFieldNum(short value) throws IllegalArgumentException {
      if ( _TrustClients == true )
      {
        _OrderByFieldNum = value;
        return;
      }
      checkOrderByFieldNum(value);
      _OrderByFieldNum = value;
    }
    
    /**
     * Internal method to check values for the OrderByFieldNum property.
     **/
    private  void checkOrderByFieldNum( short value ) throws IllegalArgumentException 
    {
      if ( Math.abs(value) >= 10 )
      {
        throw new IllegalArgumentException("Property ImpFilterIyy1List.OrderByFieldNum cannot be more than 1 digits");
      }
      if ( !((((((((((value == 1) || (value == 2)) || (value == 3)) || (value == 4)) || (value == 5)) || (value == 6)) || (value == 
        7)) || (value == 8)) || (value == 9)) || (value == 0)) )
      {
        throw new IllegalArgumentException("Permitted value violation for property ImpFilterIyy1List.OrderByFieldNum value: '" + 
          value + "'");
      }
    }
    
    /**
     * Resets the OrderByFieldNum property to its default value of 1.
     * @see #getOrderByFieldNum()
     * @see #setOrderByFieldNum(short)
     * @see #validateOrderByFieldNum()
     **/
    public  void resetOrderByFieldNum()
    {
      _OrderByFieldNum = (short)1;
    }
    
    /**
     * Validates the current OrderByFieldNum property value.
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getOrderByFieldNum()
     * @see #setOrderByFieldNum(short)
     * @see #resetOrderByFieldNum()
     **/
    public  void validateOrderByFieldNum() throws IllegalArgumentException 
    {
      checkOrderByFieldNum(_OrderByFieldNum);
    }
    
    /**
     * Resets the ImpFilterIyy1List class properties to all of their default values.
     **/
    public void reset()
    {
      resetSortOption();
      resetScrollType();
      resetListDirection();
      resetScrollAmount();
      resetOrderByFieldNum();
    }
    
    /**
     * Creates a copy of the instance.
     * 
     * @return A copy of the instance.
     **/
    @Override public Object clone()
    {
      ImpFilterIyy1List copy = new ImpFilterIyy1List(_TrustClients);
      copy._SortOption = _SortOption;
      copy._ScrollType = _ScrollType;
      copy._ListDirection = _ListDirection;
      copy._ScrollAmount = _ScrollAmount;
      copy._OrderByFieldNum = _OrderByFieldNum;
      return(copy);
    }
    
    /**
     * Validates all the property values on the instance.
     * @throws IllegalArgumentException Thrown if any property is invalid.
     **/
    public void validate()
    	throws IllegalArgumentException
    {
      validateSortOption();
      validateScrollType();
      validateListDirection();
      validateScrollAmount();
      validateOrderByFieldNum();
    }
    
    /**
     * Unserializes the ImpFilterIyy1List Entity View class from the ObjectInput.
     * @throws IOException Thrown If an I/O error has occurred.
     **/
    public void readExternal(ObjectInput in)
    	throws IOException
    {
      _TrustClients = in.readBoolean();
      _SortOption = in.readUTF();
      _ScrollType = in.readUTF();
      _ListDirection = in.readUTF();
      _ScrollAmount = in.readInt();
      _OrderByFieldNum = in.readShort();
    }
    
    /**
     * Serializes the ImpFilterIyy1List Entity View class from the ObjectOutput.
     * @throws IOException Thrown If an I/O error has occurred.
     **/
    public void writeExternal(ObjectOutput out)
    	throws IOException
    {
      out.writeBoolean(_TrustClients);
      out.writeUTF(_SortOption);
      out.writeUTF(_ScrollType);
      out.writeUTF(_ListDirection);
      out.writeInt(_ScrollAmount);
      out.writeShort(_OrderByFieldNum);
    }
    
    /**
     * Gets a String representation of the instance.
     * 
     * @return A String representation of the instance.
     **/
    @Override public String toString()
    {
      StringBuffer result = new StringBuffer();
      result.append("SortOption = \"" + _SortOption + "\"");
      result.append(", ScrollType = \"" + _ScrollType + "\"");
      result.append(", ListDirection = \"" + _ListDirection + "\"");
      result.append(", ScrollAmount = \"" + _ScrollAmount + "\"");
      result.append(", OrderByFieldNum = \"" + _OrderByFieldNum + "\"");
      return(result.toString());
    }
  };
  
  /**
   * Contains the data for the ImpFromType entity view.
   **/
  @javax.xml.bind.annotation.XmlType(name="",
            propOrder={          "tinstanceId",
              "tkeyAttrText",
            "tsearchAttrText"}
  )
  static public class ImpFromType  implements Externalizable, Cloneable
  {
    /**
     * Default Constructor.
     **/
    public ImpFromType()
    {
    }
    /**
     * Constructor.
     **/
    public ImpFromType(boolean TrustClients)
    {
      _TrustClients = TrustClients;
    }
    /**
     * Internal storage for TrustClients property.
     **/
    private boolean _TrustClients = false;
    @javax.xml.bind.annotation.XmlTransient
    public boolean getTrustClients() {
      return(_TrustClients);
    }
    
    public void setTrustClients(boolean value) {
      _TrustClients = value;
    }
    
    /**
     * Internal storage for TinstanceId property.
     **/
    private java.sql.Timestamp _TinstanceId = null;
    /**
     * Gets the TinstanceId property
     * 
     * "Instance id. Kayıt ilk yaratıldığında verilen ve silininceye kadar kaydı unique olarak belirleyen değer. Değer, 
      INSTANCE_ID_GENERATE ab tarafından verilir. 
    "
     * 
     * @return a java.sql.Timestamp containing the value or null
     * 
     * The default value is: null
     * 
     * @see #setTinstanceId(java.sql.Timestamp)
     * @see #resetTinstanceId()
     * @see #validateTinstanceId()
     **/
    @javax.xml.bind.annotation.XmlElement(name="TinstanceId",
                                          required=true)
    public java.sql.Timestamp getTinstanceId() {
      return(_TinstanceId);
    }
    /**
     * Sets the TinstanceId property
     * 
     * "Instance id. Kayıt ilk yaratıldığında verilen ve silininceye kadar kaydı unique olarak belirleyen değer. Değer, 
      INSTANCE_ID_GENERATE ab tarafından verilir. 
    "
     * 
     * @param value the new value for the property or null.
     * 
     * Throws IllegalArgumentException if the value is invalid.
     * 
     * The default value is: null
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getTinstanceId()
     * @see #resetTinstanceId()
     * @see #validateTinstanceId()
     **/
    public void setTinstanceId(java.sql.Timestamp value) throws IllegalArgumentException {
      if ( _TrustClients == true )
      {
        _TinstanceId = value;
        return;
      }
      checkTinstanceId(value);
      _TinstanceId = value;
    }
    
    /**
     * Internal method to check values for the TinstanceId property.
     **/
    private  void checkTinstanceId( java.sql.Timestamp value ) throws IllegalArgumentException 
    {
    }
    
    /**
     * Resets the TinstanceId property to its default value of null.
     * @see #getTinstanceId()
     * @see #setTinstanceId(java.sql.Timestamp)
     * @see #validateTinstanceId()
     **/
    public  void resetTinstanceId()
    {
      _TinstanceId = null;
    }
    
    /**
     * Validates the current TinstanceId property value.
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getTinstanceId()
     * @see #setTinstanceId(java.sql.Timestamp)
     * @see #resetTinstanceId()
     **/
    public  void validateTinstanceId() throws IllegalArgumentException 
    {
      checkTinstanceId(_TinstanceId);
    }
    
    /**
     * Internal storage for TkeyAttrText property.
     **/
    private String _TkeyAttrText = "    ";
    /**
     * Gets the TkeyAttrText property
     * 
     * "Key (Primary Identifier) attribute.
    "
     * 
     * @return a String containing the value
     * 
     * The default value is: "    "
     * 
     * @see #setTkeyAttrText(String)
     * @see #resetTkeyAttrText()
     * @see #validateTkeyAttrText()
     **/
    @javax.xml.bind.annotation.XmlElement(name="TkeyAttrText",
                                          required=true)
    public String getTkeyAttrText() {
      return(_TkeyAttrText);
    }
    /**
     * Sets the TkeyAttrText property
     * 
     * "Key (Primary Identifier) attribute.
    "
     * 
     * @param value the new value for the property.
     * 
     * Throws IllegalArgumentException if the value is invalid.
     * 
     * The default value is: "    "
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getTkeyAttrText()
     * @see #resetTkeyAttrText()
     * @see #validateTkeyAttrText()
     **/
    public void setTkeyAttrText(String value) throws IllegalArgumentException {
      if ( _TrustClients == true )
      {
        _TkeyAttrText = value;
        return;
      }
      if ( value == null )
      {
        value = "";
      }
      if ( value.length() < 4 )
      {
        value += "    ".substring(0, 4-value.length());
      }
      value = value.toUpperCase();
      checkTkeyAttrText(value);
      _TkeyAttrText = value;
    }
    
    /**
     * Internal method to check values for the TkeyAttrText property.
     **/
    private  void checkTkeyAttrText( String value ) throws IllegalArgumentException 
    {
      if ( value.length() > 4 )
      {
        throw new IllegalArgumentException("Property ImpFromType.TkeyAttrText cannot be more than 4 characters");
      }
    }
    
    /**
     * Resets the TkeyAttrText property to its default value of "    ".
     * @see #getTkeyAttrText()
     * @see #setTkeyAttrText(String)
     * @see #validateTkeyAttrText()
     **/
    public  void resetTkeyAttrText()
    {
      _TkeyAttrText = "    ";
    }
    
    /**
     * Validates the current TkeyAttrText property value.
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getTkeyAttrText()
     * @see #setTkeyAttrText(String)
     * @see #resetTkeyAttrText()
     **/
    public  void validateTkeyAttrText() throws IllegalArgumentException 
    {
      checkTkeyAttrText(_TkeyAttrText);
    }
    
    /**
     * Internal storage for TsearchAttrText property.
     **/
    private String _TsearchAttrText = "                    ";
    /**
     * Gets the TsearchAttrText property
     * 
     * "Search attribute.
    "
     * 
     * @return a String containing the value
     * 
     * The default value is: "                    "
     * 
     * @see #setTsearchAttrText(String)
     * @see #resetTsearchAttrText()
     * @see #validateTsearchAttrText()
     **/
    @javax.xml.bind.annotation.XmlElement(name="TsearchAttrText",
                                          required=true)
    public String getTsearchAttrText() {
      return(_TsearchAttrText);
    }
    /**
     * Sets the TsearchAttrText property
     * 
     * "Search attribute.
    "
     * 
     * @param value the new value for the property.
     * 
     * Throws IllegalArgumentException if the value is invalid.
     * 
     * The default value is: "                    "
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getTsearchAttrText()
     * @see #resetTsearchAttrText()
     * @see #validateTsearchAttrText()
     **/
    public void setTsearchAttrText(String value) throws IllegalArgumentException {
      if ( _TrustClients == true )
      {
        _TsearchAttrText = value;
        return;
      }
      if ( value == null )
      {
        value = "";
      }
      if ( value.length() < 20 )
      {
        value += "                    ".substring(0, 20-value.length());
      }
      value = value.toUpperCase();
      checkTsearchAttrText(value);
      _TsearchAttrText = value;
    }
    
    /**
     * Internal method to check values for the TsearchAttrText property.
     **/
    private  void checkTsearchAttrText( String value ) throws IllegalArgumentException 
    {
      if ( value.length() > 20 )
      {
        throw new IllegalArgumentException("Property ImpFromType.TsearchAttrText cannot be more than 20 characters");
      }
    }
    
    /**
     * Resets the TsearchAttrText property to its default value of "                    ".
     * @see #getTsearchAttrText()
     * @see #setTsearchAttrText(String)
     * @see #validateTsearchAttrText()
     **/
    public  void resetTsearchAttrText()
    {
      _TsearchAttrText = "                    ";
    }
    
    /**
     * Validates the current TsearchAttrText property value.
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getTsearchAttrText()
     * @see #setTsearchAttrText(String)
     * @see #resetTsearchAttrText()
     **/
    public  void validateTsearchAttrText() throws IllegalArgumentException 
    {
      checkTsearchAttrText(_TsearchAttrText);
    }
    
    /**
     * Resets the ImpFromType class properties to all of their default values.
     **/
    public void reset()
    {
      resetTinstanceId();
      resetTkeyAttrText();
      resetTsearchAttrText();
    }
    
    /**
     * Creates a copy of the instance.
     * 
     * @return A copy of the instance.
     **/
    @Override public Object clone()
    {
      ImpFromType copy = new ImpFromType(_TrustClients);
      copy._TinstanceId = _TinstanceId;
      copy._TkeyAttrText = _TkeyAttrText;
      copy._TsearchAttrText = _TsearchAttrText;
      return(copy);
    }
    
    /**
     * Validates all the property values on the instance.
     * @throws IllegalArgumentException Thrown if any property is invalid.
     **/
    public void validate()
    	throws IllegalArgumentException
    {
      validateTinstanceId();
      validateTkeyAttrText();
      validateTsearchAttrText();
    }
    
    /**
     * Unserializes the ImpFromType Entity View class from the ObjectInput.
     * @throws IOException Thrown If an I/O error has occurred.
     **/
    public void readExternal(ObjectInput in)
    	throws IOException
    {
      _TrustClients = in.readBoolean();
      if ( in.readBoolean() == true )
      {
        _TinstanceId = new java.sql.Timestamp(in.readInt(), in.readInt(), in.readInt(), in.readInt(), in.readInt(), in.readInt(), 
          in.readInt());
      }
      else 
      {
        _TinstanceId = null;
      }
      
      _TkeyAttrText = in.readUTF();
      _TsearchAttrText = in.readUTF();
    }
    
    /**
     * Serializes the ImpFromType Entity View class from the ObjectOutput.
     * @throws IOException Thrown If an I/O error has occurred.
     **/
    public void writeExternal(ObjectOutput out)
    	throws IOException
    {
      out.writeBoolean(_TrustClients);
      if ( _TinstanceId != null )
      {
        out.writeBoolean(true);
        out.writeInt(_TinstanceId.getYear());
        out.writeInt(_TinstanceId.getMonth());
        out.writeInt(_TinstanceId.getDate());
        out.writeInt(_TinstanceId.getHours());
        out.writeInt(_TinstanceId.getMinutes());
        out.writeInt(_TinstanceId.getSeconds());
        out.writeInt(_TinstanceId.getNanos());
      }
      else 
      {
        out.writeBoolean(false);
      }
      
      out.writeUTF(_TkeyAttrText);
      out.writeUTF(_TsearchAttrText);
    }
    
    /**
     * Gets a String representation of the instance.
     * 
     * @return A String representation of the instance.
     **/
    @Override public String toString()
    {
      StringBuffer result = new StringBuffer();
      if ( _TinstanceId == null )
      {
        result.append("TinstanceId = \"null\"");
      }
      
      else 
      {
        result.append("TinstanceId = \"" + _TinstanceId.toString() + "\"");
      }
      
      result.append(", TkeyAttrText = \"" + _TkeyAttrText + "\"");
      result.append(", TsearchAttrText = \"" + _TsearchAttrText + "\"");
      return(result.toString());
    }
  };
  
  /**
   * Contains the data for the ImpFilterStartType entity view.
   **/
  @javax.xml.bind.annotation.XmlType(name="",
            propOrder={          "tkeyAttrText"}
  )
  static public class ImpFilterStartType  implements Externalizable, Cloneable
  {
    /**
     * Default Constructor.
     **/
    public ImpFilterStartType()
    {
    }
    /**
     * Constructor.
     **/
    public ImpFilterStartType(boolean TrustClients)
    {
      _TrustClients = TrustClients;
    }
    /**
     * Internal storage for TrustClients property.
     **/
    private boolean _TrustClients = false;
    @javax.xml.bind.annotation.XmlTransient
    public boolean getTrustClients() {
      return(_TrustClients);
    }
    
    public void setTrustClients(boolean value) {
      _TrustClients = value;
    }
    
    /**
     * Internal storage for TkeyAttrText property.
     **/
    private String _TkeyAttrText = "    ";
    /**
     * Gets the TkeyAttrText property
     * 
     * "Key (Primary Identifier) attribute.
    "
     * 
     * @return a String containing the value
     * 
     * The default value is: "    "
     * 
     * @see #setTkeyAttrText(String)
     * @see #resetTkeyAttrText()
     * @see #validateTkeyAttrText()
     **/
    @javax.xml.bind.annotation.XmlElement(name="TkeyAttrText",
                                          required=true)
    public String getTkeyAttrText() {
      return(_TkeyAttrText);
    }
    /**
     * Sets the TkeyAttrText property
     * 
     * "Key (Primary Identifier) attribute.
    "
     * 
     * @param value the new value for the property.
     * 
     * Throws IllegalArgumentException if the value is invalid.
     * 
     * The default value is: "    "
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getTkeyAttrText()
     * @see #resetTkeyAttrText()
     * @see #validateTkeyAttrText()
     **/
    public void setTkeyAttrText(String value) throws IllegalArgumentException {
      if ( _TrustClients == true )
      {
        _TkeyAttrText = value;
        return;
      }
      if ( value == null )
      {
        value = "";
      }
      if ( value.length() < 4 )
      {
        value += "    ".substring(0, 4-value.length());
      }
      value = value.toUpperCase();
      checkTkeyAttrText(value);
      _TkeyAttrText = value;
    }
    
    /**
     * Internal method to check values for the TkeyAttrText property.
     **/
    private  void checkTkeyAttrText( String value ) throws IllegalArgumentException 
    {
      if ( value.length() > 4 )
      {
        throw new IllegalArgumentException("Property ImpFilterStartType.TkeyAttrText cannot be more than 4 characters");
      }
    }
    
    /**
     * Resets the TkeyAttrText property to its default value of "    ".
     * @see #getTkeyAttrText()
     * @see #setTkeyAttrText(String)
     * @see #validateTkeyAttrText()
     **/
    public  void resetTkeyAttrText()
    {
      _TkeyAttrText = "    ";
    }
    
    /**
     * Validates the current TkeyAttrText property value.
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getTkeyAttrText()
     * @see #setTkeyAttrText(String)
     * @see #resetTkeyAttrText()
     **/
    public  void validateTkeyAttrText() throws IllegalArgumentException 
    {
      checkTkeyAttrText(_TkeyAttrText);
    }
    
    /**
     * Resets the ImpFilterStartType class properties to all of their default values.
     **/
    public void reset()
    {
      resetTkeyAttrText();
    }
    
    /**
     * Creates a copy of the instance.
     * 
     * @return A copy of the instance.
     **/
    @Override public Object clone()
    {
      ImpFilterStartType copy = new ImpFilterStartType(_TrustClients);
      copy._TkeyAttrText = _TkeyAttrText;
      return(copy);
    }
    
    /**
     * Validates all the property values on the instance.
     * @throws IllegalArgumentException Thrown if any property is invalid.
     **/
    public void validate()
    	throws IllegalArgumentException
    {
      validateTkeyAttrText();
    }
    
    /**
     * Unserializes the ImpFilterStartType Entity View class from the ObjectInput.
     * @throws IOException Thrown If an I/O error has occurred.
     **/
    public void readExternal(ObjectInput in)
    	throws IOException
    {
      _TrustClients = in.readBoolean();
      _TkeyAttrText = in.readUTF();
    }
    
    /**
     * Serializes the ImpFilterStartType Entity View class from the ObjectOutput.
     * @throws IOException Thrown If an I/O error has occurred.
     **/
    public void writeExternal(ObjectOutput out)
    	throws IOException
    {
      out.writeBoolean(_TrustClients);
      out.writeUTF(_TkeyAttrText);
    }
    
    /**
     * Gets a String representation of the instance.
     * 
     * @return A String representation of the instance.
     **/
    @Override public String toString()
    {
      StringBuffer result = new StringBuffer();
      result.append("TkeyAttrText = \"" + _TkeyAttrText + "\"");
      return(result.toString());
    }
  };
  
  /**
   * Contains the data for the ImpFilterStopType entity view.
   **/
  @javax.xml.bind.annotation.XmlType(name="",
            propOrder={          "tkeyAttrText"}
  )
  static public class ImpFilterStopType  implements Externalizable, Cloneable
  {
    /**
     * Default Constructor.
     **/
    public ImpFilterStopType()
    {
    }
    /**
     * Constructor.
     **/
    public ImpFilterStopType(boolean TrustClients)
    {
      _TrustClients = TrustClients;
    }
    /**
     * Internal storage for TrustClients property.
     **/
    private boolean _TrustClients = false;
    @javax.xml.bind.annotation.XmlTransient
    public boolean getTrustClients() {
      return(_TrustClients);
    }
    
    public void setTrustClients(boolean value) {
      _TrustClients = value;
    }
    
    /**
     * Internal storage for TkeyAttrText property.
     **/
    private String _TkeyAttrText = "    ";
    /**
     * Gets the TkeyAttrText property
     * 
     * "Key (Primary Identifier) attribute.
    "
     * 
     * @return a String containing the value
     * 
     * The default value is: "    "
     * 
     * @see #setTkeyAttrText(String)
     * @see #resetTkeyAttrText()
     * @see #validateTkeyAttrText()
     **/
    @javax.xml.bind.annotation.XmlElement(name="TkeyAttrText",
                                          required=true)
    public String getTkeyAttrText() {
      return(_TkeyAttrText);
    }
    /**
     * Sets the TkeyAttrText property
     * 
     * "Key (Primary Identifier) attribute.
    "
     * 
     * @param value the new value for the property.
     * 
     * Throws IllegalArgumentException if the value is invalid.
     * 
     * The default value is: "    "
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getTkeyAttrText()
     * @see #resetTkeyAttrText()
     * @see #validateTkeyAttrText()
     **/
    public void setTkeyAttrText(String value) throws IllegalArgumentException {
      if ( _TrustClients == true )
      {
        _TkeyAttrText = value;
        return;
      }
      if ( value == null )
      {
        value = "";
      }
      if ( value.length() < 4 )
      {
        value += "    ".substring(0, 4-value.length());
      }
      value = value.toUpperCase();
      checkTkeyAttrText(value);
      _TkeyAttrText = value;
    }
    
    /**
     * Internal method to check values for the TkeyAttrText property.
     **/
    private  void checkTkeyAttrText( String value ) throws IllegalArgumentException 
    {
      if ( value.length() > 4 )
      {
        throw new IllegalArgumentException("Property ImpFilterStopType.TkeyAttrText cannot be more than 4 characters");
      }
    }
    
    /**
     * Resets the TkeyAttrText property to its default value of "    ".
     * @see #getTkeyAttrText()
     * @see #setTkeyAttrText(String)
     * @see #validateTkeyAttrText()
     **/
    public  void resetTkeyAttrText()
    {
      _TkeyAttrText = "    ";
    }
    
    /**
     * Validates the current TkeyAttrText property value.
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getTkeyAttrText()
     * @see #setTkeyAttrText(String)
     * @see #resetTkeyAttrText()
     **/
    public  void validateTkeyAttrText() throws IllegalArgumentException 
    {
      checkTkeyAttrText(_TkeyAttrText);
    }
    
    /**
     * Resets the ImpFilterStopType class properties to all of their default values.
     **/
    public void reset()
    {
      resetTkeyAttrText();
    }
    
    /**
     * Creates a copy of the instance.
     * 
     * @return A copy of the instance.
     **/
    @Override public Object clone()
    {
      ImpFilterStopType copy = new ImpFilterStopType(_TrustClients);
      copy._TkeyAttrText = _TkeyAttrText;
      return(copy);
    }
    
    /**
     * Validates all the property values on the instance.
     * @throws IllegalArgumentException Thrown if any property is invalid.
     **/
    public void validate()
    	throws IllegalArgumentException
    {
      validateTkeyAttrText();
    }
    
    /**
     * Unserializes the ImpFilterStopType Entity View class from the ObjectInput.
     * @throws IOException Thrown If an I/O error has occurred.
     **/
    public void readExternal(ObjectInput in)
    	throws IOException
    {
      _TrustClients = in.readBoolean();
      _TkeyAttrText = in.readUTF();
    }
    
    /**
     * Serializes the ImpFilterStopType Entity View class from the ObjectOutput.
     * @throws IOException Thrown If an I/O error has occurred.
     **/
    public void writeExternal(ObjectOutput out)
    	throws IOException
    {
      out.writeBoolean(_TrustClients);
      out.writeUTF(_TkeyAttrText);
    }
    
    /**
     * Gets a String representation of the instance.
     * 
     * @return A String representation of the instance.
     **/
    @Override public String toString()
    {
      StringBuffer result = new StringBuffer();
      result.append("TkeyAttrText = \"" + _TkeyAttrText + "\"");
      return(result.toString());
    }
  };
  
  /**
   * Contains the data for the ImpFilterType entity view.
   **/
  @javax.xml.bind.annotation.XmlType(name="",
            propOrder={          "tsearchAttrText",
            "totherAttrText"}
  )
  static public class ImpFilterType  implements Externalizable, Cloneable
  {
    /**
     * Default Constructor.
     **/
    public ImpFilterType()
    {
    }
    /**
     * Constructor.
     **/
    public ImpFilterType(boolean TrustClients)
    {
      _TrustClients = TrustClients;
    }
    /**
     * Internal storage for TrustClients property.
     **/
    private boolean _TrustClients = false;
    @javax.xml.bind.annotation.XmlTransient
    public boolean getTrustClients() {
      return(_TrustClients);
    }
    
    public void setTrustClients(boolean value) {
      _TrustClients = value;
    }
    
    /**
     * Internal storage for TsearchAttrText property.
     **/
    private String _TsearchAttrText = "                    ";
    /**
     * Gets the TsearchAttrText property
     * 
     * "Search attribute.
    "
     * 
     * @return a String containing the value
     * 
     * The default value is: "                    "
     * 
     * @see #setTsearchAttrText(String)
     * @see #resetTsearchAttrText()
     * @see #validateTsearchAttrText()
     **/
    @javax.xml.bind.annotation.XmlElement(name="TsearchAttrText",
                                          required=true)
    public String getTsearchAttrText() {
      return(_TsearchAttrText);
    }
    /**
     * Sets the TsearchAttrText property
     * 
     * "Search attribute.
    "
     * 
     * @param value the new value for the property.
     * 
     * Throws IllegalArgumentException if the value is invalid.
     * 
     * The default value is: "                    "
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getTsearchAttrText()
     * @see #resetTsearchAttrText()
     * @see #validateTsearchAttrText()
     **/
    public void setTsearchAttrText(String value) throws IllegalArgumentException {
      if ( _TrustClients == true )
      {
        _TsearchAttrText = value;
        return;
      }
      if ( value == null )
      {
        value = "";
      }
      if ( value.length() < 20 )
      {
        value += "                    ".substring(0, 20-value.length());
      }
      value = value.toUpperCase();
      checkTsearchAttrText(value);
      _TsearchAttrText = value;
    }
    
    /**
     * Internal method to check values for the TsearchAttrText property.
     **/
    private  void checkTsearchAttrText( String value ) throws IllegalArgumentException 
    {
      if ( value.length() > 20 )
      {
        throw new IllegalArgumentException("Property ImpFilterType.TsearchAttrText cannot be more than 20 characters");
      }
    }
    
    /**
     * Resets the TsearchAttrText property to its default value of "                    ".
     * @see #getTsearchAttrText()
     * @see #setTsearchAttrText(String)
     * @see #validateTsearchAttrText()
     **/
    public  void resetTsearchAttrText()
    {
      _TsearchAttrText = "                    ";
    }
    
    /**
     * Validates the current TsearchAttrText property value.
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getTsearchAttrText()
     * @see #setTsearchAttrText(String)
     * @see #resetTsearchAttrText()
     **/
    public  void validateTsearchAttrText() throws IllegalArgumentException 
    {
      checkTsearchAttrText(_TsearchAttrText);
    }
    
    /**
     * Internal storage for TotherAttrText property.
     **/
    private String _TotherAttrText = "  ";
    /**
     * Gets the TotherAttrText property
     * 
     * "Other attribute.
    "
     * 
     * @return a String containing the value
     * 
     * The default value is: "  "
     * 
     * @see #setTotherAttrText(String)
     * @see #resetTotherAttrText()
     * @see #validateTotherAttrText()
     **/
    @javax.xml.bind.annotation.XmlElement(name="TotherAttrText",
                                          required=true)
    public String getTotherAttrText() {
      return(_TotherAttrText);
    }
    /**
     * Sets the TotherAttrText property
     * 
     * "Other attribute.
    "
     * 
     * @param value the new value for the property.
     * 
     * Throws IllegalArgumentException if the value is invalid.
     * 
     * The default value is: "  "
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getTotherAttrText()
     * @see #resetTotherAttrText()
     * @see #validateTotherAttrText()
     **/
    public void setTotherAttrText(String value) throws IllegalArgumentException {
      if ( _TrustClients == true )
      {
        _TotherAttrText = value;
        return;
      }
      if ( value == null )
      {
        value = "";
      }
      if ( value.length() < 2 )
      {
        value += "  ".substring(0, 2-value.length());
      }
      value = value.toUpperCase();
      checkTotherAttrText(value);
      _TotherAttrText = value;
    }
    
    /**
     * Internal method to check values for the TotherAttrText property.
     **/
    private  void checkTotherAttrText( String value ) throws IllegalArgumentException 
    {
      if ( value.length() > 2 )
      {
        throw new IllegalArgumentException("Property ImpFilterType.TotherAttrText cannot be more than 2 characters");
      }
    }
    
    /**
     * Resets the TotherAttrText property to its default value of "  ".
     * @see #getTotherAttrText()
     * @see #setTotherAttrText(String)
     * @see #validateTotherAttrText()
     **/
    public  void resetTotherAttrText()
    {
      _TotherAttrText = "  ";
    }
    
    /**
     * Validates the current TotherAttrText property value.
     * 
     * @throws IllegalArgumentException Thrown if the value is invalid.
     * @see #getTotherAttrText()
     * @see #setTotherAttrText(String)
     * @see #resetTotherAttrText()
     **/
    public  void validateTotherAttrText() throws IllegalArgumentException 
    {
      checkTotherAttrText(_TotherAttrText);
    }
    
    /**
     * Resets the ImpFilterType class properties to all of their default values.
     **/
    public void reset()
    {
      resetTsearchAttrText();
      resetTotherAttrText();
    }
    
    /**
     * Creates a copy of the instance.
     * 
     * @return A copy of the instance.
     **/
    @Override public Object clone()
    {
      ImpFilterType copy = new ImpFilterType(_TrustClients);
      copy._TsearchAttrText = _TsearchAttrText;
      copy._TotherAttrText = _TotherAttrText;
      return(copy);
    }
    
    /**
     * Validates all the property values on the instance.
     * @throws IllegalArgumentException Thrown if any property is invalid.
     **/
    public void validate()
    	throws IllegalArgumentException
    {
      validateTsearchAttrText();
      validateTotherAttrText();
    }
    
    /**
     * Unserializes the ImpFilterType Entity View class from the ObjectInput.
     * @throws IOException Thrown If an I/O error has occurred.
     **/
    public void readExternal(ObjectInput in)
    	throws IOException
    {
      _TrustClients = in.readBoolean();
      _TsearchAttrText = in.readUTF();
      _TotherAttrText = in.readUTF();
    }
    
    /**
     * Serializes the ImpFilterType Entity View class from the ObjectOutput.
     * @throws IOException Thrown If an I/O error has occurred.
     **/
    public void writeExternal(ObjectOutput out)
    	throws IOException
    {
      out.writeBoolean(_TrustClients);
      out.writeUTF(_TsearchAttrText);
      out.writeUTF(_TotherAttrText);
    }
    
    /**
     * Gets a String representation of the instance.
     * 
     * @return A String representation of the instance.
     **/
    @Override public String toString()
    {
      StringBuffer result = new StringBuffer();
      result.append("TsearchAttrText = \"" + _TsearchAttrText + "\"");
      result.append(", TotherAttrText = \"" + _TotherAttrText + "\"");
      return(result.toString());
    }
  };
  
};



package gen.ort.yyy;

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
//
//                    Source Code Generated by
//                           CA Gen 8.6
//
//    Copyright (c) 2023 CA Technologies. All rights reserved.
//
//    Name: Cyy1s081TypeListImportWrapper    Date: 2023/07/05
//    User: HakanBal                         Time: 15:09:25
//
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// import Statements
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
import java.lang.*;
import java.io.*;
import com.ca.gen.vwrt.*;
import com.ca.gen.vwrt.types.*;
import gen.ort.yyy.*;

/**
 * Wraps a Cyy1s081TypeListImport class as an IImportWrapper. Allows for the generic access by runtimes and conversions. 
 * @see IImportWrapper
 * @see Cyy1s081TypeListImport
 * @see CYY1S081_IA
 **/
public class Cyy1s081TypeListImportWrapper  implements IImportWrapper, Serializable
{
  /**
   * Returns a Cyy1s081TypeListImportWrapper instance, wrapping a default Cyy1s081TypeListImport.
   **/
  public Cyy1s081TypeListImportWrapper()
  {
  }
  
  /**
   * Returns a Cyy1s081TypeListImportWrapper instance, wrapping the Cyy1s081TypeListImport instance parameter.
   **/
  public Cyy1s081TypeListImportWrapper(Object importView)
  {
    setImport((Cyy1s081TypeListImport)importView);
  }
  
  /**
   * Returns a Cyy1s081TypeListImportWrapper instance, wrapping a Cyy1s081TypeListImport instance initialized with the parameters.
   **/
  public Cyy1s081TypeListImportWrapper(IImportView ia, String command, String nextLocation, String clientId, String clientPassword, 
    String dialect, int exitState)
  {
    setIA(ia);
    setCommand(command);
    setNextLocation(nextLocation);
    setClientId(clientId);
    setClientPassword(clientPassword);
    setDialect(dialect);
    setExitState(exitState);
  }
  
  /**
   * Internal storage for the import view.
   **/
  private Cyy1s081TypeListImport importView = null;
  /**
   * Gets the import view property.
   **/
  public Object getImport()
  {
    if ( importView == null )
    {
      importView = new Cyy1s081TypeListImport();
    }
    return(importView);
  }
  
  /**
   * Sets the import view property.
   **/
  public void setImport(Object value)
  {
    importView = (Cyy1s081TypeListImport)value;
  }
  
  /**
   * Gets the import view command property.
   **/
  public String getCommand()
  {
    Cyy1s081TypeListImport importView = (Cyy1s081TypeListImport)getImport();
    return(importView.getCommand());
  }
  
  /**
   * Sets the import view command property.
   **/
  public void setCommand(String value)
  {
    Cyy1s081TypeListImport importView = (Cyy1s081TypeListImport)getImport();
    boolean saveTrustClients = importView.getTrustClients();
    importView.setTrustClients(true);
    if ( value == null )
    {
      importView.setCommand("");
    }
    else 
    {
      importView.setCommand(value);
    }
    importView.setTrustClients(saveTrustClients);
  }
  
  /**
   * Gets the import view nextLocation property.
   **/
  public String getNextLocation()
  {
    Cyy1s081TypeListImport importView = (Cyy1s081TypeListImport)getImport();
    return(importView.getNextLocation());
  }
  
  /**
   * Sets the import view next location property.
   **/
  public void setNextLocation(String value)
  {
    Cyy1s081TypeListImport importView = (Cyy1s081TypeListImport)getImport();
    boolean saveTrustClients = importView.getTrustClients();
    importView.setTrustClients(true);
    if ( value == null )
    {
      importView.setNextLocation("");
    }
    else 
    {
      importView.setNextLocation(value);
    }
    importView.setTrustClients(saveTrustClients);
  }
  
  /**
   * Gets the import view clientId property.
   **/
  public String getClientId()
  {
    Cyy1s081TypeListImport importView = (Cyy1s081TypeListImport)getImport();
    return(importView.getClientId());
  }
  
  /**
   * Sets the import view clientId property.
   **/
  public void setClientId(String value)
  {
    Cyy1s081TypeListImport importView = (Cyy1s081TypeListImport)getImport();
    boolean saveTrustClients = importView.getTrustClients();
    importView.setTrustClients(true);
    if ( value == null )
    {
      importView.setClientId("");
    }
    else 
    {
      importView.setClientId(value);
    }
    importView.setTrustClients(saveTrustClients);
  }
  
  /**
   * Gets the import view clientPassword property.
   **/
  public String getClientPassword()
  {
    Cyy1s081TypeListImport importView = (Cyy1s081TypeListImport)getImport();
    return(importView.getClientPassword());
  }
  
  /**
   * Sets the import view clientPassword property.
   **/
  public void setClientPassword(String value)
  {
    Cyy1s081TypeListImport importView = (Cyy1s081TypeListImport)getImport();
    boolean saveTrustClients = importView.getTrustClients();
    importView.setTrustClients(true);
    if ( value == null )
    {
      importView.setClientPassword("");
    }
    else 
    {
      importView.setClientPassword(value);
    }
    importView.setTrustClients(saveTrustClients);
  }
  
  /**
   * Gets the import view dialect property.
   **/
  public String getDialect()
  {
    Cyy1s081TypeListImport importView = (Cyy1s081TypeListImport)getImport();
    return(importView.getDialect());
  }
  
  /**
   * Sets the import view dialect property.
   **/
  public void setDialect(String value)
  {
    Cyy1s081TypeListImport importView = (Cyy1s081TypeListImport)getImport();
    boolean saveTrustClients = importView.getTrustClients();
    importView.setTrustClients(true);
    if ( value == null )
    {
      importView.setDialect("");
    }
    else 
    {
      importView.setDialect(value);
    }
    importView.setTrustClients(saveTrustClients);
  }
  
  /**
   * Gets the import view exitState property.
   **/
  public int getExitState()
  {
    Cyy1s081TypeListImport importView = (Cyy1s081TypeListImport)getImport();
    return(importView.getExitState());
  }
  
  /**
   * Sets the import view exitState property.
   **/
  public void setExitState(int value)
  {
    Cyy1s081TypeListImport importView = (Cyy1s081TypeListImport)getImport();
    boolean saveTrustClients = importView.getTrustClients();
    importView.setTrustClients(true);
    importView.setExitState(value);
    importView.setTrustClients(saveTrustClients);
  }
  
  /**
   * Returns a CYY1S081_IA instance based on the Cyy1s081TypeListImport import view instance.
   * No validation is performed during the mapping.
   **/
  public IImportView getIA()
  {
    CYY1S081_IA result = CYY1S081_IA.getInstance();
    
    Cyy1s081TypeListImport importView = (Cyy1s081TypeListImport)getImport();
    
    result.ImpCommandIyy1ComponentSendCommand = FixedStringAttr.valueOf(importView.getImpCommandIyy1Component().getSendCommand(), (
      short)8);
    result.ImpDialectIyy1ComponentDialectCd = FixedStringAttr.valueOf(importView.getImpDialectIyy1Component().getDialectCd(), (short)
      2);
    result.ImpIsc1AuthorizationInfoUserid = FixedStringAttr.valueOf(importView.getImpIsc1AuthorizationInfo().getUserid(), (short)20)
      ;
    result.ImpIsc1AuthorizationInfoTokenId = FixedStringAttr.valueOf(importView.getImpIsc1AuthorizationInfo().getTokenId(), (short)
      32);
    result.ImpIsc1AuthorizationInfoModuleId = FixedStringAttr.valueOf(importView.getImpIsc1AuthorizationInfo().getModuleId(), (short)
      20);
    result.ImpIsc1AuthorizationInfoAuthorityObjectId = FixedStringAttr.valueOf(importView.getImpIsc1AuthorizationInfo()
      .getAuthorityObjectId(), (short)20);
    result.ImpIsc1AuthorizationInfoVersion = FixedStringAttr.valueOf(importView.getImpIsc1AuthorizationInfo().getVersion(), (short)4)
      ;
    result.ImpIsc1AuthorizationInfoWorkingUnitNum = IntAttr.valueOf(importView.getImpIsc1AuthorizationInfo().getWorkingUnitNum());
    result.ImpFilterIyy1ListSortOption = FixedStringAttr.valueOf(importView.getImpFilterIyy1List().getSortOption(), (short)3);
    result.ImpFilterIyy1ListScrollType = FixedStringAttr.valueOf(importView.getImpFilterIyy1List().getScrollType(), (short)1);
    result.ImpFilterIyy1ListListDirection = FixedStringAttr.valueOf(importView.getImpFilterIyy1List().getListDirection(), (short)1);
    result.ImpFilterIyy1ListScrollAmount = IntAttr.valueOf(importView.getImpFilterIyy1List().getScrollAmount());
    result.ImpFilterIyy1ListOrderByFieldNum = ShortAttr.valueOf(importView.getImpFilterIyy1List().getOrderByFieldNum());
    result.ImpFromTypeTinstanceId = TimestampAttr.valueOf(importView.getImpFromType().getTinstanceId());
    result.ImpFromTypeTkeyAttrText = FixedStringAttr.valueOf(importView.getImpFromType().getTkeyAttrText(), (short)4);
    result.ImpFromTypeTsearchAttrText = FixedStringAttr.valueOf(importView.getImpFromType().getTsearchAttrText(), (short)20);
    result.ImpFilterStartTypeTkeyAttrText = FixedStringAttr.valueOf(importView.getImpFilterStartType().getTkeyAttrText(), (short)4);
    result.ImpFilterStopTypeTkeyAttrText = FixedStringAttr.valueOf(importView.getImpFilterStopType().getTkeyAttrText(), (short)4);
    result.ImpFilterTypeTsearchAttrText = FixedStringAttr.valueOf(importView.getImpFilterType().getTsearchAttrText(), (short)20);
    result.ImpFilterTypeTotherAttrText = FixedStringAttr.valueOf(importView.getImpFilterType().getTotherAttrText(), (short)2);
    return(result);
  }
  
  /**
   * Based on the CYY1S081_IA instance set the Cyy1s081TypeListImport import view instance.
   * No validation is performed during the mapping.
   **/
  public void setIA(IImportView value)
  {
    CYY1S081_IA view;
    Cyy1s081TypeListImport importView = (Cyy1s081TypeListImport)getImport();
    boolean saveTrustClients = importView.getTrustClients();
    importView.setTrustClients(true);
    if (value instanceof CYY1S081_IA) {
      view = (CYY1S081_IA)value;
    }
    else {
      view = CYY1S081_IA.getInstance();
      view.setFromVDF(value.getVDF());
    }
    importView.getImpCommandIyy1Component().setSendCommand(FixedStringAttr.toString(view.ImpCommandIyy1ComponentSendCommand, 8));
    importView.getImpDialectIyy1Component().setDialectCd(FixedStringAttr.toString(view.ImpDialectIyy1ComponentDialectCd, 2));
    importView.getImpIsc1AuthorizationInfo().setUserid(FixedStringAttr.toString(view.ImpIsc1AuthorizationInfoUserid, 20));
    importView.getImpIsc1AuthorizationInfo().setTokenId(FixedStringAttr.toString(view.ImpIsc1AuthorizationInfoTokenId, 32));
    importView.getImpIsc1AuthorizationInfo().setModuleId(FixedStringAttr.toString(view.ImpIsc1AuthorizationInfoModuleId, 20));
    importView.getImpIsc1AuthorizationInfo().setAuthorityObjectId(FixedStringAttr.toString(
      view.ImpIsc1AuthorizationInfoAuthorityObjectId, 20));
    importView.getImpIsc1AuthorizationInfo().setVersion(FixedStringAttr.toString(view.ImpIsc1AuthorizationInfoVersion, 4));
    importView.getImpIsc1AuthorizationInfo().setWorkingUnitNum(IntAttr.toInt(view.ImpIsc1AuthorizationInfoWorkingUnitNum));
    importView.getImpFilterIyy1List().setSortOption(FixedStringAttr.toString(view.ImpFilterIyy1ListSortOption, 3));
    importView.getImpFilterIyy1List().setScrollType(FixedStringAttr.toString(view.ImpFilterIyy1ListScrollType, 1));
    importView.getImpFilterIyy1List().setListDirection(FixedStringAttr.toString(view.ImpFilterIyy1ListListDirection, 1));
    importView.getImpFilterIyy1List().setScrollAmount(IntAttr.toInt(view.ImpFilterIyy1ListScrollAmount));
    importView.getImpFilterIyy1List().setOrderByFieldNum(ShortAttr.toShort(view.ImpFilterIyy1ListOrderByFieldNum));
    importView.getImpFromType().setTinstanceId(TimestampAttr.toSQLTimestamp(view.ImpFromTypeTinstanceId));
    importView.getImpFromType().setTkeyAttrText(FixedStringAttr.toString(view.ImpFromTypeTkeyAttrText, 4));
    importView.getImpFromType().setTsearchAttrText(FixedStringAttr.toString(view.ImpFromTypeTsearchAttrText, 20));
    importView.getImpFilterStartType().setTkeyAttrText(FixedStringAttr.toString(view.ImpFilterStartTypeTkeyAttrText, 4));
    importView.getImpFilterStopType().setTkeyAttrText(FixedStringAttr.toString(view.ImpFilterStopTypeTkeyAttrText, 4));
    importView.getImpFilterType().setTsearchAttrText(FixedStringAttr.toString(view.ImpFilterTypeTsearchAttrText, 20));
    importView.getImpFilterType().setTotherAttrText(FixedStringAttr.toString(view.ImpFilterTypeTotherAttrText, 2));
    importView.setTrustClients(saveTrustClients);
  }
  
};


package gen.ort.yyy;
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
//
//                    Source Code Generated by
//                           CA Gen 8.6
//
//    Copyright (c) 2023 CA Technologies. All rights reserved.
//
//    Name: CYY1S081_IA                      Date: 2023/07/05
//    User: HakanBal                         Time: 15:09:28
//
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// Import Statements
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
import java.lang.*;
import java.io.*;
import java.util.*;
import java.math.*;
import java.sql.*;
import com.ca.gen.vwrt.*;
import com.ca.gen.vwrt.types.*;
import com.ca.gen.vwrt.vdf.*;
import com.ca.gen.csu.exception.*;

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// START OF IMPORT VIEW
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
/**
 * Internal data view storage for: CYY1S081_IA
 **/
public class CYY1S081_IA extends ViewBase implements IImportView, Serializable
{
  static VDF localVdf = null;
  
  // Entity View: IMP_COMMAND
  //        Type: IYY1_COMPONENT
  /**
   * Attribute missing flag for: ImpCommandIyy1ComponentSendCommand
   **/
  public char ImpCommandIyy1ComponentSendCommand_AS;
  /**
   * Attribute for: ImpCommandIyy1ComponentSendCommand
   * Domain: Text
   * Length: 8
   * Varying Length: N
   **/
  public String ImpCommandIyy1ComponentSendCommand;
  // Entity View: IMP_DIALECT
  //        Type: IYY1_COMPONENT
  /**
   * Attribute missing flag for: ImpDialectIyy1ComponentDialectCd
   **/
  public char ImpDialectIyy1ComponentDialectCd_AS;
  /**
   * Attribute for: ImpDialectIyy1ComponentDialectCd
   * Domain: Text
   * Length: 2
   * Varying Length: N
   **/
  public String ImpDialectIyy1ComponentDialectCd;
  // Entity View: IMP
  //        Type: ISC1_AUTHORIZATION_INFO
  /**
   * Attribute missing flag for: ImpIsc1AuthorizationInfoUserid
   **/
  public char ImpIsc1AuthorizationInfoUserid_AS;
  /**
   * Attribute for: ImpIsc1AuthorizationInfoUserid
   * Domain: Text
   * Length: 20
   * Varying Length: N
   **/
  public String ImpIsc1AuthorizationInfoUserid;
  /**
   * Attribute missing flag for: ImpIsc1AuthorizationInfoTokenId
   **/
  public char ImpIsc1AuthorizationInfoTokenId_AS;
  /**
   * Attribute for: ImpIsc1AuthorizationInfoTokenId
   * Domain: Text
   * Length: 32
   * Varying Length: N
   **/
  public String ImpIsc1AuthorizationInfoTokenId;
  /**
   * Attribute missing flag for: ImpIsc1AuthorizationInfoModuleId
   **/
  public char ImpIsc1AuthorizationInfoModuleId_AS;
  /**
   * Attribute for: ImpIsc1AuthorizationInfoModuleId
   * Domain: Text
   * Length: 20
   * Varying Length: N
   **/
  public String ImpIsc1AuthorizationInfoModuleId;
  /**
   * Attribute missing flag for: ImpIsc1AuthorizationInfoAuthorityObjectId
   **/
  public char ImpIsc1AuthorizationInfoAuthorityObjectId_AS;
  /**
   * Attribute for: ImpIsc1AuthorizationInfoAuthorityObjectId
   * Domain: Text
   * Length: 20
   * Varying Length: N
   **/
  public String ImpIsc1AuthorizationInfoAuthorityObjectId;
  /**
   * Attribute missing flag for: ImpIsc1AuthorizationInfoVersion
   **/
  public char ImpIsc1AuthorizationInfoVersion_AS;
  /**
   * Attribute for: ImpIsc1AuthorizationInfoVersion
   * Domain: Text
   * Length: 4
   * Varying Length: N
   **/
  public String ImpIsc1AuthorizationInfoVersion;
  /**
   * Attribute missing flag for: ImpIsc1AuthorizationInfoWorkingUnitNum
   **/
  public char ImpIsc1AuthorizationInfoWorkingUnitNum_AS;
  /**
   * Attribute for: ImpIsc1AuthorizationInfoWorkingUnitNum
   * Domain: Number
   * Length: 5
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public int ImpIsc1AuthorizationInfoWorkingUnitNum;
  // Entity View: IMP_FILTER
  //        Type: IYY1_LIST
  /**
   * Attribute missing flag for: ImpFilterIyy1ListSortOption
   **/
  public char ImpFilterIyy1ListSortOption_AS;
  /**
   * Attribute for: ImpFilterIyy1ListSortOption
   * Domain: Text
   * Length: 3
   * Varying Length: N
   **/
  public String ImpFilterIyy1ListSortOption;
  /**
   * Attribute missing flag for: ImpFilterIyy1ListScrollType
   **/
  public char ImpFilterIyy1ListScrollType_AS;
  /**
   * Attribute for: ImpFilterIyy1ListScrollType
   * Domain: Text
   * Length: 1
   * Varying Length: N
   **/
  public String ImpFilterIyy1ListScrollType;
  /**
   * Attribute missing flag for: ImpFilterIyy1ListListDirection
   **/
  public char ImpFilterIyy1ListListDirection_AS;
  /**
   * Attribute for: ImpFilterIyy1ListListDirection
   * Domain: Text
   * Length: 1
   * Varying Length: N
   **/
  public String ImpFilterIyy1ListListDirection;
  /**
   * Attribute missing flag for: ImpFilterIyy1ListScrollAmount
   **/
  public char ImpFilterIyy1ListScrollAmount_AS;
  /**
   * Attribute for: ImpFilterIyy1ListScrollAmount
   * Domain: Number
   * Length: 5
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public int ImpFilterIyy1ListScrollAmount;
  /**
   * Attribute missing flag for: ImpFilterIyy1ListOrderByFieldNum
   **/
  public char ImpFilterIyy1ListOrderByFieldNum_AS;
  /**
   * Attribute for: ImpFilterIyy1ListOrderByFieldNum
   * Domain: Number
   * Length: 1
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public short ImpFilterIyy1ListOrderByFieldNum;
  // Entity View: IMP_FROM
  //        Type: TYPE
  /**
   * Attribute missing flag for: ImpFromTypeTinstanceId
   **/
  public char ImpFromTypeTinstanceId_AS;
  /**
   * Attribute for: ImpFromTypeTinstanceId
   * Domain: Timestamp
   * Length: 20
   **/
  public String ImpFromTypeTinstanceId;
  /**
   * Attribute missing flag for: ImpFromTypeTkeyAttrText
   **/
  public char ImpFromTypeTkeyAttrText_AS;
  /**
   * Attribute for: ImpFromTypeTkeyAttrText
   * Domain: Text
   * Length: 4
   * Varying Length: N
   **/
  public String ImpFromTypeTkeyAttrText;
  /**
   * Attribute missing flag for: ImpFromTypeTsearchAttrText
   **/
  public char ImpFromTypeTsearchAttrText_AS;
  /**
   * Attribute for: ImpFromTypeTsearchAttrText
   * Domain: Text
   * Length: 20
   * Varying Length: N
   **/
  public String ImpFromTypeTsearchAttrText;
  // Entity View: IMP_FILTER_START
  //        Type: TYPE
  /**
   * Attribute missing flag for: ImpFilterStartTypeTkeyAttrText
   **/
  public char ImpFilterStartTypeTkeyAttrText_AS;
  /**
   * Attribute for: ImpFilterStartTypeTkeyAttrText
   * Domain: Text
   * Length: 4
   * Varying Length: N
   **/
  public String ImpFilterStartTypeTkeyAttrText;
  // Entity View: IMP_FILTER_STOP
  //        Type: TYPE
  /**
   * Attribute missing flag for: ImpFilterStopTypeTkeyAttrText
   **/
  public char ImpFilterStopTypeTkeyAttrText_AS;
  /**
   * Attribute for: ImpFilterStopTypeTkeyAttrText
   * Domain: Text
   * Length: 4
   * Varying Length: N
   **/
  public String ImpFilterStopTypeTkeyAttrText;
  // Entity View: IMP_FILTER
  //        Type: TYPE
  /**
   * Attribute missing flag for: ImpFilterTypeTsearchAttrText
   **/
  public char ImpFilterTypeTsearchAttrText_AS;
  /**
   * Attribute for: ImpFilterTypeTsearchAttrText
   * Domain: Text
   * Length: 20
   * Varying Length: N
   **/
  public String ImpFilterTypeTsearchAttrText;
  /**
   * Attribute missing flag for: ImpFilterTypeTotherAttrText
   **/
  public char ImpFilterTypeTotherAttrText_AS;
  /**
   * Attribute for: ImpFilterTypeTotherAttrText
   * Domain: Text
   * Length: 2
   * Varying Length: N
   **/
  public String ImpFilterTypeTotherAttrText;
  /**
   * Default Constructor
   **/
  
  public CYY1S081_IA()
  {
    reset();
  }
  /**
   * Copy Constructor
   **/
  
  public CYY1S081_IA(CYY1S081_IA orig)
  {
    copyFrom(orig);
  }
  /**
   * Static instance creator function
   **/
  
  public static CYY1S081_IA getInstance()
  {
    return new CYY1S081_IA();
  }
  /**
   * Static free instance method
   **/
  
  public void freeInstance()
  {
  }
  /**
   * clone constructor
   **/
  
  @Override public Object clone()
  	throws CloneNotSupportedException
  {
    return(new CYY1S081_IA(this));
  }
  /**
   * Resets all properties to the defaults.
   **/
  
  public void reset()
  {
    ImpCommandIyy1ComponentSendCommand_AS = ' ';
    ImpCommandIyy1ComponentSendCommand = "        ";
    ImpDialectIyy1ComponentDialectCd_AS = ' ';
    ImpDialectIyy1ComponentDialectCd = "  ";
    ImpIsc1AuthorizationInfoUserid_AS = ' ';
    ImpIsc1AuthorizationInfoUserid = "                    ";
    ImpIsc1AuthorizationInfoTokenId_AS = ' ';
    ImpIsc1AuthorizationInfoTokenId = "                                ";
    ImpIsc1AuthorizationInfoModuleId_AS = ' ';
    ImpIsc1AuthorizationInfoModuleId = "                    ";
    ImpIsc1AuthorizationInfoAuthorityObjectId_AS = ' ';
    ImpIsc1AuthorizationInfoAuthorityObjectId = "                    ";
    ImpIsc1AuthorizationInfoVersion_AS = ' ';
    ImpIsc1AuthorizationInfoVersion = "    ";
    ImpIsc1AuthorizationInfoWorkingUnitNum_AS = ' ';
    ImpIsc1AuthorizationInfoWorkingUnitNum = 0;
    ImpFilterIyy1ListSortOption_AS = ' ';
    ImpFilterIyy1ListSortOption = "   ";
    ImpFilterIyy1ListScrollType_AS = ' ';
    ImpFilterIyy1ListScrollType = " ";
    ImpFilterIyy1ListListDirection_AS = ' ';
    ImpFilterIyy1ListListDirection = " ";
    ImpFilterIyy1ListScrollAmount_AS = ' ';
    ImpFilterIyy1ListScrollAmount = 0;
    ImpFilterIyy1ListOrderByFieldNum_AS = ' ';
    ImpFilterIyy1ListOrderByFieldNum = 0;
    ImpFromTypeTinstanceId_AS = ' ';
    ImpFromTypeTinstanceId = "00000000000000000000";
    ImpFromTypeTkeyAttrText_AS = ' ';
    ImpFromTypeTkeyAttrText = "    ";
    ImpFromTypeTsearchAttrText_AS = ' ';
    ImpFromTypeTsearchAttrText = "                    ";
    ImpFilterStartTypeTkeyAttrText_AS = ' ';
    ImpFilterStartTypeTkeyAttrText = "    ";
    ImpFilterStopTypeTkeyAttrText_AS = ' ';
    ImpFilterStopTypeTkeyAttrText = "    ";
    ImpFilterTypeTsearchAttrText_AS = ' ';
    ImpFilterTypeTsearchAttrText = "                    ";
    ImpFilterTypeTotherAttrText_AS = ' ';
    ImpFilterTypeTotherAttrText = "  ";
  }
  /**
   * Gets the VDF array for the instance, initialized.
   **/
  
  public static VDF getViewDefinition()
  {
    if ( localVdf == null )
    {
      VDFEntry [] vdfEntries = {
        new VDFEntry((int)1, "", "ImpCommandIyy1Component", "Iyy1Component", "SendCommand", VDFEntry.TYPE_STRING, (short)1, (short)0,
           8, (short)0, null), 
        new VDFEntry((int)2, "", "ImpDialectIyy1Component", "Iyy1Component", "DialectCd", VDFEntry.TYPE_STRING, (short)1, (short)0, 
          2, (short)0, null), 
        new VDFEntry((int)3, "", "ImpIsc1AuthorizationInfo", "Isc1AuthorizationInfo", "Userid", VDFEntry.TYPE_STRING, (short)1, (
          short)0, 20, (short)0, null), 
        new VDFEntry((int)4, "", "ImpIsc1AuthorizationInfo", "Isc1AuthorizationInfo", "TokenId", VDFEntry.TYPE_STRING, (short)1, (
          short)0, 32, (short)0, null), 
        new VDFEntry((int)5, "", "ImpIsc1AuthorizationInfo", "Isc1AuthorizationInfo", "ModuleId", VDFEntry.TYPE_STRING, (short)1, (
          short)0, 20, (short)0, null), 
        new VDFEntry((int)6, "", "ImpIsc1AuthorizationInfo", "Isc1AuthorizationInfo", "AuthorityObjectId", VDFEntry.TYPE_STRING, (
          short)1, (short)0, 20, (short)0, null), 
        new VDFEntry((int)7, "", "ImpIsc1AuthorizationInfo", "Isc1AuthorizationInfo", "Version", VDFEntry.TYPE_STRING, (short)1, (
          short)0, 4, (short)0, null), 
        new VDFEntry((int)8, "", "ImpIsc1AuthorizationInfo", "Isc1AuthorizationInfo", "WorkingUnitNum", VDFEntry.TYPE_INT, (short)1, 
          (short)0, 8, (short)0, null), 
        new VDFEntry((int)9, "", "ImpFilterIyy1List", "Iyy1List", "SortOption", VDFEntry.TYPE_STRING, (short)1, (short)0, 3, (short)
          0, null), 
        new VDFEntry((int)10, "", "ImpFilterIyy1List", "Iyy1List", "ScrollType", VDFEntry.TYPE_STRING, (short)1, (short)0, 1, (short)
          0, null), 
        new VDFEntry((int)11, "", "ImpFilterIyy1List", "Iyy1List", "ListDirection", VDFEntry.TYPE_STRING, (short)1, (short)0, 1, (
          short)0, null), 
        new VDFEntry((int)12, "", "ImpFilterIyy1List", "Iyy1List", "ScrollAmount", VDFEntry.TYPE_INT, (short)1, (short)0, 8, (short)
          0, null), 
        new VDFEntry((int)13, "", "ImpFilterIyy1List", "Iyy1List", "OrderByFieldNum", VDFEntry.TYPE_SHORT, (short)1, (short)0, 2, (
          short)0, null), 
        new VDFEntry((int)14, "", "ImpFromType", "Type", "TinstanceId", VDFEntry.TYPE_TIMESTAMP, (short)1, (short)0, 20, (short)0, 
          null), 
        new VDFEntry((int)15, "", "ImpFromType", "Type", "TkeyAttrText", VDFEntry.TYPE_STRING, (short)1, (short)0, 4, (short)0, null)
          , 
        new VDFEntry((int)16, "", "ImpFromType", "Type", "TsearchAttrText", VDFEntry.TYPE_STRING, (short)1, (short)0, 20, (short)0, 
          null), 
        new VDFEntry((int)17, "", "ImpFilterStartType", "Type", "TkeyAttrText", VDFEntry.TYPE_STRING, (short)1, (short)0, 4, (short)
          0, null), 
        new VDFEntry((int)18, "", "ImpFilterStopType", "Type", "TkeyAttrText", VDFEntry.TYPE_STRING, (short)1, (short)0, 4, (short)0,
           null), 
        new VDFEntry((int)19, "", "ImpFilterType", "Type", "TsearchAttrText", VDFEntry.TYPE_STRING, (short)1, (short)0, 20, (short)0,
           null), 
        new VDFEntry((int)20, "", "ImpFilterType", "Type", "TotherAttrText", VDFEntry.TYPE_STRING, (short)1, (short)0, 2, (short)0, 
          null), 
      };
      localVdf = new VDF(vdfEntries);
    }
    try {
      VDF result = (VDF)localVdf.clone();
      result.initViewData();
      return result;
    } catch( CloneNotSupportedException e ) {
      return null;
    }
  }
  
  /**
   * Gets the VDF version of the current state of the instance.
   **/
  public VDF getVDF()
  {
    VDF vdf = getViewDefinition();
    // predicate view item
    vdf.getEntries()[0].getDataValue().setObject(ImpCommandIyy1ComponentSendCommand);
    // predicate view item
    vdf.getEntries()[1].getDataValue().setObject(ImpDialectIyy1ComponentDialectCd);
    // predicate view item
    vdf.getEntries()[2].getDataValue().setObject(ImpIsc1AuthorizationInfoUserid);
    // predicate view item
    vdf.getEntries()[3].getDataValue().setObject(ImpIsc1AuthorizationInfoTokenId);
    // predicate view item
    vdf.getEntries()[4].getDataValue().setObject(ImpIsc1AuthorizationInfoModuleId);
    // predicate view item
    vdf.getEntries()[5].getDataValue().setObject(ImpIsc1AuthorizationInfoAuthorityObjectId);
    // predicate view item
    vdf.getEntries()[6].getDataValue().setObject(ImpIsc1AuthorizationInfoVersion);
    // predicate view item
    vdf.getEntries()[7].getDataValue().setObject(new Integer(ImpIsc1AuthorizationInfoWorkingUnitNum));
    // predicate view item
    vdf.getEntries()[8].getDataValue().setObject(ImpFilterIyy1ListSortOption);
    // predicate view item
    vdf.getEntries()[9].getDataValue().setObject(ImpFilterIyy1ListScrollType);
    // predicate view item
    vdf.getEntries()[10].getDataValue().setObject(ImpFilterIyy1ListListDirection);
    // predicate view item
    vdf.getEntries()[11].getDataValue().setObject(new Integer(ImpFilterIyy1ListScrollAmount));
    // predicate view item
    vdf.getEntries()[12].getDataValue().setObject(new Short(ImpFilterIyy1ListOrderByFieldNum));
    // predicate view item
    vdf.getEntries()[13].getDataValue().setObject(ImpFromTypeTinstanceId);
    // predicate view item
    vdf.getEntries()[14].getDataValue().setObject(ImpFromTypeTkeyAttrText);
    // predicate view item
    vdf.getEntries()[15].getDataValue().setObject(ImpFromTypeTsearchAttrText);
    // predicate view item
    vdf.getEntries()[16].getDataValue().setObject(ImpFilterStartTypeTkeyAttrText);
    // predicate view item
    vdf.getEntries()[17].getDataValue().setObject(ImpFilterStopTypeTkeyAttrText);
    // predicate view item
    vdf.getEntries()[18].getDataValue().setObject(ImpFilterTypeTsearchAttrText);
    // predicate view item
    vdf.getEntries()[19].getDataValue().setObject(ImpFilterTypeTotherAttrText);
    return(vdf);
  }
  
  /**
   * Sets the current state of the instance to the VDF version.
   **/
  public void setFromVDF(VDF vdf)
  {
    // predicate view item
    if ( vdf.getEntries()[0].getDataValue().getObject() != null )
    {
      ImpCommandIyy1ComponentSendCommand = ((String)vdf.getEntries()[0].getDataValue().getObject());
    }
    else 
    {
      ImpCommandIyy1ComponentSendCommand = "        ";
    }
    // predicate view item
    if ( vdf.getEntries()[1].getDataValue().getObject() != null )
    {
      ImpDialectIyy1ComponentDialectCd = ((String)vdf.getEntries()[1].getDataValue().getObject());
    }
    else 
    {
      ImpDialectIyy1ComponentDialectCd = "  ";
    }
    // predicate view item
    if ( vdf.getEntries()[2].getDataValue().getObject() != null )
    {
      ImpIsc1AuthorizationInfoUserid = ((String)vdf.getEntries()[2].getDataValue().getObject());
    }
    else 
    {
      ImpIsc1AuthorizationInfoUserid = "                    ";
    }
    // predicate view item
    if ( vdf.getEntries()[3].getDataValue().getObject() != null )
    {
      ImpIsc1AuthorizationInfoTokenId = ((String)vdf.getEntries()[3].getDataValue().getObject());
    }
    else 
    {
      ImpIsc1AuthorizationInfoTokenId = "                                ";
    }
    // predicate view item
    if ( vdf.getEntries()[4].getDataValue().getObject() != null )
    {
      ImpIsc1AuthorizationInfoModuleId = ((String)vdf.getEntries()[4].getDataValue().getObject());
    }
    else 
    {
      ImpIsc1AuthorizationInfoModuleId = "                    ";
    }
    // predicate view item
    if ( vdf.getEntries()[5].getDataValue().getObject() != null )
    {
      ImpIsc1AuthorizationInfoAuthorityObjectId = ((String)vdf.getEntries()[5].getDataValue().getObject());
    }
    else 
    {
      ImpIsc1AuthorizationInfoAuthorityObjectId = "                    ";
    }
    // predicate view item
    if ( vdf.getEntries()[6].getDataValue().getObject() != null )
    {
      ImpIsc1AuthorizationInfoVersion = ((String)vdf.getEntries()[6].getDataValue().getObject());
    }
    else 
    {
      ImpIsc1AuthorizationInfoVersion = "    ";
    }
    // predicate view item
    if ( vdf.getEntries()[7].getDataValue().getObject() != null )
    {
      ImpIsc1AuthorizationInfoWorkingUnitNum = ((Integer)vdf.getEntries()[7].getDataValue().getObject()).intValue();
    }
    else 
    {
      ImpIsc1AuthorizationInfoWorkingUnitNum = 0;
    }
    // predicate view item
    if ( vdf.getEntries()[8].getDataValue().getObject() != null )
    {
      ImpFilterIyy1ListSortOption = ((String)vdf.getEntries()[8].getDataValue().getObject());
    }
    else 
    {
      ImpFilterIyy1ListSortOption = "   ";
    }
    // predicate view item
    if ( vdf.getEntries()[9].getDataValue().getObject() != null )
    {
      ImpFilterIyy1ListScrollType = ((String)vdf.getEntries()[9].getDataValue().getObject());
    }
    else 
    {
      ImpFilterIyy1ListScrollType = " ";
    }
    // predicate view item
    if ( vdf.getEntries()[10].getDataValue().getObject() != null )
    {
      ImpFilterIyy1ListListDirection = ((String)vdf.getEntries()[10].getDataValue().getObject());
    }
    else 
    {
      ImpFilterIyy1ListListDirection = " ";
    }
    // predicate view item
    if ( vdf.getEntries()[11].getDataValue().getObject() != null )
    {
      ImpFilterIyy1ListScrollAmount = ((Integer)vdf.getEntries()[11].getDataValue().getObject()).intValue();
    }
    else 
    {
      ImpFilterIyy1ListScrollAmount = 0;
    }
    // predicate view item
    if ( vdf.getEntries()[12].getDataValue().getObject() != null )
    {
      ImpFilterIyy1ListOrderByFieldNum = ((Short)vdf.getEntries()[12].getDataValue().getObject()).shortValue();
    }
    else 
    {
      ImpFilterIyy1ListOrderByFieldNum = 0;
    }
    // predicate view item
    if ( vdf.getEntries()[13].getDataValue().getObject() != null )
    {
      ImpFromTypeTinstanceId = ((String)vdf.getEntries()[13].getDataValue().getObject());
    }
    else 
    {
      ImpFromTypeTinstanceId = "00000000000000000000";
    }
    // predicate view item
    if ( vdf.getEntries()[14].getDataValue().getObject() != null )
    {
      ImpFromTypeTkeyAttrText = ((String)vdf.getEntries()[14].getDataValue().getObject());
    }
    else 
    {
      ImpFromTypeTkeyAttrText = "    ";
    }
    // predicate view item
    if ( vdf.getEntries()[15].getDataValue().getObject() != null )
    {
      ImpFromTypeTsearchAttrText = ((String)vdf.getEntries()[15].getDataValue().getObject());
    }
    else 
    {
      ImpFromTypeTsearchAttrText = "                    ";
    }
    // predicate view item
    if ( vdf.getEntries()[16].getDataValue().getObject() != null )
    {
      ImpFilterStartTypeTkeyAttrText = ((String)vdf.getEntries()[16].getDataValue().getObject());
    }
    else 
    {
      ImpFilterStartTypeTkeyAttrText = "    ";
    }
    // predicate view item
    if ( vdf.getEntries()[17].getDataValue().getObject() != null )
    {
      ImpFilterStopTypeTkeyAttrText = ((String)vdf.getEntries()[17].getDataValue().getObject());
    }
    else 
    {
      ImpFilterStopTypeTkeyAttrText = "    ";
    }
    // predicate view item
    if ( vdf.getEntries()[18].getDataValue().getObject() != null )
    {
      ImpFilterTypeTsearchAttrText = ((String)vdf.getEntries()[18].getDataValue().getObject());
    }
    else 
    {
      ImpFilterTypeTsearchAttrText = "                    ";
    }
    // predicate view item
    if ( vdf.getEntries()[19].getDataValue().getObject() != null )
    {
      ImpFilterTypeTotherAttrText = ((String)vdf.getEntries()[19].getDataValue().getObject());
    }
    else 
    {
      ImpFilterTypeTotherAttrText = "  ";
    }
  }
  
  /**
   * Sets the current instance based on the passed view.
   **/
  public void copyFrom(IImportView orig)
  {
    this.copyFrom((CYY1S081_IA) orig);
  }
  
  /**
   * Sets the current instance based on the passed view.
   **/
  public void copyFrom(CYY1S081_IA orig)
  {
    ImpCommandIyy1ComponentSendCommand_AS = orig.ImpCommandIyy1ComponentSendCommand_AS;
    ImpCommandIyy1ComponentSendCommand = orig.ImpCommandIyy1ComponentSendCommand;
    ImpDialectIyy1ComponentDialectCd_AS = orig.ImpDialectIyy1ComponentDialectCd_AS;
    ImpDialectIyy1ComponentDialectCd = orig.ImpDialectIyy1ComponentDialectCd;
    ImpIsc1AuthorizationInfoUserid_AS = orig.ImpIsc1AuthorizationInfoUserid_AS;
    ImpIsc1AuthorizationInfoUserid = orig.ImpIsc1AuthorizationInfoUserid;
    ImpIsc1AuthorizationInfoTokenId_AS = orig.ImpIsc1AuthorizationInfoTokenId_AS;
    ImpIsc1AuthorizationInfoTokenId = orig.ImpIsc1AuthorizationInfoTokenId;
    ImpIsc1AuthorizationInfoModuleId_AS = orig.ImpIsc1AuthorizationInfoModuleId_AS;
    ImpIsc1AuthorizationInfoModuleId = orig.ImpIsc1AuthorizationInfoModuleId;
    ImpIsc1AuthorizationInfoAuthorityObjectId_AS = orig.ImpIsc1AuthorizationInfoAuthorityObjectId_AS;
    ImpIsc1AuthorizationInfoAuthorityObjectId = orig.ImpIsc1AuthorizationInfoAuthorityObjectId;
    ImpIsc1AuthorizationInfoVersion_AS = orig.ImpIsc1AuthorizationInfoVersion_AS;
    ImpIsc1AuthorizationInfoVersion = orig.ImpIsc1AuthorizationInfoVersion;
    ImpIsc1AuthorizationInfoWorkingUnitNum_AS = orig.ImpIsc1AuthorizationInfoWorkingUnitNum_AS;
    ImpIsc1AuthorizationInfoWorkingUnitNum = orig.ImpIsc1AuthorizationInfoWorkingUnitNum;
    ImpFilterIyy1ListSortOption_AS = orig.ImpFilterIyy1ListSortOption_AS;
    ImpFilterIyy1ListSortOption = orig.ImpFilterIyy1ListSortOption;
    ImpFilterIyy1ListScrollType_AS = orig.ImpFilterIyy1ListScrollType_AS;
    ImpFilterIyy1ListScrollType = orig.ImpFilterIyy1ListScrollType;
    ImpFilterIyy1ListListDirection_AS = orig.ImpFilterIyy1ListListDirection_AS;
    ImpFilterIyy1ListListDirection = orig.ImpFilterIyy1ListListDirection;
    ImpFilterIyy1ListScrollAmount_AS = orig.ImpFilterIyy1ListScrollAmount_AS;
    ImpFilterIyy1ListScrollAmount = orig.ImpFilterIyy1ListScrollAmount;
    ImpFilterIyy1ListOrderByFieldNum_AS = orig.ImpFilterIyy1ListOrderByFieldNum_AS;
    ImpFilterIyy1ListOrderByFieldNum = orig.ImpFilterIyy1ListOrderByFieldNum;
    ImpFromTypeTinstanceId_AS = orig.ImpFromTypeTinstanceId_AS;
    ImpFromTypeTinstanceId = orig.ImpFromTypeTinstanceId;
    ImpFromTypeTkeyAttrText_AS = orig.ImpFromTypeTkeyAttrText_AS;
    ImpFromTypeTkeyAttrText = orig.ImpFromTypeTkeyAttrText;
    ImpFromTypeTsearchAttrText_AS = orig.ImpFromTypeTsearchAttrText_AS;
    ImpFromTypeTsearchAttrText = orig.ImpFromTypeTsearchAttrText;
    ImpFilterStartTypeTkeyAttrText_AS = orig.ImpFilterStartTypeTkeyAttrText_AS;
    ImpFilterStartTypeTkeyAttrText = orig.ImpFilterStartTypeTkeyAttrText;
    ImpFilterStopTypeTkeyAttrText_AS = orig.ImpFilterStopTypeTkeyAttrText_AS;
    ImpFilterStopTypeTkeyAttrText = orig.ImpFilterStopTypeTkeyAttrText;
    ImpFilterTypeTsearchAttrText_AS = orig.ImpFilterTypeTsearchAttrText_AS;
    ImpFilterTypeTsearchAttrText = orig.ImpFilterTypeTsearchAttrText;
    ImpFilterTypeTotherAttrText_AS = orig.ImpFilterTypeTotherAttrText_AS;
    ImpFilterTypeTotherAttrText = orig.ImpFilterTypeTotherAttrText;
  }
}

package gen.ort.yyy;
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
//
//                    Source Code Generated by
//                           CA Gen 8.6
//
//    Copyright (c) 2023 CA Technologies. All rights reserved.
//
//    Name: CYY1S081_LA                      Date: 2023/07/05
//    User: HakanBal                         Time: 15:09:28
//
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// Import Statements
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
import java.lang.*;
import java.io.*;
import java.util.*;
import java.math.*;
import java.sql.*;
import com.ca.gen.vwrt.*;
import com.ca.gen.vwrt.types.*;
import com.ca.gen.vwrt.vdf.*;
import com.ca.gen.csu.exception.*;

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// START OF LOCAL VIEW
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
/**
 * Internal data view storage for: CYY1S081_LA
 **/
public class CYY1S081_LA extends ViewBase implements ILocalView, Serializable
{
  // Entity View: LOC_EXP_CLIENT
  //        Type: IXX1_CLIENT_RUNTIME_INFO
  /**
   * Attribute missing flag for: LocExpClientIxx1ClientRuntimeInfoTokenText
   **/
  public char LocExpClientIxx1ClientRuntimeInfoTokenText_AS;
  /**
   * Attribute for: LocExpClientIxx1ClientRuntimeInfoTokenText
   * Domain: Text
   * Length: 32
   * Varying Length: N
   **/
  public String LocExpClientIxx1ClientRuntimeInfoTokenText;
  /**
   * Attribute missing flag for: LocExpClientIxx1ClientRuntimeInfoWsNameText
   **/
  public char LocExpClientIxx1ClientRuntimeInfoWsNameText_AS;
  /**
   * Attribute for: LocExpClientIxx1ClientRuntimeInfoWsNameText
   * Domain: Text
   * Length: 10
   * Varying Length: N
   **/
  public String LocExpClientIxx1ClientRuntimeInfoWsNameText;
  /**
   * Attribute missing flag for: LocExpClientIxx1ClientRuntimeInfoWsIpAddrText
   **/
  public char LocExpClientIxx1ClientRuntimeInfoWsIpAddrText_AS;
  /**
   * Attribute for: LocExpClientIxx1ClientRuntimeInfoWsIpAddrText
   * Domain: Text
   * Length: 15
   * Varying Length: N
   **/
  public String LocExpClientIxx1ClientRuntimeInfoWsIpAddrText;
  /**
   * Attribute missing flag for: LocExpClientIxx1ClientRuntimeInfoWsLocalTs
   **/
  public char LocExpClientIxx1ClientRuntimeInfoWsLocalTs_AS;
  /**
   * Attribute for: LocExpClientIxx1ClientRuntimeInfoWsLocalTs
   * Domain: Timestamp
   * Length: 20
   **/
  public String LocExpClientIxx1ClientRuntimeInfoWsLocalTs;
  // Entity View: LOC_REFERENCE
  //        Type: IYY1_SERVER_DATA
  /**
   * Attribute missing flag for: LocReferenceIyy1ServerDataUserid
   **/
  public char LocReferenceIyy1ServerDataUserid_AS;
  /**
   * Attribute for: LocReferenceIyy1ServerDataUserid
   * Domain: Text
   * Length: 8
   * Varying Length: N
   **/
  public String LocReferenceIyy1ServerDataUserid;
  /**
   * Attribute missing flag for: LocReferenceIyy1ServerDataServerDate
   **/
  public char LocReferenceIyy1ServerDataServerDate_AS;
  /**
   * Attribute for: LocReferenceIyy1ServerDataServerDate
   * Domain: Date
   * Length: 8
   **/
  public int LocReferenceIyy1ServerDataServerDate;
  /**
   * Attribute missing flag for: LocReferenceIyy1ServerDataServerTime
   **/
  public char LocReferenceIyy1ServerDataServerTime_AS;
  /**
   * Attribute for: LocReferenceIyy1ServerDataServerTime
   * Domain: Time
   * Length: 6
   **/
  public int LocReferenceIyy1ServerDataServerTime;
  /**
   * Attribute missing flag for: LocReferenceIyy1ServerDataReferenceId
   **/
  public char LocReferenceIyy1ServerDataReferenceId_AS;
  /**
   * Attribute for: LocReferenceIyy1ServerDataReferenceId
   * Domain: Timestamp
   * Length: 20
   **/
  public String LocReferenceIyy1ServerDataReferenceId;
  /**
   * Attribute missing flag for: LocReferenceIyy1ServerDataServerTimestamp
   **/
  public char LocReferenceIyy1ServerDataServerTimestamp_AS;
  /**
   * Attribute for: LocReferenceIyy1ServerDataServerTimestamp
   * Domain: Timestamp
   * Length: 20
   **/
  public String LocReferenceIyy1ServerDataServerTimestamp;
  // Entity View: LOC_ERROR
  //        Type: ISC1_COMPONENT
  /**
   * Attribute missing flag for: LocErrorIsc1ComponentSeverityCode
   **/
  public char LocErrorIsc1ComponentSeverityCode_AS;
  /**
   * Attribute for: LocErrorIsc1ComponentSeverityCode
   * Domain: Text
   * Length: 1
   * Varying Length: N
   **/
  public String LocErrorIsc1ComponentSeverityCode;
  /**
   * Attribute missing flag for: LocErrorIsc1ComponentRollbackIndicator
   **/
  public char LocErrorIsc1ComponentRollbackIndicator_AS;
  /**
   * Attribute for: LocErrorIsc1ComponentRollbackIndicator
   * Domain: Text
   * Length: 1
   * Varying Length: N
   **/
  public String LocErrorIsc1ComponentRollbackIndicator;
  /**
   * Attribute missing flag for: LocErrorIsc1ComponentOriginServid
   **/
  public char LocErrorIsc1ComponentOriginServid_AS;
  /**
   * Attribute for: LocErrorIsc1ComponentOriginServid
   * Domain: Number
   * Length: 15
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public double LocErrorIsc1ComponentOriginServid;
  /**
   * Attribute missing flag for: LocErrorIsc1ComponentContextString
   **/
  public char LocErrorIsc1ComponentContextString_AS;
  /**
   * Attribute for: LocErrorIsc1ComponentContextString
   * Domain: Text
   * Length: 512
   * Varying Length: Y
   **/
  public String LocErrorIsc1ComponentContextString;
  /**
   * Attribute missing flag for: LocErrorIsc1ComponentReturnCode
   **/
  public char LocErrorIsc1ComponentReturnCode_AS;
  /**
   * Attribute for: LocErrorIsc1ComponentReturnCode
   * Domain: Number
   * Length: 5
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public int LocErrorIsc1ComponentReturnCode;
  /**
   * Attribute missing flag for: LocErrorIsc1ComponentReasonCode
   **/
  public char LocErrorIsc1ComponentReasonCode_AS;
  /**
   * Attribute for: LocErrorIsc1ComponentReasonCode
   * Domain: Number
   * Length: 5
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public int LocErrorIsc1ComponentReasonCode;
  /**
   * Attribute missing flag for: LocErrorIsc1ComponentChecksum
   **/
  public char LocErrorIsc1ComponentChecksum_AS;
  /**
   * Attribute for: LocErrorIsc1ComponentChecksum
   * Domain: Text
   * Length: 15
   * Varying Length: N
   **/
  public String LocErrorIsc1ComponentChecksum;
  // Repeating GV:  LOC_GROUP_CONTEXT
  //     Repeats: 9 times
  /**
   * Repeating group view count
   **/
  public int LocGroupContext_MA;
  /**
   * Repeating group view occurrance array
   **/
  public char LocGroupContext_AC[] = new char[9];
  // Entity View: LOC_G_CONTEXT
  //        Type: DONT_CHANGE_TEXT
  /**
   * Attribute missing flag for: LocGContextDontChangeTextText150
   **/
  public char LocGContextDontChangeTextText150_AS[] = new char[9];
  /**
   * Attribute for: LocGContextDontChangeTextText150
   * Domain: Text
   * Length: 150
   * Varying Length: N
   **/
  public String LocGContextDontChangeTextText150[] = new String[9];
  // Entity View: LOC_ERROR
  //        Type: IYY1_COMPONENT
  /**
   * Attribute missing flag for: LocErrorIyy1ComponentSeverityCode
   **/
  public char LocErrorIyy1ComponentSeverityCode_AS;
  /**
   * Attribute for: LocErrorIyy1ComponentSeverityCode
   * Domain: Text
   * Length: 1
   * Varying Length: N
   **/
  public String LocErrorIyy1ComponentSeverityCode;
  /**
   * Attribute missing flag for: LocErrorIyy1ComponentRollbackIndicator
   **/
  public char LocErrorIyy1ComponentRollbackIndicator_AS;
  /**
   * Attribute for: LocErrorIyy1ComponentRollbackIndicator
   * Domain: Text
   * Length: 1
   * Varying Length: N
   **/
  public String LocErrorIyy1ComponentRollbackIndicator;
  /**
   * Attribute missing flag for: LocErrorIyy1ComponentOriginServid
   **/
  public char LocErrorIyy1ComponentOriginServid_AS;
  /**
   * Attribute for: LocErrorIyy1ComponentOriginServid
   * Domain: Number
   * Length: 15
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public double LocErrorIyy1ComponentOriginServid;
  /**
   * Attribute missing flag for: LocErrorIyy1ComponentContextString
   **/
  public char LocErrorIyy1ComponentContextString_AS;
  /**
   * Attribute for: LocErrorIyy1ComponentContextString
   * Domain: Text
   * Length: 512
   * Varying Length: Y
   **/
  public String LocErrorIyy1ComponentContextString;
  /**
   * Attribute missing flag for: LocErrorIyy1ComponentReturnCode
   **/
  public char LocErrorIyy1ComponentReturnCode_AS;
  /**
   * Attribute for: LocErrorIyy1ComponentReturnCode
   * Domain: Number
   * Length: 5
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public int LocErrorIyy1ComponentReturnCode;
  /**
   * Attribute missing flag for: LocErrorIyy1ComponentReasonCode
   **/
  public char LocErrorIyy1ComponentReasonCode_AS;
  /**
   * Attribute for: LocErrorIyy1ComponentReasonCode
   * Domain: Number
   * Length: 5
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public int LocErrorIyy1ComponentReasonCode;
  /**
   * Attribute missing flag for: LocErrorIyy1ComponentChecksum
   **/
  public char LocErrorIyy1ComponentChecksum_AS;
  /**
   * Attribute for: LocErrorIyy1ComponentChecksum
   * Domain: Text
   * Length: 15
   * Varying Length: N
   **/
  public String LocErrorIyy1ComponentChecksum;
  // Entity View: LOC_CONTEXT
  //        Type: IYY1_COMPONENT
  /**
   * Attribute missing flag for: LocContextIyy1ComponentContextString
   **/
  public char LocContextIyy1ComponentContextString_AS;
  /**
   * Attribute for: LocContextIyy1ComponentContextString
   * Domain: Text
   * Length: 512
   * Varying Length: Y
   **/
  public String LocContextIyy1ComponentContextString;
  // Entity View: LOC
  //        Type: DONT_CHANGE_RETURN_CODES
  /**
   * Attribute missing flag for: LocDontChangeReturnCodesQ1Ok
   **/
  public char LocDontChangeReturnCodesQ1Ok_AS;
  /**
   * Attribute for: LocDontChangeReturnCodesQ1Ok
   * Domain: Number
   * Length: 5
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public int LocDontChangeReturnCodesQ1Ok;
  /**
   * Attribute missing flag for: LocDontChangeReturnCodesN1110UnauthorizedOperation
   **/
  public char LocDontChangeReturnCodesN1110UnauthorizedOperation_AS;
  /**
   * Attribute for: LocDontChangeReturnCodesN1110UnauthorizedOperation
   * Domain: Number
   * Length: 5
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public int LocDontChangeReturnCodesN1110UnauthorizedOperation;
  /**
   * Attribute missing flag for: LocDontChangeReturnCodesN1120InvalidCommand
   **/
  public char LocDontChangeReturnCodesN1120InvalidCommand_AS;
  /**
   * Attribute for: LocDontChangeReturnCodesN1120InvalidCommand
   * Domain: Number
   * Length: 5
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public int LocDontChangeReturnCodesN1120InvalidCommand;
  // Entity View: LOC
  //        Type: DONT_CHANGE_REASON_CODES
  /**
   * Attribute missing flag for: LocDontChangeReasonCodesQ1Default
   **/
  public char LocDontChangeReasonCodesQ1Default_AS;
  /**
   * Attribute for: LocDontChangeReasonCodesQ1Default
   * Domain: Number
   * Length: 5
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public int LocDontChangeReasonCodesQ1Default;
  /**
   * Default Constructor
   **/
  
  public CYY1S081_LA()
  {
    reset();
  }
  /**
   * Copy Constructor
   **/
  
  public CYY1S081_LA(CYY1S081_LA orig)
  {
    LocExpClientIxx1ClientRuntimeInfoTokenText_AS = orig.LocExpClientIxx1ClientRuntimeInfoTokenText_AS;
    LocExpClientIxx1ClientRuntimeInfoTokenText = orig.LocExpClientIxx1ClientRuntimeInfoTokenText;
    LocExpClientIxx1ClientRuntimeInfoWsNameText_AS = orig.LocExpClientIxx1ClientRuntimeInfoWsNameText_AS;
    LocExpClientIxx1ClientRuntimeInfoWsNameText = orig.LocExpClientIxx1ClientRuntimeInfoWsNameText;
    LocExpClientIxx1ClientRuntimeInfoWsIpAddrText_AS = orig.LocExpClientIxx1ClientRuntimeInfoWsIpAddrText_AS;
    LocExpClientIxx1ClientRuntimeInfoWsIpAddrText = orig.LocExpClientIxx1ClientRuntimeInfoWsIpAddrText;
    LocExpClientIxx1ClientRuntimeInfoWsLocalTs_AS = orig.LocExpClientIxx1ClientRuntimeInfoWsLocalTs_AS;
    LocExpClientIxx1ClientRuntimeInfoWsLocalTs = orig.LocExpClientIxx1ClientRuntimeInfoWsLocalTs;
    LocReferenceIyy1ServerDataUserid_AS = orig.LocReferenceIyy1ServerDataUserid_AS;
    LocReferenceIyy1ServerDataUserid = orig.LocReferenceIyy1ServerDataUserid;
    LocReferenceIyy1ServerDataServerDate_AS = orig.LocReferenceIyy1ServerDataServerDate_AS;
    LocReferenceIyy1ServerDataServerDate = orig.LocReferenceIyy1ServerDataServerDate;
    LocReferenceIyy1ServerDataServerTime_AS = orig.LocReferenceIyy1ServerDataServerTime_AS;
    LocReferenceIyy1ServerDataServerTime = orig.LocReferenceIyy1ServerDataServerTime;
    LocReferenceIyy1ServerDataReferenceId_AS = orig.LocReferenceIyy1ServerDataReferenceId_AS;
    LocReferenceIyy1ServerDataReferenceId = orig.LocReferenceIyy1ServerDataReferenceId;
    LocReferenceIyy1ServerDataServerTimestamp_AS = orig.LocReferenceIyy1ServerDataServerTimestamp_AS;
    LocReferenceIyy1ServerDataServerTimestamp = orig.LocReferenceIyy1ServerDataServerTimestamp;
    LocErrorIsc1ComponentSeverityCode_AS = orig.LocErrorIsc1ComponentSeverityCode_AS;
    LocErrorIsc1ComponentSeverityCode = orig.LocErrorIsc1ComponentSeverityCode;
    LocErrorIsc1ComponentRollbackIndicator_AS = orig.LocErrorIsc1ComponentRollbackIndicator_AS;
    LocErrorIsc1ComponentRollbackIndicator = orig.LocErrorIsc1ComponentRollbackIndicator;
    LocErrorIsc1ComponentOriginServid_AS = orig.LocErrorIsc1ComponentOriginServid_AS;
    LocErrorIsc1ComponentOriginServid = orig.LocErrorIsc1ComponentOriginServid;
    LocErrorIsc1ComponentContextString_AS = orig.LocErrorIsc1ComponentContextString_AS;
    LocErrorIsc1ComponentContextString = orig.LocErrorIsc1ComponentContextString;
    LocErrorIsc1ComponentReturnCode_AS = orig.LocErrorIsc1ComponentReturnCode_AS;
    LocErrorIsc1ComponentReturnCode = orig.LocErrorIsc1ComponentReturnCode;
    LocErrorIsc1ComponentReasonCode_AS = orig.LocErrorIsc1ComponentReasonCode_AS;
    LocErrorIsc1ComponentReasonCode = orig.LocErrorIsc1ComponentReasonCode;
    LocErrorIsc1ComponentChecksum_AS = orig.LocErrorIsc1ComponentChecksum_AS;
    LocErrorIsc1ComponentChecksum = orig.LocErrorIsc1ComponentChecksum;
    LocGroupContext_MA = orig.LocGroupContext_MA;
    System.arraycopy(orig.LocGroupContext_AC, 0, LocGroupContext_AC, 0, LocGroupContext_AC.length);
    System.arraycopy(orig.LocGContextDontChangeTextText150_AS, 0, LocGContextDontChangeTextText150_AS, 0, 
      LocGContextDontChangeTextText150_AS.length);
    System.arraycopy(orig.LocGContextDontChangeTextText150, 0, LocGContextDontChangeTextText150, 0, 
      LocGContextDontChangeTextText150.length);
    LocErrorIyy1ComponentSeverityCode_AS = orig.LocErrorIyy1ComponentSeverityCode_AS;
    LocErrorIyy1ComponentSeverityCode = orig.LocErrorIyy1ComponentSeverityCode;
    LocErrorIyy1ComponentRollbackIndicator_AS = orig.LocErrorIyy1ComponentRollbackIndicator_AS;
    LocErrorIyy1ComponentRollbackIndicator = orig.LocErrorIyy1ComponentRollbackIndicator;
    LocErrorIyy1ComponentOriginServid_AS = orig.LocErrorIyy1ComponentOriginServid_AS;
    LocErrorIyy1ComponentOriginServid = orig.LocErrorIyy1ComponentOriginServid;
    LocErrorIyy1ComponentContextString_AS = orig.LocErrorIyy1ComponentContextString_AS;
    LocErrorIyy1ComponentContextString = orig.LocErrorIyy1ComponentContextString;
    LocErrorIyy1ComponentReturnCode_AS = orig.LocErrorIyy1ComponentReturnCode_AS;
    LocErrorIyy1ComponentReturnCode = orig.LocErrorIyy1ComponentReturnCode;
    LocErrorIyy1ComponentReasonCode_AS = orig.LocErrorIyy1ComponentReasonCode_AS;
    LocErrorIyy1ComponentReasonCode = orig.LocErrorIyy1ComponentReasonCode;
    LocErrorIyy1ComponentChecksum_AS = orig.LocErrorIyy1ComponentChecksum_AS;
    LocErrorIyy1ComponentChecksum = orig.LocErrorIyy1ComponentChecksum;
    LocContextIyy1ComponentContextString_AS = orig.LocContextIyy1ComponentContextString_AS;
    LocContextIyy1ComponentContextString = orig.LocContextIyy1ComponentContextString;
    LocDontChangeReturnCodesQ1Ok_AS = orig.LocDontChangeReturnCodesQ1Ok_AS;
    LocDontChangeReturnCodesQ1Ok = orig.LocDontChangeReturnCodesQ1Ok;
    LocDontChangeReturnCodesN1110UnauthorizedOperation_AS = orig.LocDontChangeReturnCodesN1110UnauthorizedOperation_AS;
    LocDontChangeReturnCodesN1110UnauthorizedOperation = orig.LocDontChangeReturnCodesN1110UnauthorizedOperation;
    LocDontChangeReturnCodesN1120InvalidCommand_AS = orig.LocDontChangeReturnCodesN1120InvalidCommand_AS;
    LocDontChangeReturnCodesN1120InvalidCommand = orig.LocDontChangeReturnCodesN1120InvalidCommand;
    LocDontChangeReasonCodesQ1Default_AS = orig.LocDontChangeReasonCodesQ1Default_AS;
    LocDontChangeReasonCodesQ1Default = orig.LocDontChangeReasonCodesQ1Default;
  }
  /**
   * Static instance creator function
   **/
  
  public static CYY1S081_LA getInstance()
  {
    return new CYY1S081_LA();
  }
  /**
   * Static free instance method
   **/
  
  public void freeInstance()
  {
  }
  /**
   * clone constructor
   **/
  
  @Override public Object clone()
  	throws CloneNotSupportedException
  {
    return(new CYY1S081_LA(this));
  }
  /**
   * Resets all properties to the defaults.
   **/
  
  public void reset()
  {
    LocExpClientIxx1ClientRuntimeInfoTokenText_AS = ' ';
    LocExpClientIxx1ClientRuntimeInfoTokenText = "                                ";
    LocExpClientIxx1ClientRuntimeInfoWsNameText_AS = ' ';
    LocExpClientIxx1ClientRuntimeInfoWsNameText = "          ";
    LocExpClientIxx1ClientRuntimeInfoWsIpAddrText_AS = ' ';
    LocExpClientIxx1ClientRuntimeInfoWsIpAddrText = "               ";
    LocExpClientIxx1ClientRuntimeInfoWsLocalTs_AS = ' ';
    LocExpClientIxx1ClientRuntimeInfoWsLocalTs = "00000000000000000000";
    LocReferenceIyy1ServerDataUserid_AS = ' ';
    LocReferenceIyy1ServerDataUserid = "        ";
    LocReferenceIyy1ServerDataServerDate_AS = ' ';
    LocReferenceIyy1ServerDataServerDate = 00000000;
    LocReferenceIyy1ServerDataServerTime_AS = ' ';
    LocReferenceIyy1ServerDataServerTime = 00000000;
    LocReferenceIyy1ServerDataReferenceId_AS = ' ';
    LocReferenceIyy1ServerDataReferenceId = "00000000000000000000";
    LocReferenceIyy1ServerDataServerTimestamp_AS = ' ';
    LocReferenceIyy1ServerDataServerTimestamp = "00000000000000000000";
    LocErrorIsc1ComponentSeverityCode_AS = ' ';
    LocErrorIsc1ComponentSeverityCode = " ";
    LocErrorIsc1ComponentRollbackIndicator_AS = ' ';
    LocErrorIsc1ComponentRollbackIndicator = " ";
    LocErrorIsc1ComponentOriginServid_AS = ' ';
    LocErrorIsc1ComponentOriginServid = 0.0;
    LocErrorIsc1ComponentContextString_AS = ' ';
    LocErrorIsc1ComponentContextString = "";
    LocErrorIsc1ComponentReturnCode_AS = ' ';
    LocErrorIsc1ComponentReturnCode = 0;
    LocErrorIsc1ComponentReasonCode_AS = ' ';
    LocErrorIsc1ComponentReasonCode = 0;
    LocErrorIsc1ComponentChecksum_AS = ' ';
    LocErrorIsc1ComponentChecksum = "               ";
    LocGroupContext_MA = 0;
    for(int a = 0; a < 9; a++)
    {
      LocGroupContext_AC[a] = ' ';
      LocGContextDontChangeTextText150_AS[a] = ' ';
      LocGContextDontChangeTextText150[a] = 
"                                                                                                                                                      "
        ;
    }
    LocErrorIyy1ComponentSeverityCode_AS = ' ';
    LocErrorIyy1ComponentSeverityCode = " ";
    LocErrorIyy1ComponentRollbackIndicator_AS = ' ';
    LocErrorIyy1ComponentRollbackIndicator = " ";
    LocErrorIyy1ComponentOriginServid_AS = ' ';
    LocErrorIyy1ComponentOriginServid = 0.0;
    LocErrorIyy1ComponentContextString_AS = ' ';
    LocErrorIyy1ComponentContextString = "";
    LocErrorIyy1ComponentReturnCode_AS = ' ';
    LocErrorIyy1ComponentReturnCode = 0;
    LocErrorIyy1ComponentReasonCode_AS = ' ';
    LocErrorIyy1ComponentReasonCode = 0;
    LocErrorIyy1ComponentChecksum_AS = ' ';
    LocErrorIyy1ComponentChecksum = "               ";
    LocContextIyy1ComponentContextString_AS = ' ';
    LocContextIyy1ComponentContextString = "";
    LocDontChangeReturnCodesQ1Ok_AS = ' ';
    LocDontChangeReturnCodesQ1Ok = 0;
    LocDontChangeReturnCodesN1110UnauthorizedOperation_AS = ' ';
    LocDontChangeReturnCodesN1110UnauthorizedOperation = 0;
    LocDontChangeReturnCodesN1120InvalidCommand_AS = ' ';
    LocDontChangeReturnCodesN1120InvalidCommand = 0;
    LocDontChangeReasonCodesQ1Default_AS = ' ';
    LocDontChangeReasonCodesQ1Default = 0;
  }
}

package gen.ort.yyy;
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
//
//                    Source Code Generated by
//                           CA Gen 8.6
//
//    Copyright (c) 2023 CA Technologies. All rights reserved.
//
//    Name: CYY1S081_OA                      Date: 2023/07/05
//    User: HakanBal                         Time: 15:09:28
//
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// Import Statements
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
import java.lang.*;
import java.io.*;
import java.util.*;
import java.math.*;
import java.sql.*;
import com.ca.gen.vwrt.*;
import com.ca.gen.vwrt.types.*;
import com.ca.gen.vwrt.vdf.*;
import com.ca.gen.csu.exception.*;

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// START OF EXPORT VIEW
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
/**
 * Internal data view storage for: CYY1S081_OA
 **/
public class CYY1S081_OA extends ViewBase implements IExportView, Serializable
{
  static VDF localVdf = null;
  
  // Entity View: EXP_REFERENCE
  //        Type: IYY1_SERVER_DATA
  /**
   * Attribute missing flag for: ExpReferenceIyy1ServerDataServerDate
   **/
  public char ExpReferenceIyy1ServerDataServerDate_AS;
  /**
   * Dynamic attribute for: ExpReferenceIyy1ServerDataServerDate
   **/
  public DynamicAttr ExpReferenceIyy1ServerDataServerDate_AT;
  /**
   * Attribute for: ExpReferenceIyy1ServerDataServerDate
   * Domain: Date
   * Length: 8
   **/
  public int ExpReferenceIyy1ServerDataServerDate;
  /**
   * Attribute missing flag for: ExpReferenceIyy1ServerDataServerTime
   **/
  public char ExpReferenceIyy1ServerDataServerTime_AS;
  /**
   * Dynamic attribute for: ExpReferenceIyy1ServerDataServerTime
   **/
  public DynamicAttr ExpReferenceIyy1ServerDataServerTime_AT;
  /**
   * Attribute for: ExpReferenceIyy1ServerDataServerTime
   * Domain: Time
   * Length: 6
   **/
  public int ExpReferenceIyy1ServerDataServerTime;
  /**
   * Attribute missing flag for: ExpReferenceIyy1ServerDataReferenceId
   **/
  public char ExpReferenceIyy1ServerDataReferenceId_AS;
  /**
   * Dynamic attribute for: ExpReferenceIyy1ServerDataReferenceId
   **/
  public DynamicAttr ExpReferenceIyy1ServerDataReferenceId_AT;
  /**
   * Attribute for: ExpReferenceIyy1ServerDataReferenceId
   * Domain: Timestamp
   * Length: 20
   **/
  public String ExpReferenceIyy1ServerDataReferenceId;
  // Entity View: EXP
  //        Type: ISC1_AUTHORIZATION_INFO
  /**
   * Attribute missing flag for: ExpIsc1AuthorizationInfoTokenId
   **/
  public char ExpIsc1AuthorizationInfoTokenId_AS;
  /**
   * Dynamic attribute for: ExpIsc1AuthorizationInfoTokenId
   **/
  public DynamicAttr ExpIsc1AuthorizationInfoTokenId_AT;
  /**
   * Attribute for: ExpIsc1AuthorizationInfoTokenId
   * Domain: Text
   * Length: 32
   * Varying Length: N
   **/
  public String ExpIsc1AuthorizationInfoTokenId;
  /**
   * Attribute missing flag for: ExpIsc1AuthorizationInfoAuthorityInd
   **/
  public char ExpIsc1AuthorizationInfoAuthorityInd_AS;
  /**
   * Dynamic attribute for: ExpIsc1AuthorizationInfoAuthorityInd
   **/
  public DynamicAttr ExpIsc1AuthorizationInfoAuthorityInd_AT;
  /**
   * Attribute for: ExpIsc1AuthorizationInfoAuthorityInd
   * Domain: Text
   * Length: 1
   * Varying Length: N
   **/
  public String ExpIsc1AuthorizationInfoAuthorityInd;
  /**
   * Attribute missing flag for: ExpIsc1AuthorizationInfoAuthorityStatusR
   **/
  public char ExpIsc1AuthorizationInfoAuthorityStatusR_AS;
  /**
   * Dynamic attribute for: ExpIsc1AuthorizationInfoAuthorityStatusR
   **/
  public DynamicAttr ExpIsc1AuthorizationInfoAuthorityStatusR_AT;
  /**
   * Attribute for: ExpIsc1AuthorizationInfoAuthorityStatusR
   * Domain: Text
   * Length: 1
   * Varying Length: N
   **/
  public String ExpIsc1AuthorizationInfoAuthorityStatusR;
  /**
   * Attribute missing flag for: ExpIsc1AuthorizationInfoAuthorityStatusU
   **/
  public char ExpIsc1AuthorizationInfoAuthorityStatusU_AS;
  /**
   * Dynamic attribute for: ExpIsc1AuthorizationInfoAuthorityStatusU
   **/
  public DynamicAttr ExpIsc1AuthorizationInfoAuthorityStatusU_AT;
  /**
   * Attribute for: ExpIsc1AuthorizationInfoAuthorityStatusU
   * Domain: Text
   * Length: 1
   * Varying Length: N
   **/
  public String ExpIsc1AuthorizationInfoAuthorityStatusU;
  /**
   * Attribute missing flag for: ExpIsc1AuthorizationInfoAuthorityStatusD
   **/
  public char ExpIsc1AuthorizationInfoAuthorityStatusD_AS;
  /**
   * Dynamic attribute for: ExpIsc1AuthorizationInfoAuthorityStatusD
   **/
  public DynamicAttr ExpIsc1AuthorizationInfoAuthorityStatusD_AT;
  /**
   * Attribute for: ExpIsc1AuthorizationInfoAuthorityStatusD
   * Domain: Text
   * Length: 1
   * Varying Length: N
   **/
  public String ExpIsc1AuthorizationInfoAuthorityStatusD;
  /**
   * Attribute missing flag for: ExpIsc1AuthorizationInfoAuthorityStatusL
   **/
  public char ExpIsc1AuthorizationInfoAuthorityStatusL_AS;
  /**
   * Dynamic attribute for: ExpIsc1AuthorizationInfoAuthorityStatusL
   **/
  public DynamicAttr ExpIsc1AuthorizationInfoAuthorityStatusL_AT;
  /**
   * Attribute for: ExpIsc1AuthorizationInfoAuthorityStatusL
   * Domain: Text
   * Length: 1
   * Varying Length: N
   **/
  public String ExpIsc1AuthorizationInfoAuthorityStatusL;
  // Repeating GV:  EXP_GROUP_LIST
  //     Repeats: 48 times
  /**
   * Repeating group view count
   **/
  public int ExpGroupList_MA;
  /**
   * Repeating group view occurrance array
   **/
  public char ExpGroupList_AC[] = new char[48];
  // Entity View: EXP_G_LIST
  //        Type: TYPE
  /**
   * Attribute missing flag for: ExpGListTypeTinstanceId
   **/
  public char ExpGListTypeTinstanceId_AS[] = new char[48];
  /**
   * Dynamic attribute for: ExpGListTypeTinstanceId
   **/
  public DynamicAttr ExpGListTypeTinstanceId_AT[] = new DynamicAttr[48];
  /**
   * Attribute for: ExpGListTypeTinstanceId
   * Domain: Timestamp
   * Length: 20
   **/
  public String ExpGListTypeTinstanceId[] = new String[48];
  /**
   * Attribute missing flag for: ExpGListTypeTreferenceId
   **/
  public char ExpGListTypeTreferenceId_AS[] = new char[48];
  /**
   * Dynamic attribute for: ExpGListTypeTreferenceId
   **/
  public DynamicAttr ExpGListTypeTreferenceId_AT[] = new DynamicAttr[48];
  /**
   * Attribute for: ExpGListTypeTreferenceId
   * Domain: Timestamp
   * Length: 20
   **/
  public String ExpGListTypeTreferenceId[] = new String[48];
  /**
   * Attribute missing flag for: ExpGListTypeTcreateUserId
   **/
  public char ExpGListTypeTcreateUserId_AS[] = new char[48];
  /**
   * Dynamic attribute for: ExpGListTypeTcreateUserId
   **/
  public DynamicAttr ExpGListTypeTcreateUserId_AT[] = new DynamicAttr[48];
  /**
   * Attribute for: ExpGListTypeTcreateUserId
   * Domain: Text
   * Length: 8
   * Varying Length: N
   **/
  public String ExpGListTypeTcreateUserId[] = new String[48];
  /**
   * Attribute missing flag for: ExpGListTypeTupdateUserId
   **/
  public char ExpGListTypeTupdateUserId_AS[] = new char[48];
  /**
   * Dynamic attribute for: ExpGListTypeTupdateUserId
   **/
  public DynamicAttr ExpGListTypeTupdateUserId_AT[] = new DynamicAttr[48];
  /**
   * Attribute for: ExpGListTypeTupdateUserId
   * Domain: Text
   * Length: 8
   * Varying Length: N
   **/
  public String ExpGListTypeTupdateUserId[] = new String[48];
  /**
   * Attribute missing flag for: ExpGListTypeTkeyAttrText
   **/
  public char ExpGListTypeTkeyAttrText_AS[] = new char[48];
  /**
   * Dynamic attribute for: ExpGListTypeTkeyAttrText
   **/
  public DynamicAttr ExpGListTypeTkeyAttrText_AT[] = new DynamicAttr[48];
  /**
   * Attribute for: ExpGListTypeTkeyAttrText
   * Domain: Text
   * Length: 4
   * Varying Length: N
   **/
  public String ExpGListTypeTkeyAttrText[] = new String[48];
  /**
   * Attribute missing flag for: ExpGListTypeTsearchAttrText
   **/
  public char ExpGListTypeTsearchAttrText_AS[] = new char[48];
  /**
   * Dynamic attribute for: ExpGListTypeTsearchAttrText
   **/
  public DynamicAttr ExpGListTypeTsearchAttrText_AT[] = new DynamicAttr[48];
  /**
   * Attribute for: ExpGListTypeTsearchAttrText
   * Domain: Text
   * Length: 20
   * Varying Length: N
   **/
  public String ExpGListTypeTsearchAttrText[] = new String[48];
  /**
   * Attribute missing flag for: ExpGListTypeTotherAttrText
   **/
  public char ExpGListTypeTotherAttrText_AS[] = new char[48];
  /**
   * Dynamic attribute for: ExpGListTypeTotherAttrText
   **/
  public DynamicAttr ExpGListTypeTotherAttrText_AT[] = new DynamicAttr[48];
  /**
   * Attribute for: ExpGListTypeTotherAttrText
   * Domain: Text
   * Length: 2
   * Varying Length: N
   **/
  public String ExpGListTypeTotherAttrText[] = new String[48];
  /**
   * Attribute missing flag for: ExpGListTypeTotherAttrDate
   **/
  public char ExpGListTypeTotherAttrDate_AS[] = new char[48];
  /**
   * Dynamic attribute for: ExpGListTypeTotherAttrDate
   **/
  public DynamicAttr ExpGListTypeTotherAttrDate_AT[] = new DynamicAttr[48];
  /**
   * Attribute for: ExpGListTypeTotherAttrDate
   * Domain: Date
   * Length: 8
   **/
  public int ExpGListTypeTotherAttrDate[] = new int[48];
  /**
   * Attribute missing flag for: ExpGListTypeTotherAttrTime
   **/
  public char ExpGListTypeTotherAttrTime_AS[] = new char[48];
  /**
   * Dynamic attribute for: ExpGListTypeTotherAttrTime
   **/
  public DynamicAttr ExpGListTypeTotherAttrTime_AT[] = new DynamicAttr[48];
  /**
   * Attribute for: ExpGListTypeTotherAttrTime
   * Domain: Time
   * Length: 6
   **/
  public int ExpGListTypeTotherAttrTime[] = new int[48];
  /**
   * Attribute missing flag for: ExpGListTypeTotherAttrAmount
   **/
  public char ExpGListTypeTotherAttrAmount_AS[] = new char[48];
  /**
   * Dynamic attribute for: ExpGListTypeTotherAttrAmount
   **/
  public DynamicAttr ExpGListTypeTotherAttrAmount_AT[] = new DynamicAttr[48];
  /**
   * Attribute for: ExpGListTypeTotherAttrAmount
   * Domain: Number
   * Length: 17
   * Decimal Places: 2
   * Decimal Precision: Y
   **/
  public BigDecimal ExpGListTypeTotherAttrAmount[] = new BigDecimal[48];
  // Entity View: EXP_MSG
  //        Type: IYY1_COMPONENT
  /**
   * Attribute missing flag for: ExpMsgIyy1ComponentSeverityCode
   **/
  public char ExpMsgIyy1ComponentSeverityCode_AS;
  /**
   * Dynamic attribute for: ExpMsgIyy1ComponentSeverityCode
   **/
  public DynamicAttr ExpMsgIyy1ComponentSeverityCode_AT;
  /**
   * Attribute for: ExpMsgIyy1ComponentSeverityCode
   * Domain: Text
   * Length: 1
   * Varying Length: N
   **/
  public String ExpMsgIyy1ComponentSeverityCode;
  /**
   * Attribute missing flag for: ExpMsgIyy1ComponentMessageTx
   **/
  public char ExpMsgIyy1ComponentMessageTx_AS;
  /**
   * Dynamic attribute for: ExpMsgIyy1ComponentMessageTx
   **/
  public DynamicAttr ExpMsgIyy1ComponentMessageTx_AT;
  /**
   * Attribute for: ExpMsgIyy1ComponentMessageTx
   * Domain: Text
   * Length: 512
   * Varying Length: Y
   **/
  public String ExpMsgIyy1ComponentMessageTx;
  // Entity View: EXP_ERROR
  //        Type: IYY1_COMPONENT
  /**
   * Attribute missing flag for: ExpErrorIyy1ComponentSeverityCode
   **/
  public char ExpErrorIyy1ComponentSeverityCode_AS;
  /**
   * Dynamic attribute for: ExpErrorIyy1ComponentSeverityCode
   **/
  public DynamicAttr ExpErrorIyy1ComponentSeverityCode_AT;
  /**
   * Attribute for: ExpErrorIyy1ComponentSeverityCode
   * Domain: Text
   * Length: 1
   * Varying Length: N
   **/
  public String ExpErrorIyy1ComponentSeverityCode;
  /**
   * Attribute missing flag for: ExpErrorIyy1ComponentRollbackIndicator
   **/
  public char ExpErrorIyy1ComponentRollbackIndicator_AS;
  /**
   * Dynamic attribute for: ExpErrorIyy1ComponentRollbackIndicator
   **/
  public DynamicAttr ExpErrorIyy1ComponentRollbackIndicator_AT;
  /**
   * Attribute for: ExpErrorIyy1ComponentRollbackIndicator
   * Domain: Text
   * Length: 1
   * Varying Length: N
   **/
  public String ExpErrorIyy1ComponentRollbackIndicator;
  /**
   * Attribute missing flag for: ExpErrorIyy1ComponentOriginServid
   **/
  public char ExpErrorIyy1ComponentOriginServid_AS;
  /**
   * Dynamic attribute for: ExpErrorIyy1ComponentOriginServid
   **/
  public DynamicAttr ExpErrorIyy1ComponentOriginServid_AT;
  /**
   * Attribute for: ExpErrorIyy1ComponentOriginServid
   * Domain: Number
   * Length: 15
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public double ExpErrorIyy1ComponentOriginServid;
  /**
   * Attribute missing flag for: ExpErrorIyy1ComponentContextString
   **/
  public char ExpErrorIyy1ComponentContextString_AS;
  /**
   * Dynamic attribute for: ExpErrorIyy1ComponentContextString
   **/
  public DynamicAttr ExpErrorIyy1ComponentContextString_AT;
  /**
   * Attribute for: ExpErrorIyy1ComponentContextString
   * Domain: Text
   * Length: 512
   * Varying Length: Y
   **/
  public String ExpErrorIyy1ComponentContextString;
  /**
   * Attribute missing flag for: ExpErrorIyy1ComponentReturnCode
   **/
  public char ExpErrorIyy1ComponentReturnCode_AS;
  /**
   * Dynamic attribute for: ExpErrorIyy1ComponentReturnCode
   **/
  public DynamicAttr ExpErrorIyy1ComponentReturnCode_AT;
  /**
   * Attribute for: ExpErrorIyy1ComponentReturnCode
   * Domain: Number
   * Length: 5
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public int ExpErrorIyy1ComponentReturnCode;
  /**
   * Attribute missing flag for: ExpErrorIyy1ComponentReasonCode
   **/
  public char ExpErrorIyy1ComponentReasonCode_AS;
  /**
   * Dynamic attribute for: ExpErrorIyy1ComponentReasonCode
   **/
  public DynamicAttr ExpErrorIyy1ComponentReasonCode_AT;
  /**
   * Attribute for: ExpErrorIyy1ComponentReasonCode
   * Domain: Number
   * Length: 5
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public int ExpErrorIyy1ComponentReasonCode;
  /**
   * Attribute missing flag for: ExpErrorIyy1ComponentChecksum
   **/
  public char ExpErrorIyy1ComponentChecksum_AS;
  /**
   * Dynamic attribute for: ExpErrorIyy1ComponentChecksum
   **/
  public DynamicAttr ExpErrorIyy1ComponentChecksum_AT;
  /**
   * Attribute for: ExpErrorIyy1ComponentChecksum
   * Domain: Text
   * Length: 15
   * Varying Length: N
   **/
  public String ExpErrorIyy1ComponentChecksum;
  /**
   * Default Constructor
   **/
  
  public CYY1S081_OA()
  {
    reset();
  }
  /**
   * Copy Constructor
   **/
  
  public CYY1S081_OA(CYY1S081_OA orig)
  {
    copyFrom(orig);
  }
  /**
   * Static instance creator function
   **/
  
  public static CYY1S081_OA getInstance()
  {
    return new CYY1S081_OA();
  }
  /**
   * Static free instance method
   **/
  
  public void freeInstance()
  {
  }
  /**
   * clone constructor
   **/
  
  @Override public Object clone()
  	throws CloneNotSupportedException
  {
    return(new CYY1S081_OA(this));
  }
  /**
   * Resets all properties to the defaults.
   **/
  
  public void reset()
  {
    ExpReferenceIyy1ServerDataServerDate_AT = null;
    ExpReferenceIyy1ServerDataServerDate_AS = ' ';
    ExpReferenceIyy1ServerDataServerDate = 00000000;
    ExpReferenceIyy1ServerDataServerTime_AT = null;
    ExpReferenceIyy1ServerDataServerTime_AS = ' ';
    ExpReferenceIyy1ServerDataServerTime = 00000000;
    ExpReferenceIyy1ServerDataReferenceId_AT = null;
    ExpReferenceIyy1ServerDataReferenceId_AS = ' ';
    ExpReferenceIyy1ServerDataReferenceId = "00000000000000000000";
    ExpIsc1AuthorizationInfoTokenId_AT = null;
    ExpIsc1AuthorizationInfoTokenId_AS = ' ';
    ExpIsc1AuthorizationInfoTokenId = "                                ";
    ExpIsc1AuthorizationInfoAuthorityInd_AT = null;
    ExpIsc1AuthorizationInfoAuthorityInd_AS = ' ';
    ExpIsc1AuthorizationInfoAuthorityInd = " ";
    ExpIsc1AuthorizationInfoAuthorityStatusR_AT = null;
    ExpIsc1AuthorizationInfoAuthorityStatusR_AS = ' ';
    ExpIsc1AuthorizationInfoAuthorityStatusR = " ";
    ExpIsc1AuthorizationInfoAuthorityStatusU_AT = null;
    ExpIsc1AuthorizationInfoAuthorityStatusU_AS = ' ';
    ExpIsc1AuthorizationInfoAuthorityStatusU = " ";
    ExpIsc1AuthorizationInfoAuthorityStatusD_AT = null;
    ExpIsc1AuthorizationInfoAuthorityStatusD_AS = ' ';
    ExpIsc1AuthorizationInfoAuthorityStatusD = " ";
    ExpIsc1AuthorizationInfoAuthorityStatusL_AT = null;
    ExpIsc1AuthorizationInfoAuthorityStatusL_AS = ' ';
    ExpIsc1AuthorizationInfoAuthorityStatusL = " ";
    ExpGroupList_MA = 0;
    for(int a = 0; a < 48; a++)
    {
      ExpGroupList_AC[a] = ' ';
      ExpGListTypeTinstanceId_AT[a] = null;
      ExpGListTypeTinstanceId_AS[a] = ' ';
      ExpGListTypeTinstanceId[a] = "00000000000000000000";
      ExpGListTypeTreferenceId_AT[a] = null;
      ExpGListTypeTreferenceId_AS[a] = ' ';
      ExpGListTypeTreferenceId[a] = "00000000000000000000";
      ExpGListTypeTcreateUserId_AT[a] = null;
      ExpGListTypeTcreateUserId_AS[a] = ' ';
      ExpGListTypeTcreateUserId[a] = "        ";
      ExpGListTypeTupdateUserId_AT[a] = null;
      ExpGListTypeTupdateUserId_AS[a] = ' ';
      ExpGListTypeTupdateUserId[a] = "        ";
      ExpGListTypeTkeyAttrText_AT[a] = null;
      ExpGListTypeTkeyAttrText_AS[a] = ' ';
      ExpGListTypeTkeyAttrText[a] = "    ";
      ExpGListTypeTsearchAttrText_AT[a] = null;
      ExpGListTypeTsearchAttrText_AS[a] = ' ';
      ExpGListTypeTsearchAttrText[a] = "                    ";
      ExpGListTypeTotherAttrText_AT[a] = null;
      ExpGListTypeTotherAttrText_AS[a] = ' ';
      ExpGListTypeTotherAttrText[a] = "  ";
      ExpGListTypeTotherAttrDate_AT[a] = null;
      ExpGListTypeTotherAttrDate_AS[a] = ' ';
      ExpGListTypeTotherAttrDate[a] = 00000000;
      ExpGListTypeTotherAttrTime_AT[a] = null;
      ExpGListTypeTotherAttrTime_AS[a] = ' ';
      ExpGListTypeTotherAttrTime[a] = 00000000;
      ExpGListTypeTotherAttrAmount_AT[a] = null;
      ExpGListTypeTotherAttrAmount_AS[a] = ' ';
      ExpGListTypeTotherAttrAmount[a] = BigDecimalAttr.getDefaultValue();
    }
    ExpMsgIyy1ComponentSeverityCode_AT = null;
    ExpMsgIyy1ComponentSeverityCode_AS = ' ';
    ExpMsgIyy1ComponentSeverityCode = " ";
    ExpMsgIyy1ComponentMessageTx_AT = null;
    ExpMsgIyy1ComponentMessageTx_AS = ' ';
    ExpMsgIyy1ComponentMessageTx = "";
    ExpErrorIyy1ComponentSeverityCode_AT = null;
    ExpErrorIyy1ComponentSeverityCode_AS = ' ';
    ExpErrorIyy1ComponentSeverityCode = " ";
    ExpErrorIyy1ComponentRollbackIndicator_AT = null;
    ExpErrorIyy1ComponentRollbackIndicator_AS = ' ';
    ExpErrorIyy1ComponentRollbackIndicator = " ";
    ExpErrorIyy1ComponentOriginServid_AT = null;
    ExpErrorIyy1ComponentOriginServid_AS = ' ';
    ExpErrorIyy1ComponentOriginServid = 0.0;
    ExpErrorIyy1ComponentContextString_AT = null;
    ExpErrorIyy1ComponentContextString_AS = ' ';
    ExpErrorIyy1ComponentContextString = "";
    ExpErrorIyy1ComponentReturnCode_AT = null;
    ExpErrorIyy1ComponentReturnCode_AS = ' ';
    ExpErrorIyy1ComponentReturnCode = 0;
    ExpErrorIyy1ComponentReasonCode_AT = null;
    ExpErrorIyy1ComponentReasonCode_AS = ' ';
    ExpErrorIyy1ComponentReasonCode = 0;
    ExpErrorIyy1ComponentChecksum_AT = null;
    ExpErrorIyy1ComponentChecksum_AS = ' ';
    ExpErrorIyy1ComponentChecksum = "               ";
  }
  /**
   * Gets the VDF array for the instance, initialized.
   **/
  
  public static VDF getViewDefinition()
  {
    if ( localVdf == null )
    {
      VDFEntry [] vdfEntries = {
        new VDFEntry((int)1, "", "ExpReferenceIyy1ServerData", "Iyy1ServerData", "ServerDate", VDFEntry.TYPE_DATE, (short)1, (short)
          0, 8, (short)0, null), 
        new VDFEntry((int)2, "", "ExpReferenceIyy1ServerData", "Iyy1ServerData", "ServerTime", VDFEntry.TYPE_TIME, (short)1, (short)
          0, 6, (short)0, null), 
        new VDFEntry((int)3, "", "ExpReferenceIyy1ServerData", "Iyy1ServerData", "ReferenceId", VDFEntry.TYPE_TIMESTAMP, (short)1, (
          short)0, 20, (short)0, null), 
        new VDFEntry((int)4, "", "ExpIsc1AuthorizationInfo", "Isc1AuthorizationInfo", "TokenId", VDFEntry.TYPE_STRING, (short)1, (
          short)0, 32, (short)0, null), 
        new VDFEntry((int)5, "", "ExpIsc1AuthorizationInfo", "Isc1AuthorizationInfo", "AuthorityInd", VDFEntry.TYPE_STRING, (short)1,
           (short)0, 1, (short)0, null), 
        new VDFEntry((int)6, "", "ExpIsc1AuthorizationInfo", "Isc1AuthorizationInfo", "AuthorityStatusR", VDFEntry.TYPE_STRING, (
          short)1, (short)0, 1, (short)0, null), 
        new VDFEntry((int)7, "", "ExpIsc1AuthorizationInfo", "Isc1AuthorizationInfo", "AuthorityStatusU", VDFEntry.TYPE_STRING, (
          short)1, (short)0, 1, (short)0, null), 
        new VDFEntry((int)8, "", "ExpIsc1AuthorizationInfo", "Isc1AuthorizationInfo", "AuthorityStatusD", VDFEntry.TYPE_STRING, (
          short)1, (short)0, 1, (short)0, null), 
        new VDFEntry((int)9, "", "ExpIsc1AuthorizationInfo", "Isc1AuthorizationInfo", "AuthorityStatusL", VDFEntry.TYPE_STRING, (
          short)1, (short)0, 1, (short)0, null), 
        new VDFEntry((int)10, "ExpGroupList", "", "", "MA", VDFEntry.TYPE_INT, (short)1, (short)0, 4, (short)0, null), 
        new VDFEntry((int)11, "ExpGroupList", "", "", "AC", VDFEntry.TYPE_CHAR, (short)48, (short)0, 1, (short)0, null), 
        new VDFEntry((int)12, "ExpGroupList", "ExpGListType", "Type", "TinstanceId", VDFEntry.TYPE_TIMESTAMP, (short)48, (short)0, 
          20, (short)0, null), 
        new VDFEntry((int)13, "ExpGroupList", "ExpGListType", "Type", "TreferenceId", VDFEntry.TYPE_TIMESTAMP, (short)48, (short)0, 
          20, (short)0, null), 
        new VDFEntry((int)14, "ExpGroupList", "ExpGListType", "Type", "TcreateUserId", VDFEntry.TYPE_STRING, (short)48, (short)0, 8, 
          (short)0, null), 
        new VDFEntry((int)15, "ExpGroupList", "ExpGListType", "Type", "TupdateUserId", VDFEntry.TYPE_STRING, (short)48, (short)0, 8, 
          (short)0, null), 
        new VDFEntry((int)16, "ExpGroupList", "ExpGListType", "Type", "TkeyAttrText", VDFEntry.TYPE_STRING, (short)48, (short)0, 4, (
          short)0, null), 
        new VDFEntry((int)17, "ExpGroupList", "ExpGListType", "Type", "TsearchAttrText", VDFEntry.TYPE_STRING, (short)48, (short)0, 
          20, (short)0, null), 
        new VDFEntry((int)18, "ExpGroupList", "ExpGListType", "Type", "TotherAttrText", VDFEntry.TYPE_STRING, (short)48, (short)0, 2,
           (short)0, null), 
        new VDFEntry((int)19, "ExpGroupList", "ExpGListType", "Type", "TotherAttrDate", VDFEntry.TYPE_DATE, (short)48, (short)0, 8, (
          short)0, null), 
        new VDFEntry((int)20, "ExpGroupList", "ExpGListType", "Type", "TotherAttrTime", VDFEntry.TYPE_TIME, (short)48, (short)0, 6, (
          short)0, null), 
        new VDFEntry((int)21, "ExpGroupList", "ExpGListType", "Type", "TotherAttrAmount", VDFEntry.TYPE_FIXED, (short)48, (short)0, 
          17, (short)2, null), 
        new VDFEntry((int)22, "", "ExpMsgIyy1Component", "Iyy1Component", "SeverityCode", VDFEntry.TYPE_STRING, (short)1, (short)0, 
          1, (short)0, null), 
        new VDFEntry((int)23, "", "ExpMsgIyy1Component", "Iyy1Component", "MessageTx", VDFEntry.TYPE_STRING, (short)1, (short)0, 512,
           (short)0, null), 
        new VDFEntry((int)24, "", "ExpErrorIyy1Component", "Iyy1Component", "SeverityCode", VDFEntry.TYPE_STRING, (short)1, (short)0,
           1, (short)0, null), 
        new VDFEntry((int)25, "", "ExpErrorIyy1Component", "Iyy1Component", "RollbackIndicator", VDFEntry.TYPE_STRING, (short)1, (
          short)0, 1, (short)0, null), 
        new VDFEntry((int)26, "", "ExpErrorIyy1Component", "Iyy1Component", "OriginServid", VDFEntry.TYPE_DOUBLE, (short)1, (short)0,
           15, (short)0, null), 
        new VDFEntry((int)27, "", "ExpErrorIyy1Component", "Iyy1Component", "ContextString", VDFEntry.TYPE_STRING, (short)1, (short)
          0, 512, (short)0, null), 
        new VDFEntry((int)28, "", "ExpErrorIyy1Component", "Iyy1Component", "ReturnCode", VDFEntry.TYPE_INT, (short)1, (short)0, 8, (
          short)0, null), 
        new VDFEntry((int)29, "", "ExpErrorIyy1Component", "Iyy1Component", "ReasonCode", VDFEntry.TYPE_INT, (short)1, (short)0, 8, (
          short)0, null), 
        new VDFEntry((int)30, "", "ExpErrorIyy1Component", "Iyy1Component", "Checksum", VDFEntry.TYPE_STRING, (short)1, (short)0, 15,
           (short)0, null), 
      };
      localVdf = new VDF(vdfEntries);
    }
    try {
      VDF result = (VDF)localVdf.clone();
      result.initViewData();
      return result;
    } catch( CloneNotSupportedException e ) {
      return null;
    }
  }
  
  /**
   * Sets the current state of the instance to the VDF version.
   **/
  public void setFromVDF(VDF vdf)
  {
    // predicate view item
    if ( vdf.getEntries()[0].getDataValue().getObject() != null )
    {
      ExpReferenceIyy1ServerDataServerDate = ((Integer)vdf.getEntries()[0].getDataValue().getObject()).intValue();
    }
    else 
    {
      ExpReferenceIyy1ServerDataServerDate = 00000000;
    }
    // predicate view item
    if ( vdf.getEntries()[1].getDataValue().getObject() != null )
    {
      ExpReferenceIyy1ServerDataServerTime = ((Integer)vdf.getEntries()[1].getDataValue().getObject()).intValue();
    }
    else 
    {
      ExpReferenceIyy1ServerDataServerTime = 00000000;
    }
    // predicate view item
    if ( vdf.getEntries()[2].getDataValue().getObject() != null )
    {
      ExpReferenceIyy1ServerDataReferenceId = ((String)vdf.getEntries()[2].getDataValue().getObject());
    }
    else 
    {
      ExpReferenceIyy1ServerDataReferenceId = "00000000000000000000";
    }
    // predicate view item
    if ( vdf.getEntries()[3].getDataValue().getObject() != null )
    {
      ExpIsc1AuthorizationInfoTokenId = ((String)vdf.getEntries()[3].getDataValue().getObject());
    }
    else 
    {
      ExpIsc1AuthorizationInfoTokenId = "                                ";
    }
    // predicate view item
    if ( vdf.getEntries()[4].getDataValue().getObject() != null )
    {
      ExpIsc1AuthorizationInfoAuthorityInd = ((String)vdf.getEntries()[4].getDataValue().getObject());
    }
    else 
    {
      ExpIsc1AuthorizationInfoAuthorityInd = " ";
    }
    // predicate view item
    if ( vdf.getEntries()[5].getDataValue().getObject() != null )
    {
      ExpIsc1AuthorizationInfoAuthorityStatusR = ((String)vdf.getEntries()[5].getDataValue().getObject());
    }
    else 
    {
      ExpIsc1AuthorizationInfoAuthorityStatusR = " ";
    }
    // predicate view item
    if ( vdf.getEntries()[6].getDataValue().getObject() != null )
    {
      ExpIsc1AuthorizationInfoAuthorityStatusU = ((String)vdf.getEntries()[6].getDataValue().getObject());
    }
    else 
    {
      ExpIsc1AuthorizationInfoAuthorityStatusU = " ";
    }
    // predicate view item
    if ( vdf.getEntries()[7].getDataValue().getObject() != null )
    {
      ExpIsc1AuthorizationInfoAuthorityStatusD = ((String)vdf.getEntries()[7].getDataValue().getObject());
    }
    else 
    {
      ExpIsc1AuthorizationInfoAuthorityStatusD = " ";
    }
    // predicate view item
    if ( vdf.getEntries()[8].getDataValue().getObject() != null )
    {
      ExpIsc1AuthorizationInfoAuthorityStatusL = ((String)vdf.getEntries()[8].getDataValue().getObject());
    }
    else 
    {
      ExpIsc1AuthorizationInfoAuthorityStatusL = " ";
    }
    // group view current cardinality
    if ( vdf.getEntries()[9].getDataValue().getObject() != null )
    {
      ExpGroupList_MA = ((Integer)vdf.getEntries()[9].getDataValue().getObject()).intValue();
    }
    else 
    {
      ExpGroupList_MA = 0;
    }
    // group view active flags
    for(int adim0 = 0; adim0 < ExpGroupList_MA; adim0++)
    {
      if ( ((VDFEntryObject [])vdf.getEntries()[10].getDataValue().getObject())[adim0].getObject() != null )
      {
        ExpGroupList_AC[adim0] = ((Character)((VDFEntryObject [])vdf.getEntries()[10].getDataValue().getObject())[adim0].getObject())
          .charValue();
      }
      else 
      {
        ExpGroupList_AC[adim0] = ' ';
      }
    }
    // current cardinality group view items
    for(int adim0 = 0; adim0 < ExpGroupList_MA; adim0++)
    {
      if ( ((VDFEntryObject [])vdf.getEntries()[11].getDataValue().getObject())[adim0].getObject() != null )
      {
        ExpGListTypeTinstanceId[adim0] = ((String)((VDFEntryObject [])vdf.getEntries()[11].getDataValue().getObject())[adim0]
          .getObject());
      }
      else 
      {
        ExpGListTypeTinstanceId[adim0] = "00000000000000000000";
      }
    }
    // current cardinality group view items
    for(int adim0 = 0; adim0 < ExpGroupList_MA; adim0++)
    {
      if ( ((VDFEntryObject [])vdf.getEntries()[12].getDataValue().getObject())[adim0].getObject() != null )
      {
        ExpGListTypeTreferenceId[adim0] = ((String)((VDFEntryObject [])vdf.getEntries()[12].getDataValue().getObject())[adim0]
          .getObject());
      }
      else 
      {
        ExpGListTypeTreferenceId[adim0] = "00000000000000000000";
      }
    }
    // current cardinality group view items
    for(int adim0 = 0; adim0 < ExpGroupList_MA; adim0++)
    {
      if ( ((VDFEntryObject [])vdf.getEntries()[13].getDataValue().getObject())[adim0].getObject() != null )
      {
        ExpGListTypeTcreateUserId[adim0] = ((String)((VDFEntryObject [])vdf.getEntries()[13].getDataValue().getObject())[adim0]
          .getObject());
      }
      else 
      {
        ExpGListTypeTcreateUserId[adim0] = "        ";
      }
    }
    // current cardinality group view items
    for(int adim0 = 0; adim0 < ExpGroupList_MA; adim0++)
    {
      if ( ((VDFEntryObject [])vdf.getEntries()[14].getDataValue().getObject())[adim0].getObject() != null )
      {
        ExpGListTypeTupdateUserId[adim0] = ((String)((VDFEntryObject [])vdf.getEntries()[14].getDataValue().getObject())[adim0]
          .getObject());
      }
      else 
      {
        ExpGListTypeTupdateUserId[adim0] = "        ";
      }
    }
    // current cardinality group view items
    for(int adim0 = 0; adim0 < ExpGroupList_MA; adim0++)
    {
      if ( ((VDFEntryObject [])vdf.getEntries()[15].getDataValue().getObject())[adim0].getObject() != null )
      {
        ExpGListTypeTkeyAttrText[adim0] = ((String)((VDFEntryObject [])vdf.getEntries()[15].getDataValue().getObject())[adim0]
          .getObject());
      }
      else 
      {
        ExpGListTypeTkeyAttrText[adim0] = "    ";
      }
    }
    // current cardinality group view items
    for(int adim0 = 0; adim0 < ExpGroupList_MA; adim0++)
    {
      if ( ((VDFEntryObject [])vdf.getEntries()[16].getDataValue().getObject())[adim0].getObject() != null )
      {
        ExpGListTypeTsearchAttrText[adim0] = ((String)((VDFEntryObject [])vdf.getEntries()[16].getDataValue().getObject())[adim0]
          .getObject());
      }
      else 
      {
        ExpGListTypeTsearchAttrText[adim0] = "                    ";
      }
    }
    // current cardinality group view items
    for(int adim0 = 0; adim0 < ExpGroupList_MA; adim0++)
    {
      if ( ((VDFEntryObject [])vdf.getEntries()[17].getDataValue().getObject())[adim0].getObject() != null )
      {
        ExpGListTypeTotherAttrText[adim0] = ((String)((VDFEntryObject [])vdf.getEntries()[17].getDataValue().getObject())[adim0]
          .getObject());
      }
      else 
      {
        ExpGListTypeTotherAttrText[adim0] = "  ";
      }
    }
    // current cardinality group view items
    for(int adim0 = 0; adim0 < ExpGroupList_MA; adim0++)
    {
      if ( ((VDFEntryObject [])vdf.getEntries()[18].getDataValue().getObject())[adim0].getObject() != null )
      {
        ExpGListTypeTotherAttrDate[adim0] = ((Integer)((VDFEntryObject [])vdf.getEntries()[18].getDataValue().getObject())[adim0]
          .getObject()).intValue();
      }
      else 
      {
        ExpGListTypeTotherAttrDate[adim0] = 00000000;
      }
    }
    // current cardinality group view items
    for(int adim0 = 0; adim0 < ExpGroupList_MA; adim0++)
    {
      if ( ((VDFEntryObject [])vdf.getEntries()[19].getDataValue().getObject())[adim0].getObject() != null )
      {
        ExpGListTypeTotherAttrTime[adim0] = ((Integer)((VDFEntryObject [])vdf.getEntries()[19].getDataValue().getObject())[adim0]
          .getObject()).intValue();
      }
      else 
      {
        ExpGListTypeTotherAttrTime[adim0] = 00000000;
      }
    }
    // current cardinality group view items
    for(int adim0 = 0; adim0 < ExpGroupList_MA; adim0++)
    {
      if ( ((VDFEntryObject [])vdf.getEntries()[20].getDataValue().getObject())[adim0].getObject() != null )
      {
        ExpGListTypeTotherAttrAmount[adim0] = ((BigDecimal)((VDFEntryObject [])vdf.getEntries()[20].getDataValue().getObject())[
          adim0].getObject());
      }
      else 
      {
        ExpGListTypeTotherAttrAmount[adim0] = BigDecimalAttr.getDefaultValue();
      }
    }
    // predicate view item
    if ( vdf.getEntries()[21].getDataValue().getObject() != null )
    {
      ExpMsgIyy1ComponentSeverityCode = ((String)vdf.getEntries()[21].getDataValue().getObject());
    }
    else 
    {
      ExpMsgIyy1ComponentSeverityCode = " ";
    }
    // predicate view item
    if ( vdf.getEntries()[22].getDataValue().getObject() != null )
    {
      ExpMsgIyy1ComponentMessageTx = ((String)vdf.getEntries()[22].getDataValue().getObject());
    }
    else 
    {
      ExpMsgIyy1ComponentMessageTx = "";
    }
    // predicate view item
    if ( vdf.getEntries()[23].getDataValue().getObject() != null )
    {
      ExpErrorIyy1ComponentSeverityCode = ((String)vdf.getEntries()[23].getDataValue().getObject());
    }
    else 
    {
      ExpErrorIyy1ComponentSeverityCode = " ";
    }
    // predicate view item
    if ( vdf.getEntries()[24].getDataValue().getObject() != null )
    {
      ExpErrorIyy1ComponentRollbackIndicator = ((String)vdf.getEntries()[24].getDataValue().getObject());
    }
    else 
    {
      ExpErrorIyy1ComponentRollbackIndicator = " ";
    }
    // predicate view item
    if ( vdf.getEntries()[25].getDataValue().getObject() != null )
    {
      ExpErrorIyy1ComponentOriginServid = ((Double)vdf.getEntries()[25].getDataValue().getObject()).doubleValue();
    }
    else 
    {
      ExpErrorIyy1ComponentOriginServid = 0.0;
    }
    // predicate view item
    if ( vdf.getEntries()[26].getDataValue().getObject() != null )
    {
      ExpErrorIyy1ComponentContextString = ((String)vdf.getEntries()[26].getDataValue().getObject());
    }
    else 
    {
      ExpErrorIyy1ComponentContextString = "";
    }
    // predicate view item
    if ( vdf.getEntries()[27].getDataValue().getObject() != null )
    {
      ExpErrorIyy1ComponentReturnCode = ((Integer)vdf.getEntries()[27].getDataValue().getObject()).intValue();
    }
    else 
    {
      ExpErrorIyy1ComponentReturnCode = 0;
    }
    // predicate view item
    if ( vdf.getEntries()[28].getDataValue().getObject() != null )
    {
      ExpErrorIyy1ComponentReasonCode = ((Integer)vdf.getEntries()[28].getDataValue().getObject()).intValue();
    }
    else 
    {
      ExpErrorIyy1ComponentReasonCode = 0;
    }
    // predicate view item
    if ( vdf.getEntries()[29].getDataValue().getObject() != null )
    {
      ExpErrorIyy1ComponentChecksum = ((String)vdf.getEntries()[29].getDataValue().getObject());
    }
    else 
    {
      ExpErrorIyy1ComponentChecksum = "               ";
    }
  }
  
  /**
   * Gets the VDF version of the current state of the instance.
   **/
  public VDF getVDF()
  {
    VDF vdf = getViewDefinition();
    // predicate view item
    vdf.getEntries()[0].getDataValue().setObject(new Integer(ExpReferenceIyy1ServerDataServerDate));
    // predicate view item
    vdf.getEntries()[1].getDataValue().setObject(new Integer(ExpReferenceIyy1ServerDataServerTime));
    // predicate view item
    vdf.getEntries()[2].getDataValue().setObject(ExpReferenceIyy1ServerDataReferenceId);
    // predicate view item
    vdf.getEntries()[3].getDataValue().setObject(ExpIsc1AuthorizationInfoTokenId);
    // predicate view item
    vdf.getEntries()[4].getDataValue().setObject(ExpIsc1AuthorizationInfoAuthorityInd);
    // predicate view item
    vdf.getEntries()[5].getDataValue().setObject(ExpIsc1AuthorizationInfoAuthorityStatusR);
    // predicate view item
    vdf.getEntries()[6].getDataValue().setObject(ExpIsc1AuthorizationInfoAuthorityStatusU);
    // predicate view item
    vdf.getEntries()[7].getDataValue().setObject(ExpIsc1AuthorizationInfoAuthorityStatusD);
    // predicate view item
    vdf.getEntries()[8].getDataValue().setObject(ExpIsc1AuthorizationInfoAuthorityStatusL);
    // group view current cardinality
    vdf.getEntries()[9].getDataValue().setObject(new Integer(ExpGroupList_MA));
    // group view active flags
    for(int adim0 = 0; adim0 < 48; adim0++)
    {
      if ( adim0 < ExpGroupList_MA )
      {
        ((VDFEntryObject [])vdf.getEntries()[10].getDataValue().getObject())[adim0].setObject(new Character('Y'));
      }
      else 
      {
        ((VDFEntryObject [])vdf.getEntries()[10].getDataValue().getObject())[adim0].setObject(new Character('N'));
      }
    }
    vdf.getEntries()[10].setCountUsed((short)ExpGroupList_MA);
    // current cardinality group view items
    for(int adim0 = 0; adim0 < 48; adim0++)
    {
      ((VDFEntryObject [])vdf.getEntries()[11].getDataValue().getObject())[adim0].setObject(ExpGListTypeTinstanceId[adim0]);
    }
    vdf.getEntries()[11].setCountUsed((short)ExpGroupList_MA);
    // current cardinality group view items
    for(int adim0 = 0; adim0 < 48; adim0++)
    {
      ((VDFEntryObject [])vdf.getEntries()[12].getDataValue().getObject())[adim0].setObject(ExpGListTypeTreferenceId[adim0]);
    }
    vdf.getEntries()[12].setCountUsed((short)ExpGroupList_MA);
    // current cardinality group view items
    for(int adim0 = 0; adim0 < 48; adim0++)
    {
      ((VDFEntryObject [])vdf.getEntries()[13].getDataValue().getObject())[adim0].setObject(ExpGListTypeTcreateUserId[adim0]);
    }
    vdf.getEntries()[13].setCountUsed((short)ExpGroupList_MA);
    // current cardinality group view items
    for(int adim0 = 0; adim0 < 48; adim0++)
    {
      ((VDFEntryObject [])vdf.getEntries()[14].getDataValue().getObject())[adim0].setObject(ExpGListTypeTupdateUserId[adim0]);
    }
    vdf.getEntries()[14].setCountUsed((short)ExpGroupList_MA);
    // current cardinality group view items
    for(int adim0 = 0; adim0 < 48; adim0++)
    {
      ((VDFEntryObject [])vdf.getEntries()[15].getDataValue().getObject())[adim0].setObject(ExpGListTypeTkeyAttrText[adim0]);
    }
    vdf.getEntries()[15].setCountUsed((short)ExpGroupList_MA);
    // current cardinality group view items
    for(int adim0 = 0; adim0 < 48; adim0++)
    {
      ((VDFEntryObject [])vdf.getEntries()[16].getDataValue().getObject())[adim0].setObject(ExpGListTypeTsearchAttrText[adim0]);
    }
    vdf.getEntries()[16].setCountUsed((short)ExpGroupList_MA);
    // current cardinality group view items
    for(int adim0 = 0; adim0 < 48; adim0++)
    {
      ((VDFEntryObject [])vdf.getEntries()[17].getDataValue().getObject())[adim0].setObject(ExpGListTypeTotherAttrText[adim0]);
    }
    vdf.getEntries()[17].setCountUsed((short)ExpGroupList_MA);
    // current cardinality group view items
    for(int adim0 = 0; adim0 < 48; adim0++)
    {
      ((VDFEntryObject [])vdf.getEntries()[18].getDataValue().getObject())[adim0].setObject(new Integer(ExpGListTypeTotherAttrDate[
        adim0]));
    }
    vdf.getEntries()[18].setCountUsed((short)ExpGroupList_MA);
    // current cardinality group view items
    for(int adim0 = 0; adim0 < 48; adim0++)
    {
      ((VDFEntryObject [])vdf.getEntries()[19].getDataValue().getObject())[adim0].setObject(new Integer(ExpGListTypeTotherAttrTime[
        adim0]));
    }
    vdf.getEntries()[19].setCountUsed((short)ExpGroupList_MA);
    // current cardinality group view items
    for(int adim0 = 0; adim0 < 48; adim0++)
    {
      ((VDFEntryObject [])vdf.getEntries()[20].getDataValue().getObject())[adim0].setObject(ExpGListTypeTotherAttrAmount[adim0]);
    }
    vdf.getEntries()[20].setCountUsed((short)ExpGroupList_MA);
    // predicate view item
    vdf.getEntries()[21].getDataValue().setObject(ExpMsgIyy1ComponentSeverityCode);
    // predicate view item
    vdf.getEntries()[22].getDataValue().setObject(ExpMsgIyy1ComponentMessageTx);
    // predicate view item
    vdf.getEntries()[23].getDataValue().setObject(ExpErrorIyy1ComponentSeverityCode);
    // predicate view item
    vdf.getEntries()[24].getDataValue().setObject(ExpErrorIyy1ComponentRollbackIndicator);
    // predicate view item
    vdf.getEntries()[25].getDataValue().setObject(new Double(ExpErrorIyy1ComponentOriginServid));
    // predicate view item
    vdf.getEntries()[26].getDataValue().setObject(ExpErrorIyy1ComponentContextString);
    // predicate view item
    vdf.getEntries()[27].getDataValue().setObject(new Integer(ExpErrorIyy1ComponentReturnCode));
    // predicate view item
    vdf.getEntries()[28].getDataValue().setObject(new Integer(ExpErrorIyy1ComponentReasonCode));
    // predicate view item
    vdf.getEntries()[29].getDataValue().setObject(ExpErrorIyy1ComponentChecksum);
    return(vdf);
  }
  
  /**
   * Sets the current instance based on the passed view.
   **/
  public void copyFrom(IExportView orig)
  {
    this.copyFrom((CYY1S081_OA) orig);
  }
  
  /**
   * Sets the current instance based on the passed view.
   **/
  public void copyFrom(CYY1S081_OA orig)
  {
    ExpReferenceIyy1ServerDataServerDate_AT = orig.ExpReferenceIyy1ServerDataServerDate_AT;
    ExpReferenceIyy1ServerDataServerDate_AS = orig.ExpReferenceIyy1ServerDataServerDate_AS;
    ExpReferenceIyy1ServerDataServerDate = orig.ExpReferenceIyy1ServerDataServerDate;
    ExpReferenceIyy1ServerDataServerTime_AT = orig.ExpReferenceIyy1ServerDataServerTime_AT;
    ExpReferenceIyy1ServerDataServerTime_AS = orig.ExpReferenceIyy1ServerDataServerTime_AS;
    ExpReferenceIyy1ServerDataServerTime = orig.ExpReferenceIyy1ServerDataServerTime;
    ExpReferenceIyy1ServerDataReferenceId_AT = orig.ExpReferenceIyy1ServerDataReferenceId_AT;
    ExpReferenceIyy1ServerDataReferenceId_AS = orig.ExpReferenceIyy1ServerDataReferenceId_AS;
    ExpReferenceIyy1ServerDataReferenceId = orig.ExpReferenceIyy1ServerDataReferenceId;
    ExpIsc1AuthorizationInfoTokenId_AT = orig.ExpIsc1AuthorizationInfoTokenId_AT;
    ExpIsc1AuthorizationInfoTokenId_AS = orig.ExpIsc1AuthorizationInfoTokenId_AS;
    ExpIsc1AuthorizationInfoTokenId = orig.ExpIsc1AuthorizationInfoTokenId;
    ExpIsc1AuthorizationInfoAuthorityInd_AT = orig.ExpIsc1AuthorizationInfoAuthorityInd_AT;
    ExpIsc1AuthorizationInfoAuthorityInd_AS = orig.ExpIsc1AuthorizationInfoAuthorityInd_AS;
    ExpIsc1AuthorizationInfoAuthorityInd = orig.ExpIsc1AuthorizationInfoAuthorityInd;
    ExpIsc1AuthorizationInfoAuthorityStatusR_AT = orig.ExpIsc1AuthorizationInfoAuthorityStatusR_AT;
    ExpIsc1AuthorizationInfoAuthorityStatusR_AS = orig.ExpIsc1AuthorizationInfoAuthorityStatusR_AS;
    ExpIsc1AuthorizationInfoAuthorityStatusR = orig.ExpIsc1AuthorizationInfoAuthorityStatusR;
    ExpIsc1AuthorizationInfoAuthorityStatusU_AT = orig.ExpIsc1AuthorizationInfoAuthorityStatusU_AT;
    ExpIsc1AuthorizationInfoAuthorityStatusU_AS = orig.ExpIsc1AuthorizationInfoAuthorityStatusU_AS;
    ExpIsc1AuthorizationInfoAuthorityStatusU = orig.ExpIsc1AuthorizationInfoAuthorityStatusU;
    ExpIsc1AuthorizationInfoAuthorityStatusD_AT = orig.ExpIsc1AuthorizationInfoAuthorityStatusD_AT;
    ExpIsc1AuthorizationInfoAuthorityStatusD_AS = orig.ExpIsc1AuthorizationInfoAuthorityStatusD_AS;
    ExpIsc1AuthorizationInfoAuthorityStatusD = orig.ExpIsc1AuthorizationInfoAuthorityStatusD;
    ExpIsc1AuthorizationInfoAuthorityStatusL_AT = orig.ExpIsc1AuthorizationInfoAuthorityStatusL_AT;
    ExpIsc1AuthorizationInfoAuthorityStatusL_AS = orig.ExpIsc1AuthorizationInfoAuthorityStatusL_AS;
    ExpIsc1AuthorizationInfoAuthorityStatusL = orig.ExpIsc1AuthorizationInfoAuthorityStatusL;
    ExpGroupList_MA = orig.ExpGroupList_MA;
    for(int a = 0; a < 48; a++)
    {
      ExpGroupList_AC[a] = orig.ExpGroupList_AC[a];
      ExpGListTypeTinstanceId_AT[a] = orig.ExpGListTypeTinstanceId_AT[a];
      ExpGListTypeTinstanceId_AS[a] = orig.ExpGListTypeTinstanceId_AS[a];
      ExpGListTypeTinstanceId[a] = orig.ExpGListTypeTinstanceId[a];
      ExpGListTypeTreferenceId_AT[a] = orig.ExpGListTypeTreferenceId_AT[a];
      ExpGListTypeTreferenceId_AS[a] = orig.ExpGListTypeTreferenceId_AS[a];
      ExpGListTypeTreferenceId[a] = orig.ExpGListTypeTreferenceId[a];
      ExpGListTypeTcreateUserId_AT[a] = orig.ExpGListTypeTcreateUserId_AT[a];
      ExpGListTypeTcreateUserId_AS[a] = orig.ExpGListTypeTcreateUserId_AS[a];
      ExpGListTypeTcreateUserId[a] = orig.ExpGListTypeTcreateUserId[a];
      ExpGListTypeTupdateUserId_AT[a] = orig.ExpGListTypeTupdateUserId_AT[a];
      ExpGListTypeTupdateUserId_AS[a] = orig.ExpGListTypeTupdateUserId_AS[a];
      ExpGListTypeTupdateUserId[a] = orig.ExpGListTypeTupdateUserId[a];
      ExpGListTypeTkeyAttrText_AT[a] = orig.ExpGListTypeTkeyAttrText_AT[a];
      ExpGListTypeTkeyAttrText_AS[a] = orig.ExpGListTypeTkeyAttrText_AS[a];
      ExpGListTypeTkeyAttrText[a] = orig.ExpGListTypeTkeyAttrText[a];
      ExpGListTypeTsearchAttrText_AT[a] = orig.ExpGListTypeTsearchAttrText_AT[a];
      ExpGListTypeTsearchAttrText_AS[a] = orig.ExpGListTypeTsearchAttrText_AS[a];
      ExpGListTypeTsearchAttrText[a] = orig.ExpGListTypeTsearchAttrText[a];
      ExpGListTypeTotherAttrText_AT[a] = orig.ExpGListTypeTotherAttrText_AT[a];
      ExpGListTypeTotherAttrText_AS[a] = orig.ExpGListTypeTotherAttrText_AS[a];
      ExpGListTypeTotherAttrText[a] = orig.ExpGListTypeTotherAttrText[a];
      ExpGListTypeTotherAttrDate_AT[a] = orig.ExpGListTypeTotherAttrDate_AT[a];
      ExpGListTypeTotherAttrDate_AS[a] = orig.ExpGListTypeTotherAttrDate_AS[a];
      ExpGListTypeTotherAttrDate[a] = orig.ExpGListTypeTotherAttrDate[a];
      ExpGListTypeTotherAttrTime_AT[a] = orig.ExpGListTypeTotherAttrTime_AT[a];
      ExpGListTypeTotherAttrTime_AS[a] = orig.ExpGListTypeTotherAttrTime_AS[a];
      ExpGListTypeTotherAttrTime[a] = orig.ExpGListTypeTotherAttrTime[a];
      ExpGListTypeTotherAttrAmount_AT[a] = orig.ExpGListTypeTotherAttrAmount_AT[a];
      ExpGListTypeTotherAttrAmount_AS[a] = orig.ExpGListTypeTotherAttrAmount_AS[a];
      ExpGListTypeTotherAttrAmount[a] = orig.ExpGListTypeTotherAttrAmount[a];
    }
    ExpMsgIyy1ComponentSeverityCode_AT = orig.ExpMsgIyy1ComponentSeverityCode_AT;
    ExpMsgIyy1ComponentSeverityCode_AS = orig.ExpMsgIyy1ComponentSeverityCode_AS;
    ExpMsgIyy1ComponentSeverityCode = orig.ExpMsgIyy1ComponentSeverityCode;
    ExpMsgIyy1ComponentMessageTx_AT = orig.ExpMsgIyy1ComponentMessageTx_AT;
    ExpMsgIyy1ComponentMessageTx_AS = orig.ExpMsgIyy1ComponentMessageTx_AS;
    ExpMsgIyy1ComponentMessageTx = orig.ExpMsgIyy1ComponentMessageTx;
    ExpErrorIyy1ComponentSeverityCode_AT = orig.ExpErrorIyy1ComponentSeverityCode_AT;
    ExpErrorIyy1ComponentSeverityCode_AS = orig.ExpErrorIyy1ComponentSeverityCode_AS;
    ExpErrorIyy1ComponentSeverityCode = orig.ExpErrorIyy1ComponentSeverityCode;
    ExpErrorIyy1ComponentRollbackIndicator_AT = orig.ExpErrorIyy1ComponentRollbackIndicator_AT;
    ExpErrorIyy1ComponentRollbackIndicator_AS = orig.ExpErrorIyy1ComponentRollbackIndicator_AS;
    ExpErrorIyy1ComponentRollbackIndicator = orig.ExpErrorIyy1ComponentRollbackIndicator;
    ExpErrorIyy1ComponentOriginServid_AT = orig.ExpErrorIyy1ComponentOriginServid_AT;
    ExpErrorIyy1ComponentOriginServid_AS = orig.ExpErrorIyy1ComponentOriginServid_AS;
    ExpErrorIyy1ComponentOriginServid = orig.ExpErrorIyy1ComponentOriginServid;
    ExpErrorIyy1ComponentContextString_AT = orig.ExpErrorIyy1ComponentContextString_AT;
    ExpErrorIyy1ComponentContextString_AS = orig.ExpErrorIyy1ComponentContextString_AS;
    ExpErrorIyy1ComponentContextString = orig.ExpErrorIyy1ComponentContextString;
    ExpErrorIyy1ComponentReturnCode_AT = orig.ExpErrorIyy1ComponentReturnCode_AT;
    ExpErrorIyy1ComponentReturnCode_AS = orig.ExpErrorIyy1ComponentReturnCode_AS;
    ExpErrorIyy1ComponentReturnCode = orig.ExpErrorIyy1ComponentReturnCode;
    ExpErrorIyy1ComponentReasonCode_AT = orig.ExpErrorIyy1ComponentReasonCode_AT;
    ExpErrorIyy1ComponentReasonCode_AS = orig.ExpErrorIyy1ComponentReasonCode_AS;
    ExpErrorIyy1ComponentReasonCode = orig.ExpErrorIyy1ComponentReasonCode;
    ExpErrorIyy1ComponentChecksum_AT = orig.ExpErrorIyy1ComponentChecksum_AT;
    ExpErrorIyy1ComponentChecksum_AS = orig.ExpErrorIyy1ComponentChecksum_AS;
    ExpErrorIyy1ComponentChecksum = orig.ExpErrorIyy1ComponentChecksum;
  }
}

package gen.ort.yyy;

// CA Gen Enterprise Java Beans
// Generated Bean Interface for procedure step: CYY1S081_TYPE_LIST
// EJBName: CYY1S081_TYPE_LIST_Bean Date:       2023 Time: 15:09:25

import javax.annotation.*;
import javax.ejb.*;
import com.ca.gen.odc.coopflow.ejbrmi.EJBRMIRequest;
import com.ca.gen.odc.coopflow.ejbrmi.EJBRMIResponse;
import com.ca.gen.ejb.EJBProcedureStepContext;

@Stateless(name = "CYY1S081_TYPE_LIST")
public class CYY1S081_TYPE_LIST_Bean
 implements CYY1S081_TYPE_LIST_Local,
            CYY1S081_TYPE_LIST_Remote {
  
  private EJBProcedureStepContext psctx;
  @Resource public SessionContext context;
  private EJBRMIResponse execute(EJBRMIRequest rs, CYY1S081_IA iv)
  	throws Exception
  {
    if ( null == psctx )
    {
      psctx = new EJBProcedureStepContext(0, context, getClass());
    }
    return(psctx.execute( rs, "gen.ort.yyy.CYY1S081", "CYY1S081", iv, "gen.ort.yyy.CYY1S081_OA"));
  }
  
  public EJBRMIResponse call(EJBRMIRequest rs, CYY1S081_IA iv)
  	throws Exception
  {
    return(execute( rs, iv ));
  }
  
  // External Import and Export view call for CYY1S081_TYPE_LIST
  public Cyy1s081TypeListExport call(Cyy1s081TypeListImport in)
  	throws Exception
  {
    Cyy1s081TypeListImportWrapper iw = new Cyy1s081TypeListImportWrapper(in);
    EJBRMIRequest rs = new EJBRMIRequest( iw.getCommand(), "YY08", iw.getNextLocation(), iw.getExitState(), iw.getDialect(), 
      iw.getClientId(), iw.getClientPassword(), null);
    EJBRMIResponse rq;
    rq = execute(rs, (CYY1S081_IA)iw.getIA());
    if (rq.isErrorEncountered() || rq.wasAbortRequested()) {
      throw new Exception(rq.createExceptionStr());
    }
    Cyy1s081TypeListExportWrapper xw = new Cyy1s081TypeListExportWrapper( rq.getResponseView(), rq.getCommand(), rq.getExitStateType(
      ), rq.getExitState(), rq.getExitInfoMsg() );
    return (Cyy1s081TypeListExport)xw.getExport();
  }
  
  // External Import and Export view call for CYY1S081_TYPE_LIST
  public Cyy1s081TypeListExport Cyy1s081TypeListcall(Cyy1s081TypeListImport in)
  	throws Exception
  {
    Cyy1s081TypeListImportWrapper iw = new Cyy1s081TypeListImportWrapper(in);
    EJBRMIRequest rs = new EJBRMIRequest( iw.getCommand(), "YY08", iw.getNextLocation(), iw.getExitState(), iw.getDialect(), 
      iw.getClientId(), iw.getClientPassword(), null);
    EJBRMIResponse rq;
    rq = execute(rs, (CYY1S081_IA)iw.getIA());
    if (rq.isErrorEncountered() || rq.wasAbortRequested()) {
      throw new Exception(rq.createExceptionStr());
    }
    Cyy1s081TypeListExportWrapper xw = new Cyy1s081TypeListExportWrapper( rq.getResponseView(), rq.getCommand(), rq.getExitStateType(
      ), rq.getExitState(), rq.getExitInfoMsg() );
    return (Cyy1s081TypeListExport)xw.getExport();
  }
  
}

package gen.ort.yyy;

// CA Gen Enterprise Java Beans
// Generated Local Interface for procedure step:  CYY1S081_TYPE_LIST
// EJBName: CYY1S081_TYPE_LIST_Local Date:       2023 Time: 15:09:25

import javax.ejb.Local;
import com.ca.gen.odc.coopflow.ejbrmi.EJBRMIRequest;
import com.ca.gen.odc.coopflow.ejbrmi.EJBRMIResponse;

@Local public interface CYY1S081_TYPE_LIST_Local 
{
  public EJBRMIResponse call(EJBRMIRequest rs, CYY1S081_IA iv)
  	throws Exception
  ;
}

package gen.ort.yyy;

// CA Gen Enterprise Java Beans
// Generated Remote Interface for procedure step:  CYY1S081_TYPE_LIST
// EJBName: CYY1S081_TYPE_LIST_Remote Date:       2023 Time: 15:09:25

import javax.ejb.Remote;

@Remote public interface CYY1S081_TYPE_LIST_Remote 
{
  public Cyy1s081TypeListExport Cyy1s081TypeListcall(Cyy1s081TypeListImport in)
  	throws Exception
  ;
}
