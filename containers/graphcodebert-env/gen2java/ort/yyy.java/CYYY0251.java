
package gen.ort.yyy;

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
//
//                    Source Code Generated by
//                           CA Gen 8.6
//
//    Copyright (c) 2023 CA Technologies. All rights reserved.
//
//    Name: CYYY0251_CHILD_LIST              Date: 2023/07/05
//    Target OS:   JVM                       Time: 15:09:02
//    Target DBMS: JDBC                      User: HakanBal
//    Access Method: JDBC           
//
//    Generation options:
//    Debug trace option selected
//    Data modeling constraint enforcement not selected
//    Optimized import view initialization not selected
//    Enforce default values with DBMS not selected
//    Init unspecified optional fields to NULL not selected
//
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// Import Statements
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
import java.lang.*;
import java.io.*;
import java.util.*;
import java.math.*;
import java.sql.*;
import com.ca.gen.vwrt.*;
import com.ca.gen.vwrt.types.*;
import com.ca.gen.vwrt.vdf.*;

import com.ca.gen.abrt.*;
import com.ca.gen.abrt.functions.*;
import com.ca.gen.abrt.cascade.*;
import com.ca.gen.abrt.trace.*;
import com.ca.gen.exits.common.*;
import com.ca.gen.odc.*;

public class CYYY0251 extends ABBase
{
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // IMPORT VIEW CLASS VARIABLE
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  CYYY0251_IA w_ia;
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // EXPORT VIEW CLASS VARIABLE
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  CYYY0251_OA w_oa;
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // LOCAL VIEW CLASS VARIABLE
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  CYYY0251_LA w_la;
  
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // ACTION BLOCK IMPORT/EXPORT VIEWS CLASS VARIABLES
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // Data Structure for string function
  // Data View Group: workarea_001
  //      DVG id name: workarea_001_oa
  // Entity View: EXPORT
  //        Type: STORAGE
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  StringAttr workarea_001_oa_output_string_FP_001 = StringAttr.getInstance();
  
  // Data View Group: workarea_002
  //      DVG id name: workarea_002_oa
  // Entity View: EXPORT
  //        Type: STORAGE
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  StringAttr workarea_002_oa_output_string_FP_002 = StringAttr.getInstance();
  
  gen.ort.yyy.CYYY9001_OA cyyy9001_oa;
  gen.ort.yyy.CYYY9141_IA cyyy9141_ia;
  gen.ort.yyy.CYYY9141_OA cyyy9141_oa;
  gen.ort.yyy.DYYY0251_IA dyyy0251_ia;
  gen.ort.yyy.DYYY0251_OA dyyy0251_oa;
  // Data View Group: TRIM_IA
  // Entity View: IMPORT
  //        Type: TRIM
  StringAttr trim_ia_ImportTrimInputString_FP_152 = StringAttr.getInstance();
  // Data View Group: CONCAT_IA
  // Entity View: IMPORT
  //        Type: CONCAT
  StringAttr concat_ia_ImportConcatString1_FP_153 = StringAttr.getInstance();
  StringAttr concat_ia_ImportConcatString2_FP_153 = StringAttr.getInstance();
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // REPEATING GROUP VIEW STATUS FIELDS 
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  boolean ExpGroupList_FL_001;
  int ExpGroupList_PS_001;
  boolean ExpGroupList_RF_001;
  public final static int ExpGroupList_MM_001 = 48;
  boolean LocGroupList_FL_002;
  int LocGroupList_PS_002;
  boolean LocGroupList_RF_002;
  public final static int LocGroupList_MM_002 = 48;
  boolean LocGroupContext_FL_003;
  int LocGroupContext_PS_003;
  boolean LocGroupContext_RF_003;
  public final static int LocGroupContext_MM_003 = 9;
  boolean ImpGroupContext_FL_004;
  int ImpGroupContext_PS_004;
  boolean ImpGroupContext_RF_004;
  public final static int ImpGroupContext_MM_004 = 9;
  boolean ExpGroupList_FL_005;
  int ExpGroupList_PS_005;
  boolean ExpGroupList_RF_005;
  public final static int ExpGroupList_MM_005 = 48;
  
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // MISC DECLARATIONS AND PROTOTYPES 
  //    FOLLOW AS NEEDED:             
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  boolean func_0022020126_esc_flag;
  boolean func_0020971646_esc_flag;
  boolean func_0020972420_esc_flag;
  boolean func_0020972175_esc_flag;
  boolean func_0020971876_esc_flag;
  boolean func_0020972923_esc_flag;
  boolean func_0020971767_esc_flag;
  boolean func_0020972801_esc_flag;
  boolean func_0020971719_esc_flag;
  boolean func_0020972331_esc_flag;
  boolean repeat_0066060319_esc_flag;
  boolean func_0020972001_esc_flag;
  boolean func_0020972693_esc_flag;
  PadView padview[] = new PadView [116];
  int trace_ret_code;
  PadText padtext[] = initPadText();
  public PadText [] initPadText()
  {
    PadText [] result = new PadText [PADTEXT_SIZE];
    result[0] = PadText.getInstance(   0,"+->   CYYY0251_CHILD_LIST               07/05/2023  15:09");
    result[1] = PadText.getInstance(   0,"!       IMPORTS:");
    result[2] = PadText.getInstance(   0,"!         Work View imp_filter iyy1_list (Transient, Mandatory, Import only)");
    result[3] = PadText.getInstance(   0,"!           sort_option");
    result[4] = PadText.getInstance(   0,"!           scroll_type");
    result[5] = PadText.getInstance(   0,"!           list_direction");
    result[6] = PadText.getInstance(   0,"!           scroll_amount");
    result[7] = PadText.getInstance(   0,"!           order_by_field_num");
    result[8] = PadText.getInstance(   0,"!         Entity View imp_from child (Transient, Mandatory, Import only)");
    result[9] = PadText.getInstance(   0,"!           cinstance_id");
    result[10] = PadText.getInstance(   0,"!           cparent_pkey_attr_text");
    result[11] = PadText.getInstance(   0,"!           ckey_attr_num");
    result[12] = PadText.getInstance(   0,"!         Entity View imp_filter_start child (Transient, Mandatory, Import only)");
    result[13] = PadText.getInstance(   0,"!           cparent_pkey_attr_text");
    result[14] = PadText.getInstance(   0,"!           ckey_attr_num");
    result[15] = PadText.getInstance(   0,"!         Entity View imp_filter_stop child (Transient, Mandatory, Import only)");
    result[16] = PadText.getInstance(   0,"!           cparent_pkey_attr_text");
    result[17] = PadText.getInstance(   0,"!           ckey_attr_num");
    result[18] = PadText.getInstance(   0,"!         Entity View imp_filter child (Transient, Mandatory, Import only)");
    result[19] = PadText.getInstance(   0,"!           csearch_attr_text");
    result[20] = PadText.getInstance(   0,"!       EXPORTS:");
    result[21] = PadText.getInstance(   0,"!         Group View (48) exp_group_list");
    result[22] = PadText.getInstance(   0,"!           Entity View exp_g_list child (Transient, Export only)");
    result[23] = PadText.getInstance(   0,"!             cinstance_id");
    result[24] = PadText.getInstance(   0,"!             creference_id");
    result[25] = PadText.getInstance(   0,"!             cparent_pkey_attr_text");
    result[26] = PadText.getInstance(   0,"!             ckey_attr_num");
    result[27] = PadText.getInstance(   0,"!             csearch_attr_text");
    result[28] = PadText.getInstance(   0,"!             cother_attr_text");
    result[29] = PadText.getInstance(   0,"!         Work View exp_error iyy1_component (Transient, Export only)");
    result[30] = PadText.getInstance(   0,"!           severity_code");
    result[31] = PadText.getInstance(   0,"!           rollback_indicator");
    result[32] = PadText.getInstance(   0,"!           origin_servid");
    result[33] = PadText.getInstance(   0,"!           context_string");
    result[34] = PadText.getInstance(   0,"!           return_code");
    result[35] = PadText.getInstance(   0,"!           reason_code");
    result[36] = PadText.getInstance(   0,"!           checksum");
    result[37] = PadText.getInstance(   0,"!       LOCALS:");
    result[38] = PadText.getInstance(   0,"!         Work View loc_filter iyy1_list");
    result[39] = PadText.getInstance(   0,"!           sort_option");
    result[40] = PadText.getInstance(   0,"!           scroll_type");
    result[41] = PadText.getInstance(   0,"!           list_direction");
    result[42] = PadText.getInstance(   0,"!           scroll_amount");
    result[43] = PadText.getInstance(   0,"!           order_by_field_num");
    result[44] = PadText.getInstance(   0,"!         Entity View loc_from child");
    result[45] = PadText.getInstance(   0,"!           ckey_attr_num");
    result[46] = PadText.getInstance(   0,"!           cparent_pkey_attr_text");
    result[47] = PadText.getInstance(   0,"!           cinstance_id");
    result[48] = PadText.getInstance(   0,"!         Entity View loc_filter_start child");
    result[49] = PadText.getInstance(   0,"!           cparent_pkey_attr_text");
    result[50] = PadText.getInstance(   0,"!           ckey_attr_num");
    result[51] = PadText.getInstance(   0,"!         Entity View loc_filter_stop child");
    result[52] = PadText.getInstance(   0,"!           cparent_pkey_attr_text");
    result[53] = PadText.getInstance(   0,"!           ckey_attr_num");
    result[54] = PadText.getInstance(   0,"!         Entity View loc_filter child");
    result[55] = PadText.getInstance(   0,"!           csearch_attr_text");
    result[56] = PadText.getInstance(   0,"!         Group View (48) loc_group_list");
    result[57] = PadText.getInstance(   0,"!           Entity View loc_g_list child");
    result[58] = PadText.getInstance(   0,"!             cinstance_id");
    result[59] = PadText.getInstance(   0,"!             creference_id");
    result[60] = PadText.getInstance(   0,"!             cparent_pkey_attr_text");
    result[61] = PadText.getInstance(   0,"!             ckey_attr_num");
    result[62] = PadText.getInstance(   0,"!             csearch_attr_text");
    result[63] = PadText.getInstance(   0,"!             cother_attr_text");
    result[64] = PadText.getInstance(   0,"!         Entity View loc_empty child");
    result[65] = PadText.getInstance(   0,"!           cinstance_id");
    result[66] = PadText.getInstance(   0,"!           cparent_pkey_attr_text");
    result[67] = PadText.getInstance(   0,"!           ckey_attr_num");
    result[68] = PadText.getInstance(   0,"!         Entity View loc_max child");
    result[69] = PadText.getInstance(   0,"!           cparent_pkey_attr_text");
    result[70] = PadText.getInstance(   0,"!           ckey_attr_num");
    result[71] = PadText.getInstance(   0,"!         Work View loc_read_lb iyy1_supplied");
    result[72] = PadText.getInstance(   0,"!           total_integer");
    result[73] = PadText.getInstance(   0,"!         Work View loc_error iyy1_component");
    result[74] = PadText.getInstance(   0,"!           severity_code");
    result[75] = PadText.getInstance(   0,"!           rollback_indicator");
    result[76] = PadText.getInstance(   0,"!           origin_servid");
    result[77] = PadText.getInstance(   0,"!           context_string");
    result[78] = PadText.getInstance(   0,"!           return_code");
    result[79] = PadText.getInstance(   0,"!           reason_code");
    result[80] = PadText.getInstance(   0,"!           checksum");
    result[81] = PadText.getInstance(   0,"!         Group View (9) loc_group_context");
    result[82] = PadText.getInstance(   0,"!           Work View loc_g_context dont_change_text");
    result[83] = PadText.getInstance(   0,"!             text_150");
    result[84] = PadText.getInstance(   0,"!         Work View loc dont_change_return_codes");
    result[85] = PadText.getInstance(   0,"!           1_ok");
    result[86] = PadText.getInstance(   0,"!         Work View loc dont_change_reason_codes");
    result[87] = PadText.getInstance(   0,"!           1_default");
    result[88] = PadText.getInstance(   0,"!           11_list_full");
    result[89] = PadText.getInstance(   0,"!           12_list_empty");
    result[90] = PadText.getInstance(   0,"!         Work View loc_mvs_string_high_value iyy1_supplied");
    result[91] = PadText.getInstance(   0,"!           flag");
    result[92] = PadText.getInstance(   0,"!         Work View loc_pc_string_high_value iyy1_supplied");
    result[93] = PadText.getInstance(   0,"!           flag");
    result[94] = PadText.getInstance(   0,"!");
    result[95] = PadText.getInstance(   0,"!     PROCEDURE STATEMENTS");
    result[96] = PadText.getInstance(   0,"!");
    result[97] = PadText.getInstance(   1,"!  NOTE: ");
    result[98] = PadText.getInstance(   1,"!  See the description for the purpose.");
    result[99] = PadText.getInstance(   1,"!  ");
    result[100] = PadText.getInstance(   2,"!  NOTE: ");
    result[101] = PadText.getInstance(   2,"!  RELEASE HISTORY");
    result[102] = PadText.getInstance(   2,"!  01_00 23-02-1998 New release");
    result[103] = PadText.getInstance(   2,"!  ");
    result[104] = PadText.getInstance(   3,"!  USE cyyy9001_exception_hndlng_dflt");
    result[105] = PadText.getInstance(   3,
      "!     WHICH EXPORTS: Work View exp_error iyy1_component FROM Work View exp_error iyy1_component");
    result[106] = PadText.getInstance(   4,"!   ");
    result[107] = PadText.getInstance(   5,"!  NOTE: ");
    result[108] = PadText.getInstance(   5,"!  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
    result[109] = PadText.getInstance(   5,"!  Name the method below");
    result[110] = PadText.getInstance(   5,"!  ");
    result[111] = PadText.getInstance(   6,"!  SET SUBSCRIPT OF loc_group_context TO 1 ");
    result[112] = PadText.getInstance(   7,"!  SET loc_g_context dont_change_text text_150 TO \"CYYY0251\" ");
    result[113] = PadText.getInstance(   8,"!  SET SUBSCRIPT OF loc_group_context TO 2 ");
    result[114] = PadText.getInstance(   9,"!  SET loc_g_context dont_change_text text_150 TO \"LIST\" ");
    result[115] = PadText.getInstance(  10,"!   ");
    result[116] = PadText.getInstance(  11,"!  NOTE: ");
    result[117] = PadText.getInstance(  11,"!  ****************************************************************");
    result[118] = PadText.getInstance(  11,"!  The used ReturnCode/ReasonCode values");
    result[119] = PadText.getInstance(  11,"!  ");
    result[120] = PadText.getInstance(  12,"!  NOTE: ");
    result[121] = PadText.getInstance(  12,"!  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
    result[122] = PadText.getInstance(  12,"!  Set the return and reason codes below");
    result[123] = PadText.getInstance(  12,"!  ");
    result[124] = PadText.getInstance(  13,"!  SET loc dont_change_return_codes 1_ok TO 1 ");
    result[125] = PadText.getInstance(  14,"!   ");
    result[126] = PadText.getInstance(  15,"!  SET loc dont_change_reason_codes 1_default TO 1 ");
    result[127] = PadText.getInstance(  16,"!   ");
    result[128] = PadText.getInstance(  17,"!  NOTE: ");
    result[129] = PadText.getInstance(  17,"!  ****************************************************************");
    result[130] = PadText.getInstance(  17,"!  a) The attribute(s) to be sorted must be in imp_from.");
    result[131] = PadText.getInstance(  17,
      "!  b) If the attribute(s) to be sorted are not unique, the attribute(s) supplying them to be unique must be added.");
    result[132] = PadText.getInstance(  17,"!  (Being defined as index in DB is not necessary)");
    result[133] = PadText.getInstance(  17,
      "!  c) If there are multiple sorting options, common attribute(s) will naturally be in imp_form once.");
    result[134] = PadText.getInstance(  17,
"!  d) Attribute(s) to be sorted SORTED BY(s) must be included too, for uniqueness attribute(s) must be at the end if added any.");
    result[135] = PadText.getInstance(  17,
"!  e) Attribute(s) in SORTED BY(s) must be first in WHERE condition in I1204such a manner that they oversee the same sequence.");
    result[136] = PadText.getInstance(  17,"!  ");
    result[137] = PadText.getInstance(  18,"!  +->IF exp_error iyy1_component return_code >= loc dont_change_return_codes 1_ok");
    result[138] = PadText.getInstance(  19,"!  !  MOVE imp_filter iyy1_list TO loc_filter iyy1_list");
    result[139] = PadText.getInstance(  20,"!  !   ");
    result[140] = PadText.getInstance(  21,"!  !  +->IF loc_filter iyy1_list scroll_amount > MAX OF exp_group_list  ");
    result[141] = PadText.getInstance(  21,"!  !  !        OR  loc_filter iyy1_list scroll_amount < 1");
    result[142] = PadText.getInstance(  22,"!  !  !  SET loc_filter iyy1_list scroll_amount TO MAX OF exp_group_list ");
    result[143] = PadText.getInstance(  21,"!  !  +--");
    result[144] = PadText.getInstance(  23,"!  !  +->IF loc_filter iyy1_list sort_option = SPACES");
    result[145] = PadText.getInstance(  24,"!  !  !  SET loc_filter iyy1_list sort_option TO \"ASC\" ");
    result[146] = PadText.getInstance(  23,"!  !  +--");
    result[147] = PadText.getInstance(  25,"!  !  +->IF loc_filter iyy1_list list_direction = \"P\"");
    result[148] = PadText.getInstance(  26,"!  !  !  +->IF loc_filter iyy1_list sort_option = \"ASC\"");
    result[149] = PadText.getInstance(  27,"!  !  !  !  SET loc_filter iyy1_list sort_option TO \"DES\" ");
    result[150] = PadText.getInstance(  26, 1, "!  !  !  +> ELSE");
    result[151] = PadText.getInstance(  28,"!  !  !  !  SET loc_filter iyy1_list sort_option TO \"ASC\" ");
    result[152] = PadText.getInstance(  26,"!  !  !  +--");
    result[153] = PadText.getInstance(  25,"!  !  +--");
    result[154] = PadText.getInstance(  29,"!  !   ");
    result[155] = PadText.getInstance(  30,"!  !  NOTE: ");
    result[156] = PadText.getInstance(  30,"!  !  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
    result[157] = PadText.getInstance(  30,"!  !  Check over the filtering sections");
    result[158] = PadText.getInstance(  30,"!  !  ");
    result[159] = PadText.getInstance(  31,"!  !  NOTE: ");
    result[160] = PadText.getInstance(  31,"!  !  ****************************************************************");
    result[161] = PadText.getInstance(  31,"!  !  Min-Max interval filtering");
    result[162] = PadText.getInstance(  31,"!  !  ");
    result[163] = PadText.getInstance(  32,"!  !  MOVE imp_filter_start child TO loc_filter_start child");
    result[164] = PadText.getInstance(  33,"!  !  MOVE imp_filter_stop child TO loc_filter_stop child");
    result[165] = PadText.getInstance(  34,"!  !   ");
    result[166] = PadText.getInstance(  35,"!  !  NOTE: ");
    result[167] = PadText.getInstance(  35,"!  !  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
    result[168] = PadText.getInstance(  35,"!  !  Give the highest value that every key and filter_stop variable can get");
    result[169] = PadText.getInstance(  35,"!  !  ");
    result[170] = PadText.getInstance(  36,"!  !  SET loc_mvs_string_high_value iyy1_supplied flag TO \"9\" ");
    result[171] = PadText.getInstance(  37,"!  !  SET loc_pc_string_high_value iyy1_supplied flag TO \"Z\" ");
    result[172] = PadText.getInstance(  38,"!  !   ");
    result[173] = PadText.getInstance(  39,"!  !  SET loc_max child ckey_attr_num TO 999999 ");
    result[174] = PadText.getInstance(  40,
      "!  !  +->IF loc_pc_string_high_value iyy1_supplied flag > loc_mvs_string_high_value iyy1_supplied flag");
    result[175] = PadText.getInstance(  41,"!  !  !  SET loc_max child cparent_pkey_attr_text TO \"ZZZZZ\" ");
    result[176] = PadText.getInstance(  40, 1, "!  !  +> ELSE");
    result[177] = PadText.getInstance(  42,"!  !  !  SET loc_max child cparent_pkey_attr_text TO \"99999\" ");
    result[178] = PadText.getInstance(  40,"!  !  +--");
    result[179] = PadText.getInstance(  43,"!  !   ");
    result[180] = PadText.getInstance(  44,"!  !  NOTE: ");
    result[181] = PadText.getInstance(  44,"!  !  ****************************************************************");
    result[182] = PadText.getInstance(  44,"!  !  If the stop comes empty, it is accepted as maximum.");
    result[183] = PadText.getInstance(  44,
      "!  !  If the stop comes occupied it cannot be less than Start, if it is less it is made equal to start.");
    result[184] = PadText.getInstance(  44,"!  !  ");
    result[185] = PadText.getInstance(  45,
      "!  !  +->IF loc_filter_stop child cparent_pkey_attr_text <= loc_empty child cparent_pkey_attr_text");
    result[186] = PadText.getInstance(  46,
      "!  !  !  SET loc_filter_stop child cparent_pkey_attr_text TO loc_max child cparent_pkey_attr_text ");
    result[187] = PadText.getInstance(  45, 1, "!  !  +> ELSE");
    result[188] = PadText.getInstance(  47,
      "!  !  !  +->IF loc_filter_start child cparent_pkey_attr_text > loc_filter_stop child cparent_pkey_attr_text");
    result[189] = PadText.getInstance(  48,
      "!  !  !  !  SET loc_filter_stop child cparent_pkey_attr_text TO loc_filter_start child cparent_pkey_attr_text ");
    result[190] = PadText.getInstance(  47,"!  !  !  +--");
    result[191] = PadText.getInstance(  45,"!  !  +--");
    result[192] = PadText.getInstance(  49,"!  !  +->IF loc_filter_stop child ckey_attr_num <= loc_empty child ckey_attr_num");
    result[193] = PadText.getInstance(  50,"!  !  !  SET loc_filter_stop child ckey_attr_num TO loc_max child ckey_attr_num ");
    result[194] = PadText.getInstance(  49, 1, "!  !  +> ELSE");
    result[195] = PadText.getInstance(  51,
      "!  !  !  +->IF loc_filter_start child ckey_attr_num > loc_filter_stop child ckey_attr_num");
    result[196] = PadText.getInstance(  52,
      "!  !  !  !  SET loc_filter_stop child ckey_attr_num TO loc_filter_start child ckey_attr_num ");
    result[197] = PadText.getInstance(  51,"!  !  !  +--");
    result[198] = PadText.getInstance(  49,"!  !  +--");
    result[199] = PadText.getInstance(  53,"!  !   ");
    result[200] = PadText.getInstance(  54,"!  !  MOVE imp_from child TO loc_from child");
    result[201] = PadText.getInstance(  55,"!  !   ");
    result[202] = PadText.getInstance(  56,"!  !  NOTE: ");
    result[203] = PadText.getInstance(  56,"!  !  ****************************************************************");
    result[204] = PadText.getInstance(  56,"!  !  From initial value is checked");
    result[205] = PadText.getInstance(  56,"!  !  ");
    result[206] = PadText.getInstance(  57,"!  !  +->IF loc_filter iyy1_list sort_option = \"ASC\"");
    result[207] = PadText.getInstance(  57, 1, "!  !  +> ELSE");
    result[208] = PadText.getInstance(  58,"!  !  !  NOTE: ");
    result[209] = PadText.getInstance(  58,"!  !  !  ****************************************************************");
    result[210] = PadText.getInstance(  58,"!  !  !  If From comes empty for Full list, it is made equal to Max.");
    result[211] = PadText.getInstance(  58,"!  !  !  ");
    result[212] = PadText.getInstance(  59,"!  !  !  +->IF loc_filter iyy1_list scroll_type ^= \"S\"");
    result[213] = PadText.getInstance(  60,"!  !  !  !  NOTE: ");
    result[214] = PadText.getInstance(  60,"!  !  !  !  ****************************************************************");
    result[215] = PadText.getInstance(  60,"!  !  !  !  If From comes empty for Full list, it is made equal to Max.");
    result[216] = PadText.getInstance(  60,"!  !  !  !  ");
    result[217] = PadText.getInstance(  61,
      "!  !  !  !  +->IF loc_from child cparent_pkey_attr_text <= loc_empty child cparent_pkey_attr_text  ");
    result[218] = PadText.getInstance(  61,"!  !  !  !  !        AND  loc_from child ckey_attr_num <= loc_empty child ckey_attr_num")
      ;
    result[219] = PadText.getInstance(  62,
      "!  !  !  !  !  SET loc_from child cparent_pkey_attr_text TO loc_max child cparent_pkey_attr_text ");
    result[220] = PadText.getInstance(  63,"!  !  !  !  !  SET loc_from child ckey_attr_num TO loc_max child ckey_attr_num ");
    result[221] = PadText.getInstance(  61,"!  !  !  !  +--");
    result[222] = PadText.getInstance(  59,"!  !  !  +--");
    result[223] = PadText.getInstance(  57,"!  !  +--");
    result[224] = PadText.getInstance(  64,"!  !   ");
    result[225] = PadText.getInstance(  65,"!  !  NOTE: ");
    result[226] = PadText.getInstance(  65,"!  !  ****************************************************************");
    result[227] = PadText.getInstance(  65,
      "!  !  If the attributes in filter_start and filter_stop appear in from too, From cannot come greater than filter_Stop and ");
    result[228] = PadText.getInstance(  65,"!  !  less than filter_Start.");
    result[229] = PadText.getInstance(  65,"!  !  ");
    result[230] = PadText.getInstance(  66,
      "!  !  +->IF ((loc_from child cparent_pkey_attr_text < loc_filter_start child cparent_pkey_attr_text)  ");
    result[231] = PadText.getInstance(  66,
      "!  !  !        OR  (loc_from child cparent_pkey_attr_text = loc_filter_start child cparent_pkey_attr_text  ");
    result[232] = PadText.getInstance(  66,
      "!  !  !        AND  loc_from child ckey_attr_num < loc_filter_start child ckey_attr_num))  ");
    result[233] = PadText.getInstance(  66,
      "!  !  !        OR  ((loc_from child cparent_pkey_attr_text > loc_filter_stop child cparent_pkey_attr_text)  ");
    result[234] = PadText.getInstance(  66,
      "!  !  !        OR  (loc_from child cparent_pkey_attr_text = loc_filter_stop child cparent_pkey_attr_text  ");
    result[235] = PadText.getInstance(  66,"!  !  !        AND  loc_from child ckey_attr_num > loc_filter_stop child ckey_attr_num))"
      );
    result[236] = PadText.getInstance(  67,"!  !  !   ");
    result[237] = PadText.getInstance(  68,"!  !  !  +->IF loc_filter iyy1_list sort_option = \"ASC\"");
    result[238] = PadText.getInstance(  69,
      "!  !  !  !  SET loc_from child cparent_pkey_attr_text TO loc_filter_start child cparent_pkey_attr_text ");
    result[239] = PadText.getInstance(  70,"!  !  !  !  SET loc_from child ckey_attr_num TO loc_filter_start child ckey_attr_num ");
    result[240] = PadText.getInstance(  68, 1, "!  !  !  +> ELSE");
    result[241] = PadText.getInstance(  71,
      "!  !  !  !  SET loc_from child cparent_pkey_attr_text TO loc_filter_stop child cparent_pkey_attr_text ");
    result[242] = PadText.getInstance(  72,"!  !  !  !  SET loc_from child ckey_attr_num TO loc_filter_stop child ckey_attr_num ");
    result[243] = PadText.getInstance(  68,"!  !  !  +--");
    result[244] = PadText.getInstance(  66,"!  !  +--");
    result[245] = PadText.getInstance(  73,"!  !   ");
    result[246] = PadText.getInstance(  74,"!  !  NOTE: ");
    result[247] = PadText.getInstance(  74,"!  !  ****************************************************************");
    result[248] = PadText.getInstance(  74,"!  !  Filtering (Compensate % as much as the filter variable length)");
    result[249] = PadText.getInstance(  74,"!  !  ");
    result[250] = PadText.getInstance(  75,"!  !  SET loc_filter child csearch_attr_text TO \"%%%%%%%%%%%%%%%%%%%%%%%%%\" ");
    result[251] = PadText.getInstance(  76,
      "!  !  SET loc_filter child csearch_attr_text TO concat(trim(imp_filter child csearch_attr_text),");
    result[252] = PadText.getInstance(  76,"!  !              loc_filter child csearch_attr_text) ");
    result[253] = PadText.getInstance(  77,"!  !  NOTE: ");
    result[254] = PadText.getInstance(  77,"!  !  ****************************************************************");
    result[255] = PadText.getInstance(  77,"!  !  END OF filtering");
    result[256] = PadText.getInstance(  77,"!  !  ");
    result[257] = PadText.getInstance(  78,"!  !  USE dyyy0251_child_list");
    result[258] = PadText.getInstance(  78,
      "!  !     WHICH IMPORTS: Work View exp_error iyy1_component TO Work View imp_error iyy1_component");
    result[259] = PadText.getInstance(  78,"!  !                    Work View loc_filter iyy1_list TO Work View imp_filter iyy1_list"
      );
    result[260] = PadText.getInstance(  78,"!  !                    Entity View loc_from child TO Entity View imp_from child");
    result[261] = PadText.getInstance(  78,
      "!  !                    Entity View loc_filter_start child TO Entity View imp_filter_start child");
    result[262] = PadText.getInstance(  78,
      "!  !                    Entity View loc_filter_stop child TO Entity View imp_filter_stop child");
    result[263] = PadText.getInstance(  78,"!  !                    Entity View loc_filter child TO Entity View imp_filter child");
    result[264] = PadText.getInstance(  78,"!  !     WHICH EXPORTS: Group View  loc_group_list FROM Group View exp_group_list");
    result[265] = PadText.getInstance(  78,
      "!  !                    Work View loc_error iyy1_component FROM Work View exp_error iyy1_component");
    result[266] = PadText.getInstance(  79,"!  !  +->IF loc_error iyy1_component return_code < loc dont_change_return_codes 1_ok");
    result[267] = PadText.getInstance(  80,"!  !  !  MOVE loc_error iyy1_component TO exp_error iyy1_component");
    result[268] = PadText.getInstance(  81,"!  !  !  NOTE: ");
    result[269] = PadText.getInstance(  81,"!  !  !  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
    result[270] = PadText.getInstance(  81,
      "!  !  !  !! WARNING: In D AB, if there' s a need for generating context string, must exit from ESCAPE AB.");
    result[271] = PadText.getInstance(  81,"!  !  !  ");
    result[272] = PadText.getInstance(  82,"! <------ESCAPE");
    result[273] = PadText.getInstance(  79,"!  !  +--");
    result[274] = PadText.getInstance(  83,"!  !   ");
    result[275] = PadText.getInstance(  84,"!  !  SET loc_read_lb iyy1_supplied total_integer TO LAST OF loc_group_list ");
    result[276] = PadText.getInstance(  85,"!  !  +->IF loc_read_lb iyy1_supplied total_integer > 0");
    result[277] = PadText.getInstance(  86,"!  !  !  +->IF loc_filter iyy1_list list_direction = \"P\"");
    result[278] = PadText.getInstance(  87,"!  !  !  !  SET SUBSCRIPT OF loc_group_list TO loc_read_lb iyy1_supplied total_integer ")
      ;
    result[279] = PadText.getInstance(  86, 1, "!  !  !  +> ELSE");
    result[280] = PadText.getInstance(  88,"!  !  !  !  SET SUBSCRIPT OF loc_group_list TO 1 ");
    result[281] = PadText.getInstance(  86,"!  !  !  +--");
    result[282] = PadText.getInstance(  89,"!  !  !  SET SUBSCRIPT OF exp_group_list TO 0 ");
    result[283] = PadText.getInstance(  90, 1, "!  !  !  +=>REPEAT");
    result[284] = PadText.getInstance(  91,"!  !  !  !  SET SUBSCRIPT OF exp_group_list TO SUBSCRIPT OF exp_group_list + 1 ");
    result[285] = PadText.getInstance(  92,"!  !  !  !  MOVE loc_g_list child TO exp_g_list child");
    result[286] = PadText.getInstance(  93,"!  !  !  !  +->IF loc_filter iyy1_list list_direction = \"P\"");
    result[287] = PadText.getInstance(  94,"!  !  !  !  !  SET SUBSCRIPT OF loc_group_list TO SUBSCRIPT OF loc_group_list - 1 ");
    result[288] = PadText.getInstance(  93, 1, "!  !  !  !  +> ELSE");
    result[289] = PadText.getInstance(  95,"!  !  !  !  !  SET SUBSCRIPT OF loc_group_list TO SUBSCRIPT OF loc_group_list + 1 ");
    result[290] = PadText.getInstance(  93,"!  !  !  !  +--");
    result[291] = PadText.getInstance(  96,
      "!  !  !  !  SET loc_read_lb iyy1_supplied total_integer TO loc_read_lb iyy1_supplied total_integer - 1 ");
    result[292] = PadText.getInstance(  90,"!  !  !  +--UNTIL loc_read_lb iyy1_supplied total_integer = 0");
    result[293] = PadText.getInstance(  85,"!  !  +--");
    result[294] = PadText.getInstance(  18,"!  +--");
    result[295] = PadText.getInstance(  97,"!   ");
    result[296] = PadText.getInstance(  98,"!  +->IF exp_error iyy1_component return_code < loc dont_change_return_codes 1_ok");
    result[297] = PadText.getInstance(  99,"!  !  USE cyyy9141_context_string_set");
    result[298] = PadText.getInstance(  99,"!  !     WHICH IMPORTS: Group View  loc_group_context TO Group View imp_group_context");
    result[299] = PadText.getInstance(  99,
      "!  !     WHICH EXPORTS: Work View loc_error iyy1_component FROM Work View exp_error iyy1_component");
    result[300] = PadText.getInstance(  99,
      "!  !                    Work View exp_error iyy1_component FROM Work View exp_context iyy1_component");
    result[301] = PadText.getInstance( 100,"!  !   ");
    result[302] = PadText.getInstance( 101,"!  !  +->IF loc_error iyy1_component return_code < loc dont_change_return_codes 1_ok");
    result[303] = PadText.getInstance( 102,"!  !  !  MOVE loc_error iyy1_component TO exp_error iyy1_component");
    result[304] = PadText.getInstance( 101,"!  !  +--");
    result[305] = PadText.getInstance( 103,"!  !  SET exp_error iyy1_component severity_code TO \"E\" ");
    result[306] = PadText.getInstance(  98,"!  +--");
    result[307] = PadText.getInstance(   0,"+---");
    result[308] = PadText.getInstance(PadText.LASTLINE,"************************* BOTTOM OF DATA *************************");
    return result;
  }
  final static int PADTEXT_SIZE = 309;
  //       +->   CYYY0251_CHILD_LIST               07/05/2023  15:09
  //       !       IMPORTS:
  //       !         Work View imp_filter iyy1_list (Transient, Mandatory, Import only)
  //       !           sort_option
  //       !           scroll_type
  //       !           list_direction
  //       !           scroll_amount
  //       !           order_by_field_num
  //       !         Entity View imp_from child (Transient, Mandatory, Import only)
  //       !           cinstance_id
  //       !           cparent_pkey_attr_text
  //       !           ckey_attr_num
  //       !         Entity View imp_filter_start child (Transient, Mandatory, Import only)
  //       !           cparent_pkey_attr_text
  //       !           ckey_attr_num
  //       !         Entity View imp_filter_stop child (Transient, Mandatory, Import only)
  //       !           cparent_pkey_attr_text
  //       !           ckey_attr_num
  //       !         Entity View imp_filter child (Transient, Mandatory, Import only)
  //       !           csearch_attr_text
  //       !       EXPORTS:
  //       !         Group View (48) exp_group_list
  //       !           Entity View exp_g_list child (Transient, Export only)
  //       !             cinstance_id
  //       !             creference_id
  //       !             cparent_pkey_attr_text
  //       !             ckey_attr_num
  //       !             csearch_attr_text
  //       !             cother_attr_text
  //       !         Work View exp_error iyy1_component (Transient, Export only)
  //       !           severity_code
  //       !           rollback_indicator
  //       !           origin_servid
  //       !           context_string
  //       !           return_code
  //       !           reason_code
  //       !           checksum
  //       !       LOCALS:
  //       !         Work View loc_filter iyy1_list
  //       !           sort_option
  //       !           scroll_type
  //       !           list_direction
  //       !           scroll_amount
  //       !           order_by_field_num
  //       !         Entity View loc_from child
  //       !           ckey_attr_num
  //       !           cparent_pkey_attr_text
  //       !           cinstance_id
  //       !         Entity View loc_filter_start child
  //       !           cparent_pkey_attr_text
  //       !           ckey_attr_num
  //       !         Entity View loc_filter_stop child
  //       !           cparent_pkey_attr_text
  //       !           ckey_attr_num
  //       !         Entity View loc_filter child
  //       !           csearch_attr_text
  //       !         Group View (48) loc_group_list
  //       !           Entity View loc_g_list child
  //       !             cinstance_id
  //       !             creference_id
  //       !             cparent_pkey_attr_text
  //       !             ckey_attr_num
  //       !             csearch_attr_text
  //       !             cother_attr_text
  //       !         Entity View loc_empty child
  //       !           cinstance_id
  //       !           cparent_pkey_attr_text
  //       !           ckey_attr_num
  //       !         Entity View loc_max child
  //       !           cparent_pkey_attr_text
  //       !           ckey_attr_num
  //       !         Work View loc_read_lb iyy1_supplied
  //       !           total_integer
  //       !         Work View loc_error iyy1_component
  //       !           severity_code
  //       !           rollback_indicator
  //       !           origin_servid
  //       !           context_string
  //       !           return_code
  //       !           reason_code
  //       !           checksum
  //       !         Group View (9) loc_group_context
  //       !           Work View loc_g_context dont_change_text
  //       !             text_150
  //       !         Work View loc dont_change_return_codes
  //       !           1_ok
  //       !         Work View loc dont_change_reason_codes
  //       !           1_default
  //       !           11_list_full
  //       !           12_list_empty
  //       !         Work View loc_mvs_string_high_value iyy1_supplied
  //       !           flag
  //       !         Work View loc_pc_string_high_value iyy1_supplied
  //       !           flag
  //       !
  //       !     PROCEDURE STATEMENTS
  //       !
  //     1 !  NOTE: 
  //     1 !  See the description for the purpose.
  //     1 !  
  //     2 !  NOTE: 
  //     2 !  RELEASE HISTORY
  //     2 !  01_00 23-02-1998 New release
  //     2 !  
  //     3 !  USE cyyy9001_exception_hndlng_dflt
  //     3 !     WHICH EXPORTS: Work View exp_error iyy1_component FROM Work View exp_error iyy1_component
  //     4 !   
  //     5 !  NOTE: 
  //     5 !  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  //     5 !  Name the method below
  //     5 !  
  //     6 !  SET SUBSCRIPT OF loc_group_context TO 1 
  //     7 !  SET loc_g_context dont_change_text text_150 TO "CYYY0251" 
  //     8 !  SET SUBSCRIPT OF loc_group_context TO 2 
  //     9 !  SET loc_g_context dont_change_text text_150 TO "LIST" 
  //    10 !   
  //    11 !  NOTE: 
  //    11 !  ****************************************************************
  //    11 !  The used ReturnCode/ReasonCode values
  //    11 !  
  //    12 !  NOTE: 
  //    12 !  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  //    12 !  Set the return and reason codes below
  //    12 !  
  //    13 !  SET loc dont_change_return_codes 1_ok TO 1 
  //    14 !   
  //    15 !  SET loc dont_change_reason_codes 1_default TO 1 
  //    16 !   
  //    17 !  NOTE: 
  //    17 !  ****************************************************************
  //    17 !  a) The attribute(s) to be sorted must be in imp_from.
  //    17 !  b) If the attribute(s) to be sorted are not unique, the attribute(s) supplying them to be unique must be added.
  //    17 !  (Being defined as index in DB is not necessary)
  //    17 !  c) If there are multiple sorting options, common attribute(s) will naturally be in imp_form once.
  //    17 !  d) Attribute(s) to be sorted SORTED BY(s) must be included too, for uniqueness attribute(s) must be at the end if 
  // added any.
  //    17 !  e) Attribute(s) in SORTED BY(s) must be first in WHERE condition in I1204such a manner that they oversee the same 
  // sequence.
  //    17 !  
  //    18 !  +->IF exp_error iyy1_component return_code >= loc dont_change_return_codes 1_ok
  //    19 !  !  MOVE imp_filter iyy1_list TO loc_filter iyy1_list
  //    20 !  !   
  //    21 !  !  +->IF loc_filter iyy1_list scroll_amount > MAX OF exp_group_list  
  //    21 !  !  !        OR  loc_filter iyy1_list scroll_amount < 1
  //    22 !  !  !  SET loc_filter iyy1_list scroll_amount TO MAX OF exp_group_list 
  //    21 !  !  +--
  //    23 !  !  +->IF loc_filter iyy1_list sort_option = SPACES
  //    24 !  !  !  SET loc_filter iyy1_list sort_option TO "ASC" 
  //    23 !  !  +--
  //    25 !  !  +->IF loc_filter iyy1_list list_direction = "P"
  //    26 !  !  !  +->IF loc_filter iyy1_list sort_option = "ASC"
  //    27 !  !  !  !  SET loc_filter iyy1_list sort_option TO "DES" 
  //    26 !  !  !  +> ELSE
  //    28 !  !  !  !  SET loc_filter iyy1_list sort_option TO "ASC" 
  //    26 !  !  !  +--
  //    25 !  !  +--
  //    29 !  !   
  //    30 !  !  NOTE: 
  //    30 !  !  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  //    30 !  !  Check over the filtering sections
  //    30 !  !  
  //    31 !  !  NOTE: 
  //    31 !  !  ****************************************************************
  //    31 !  !  Min-Max interval filtering
  //    31 !  !  
  //    32 !  !  MOVE imp_filter_start child TO loc_filter_start child
  //    33 !  !  MOVE imp_filter_stop child TO loc_filter_stop child
  //    34 !  !   
  //    35 !  !  NOTE: 
  //    35 !  !  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  //    35 !  !  Give the highest value that every key and filter_stop variable can get
  //    35 !  !  
  //    36 !  !  SET loc_mvs_string_high_value iyy1_supplied flag TO "9" 
  //    37 !  !  SET loc_pc_string_high_value iyy1_supplied flag TO "Z" 
  //    38 !  !   
  //    39 !  !  SET loc_max child ckey_attr_num TO 999999 
  //    40 !  !  +->IF loc_pc_string_high_value iyy1_supplied flag > loc_mvs_string_high_value iyy1_supplied flag
  //    41 !  !  !  SET loc_max child cparent_pkey_attr_text TO "ZZZZZ" 
  //    40 !  !  +> ELSE
  //    42 !  !  !  SET loc_max child cparent_pkey_attr_text TO "99999" 
  //    40 !  !  +--
  //    43 !  !   
  //    44 !  !  NOTE: 
  //    44 !  !  ****************************************************************
  //    44 !  !  If the stop comes empty, it is accepted as maximum.
  //    44 !  !  If the stop comes occupied it cannot be less than Start, if it is less it is made equal to start.
  //    44 !  !  
  //    45 !  !  +->IF loc_filter_stop child cparent_pkey_attr_text <= loc_empty child cparent_pkey_attr_text
  //    46 !  !  !  SET loc_filter_stop child cparent_pkey_attr_text TO loc_max child cparent_pkey_attr_text 
  //    45 !  !  +> ELSE
  //    47 !  !  !  +->IF loc_filter_start child cparent_pkey_attr_text > loc_filter_stop child cparent_pkey_attr_text
  //    48 !  !  !  !  SET loc_filter_stop child cparent_pkey_attr_text TO loc_filter_start child cparent_pkey_attr_text 
  //    47 !  !  !  +--
  //    45 !  !  +--
  //    49 !  !  +->IF loc_filter_stop child ckey_attr_num <= loc_empty child ckey_attr_num
  //    50 !  !  !  SET loc_filter_stop child ckey_attr_num TO loc_max child ckey_attr_num 
  //    49 !  !  +> ELSE
  //    51 !  !  !  +->IF loc_filter_start child ckey_attr_num > loc_filter_stop child ckey_attr_num
  //    52 !  !  !  !  SET loc_filter_stop child ckey_attr_num TO loc_filter_start child ckey_attr_num 
  //    51 !  !  !  +--
  //    49 !  !  +--
  //    53 !  !   
  //    54 !  !  MOVE imp_from child TO loc_from child
  //    55 !  !   
  //    56 !  !  NOTE: 
  //    56 !  !  ****************************************************************
  //    56 !  !  From initial value is checked
  //    56 !  !  
  //    57 !  !  +->IF loc_filter iyy1_list sort_option = "ASC"
  //    57 !  !  +> ELSE
  //    58 !  !  !  NOTE: 
  //    58 !  !  !  ****************************************************************
  //    58 !  !  !  If From comes empty for Full list, it is made equal to Max.
  //    58 !  !  !  
  //    59 !  !  !  +->IF loc_filter iyy1_list scroll_type ^= "S"
  //    60 !  !  !  !  NOTE: 
  //    60 !  !  !  !  ****************************************************************
  //    60 !  !  !  !  If From comes empty for Full list, it is made equal to Max.
  //    60 !  !  !  !  
  //    61 !  !  !  !  +->IF loc_from child cparent_pkey_attr_text <= loc_empty child cparent_pkey_attr_text  
  //    61 !  !  !  !  !        AND  loc_from child ckey_attr_num <= loc_empty child ckey_attr_num
  //    62 !  !  !  !  !  SET loc_from child cparent_pkey_attr_text TO loc_max child cparent_pkey_attr_text 
  //    63 !  !  !  !  !  SET loc_from child ckey_attr_num TO loc_max child ckey_attr_num 
  //    61 !  !  !  !  +--
  //    59 !  !  !  +--
  //    57 !  !  +--
  //    64 !  !   
  //    65 !  !  NOTE: 
  //    65 !  !  ****************************************************************
  //    65 !  !  If the attributes in filter_start and filter_stop appear in from too, From cannot come greater than filter_Stop and 
  // 
  //    65 !  !  less than filter_Start.
  //    65 !  !  
  //    66 !  !  +->IF ((loc_from child cparent_pkey_attr_text < loc_filter_start child cparent_pkey_attr_text)  
  //    66 !  !  !        OR  (loc_from child cparent_pkey_attr_text = loc_filter_start child cparent_pkey_attr_text  
  //    66 !  !  !        AND  loc_from child ckey_attr_num < loc_filter_start child ckey_attr_num))  
  //    66 !  !  !        OR  ((loc_from child cparent_pkey_attr_text > loc_filter_stop child cparent_pkey_attr_text)  
  //    66 !  !  !        OR  (loc_from child cparent_pkey_attr_text = loc_filter_stop child cparent_pkey_attr_text  
  //    66 !  !  !        AND  loc_from child ckey_attr_num > loc_filter_stop child ckey_attr_num))
  //    67 !  !  !   
  //    68 !  !  !  +->IF loc_filter iyy1_list sort_option = "ASC"
  //    69 !  !  !  !  SET loc_from child cparent_pkey_attr_text TO loc_filter_start child cparent_pkey_attr_text 
  //    70 !  !  !  !  SET loc_from child ckey_attr_num TO loc_filter_start child ckey_attr_num 
  //    68 !  !  !  +> ELSE
  //    71 !  !  !  !  SET loc_from child cparent_pkey_attr_text TO loc_filter_stop child cparent_pkey_attr_text 
  //    72 !  !  !  !  SET loc_from child ckey_attr_num TO loc_filter_stop child ckey_attr_num 
  //    68 !  !  !  +--
  //    66 !  !  +--
  //    73 !  !   
  //    74 !  !  NOTE: 
  //    74 !  !  ****************************************************************
  //    74 !  !  Filtering (Compensate % as much as the filter variable length)
  //    74 !  !  
  //    75 !  !  SET loc_filter child csearch_attr_text TO "%%%%%%%%%%%%%%%%%%%%%%%%%" 
  //    76 !  !  SET loc_filter child csearch_attr_text TO concat(trim(imp_filter child csearch_attr_text),
  //    76 !  !              loc_filter child csearch_attr_text) 
  //    77 !  !  NOTE: 
  //    77 !  !  ****************************************************************
  //    77 !  !  END OF filtering
  //    77 !  !  
  //    78 !  !  USE dyyy0251_child_list
  //    78 !  !     WHICH IMPORTS: Work View exp_error iyy1_component TO Work View imp_error iyy1_component
  //    78 !  !                    Work View loc_filter iyy1_list TO Work View imp_filter iyy1_list
  //    78 !  !                    Entity View loc_from child TO Entity View imp_from child
  //    78 !  !                    Entity View loc_filter_start child TO Entity View imp_filter_start child
  //    78 !  !                    Entity View loc_filter_stop child TO Entity View imp_filter_stop child
  //    78 !  !                    Entity View loc_filter child TO Entity View imp_filter child
  //    78 !  !     WHICH EXPORTS: Group View  loc_group_list FROM Group View exp_group_list
  //    78 !  !                    Work View loc_error iyy1_component FROM Work View exp_error iyy1_component
  //    79 !  !  +->IF loc_error iyy1_component return_code < loc dont_change_return_codes 1_ok
  //    80 !  !  !  MOVE loc_error iyy1_component TO exp_error iyy1_component
  //    81 !  !  !  NOTE: 
  //    81 !  !  !  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  //    81 !  !  !  !! WARNING: In D AB, if there' s a need for generating context string, must exit from ESCAPE AB.
  //    81 !  !  !  
  //    82 ! <------ESCAPE
  //    79 !  !  +--
  //    83 !  !   
  //    84 !  !  SET loc_read_lb iyy1_supplied total_integer TO LAST OF loc_group_list 
  //    85 !  !  +->IF loc_read_lb iyy1_supplied total_integer > 0
  //    86 !  !  !  +->IF loc_filter iyy1_list list_direction = "P"
  //    87 !  !  !  !  SET SUBSCRIPT OF loc_group_list TO loc_read_lb iyy1_supplied total_integer 
  //    86 !  !  !  +> ELSE
  //    88 !  !  !  !  SET SUBSCRIPT OF loc_group_list TO 1 
  //    86 !  !  !  +--
  //    89 !  !  !  SET SUBSCRIPT OF exp_group_list TO 0 
  //    90 !  !  !  +=>REPEAT
  //    91 !  !  !  !  SET SUBSCRIPT OF exp_group_list TO SUBSCRIPT OF exp_group_list + 1 
  //    92 !  !  !  !  MOVE loc_g_list child TO exp_g_list child
  //    93 !  !  !  !  +->IF loc_filter iyy1_list list_direction = "P"
  //    94 !  !  !  !  !  SET SUBSCRIPT OF loc_group_list TO SUBSCRIPT OF loc_group_list - 1 
  //    93 !  !  !  !  +> ELSE
  //    95 !  !  !  !  !  SET SUBSCRIPT OF loc_group_list TO SUBSCRIPT OF loc_group_list + 1 
  //    93 !  !  !  !  +--
  //    96 !  !  !  !  SET loc_read_lb iyy1_supplied total_integer TO loc_read_lb iyy1_supplied total_integer - 1 
  //    90 !  !  !  +--UNTIL loc_read_lb iyy1_supplied total_integer = 0
  //    85 !  !  +--
  //    18 !  +--
  //    97 !   
  //    98 !  +->IF exp_error iyy1_component return_code < loc dont_change_return_codes 1_ok
  //    99 !  !  USE cyyy9141_context_string_set
  //    99 !  !     WHICH IMPORTS: Group View  loc_group_context TO Group View imp_group_context
  //    99 !  !     WHICH EXPORTS: Work View loc_error iyy1_component FROM Work View exp_error iyy1_component
  //    99 !  !                    Work View exp_error iyy1_component FROM Work View exp_context iyy1_component
  //   100 !  !   
  //   101 !  !  +->IF loc_error iyy1_component return_code < loc dont_change_return_codes 1_ok
  //   102 !  !  !  MOVE loc_error iyy1_component TO exp_error iyy1_component
  //   101 !  !  +--
  //   103 !  !  SET exp_error iyy1_component severity_code TO "E" 
  //    98 !  +--
  //       +---
  
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  //  CONSTRUCTOR FOR THE CLASS       
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  public CYYY0251()
  {
    iefCGenRlse = "CA Gen 8.6";
    ssCopyright = "Copyright (c) 2023 CA Technologies. All rights reserved.";
    iefCGenDate = "2023/07/05";
    iefCGenTime = "15:09:02";
    iefCGenEncy = "9.2.A6";
    iefCGenUserId = "HakanBal";
    iefCGenModel = "N8I_ORT_YYY_0112_TEMPLATE";
    iefCGenSubset = "ALL";
    iefCGenName = "CYYY0251_CHILD_LIST";
    nestingLevel = 0;
    valChkDeadlockTimeout = false;
    valChkDBError = false;
  }
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // ACTION BLOCK FUNCTION DECLARATIONS 
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  
  public void CYYY0251( Object in_runtime_parm1, 
  	IRuntimePStepContext in_runtime_parm2, 
  	GlobData in_globdata, 
  	CYYY0251_IA import_view, 
  	CYYY0251_OA export_view )
  {
    iefRuntimeParm1 = in_runtime_parm1;
    iefRuntimeParm2 = in_runtime_parm2;
    globdata = in_globdata;
    w_ia = import_view;
    w_oa = export_view;
    _CYYY0251();
  }
  
  private void _CYYY0251()
  {
    
    f_22020126_localAlloc("CYYY0251_CHILD_LIST");
    if ( globdata.getErrorData().getLastStatus() == ErrorData.IEF_ALLOCATION_ERROR_FL_LS )
    	return;
    
    ++(nestingLevel);
    try {
      f_22020126_init();
      f_22020126();
    } catch( ABException e ) {
    } finally {
      --(nestingLevel);
    }
    String last_stmt_num_saved = globdata.getStateData().getLastStatementNumber();
    globdata.getStateData().setLastStatementNumber( "9999999999" );
    try {
      f_0_trace();
    } catch( ABException e ) {
    }
    globdata.getStateData().setLastStatementNumber( last_stmt_num_saved );
  }
  public void f_22020126()
  	throws ABException
  {
    func_0022020126_esc_flag = false;
    globdata.getStateData().setCurrentABId( "0022020126" );
    globdata.getStateData().setCurrentABName( "CYYY0251_CHILD_LIST" );
    padview_init();
    globdata.getStateData().setLastStatementNumber( "0000000000" );
    f_0_trace();
    f_0022020126_esctag: 
    {
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    See the description for the purpose.                            
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    RELEASE HISTORY                                                 
      //    01_00 23-02-1998 New release                                    
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      globdata.getStateData().setLastStatementNumber( "0000000003" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        
        cyyy9001_oa = (gen.ort.yyy.CYYY9001_OA)(iefRuntimeParm2.getInstance("gen.ort.yyy.CYYY9001_OA"));
        globdata.getErrorData().setErrorEncounteredSW( ErrorData.NO_ERROR_FOUND_SW );
        iefRuntimeParm2.useActionBlock("gen.ort.yyy.CYYY9001", "CYYY9001", null, cyyy9001_oa);
        if ( ((!(globdata.getErrorData().getStatus().equals( ErrorData.NONE_SF ))) || (globdata.getErrorData().getErrorEncounteredSW(
          ) != ErrorData.NO_ERROR_FOUND_SW)) || (globdata.getErrorData().getViewOverflowSW() != ErrorData.NO_ERROR_FOUND_SW) )
        {
          throw new ABException();
        }
        globdata.getStateData().setCurrentABId( "0022020126" );
        globdata.getStateData().setCurrentABName( "CYYY0251_CHILD_LIST" );
        globdata.getStateData().setLastStatementNumber( "0000000003" );
        w_oa.ExpErrorIyy1ComponentSeverityCode = FixedStringAttr.valueOf(cyyy9001_oa.ExpErrorIyy1ComponentSeverityCode, (short)1);
        w_oa.ExpErrorIyy1ComponentRollbackIndicator = FixedStringAttr.valueOf(cyyy9001_oa.ExpErrorIyy1ComponentRollbackIndicator, (
          short)1);
        w_oa.ExpErrorIyy1ComponentOriginServid = DoubleAttr.valueOf(cyyy9001_oa.ExpErrorIyy1ComponentOriginServid);
        w_oa.ExpErrorIyy1ComponentContextString = StringAttr.valueOf(cyyy9001_oa.ExpErrorIyy1ComponentContextString, (short)512);
        w_oa.ExpErrorIyy1ComponentReturnCode = IntAttr.valueOf(cyyy9001_oa.ExpErrorIyy1ComponentReturnCode);
        w_oa.ExpErrorIyy1ComponentReasonCode = IntAttr.valueOf(cyyy9001_oa.ExpErrorIyy1ComponentReasonCode);
        w_oa.ExpErrorIyy1ComponentChecksum = FixedStringAttr.valueOf(cyyy9001_oa.ExpErrorIyy1ComponentChecksum, (short)15);
        cyyy9001_oa.freeInstance();
        cyyy9001_oa = null;
      }
      
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!                      
      //    Name the method below                                           
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      globdata.getStateData().setLastStatementNumber( "0000000006" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        LocGroupContext_PS_003 = (int)TIRD2DEC.TIRD2DC1(1, 0, TIRD2DEC.ROUND_NONE, 0);
        if ( (LocGroupContext_PS_003 > w_la.LocGroupContext_MA) && (LocGroupContext_PS_003 <= 9) )
        w_la.LocGroupContext_MA = IntAttr.valueOf(LocGroupContext_PS_003);
      }
      globdata.getStateData().setLastStatementNumber( "0000000007" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        w_la.LocGContextDontChangeTextText150[LocGroupContext_PS_003-1] = FixedStringAttr.valueOf("CYYY0251", (short)150);
        f_173015129_rgvc();
      }
      globdata.getStateData().setLastStatementNumber( "0000000008" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        LocGroupContext_PS_003 = (int)TIRD2DEC.TIRD2DC1(2, 0, TIRD2DEC.ROUND_NONE, 0);
        if ( (LocGroupContext_PS_003 > w_la.LocGroupContext_MA) && (LocGroupContext_PS_003 <= 9) )
        w_la.LocGroupContext_MA = IntAttr.valueOf(LocGroupContext_PS_003);
      }
      globdata.getStateData().setLastStatementNumber( "0000000009" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        w_la.LocGContextDontChangeTextText150[LocGroupContext_PS_003-1] = FixedStringAttr.valueOf("LIST", (short)150);
        f_173015129_rgvc();
      }
      
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    **************************************************************  
      //    **                                                              
      //    The used ReturnCode/ReasonCode values                           
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  
      //    !!                                                              
      //    Set the return and reason codes below                           
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      globdata.getStateData().setLastStatementNumber( "0000000013" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        w_la.LocDontChangeReturnCodesQ1Ok = IntAttr.valueOf((int)TIRD2DEC.TIRD2DC1(1, 0, TIRD2DEC.ROUND_NONE, 5));
      }
      
      globdata.getStateData().setLastStatementNumber( "0000000015" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        w_la.LocDontChangeReasonCodesQ1Default = IntAttr.valueOf((int)TIRD2DEC.TIRD2DC1(1, 0, TIRD2DEC.ROUND_NONE, 5));
      }
      
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    **************************************************************  
      //    **                                                              
      //    a) The attribute(s) to be sorted must be in imp_from.           
      //    b) If the attribute(s) to be sorted are not unique,             
      //    the attribute(s) supplying them to be unique must be added.     
      //    (Being defined as index in DB is not necessary)                 
      //    c) If there are multiple sorting options, common attribute(s)   
      //    will naturally be in imp_form once.                             
      //    d) Attribute(s) to be sorted SORTED BY(s)                       
      //    must be included too, for uniqueness attribute(s)               
      //    must be at the end if added any.                                
      //    e) Attribute(s) in SORTED BY(s) must be first in WHERE          
      //    condition in                                                    
      //    I1204such a manner that they oversee the same sequence.         
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      globdata.getStateData().setLastStatementNumber( "0000000018" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        if ( ((double) w_oa.ExpErrorIyy1ComponentReturnCode >= (double) w_la.LocDontChangeReturnCodesQ1Ok) )
        {
          f_20971646();
        }
        
      }
      if ( func_0022020126_esc_flag )
      {
        break f_0022020126_esctag;
      }
      
      globdata.getStateData().setLastStatementNumber( "0000000098" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        if ( ((double) w_oa.ExpErrorIyy1ComponentReturnCode < (double) w_la.LocDontChangeReturnCodesQ1Ok) )
        {
          f_20972420();
        }
        
      }
    }
  }
  
  
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // SUBORDINATE FUNCTIONS
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  
  
  public void f_20971646()
  	throws ABException
  {
    func_0020971646_esc_flag = false;
    f_0020971646_esctag: 
    {
      globdata.getStateData().setLastStatementNumber( "0000000019" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        w_la.LocFilterIyy1ListSortOption = FixedStringAttr.valueOf(w_ia.ImpFilterIyy1ListSortOption, (short)3);
        w_la.LocFilterIyy1ListScrollType = FixedStringAttr.valueOf(w_ia.ImpFilterIyy1ListScrollType, (short)1);
        w_la.LocFilterIyy1ListListDirection = FixedStringAttr.valueOf(w_ia.ImpFilterIyy1ListListDirection, (short)1);
        w_la.LocFilterIyy1ListScrollAmount = IntAttr.valueOf(w_ia.ImpFilterIyy1ListScrollAmount);
        w_la.LocFilterIyy1ListOrderByFieldNum = ShortAttr.valueOf(w_ia.ImpFilterIyy1ListOrderByFieldNum);
      }
      
      globdata.getStateData().setLastStatementNumber( "0000000021" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        if ( (((double) w_la.LocFilterIyy1ListScrollAmount > ExpGroupList_MM_001) || ((double) w_la.LocFilterIyy1ListScrollAmount < 
          1)) )
        {
          globdata.getStateData().setLastStatementNumber( "0000000022" );
          f_0_trace();
          if ( trace_ret_code != 8 )
          {
            w_la.LocFilterIyy1ListScrollAmount = IntAttr.valueOf((int)TIRD2DEC.TIRD2DC1(ExpGroupList_MM_001, 0, TIRD2DEC.ROUND_NONE, 
              5));
          }
        }
        
      }
      globdata.getStateData().setLastStatementNumber( "0000000023" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        if ( CompareExit.compareTo(w_la.LocFilterIyy1ListSortOption, SPACES) == 0 )
        {
          globdata.getStateData().setLastStatementNumber( "0000000024" );
          f_0_trace();
          if ( trace_ret_code != 8 )
          {
            w_la.LocFilterIyy1ListSortOption = FixedStringAttr.valueOf("ASC", (short)3);
          }
        }
        
      }
      globdata.getStateData().setLastStatementNumber( "0000000025" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        if ( CompareExit.compareTo(w_la.LocFilterIyy1ListListDirection, "P") == 0 )
        {
          f_20972175();
        }
        
      }
      
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  
      //    !!!!!                                                           
      //    Check over the filtering sections                               
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    **************************************************************  
      //    **                                                              
      //    Min-Max interval filtering                                      
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      globdata.getStateData().setLastStatementNumber( "0000000032" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        w_la.LocFilterStartChildCparentPkeyAttrText = FixedStringAttr.valueOf(w_ia.ImpFilterStartChildCparentPkeyAttrText, (short)5)
          ;
        w_la.LocFilterStartChildCkeyAttrNum = IntAttr.valueOf(w_ia.ImpFilterStartChildCkeyAttrNum);
      }
      globdata.getStateData().setLastStatementNumber( "0000000033" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        w_la.LocFilterStopChildCparentPkeyAttrText = FixedStringAttr.valueOf(w_ia.ImpFilterStopChildCparentPkeyAttrText, (short)5);
        w_la.LocFilterStopChildCkeyAttrNum = IntAttr.valueOf(w_ia.ImpFilterStopChildCkeyAttrNum);
      }
      
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  
      //    !!!!!!!!!!!                                                     
      //    Give the highest value that every key and filter_stop variable  
      //    can get                                                         
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      globdata.getStateData().setLastStatementNumber( "0000000036" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        w_la.LocMvsStringHighValueIyy1SuppliedFlag = FixedStringAttr.valueOf("9", (short)1);
      }
      globdata.getStateData().setLastStatementNumber( "0000000037" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        w_la.LocPcStringHighValueIyy1SuppliedFlag = FixedStringAttr.valueOf("Z", (short)1);
      }
      
      globdata.getStateData().setLastStatementNumber( "0000000039" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        w_la.LocMaxChildCkeyAttrNum = IntAttr.valueOf((int)TIRD2DEC.TIRD2DC1(999999, 0, TIRD2DEC.ROUND_NONE, 6));
      }
      globdata.getStateData().setLastStatementNumber( "0000000040" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        if ( CompareExit.compareTo(w_la.LocPcStringHighValueIyy1SuppliedFlag, w_la.LocMvsStringHighValueIyy1SuppliedFlag) > 0 )
        {
          globdata.getStateData().setLastStatementNumber( "0000000041" );
          f_0_trace();
          if ( trace_ret_code != 8 )
          {
            w_la.LocMaxChildCparentPkeyAttrText = FixedStringAttr.valueOf("ZZZZZ", (short)5);
          }
        }
        else 
        {
          globdata.getStateData().setLastSubStatementNumber( "1" );
          f_0_trace();
          {
            globdata.getStateData().setLastStatementNumber( "0000000042" );
            f_0_trace();
            if ( trace_ret_code != 8 )
            {
              w_la.LocMaxChildCparentPkeyAttrText = FixedStringAttr.valueOf("99999", (short)5);
            }
          }
        }
        
      }
      
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    **************************************************************  
      //    **                                                              
      //    If the stop comes empty, it is accepted as maximum.             
      //    If the stop comes occupied it cannot be less than Start,        
      //    if it is less it is made equal to start.                        
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      globdata.getStateData().setLastStatementNumber( "0000000045" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        if ( CompareExit.compareTo(w_la.LocFilterStopChildCparentPkeyAttrText, w_la.LocEmptyChildCparentPkeyAttrText) <= 0 )
        {
          globdata.getStateData().setLastStatementNumber( "0000000046" );
          f_0_trace();
          if ( trace_ret_code != 8 )
          {
            w_la.LocFilterStopChildCparentPkeyAttrText = FixedStringAttr.valueOf(w_la.LocMaxChildCparentPkeyAttrText, (short)5);
          }
        }
        else 
        {
          globdata.getStateData().setLastSubStatementNumber( "1" );
          f_0_trace();
          {
            f_20971876();
          }
        }
        
      }
      globdata.getStateData().setLastStatementNumber( "0000000049" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        if ( ((double) w_la.LocFilterStopChildCkeyAttrNum <= (double) w_la.LocEmptyChildCkeyAttrNum) )
        {
          globdata.getStateData().setLastStatementNumber( "0000000050" );
          f_0_trace();
          if ( trace_ret_code != 8 )
          {
            w_la.LocFilterStopChildCkeyAttrNum = IntAttr.valueOf((int)TIRD2DEC.TIRD2DC1((double) w_la.LocMaxChildCkeyAttrNum, 0, 
              TIRD2DEC.ROUND_NONE, 6));
          }
        }
        else 
        {
          globdata.getStateData().setLastSubStatementNumber( "1" );
          f_0_trace();
          {
            f_20972923();
          }
        }
        
      }
      
      globdata.getStateData().setLastStatementNumber( "0000000054" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        w_la.LocFromChildCinstanceId = TimestampAttr.valueOf(w_ia.ImpFromChildCinstanceId);
        w_la.LocFromChildCparentPkeyAttrText = FixedStringAttr.valueOf(w_ia.ImpFromChildCparentPkeyAttrText, (short)5);
        w_la.LocFromChildCkeyAttrNum = IntAttr.valueOf(w_ia.ImpFromChildCkeyAttrNum);
      }
      
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    **************************************************************  
      //    **                                                              
      //    From initial value is checked                                   
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      globdata.getStateData().setLastStatementNumber( "0000000057" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        if ( CompareExit.compareTo(w_la.LocFilterIyy1ListSortOption, "ASC") == 0 )
        {
          // Empty statement here.
          ;
        }
        else 
        {
          globdata.getStateData().setLastSubStatementNumber( "1" );
          f_0_trace();
          {
            f_20971767();
          }
        }
        
      }
      
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    **************************************************************  
      //    **                                                              
      //    If the attributes in filter_start and filter_stop appear in fr  
      //    om too, From cannot come greater than filter_Stop and           
      //    less than filter_Start.                                         
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      globdata.getStateData().setLastStatementNumber( "0000000066" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        if ( ((CompareExit.compareTo(w_la.LocFromChildCparentPkeyAttrText, w_la.LocFilterStartChildCparentPkeyAttrText) < 0 || (
          CompareExit.compareTo(w_la.LocFromChildCparentPkeyAttrText, w_la.LocFilterStartChildCparentPkeyAttrText) == 0 && ((double) 
          w_la.LocFromChildCkeyAttrNum < (double) w_la.LocFilterStartChildCkeyAttrNum))) || (CompareExit.compareTo(
          w_la.LocFromChildCparentPkeyAttrText, w_la.LocFilterStopChildCparentPkeyAttrText) > 0 || (CompareExit.compareTo(
          w_la.LocFromChildCparentPkeyAttrText, w_la.LocFilterStopChildCparentPkeyAttrText) == 0 && ((double) 
          w_la.LocFromChildCkeyAttrNum > (double) w_la.LocFilterStopChildCkeyAttrNum)))) )
        {
          f_20972801();
        }
        
      }
      
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    **************************************************************  
      //    **                                                              
      //    Filtering (Compensate %                                         
      //    as much as the filter variable length)                          
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      globdata.getStateData().setLastStatementNumber( "0000000075" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        w_la.LocFilterChildCsearchAttrText = FixedStringAttr.valueOf("%%%%%%%%%%%%%%%%%%%%%%%%%", (short)25);
      }
      globdata.getStateData().setLastStatementNumber( "0000000076" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        BaseAttr.reset(workarea_002_oa_output_string_FP_002);
        globdata.getErrorData().setErrorEncounteredSW( ErrorData.NO_ERROR_FOUND_SW );
        TIRFTRIM.TIRFTRIM(iefRuntimeParm1, iefRuntimeParm2, globdata, w_ia.ImpFilterChildCsearchAttrText, 
          workarea_002_oa_output_string_FP_002);
        if ( ((!(globdata.getErrorData().getStatus().equals( ErrorData.NONE_SF ))) || (globdata.getErrorData().getErrorEncounteredSW(
          ) != ErrorData.NO_ERROR_FOUND_SW)) || (globdata.getErrorData().getViewOverflowSW() != ErrorData.NO_ERROR_FOUND_SW) )
        {
          throw new ABException();
        }
        BaseAttr.reset(workarea_001_oa_output_string_FP_001);
        globdata.getErrorData().setErrorEncounteredSW( ErrorData.NO_ERROR_FOUND_SW );
        TIRFCCAT.TIRFCCAT(iefRuntimeParm1, iefRuntimeParm2, globdata, workarea_002_oa_output_string_FP_002.get(), 
          w_la.LocFilterChildCsearchAttrText, workarea_001_oa_output_string_FP_001);
        if ( ((!(globdata.getErrorData().getStatus().equals( ErrorData.NONE_SF ))) || (globdata.getErrorData().getErrorEncounteredSW(
          ) != ErrorData.NO_ERROR_FOUND_SW)) || (globdata.getErrorData().getViewOverflowSW() != ErrorData.NO_ERROR_FOUND_SW) )
        {
          throw new ABException();
        }
        w_la.LocFilterChildCsearchAttrText = FixedStringAttr.valueOf(workarea_001_oa_output_string_FP_001.get(), (short)25);
      }
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    **************************************************************  
      //    **                                                              
      //    END OF filtering                                                
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      globdata.getStateData().setLastStatementNumber( "0000000078" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        
        dyyy0251_ia = (gen.ort.yyy.DYYY0251_IA)(iefRuntimeParm2.getInstance("gen.ort.yyy.DYYY0251_IA"));
        dyyy0251_oa = (gen.ort.yyy.DYYY0251_OA)(iefRuntimeParm2.getInstance("gen.ort.yyy.DYYY0251_OA"));
        dyyy0251_ia.ImpFilterChildCsearchAttrText = FixedStringAttr.valueOf(w_la.LocFilterChildCsearchAttrText, (short)25);
        dyyy0251_ia.ImpFilterStopChildCparentPkeyAttrText = FixedStringAttr.valueOf(w_la.LocFilterStopChildCparentPkeyAttrText, (
          short)5);
        dyyy0251_ia.ImpFilterStopChildCkeyAttrNum = IntAttr.valueOf(w_la.LocFilterStopChildCkeyAttrNum);
        dyyy0251_ia.ImpFilterStartChildCparentPkeyAttrText = FixedStringAttr.valueOf(w_la.LocFilterStartChildCparentPkeyAttrText, (
          short)5);
        dyyy0251_ia.ImpFilterStartChildCkeyAttrNum = IntAttr.valueOf(w_la.LocFilterStartChildCkeyAttrNum);
        dyyy0251_ia.ImpFromChildCkeyAttrNum = IntAttr.valueOf(w_la.LocFromChildCkeyAttrNum);
        dyyy0251_ia.ImpFromChildCparentPkeyAttrText = FixedStringAttr.valueOf(w_la.LocFromChildCparentPkeyAttrText, (short)5);
        dyyy0251_ia.ImpFromChildCinstanceId = TimestampAttr.valueOf(w_la.LocFromChildCinstanceId);
        dyyy0251_ia.ImpFilterIyy1ListSortOption = FixedStringAttr.valueOf(w_la.LocFilterIyy1ListSortOption, (short)3);
        dyyy0251_ia.ImpFilterIyy1ListScrollType = FixedStringAttr.valueOf(w_la.LocFilterIyy1ListScrollType, (short)1);
        dyyy0251_ia.ImpFilterIyy1ListListDirection = FixedStringAttr.valueOf(w_la.LocFilterIyy1ListListDirection, (short)1);
        dyyy0251_ia.ImpFilterIyy1ListScrollAmount = IntAttr.valueOf(w_la.LocFilterIyy1ListScrollAmount);
        dyyy0251_ia.ImpFilterIyy1ListOrderByFieldNum = ShortAttr.valueOf(w_la.LocFilterIyy1ListOrderByFieldNum);
        dyyy0251_ia.ImpErrorIyy1ComponentSeverityCode = FixedStringAttr.valueOf(w_oa.ExpErrorIyy1ComponentSeverityCode, (short)1);
        dyyy0251_ia.ImpErrorIyy1ComponentRollbackIndicator = FixedStringAttr.valueOf(w_oa.ExpErrorIyy1ComponentRollbackIndicator, (
          short)1);
        dyyy0251_ia.ImpErrorIyy1ComponentOriginServid = DoubleAttr.valueOf(w_oa.ExpErrorIyy1ComponentOriginServid);
        dyyy0251_ia.ImpErrorIyy1ComponentContextString = StringAttr.valueOf(w_oa.ExpErrorIyy1ComponentContextString, (short)512);
        dyyy0251_ia.ImpErrorIyy1ComponentReturnCode = IntAttr.valueOf(w_oa.ExpErrorIyy1ComponentReturnCode);
        dyyy0251_ia.ImpErrorIyy1ComponentReasonCode = IntAttr.valueOf(w_oa.ExpErrorIyy1ComponentReasonCode);
        dyyy0251_ia.ImpErrorIyy1ComponentChecksum = FixedStringAttr.valueOf(w_oa.ExpErrorIyy1ComponentChecksum, (short)15);
        globdata.getErrorData().setErrorEncounteredSW( ErrorData.NO_ERROR_FOUND_SW );
        iefRuntimeParm2.useActionBlock("gen.ort.yyy.DYYY0251", "DYYY0251", dyyy0251_ia, dyyy0251_oa);
        if ( ((!(globdata.getErrorData().getStatus().equals( ErrorData.NONE_SF ))) || (globdata.getErrorData().getErrorEncounteredSW(
          ) != ErrorData.NO_ERROR_FOUND_SW)) || (globdata.getErrorData().getViewOverflowSW() != ErrorData.NO_ERROR_FOUND_SW) )
        {
          throw new ABException();
        }
        globdata.getStateData().setCurrentABId( "0022020126" );
        globdata.getStateData().setCurrentABName( "CYYY0251_CHILD_LIST" );
        globdata.getStateData().setLastStatementNumber( "0000000078" );
        w_la.LocErrorIyy1ComponentSeverityCode = FixedStringAttr.valueOf(dyyy0251_oa.ExpErrorIyy1ComponentSeverityCode, (short)1);
        w_la.LocErrorIyy1ComponentRollbackIndicator = FixedStringAttr.valueOf(dyyy0251_oa.ExpErrorIyy1ComponentRollbackIndicator, (
          short)1);
        w_la.LocErrorIyy1ComponentOriginServid = DoubleAttr.valueOf(dyyy0251_oa.ExpErrorIyy1ComponentOriginServid);
        w_la.LocErrorIyy1ComponentContextString = StringAttr.valueOf(dyyy0251_oa.ExpErrorIyy1ComponentContextString, (short)512);
        w_la.LocErrorIyy1ComponentReturnCode = IntAttr.valueOf(dyyy0251_oa.ExpErrorIyy1ComponentReturnCode);
        w_la.LocErrorIyy1ComponentReasonCode = IntAttr.valueOf(dyyy0251_oa.ExpErrorIyy1ComponentReasonCode);
        w_la.LocErrorIyy1ComponentChecksum = FixedStringAttr.valueOf(dyyy0251_oa.ExpErrorIyy1ComponentChecksum, (short)15);
        w_la.LocGroupList_MA = IntAttr.valueOf(dyyy0251_oa.ExpGroupList_MA);
        for(adim1 = 1; adim1 <= w_la.LocGroupList_MA; ++(adim1))
        {
          w_la.LocGListChildCinstanceId[adim1-1] = TimestampAttr.valueOf(dyyy0251_oa.ExpGListChildCinstanceId[adim1-1]);
          w_la.LocGListChildCreferenceId[adim1-1] = TimestampAttr.valueOf(dyyy0251_oa.ExpGListChildCreferenceId[adim1-1]);
          w_la.LocGListChildCparentPkeyAttrText[adim1-1] = FixedStringAttr.valueOf(dyyy0251_oa.ExpGListChildCparentPkeyAttrText[
            adim1-1], (short)5);
          w_la.LocGListChildCkeyAttrNum[adim1-1] = IntAttr.valueOf(dyyy0251_oa.ExpGListChildCkeyAttrNum[adim1-1]);
          w_la.LocGListChildCsearchAttrText[adim1-1] = FixedStringAttr.valueOf(dyyy0251_oa.ExpGListChildCsearchAttrText[adim1-1], (
            short)25);
          w_la.LocGListChildCotherAttrText[adim1-1] = FixedStringAttr.valueOf(dyyy0251_oa.ExpGListChildCotherAttrText[adim1-1], (
            short)25);
        }
        dyyy0251_ia.freeInstance();
        dyyy0251_ia = null;
        dyyy0251_oa.freeInstance();
        dyyy0251_oa = null;
      }
      globdata.getStateData().setLastStatementNumber( "0000000079" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        if ( ((double) w_la.LocErrorIyy1ComponentReturnCode < (double) w_la.LocDontChangeReturnCodesQ1Ok) )
        {
          f_20971719();
        }
        
      }
      if ( func_0020971646_esc_flag )
      {
        break f_0020971646_esctag;
      }
      
      globdata.getStateData().setLastStatementNumber( "0000000084" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        w_la.LocReadLbIyy1SuppliedTotalInteger = DoubleAttr.valueOf(TIRD2DEC.TIRD2DC1(w_la.LocGroupList_MA, 0, TIRD2DEC.ROUND_NONE, 
          15));
      }
      globdata.getStateData().setLastStatementNumber( "0000000085" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        if ( TIRD2DEC.TIRD2DEC((double)w_la.LocReadLbIyy1SuppliedTotalInteger, 0, TIRD2DEC.ROUND_NORMAL)  >  TIRD2DEC.TIRD2DEC((
          double)0, 0, TIRD2DEC.ROUND_NORMAL) )
        {
          f_20972331();
        }
        
      }
    }
  }
  
  public void f_20972420()
  	throws ABException
  {
    func_0020972420_esc_flag = false;
    globdata.getStateData().setLastStatementNumber( "0000000099" );
    f_0_trace();
    if ( trace_ret_code != 8 )
    {
      
      cyyy9141_ia = (gen.ort.yyy.CYYY9141_IA)(iefRuntimeParm2.getInstance("gen.ort.yyy.CYYY9141_IA"));
      cyyy9141_oa = (gen.ort.yyy.CYYY9141_OA)(iefRuntimeParm2.getInstance("gen.ort.yyy.CYYY9141_OA"));
      cyyy9141_ia.ImpGroupContext_MA = IntAttr.valueOf(w_la.LocGroupContext_MA);
      for(adim1 = 1; adim1 <= w_la.LocGroupContext_MA; ++(adim1))
      {
        cyyy9141_ia.ImpGContextDontChangeTextText150[adim1-1] = FixedStringAttr.valueOf(w_la.LocGContextDontChangeTextText150[
          adim1-1], (short)150);
      }
      for(adim1 = w_la.LocGroupContext_MA + 1; adim1 <= 9; ++(adim1))
      {
        cyyy9141_ia.ImpGContextDontChangeTextText150[adim1-1] = 
"                                                                                                                                                      "
          ;
      }
      globdata.getErrorData().setErrorEncounteredSW( ErrorData.NO_ERROR_FOUND_SW );
      iefRuntimeParm2.useActionBlock("gen.ort.yyy.CYYY9141", "CYYY9141", cyyy9141_ia, cyyy9141_oa);
      if ( ((!(globdata.getErrorData().getStatus().equals( ErrorData.NONE_SF ))) || (globdata.getErrorData().getErrorEncounteredSW() 
        != ErrorData.NO_ERROR_FOUND_SW)) || (globdata.getErrorData().getViewOverflowSW() != ErrorData.NO_ERROR_FOUND_SW) )
      {
        throw new ABException();
      }
      globdata.getStateData().setCurrentABId( "0022020126" );
      globdata.getStateData().setCurrentABName( "CYYY0251_CHILD_LIST" );
      globdata.getStateData().setLastStatementNumber( "0000000099" );
      w_oa.ExpErrorIyy1ComponentContextString = StringAttr.valueOf(cyyy9141_oa.ExpContextIyy1ComponentContextString, (short)512);
      w_la.LocErrorIyy1ComponentSeverityCode = FixedStringAttr.valueOf(cyyy9141_oa.ExpErrorIyy1ComponentSeverityCode, (short)1);
      w_la.LocErrorIyy1ComponentRollbackIndicator = FixedStringAttr.valueOf(cyyy9141_oa.ExpErrorIyy1ComponentRollbackIndicator, (
        short)1);
      w_la.LocErrorIyy1ComponentOriginServid = DoubleAttr.valueOf(cyyy9141_oa.ExpErrorIyy1ComponentOriginServid);
      w_la.LocErrorIyy1ComponentContextString = StringAttr.valueOf(cyyy9141_oa.ExpErrorIyy1ComponentContextString, (short)512);
      w_la.LocErrorIyy1ComponentReturnCode = IntAttr.valueOf(cyyy9141_oa.ExpErrorIyy1ComponentReturnCode);
      w_la.LocErrorIyy1ComponentReasonCode = IntAttr.valueOf(cyyy9141_oa.ExpErrorIyy1ComponentReasonCode);
      w_la.LocErrorIyy1ComponentChecksum = FixedStringAttr.valueOf(cyyy9141_oa.ExpErrorIyy1ComponentChecksum, (short)15);
      cyyy9141_ia.freeInstance();
      cyyy9141_ia = null;
      cyyy9141_oa.freeInstance();
      cyyy9141_oa = null;
    }
    
    globdata.getStateData().setLastStatementNumber( "0000000101" );
    f_0_trace();
    if ( trace_ret_code != 8 )
    {
      if ( ((double) w_la.LocErrorIyy1ComponentReturnCode < (double) w_la.LocDontChangeReturnCodesQ1Ok) )
      {
        globdata.getStateData().setLastStatementNumber( "0000000102" );
        f_0_trace();
        if ( trace_ret_code != 8 )
        {
          w_oa.ExpErrorIyy1ComponentSeverityCode = FixedStringAttr.valueOf(w_la.LocErrorIyy1ComponentSeverityCode, (short)1);
          w_oa.ExpErrorIyy1ComponentRollbackIndicator = FixedStringAttr.valueOf(w_la.LocErrorIyy1ComponentRollbackIndicator, (short)
            1);
          w_oa.ExpErrorIyy1ComponentOriginServid = DoubleAttr.valueOf(w_la.LocErrorIyy1ComponentOriginServid);
          w_oa.ExpErrorIyy1ComponentContextString = StringAttr.valueOf(w_la.LocErrorIyy1ComponentContextString, (short)512);
          w_oa.ExpErrorIyy1ComponentReturnCode = IntAttr.valueOf(w_la.LocErrorIyy1ComponentReturnCode);
          w_oa.ExpErrorIyy1ComponentReasonCode = IntAttr.valueOf(w_la.LocErrorIyy1ComponentReasonCode);
          w_oa.ExpErrorIyy1ComponentChecksum = FixedStringAttr.valueOf(w_la.LocErrorIyy1ComponentChecksum, (short)15);
        }
      }
      
    }
    globdata.getStateData().setLastStatementNumber( "0000000103" );
    f_0_trace();
    if ( trace_ret_code != 8 )
    {
      w_oa.ExpErrorIyy1ComponentSeverityCode = FixedStringAttr.valueOf("E", (short)1);
    }
  }
  
  public void f_20972175()
  	throws ABException
  {
    func_0020972175_esc_flag = false;
    globdata.getStateData().setLastStatementNumber( "0000000026" );
    f_0_trace();
    if ( trace_ret_code != 8 )
    {
      if ( CompareExit.compareTo(w_la.LocFilterIyy1ListSortOption, "ASC") == 0 )
      {
        globdata.getStateData().setLastStatementNumber( "0000000027" );
        f_0_trace();
        if ( trace_ret_code != 8 )
        {
          w_la.LocFilterIyy1ListSortOption = FixedStringAttr.valueOf("DES", (short)3);
        }
      }
      else 
      {
        globdata.getStateData().setLastSubStatementNumber( "1" );
        f_0_trace();
        {
          globdata.getStateData().setLastStatementNumber( "0000000028" );
          f_0_trace();
          if ( trace_ret_code != 8 )
          {
            w_la.LocFilterIyy1ListSortOption = FixedStringAttr.valueOf("ASC", (short)3);
          }
        }
      }
      
    }
  }
  
  public void f_20971876()
  	throws ABException
  {
    func_0020971876_esc_flag = false;
    globdata.getStateData().setLastStatementNumber( "0000000047" );
    f_0_trace();
    if ( trace_ret_code != 8 )
    {
      if ( CompareExit.compareTo(w_la.LocFilterStartChildCparentPkeyAttrText, w_la.LocFilterStopChildCparentPkeyAttrText) > 0 )
      {
        globdata.getStateData().setLastStatementNumber( "0000000048" );
        f_0_trace();
        if ( trace_ret_code != 8 )
        {
          w_la.LocFilterStopChildCparentPkeyAttrText = FixedStringAttr.valueOf(w_la.LocFilterStartChildCparentPkeyAttrText, (short)5)
            ;
        }
      }
      
    }
  }
  
  public void f_20972923()
  	throws ABException
  {
    func_0020972923_esc_flag = false;
    globdata.getStateData().setLastStatementNumber( "0000000051" );
    f_0_trace();
    if ( trace_ret_code != 8 )
    {
      if ( ((double) w_la.LocFilterStartChildCkeyAttrNum > (double) w_la.LocFilterStopChildCkeyAttrNum) )
      {
        globdata.getStateData().setLastStatementNumber( "0000000052" );
        f_0_trace();
        if ( trace_ret_code != 8 )
        {
          w_la.LocFilterStopChildCkeyAttrNum = IntAttr.valueOf((int)TIRD2DEC.TIRD2DC1((double) w_la.LocFilterStartChildCkeyAttrNum, 
            0, TIRD2DEC.ROUND_NONE, 6));
        }
      }
      
    }
  }
  
  public void f_20971767()
  	throws ABException
  {
    func_0020971767_esc_flag = false;
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    //    **************************************************************  
    //    **                                                              
    //    If From comes empty for Full list, it is made equal to Max.     
    //                                                                    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    globdata.getStateData().setLastStatementNumber( "0000000059" );
    f_0_trace();
    if ( trace_ret_code != 8 )
    {
      if ( CompareExit.compareTo(w_la.LocFilterIyy1ListScrollType, "S") != 0 )
      {
        f_20972001();
      }
      
    }
  }
  
  public void f_20972801()
  	throws ABException
  {
    func_0020972801_esc_flag = false;
    
    globdata.getStateData().setLastStatementNumber( "0000000068" );
    f_0_trace();
    if ( trace_ret_code != 8 )
    {
      if ( CompareExit.compareTo(w_la.LocFilterIyy1ListSortOption, "ASC") == 0 )
      {
        globdata.getStateData().setLastStatementNumber( "0000000069" );
        f_0_trace();
        if ( trace_ret_code != 8 )
        {
          w_la.LocFromChildCparentPkeyAttrText = FixedStringAttr.valueOf(w_la.LocFilterStartChildCparentPkeyAttrText, (short)5);
        }
        globdata.getStateData().setLastStatementNumber( "0000000070" );
        f_0_trace();
        if ( trace_ret_code != 8 )
        {
          w_la.LocFromChildCkeyAttrNum = IntAttr.valueOf((int)TIRD2DEC.TIRD2DC1((double) w_la.LocFilterStartChildCkeyAttrNum, 0, 
            TIRD2DEC.ROUND_NONE, 6));
        }
      }
      else 
      {
        globdata.getStateData().setLastSubStatementNumber( "1" );
        f_0_trace();
        {
          globdata.getStateData().setLastStatementNumber( "0000000071" );
          f_0_trace();
          if ( trace_ret_code != 8 )
          {
            w_la.LocFromChildCparentPkeyAttrText = FixedStringAttr.valueOf(w_la.LocFilterStopChildCparentPkeyAttrText, (short)5);
          }
          globdata.getStateData().setLastStatementNumber( "0000000072" );
          f_0_trace();
          if ( trace_ret_code != 8 )
          {
            w_la.LocFromChildCkeyAttrNum = IntAttr.valueOf((int)TIRD2DEC.TIRD2DC1((double) w_la.LocFilterStopChildCkeyAttrNum, 0, 
              TIRD2DEC.ROUND_NONE, 6));
          }
        }
      }
      
    }
  }
  
  public void f_20971719()
  	throws ABException
  {
    func_0020971719_esc_flag = false;
    f_0020971719_esctag: 
    {
      globdata.getStateData().setLastStatementNumber( "0000000080" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        w_oa.ExpErrorIyy1ComponentSeverityCode = FixedStringAttr.valueOf(w_la.LocErrorIyy1ComponentSeverityCode, (short)1);
        w_oa.ExpErrorIyy1ComponentRollbackIndicator = FixedStringAttr.valueOf(w_la.LocErrorIyy1ComponentRollbackIndicator, (short)1)
          ;
        w_oa.ExpErrorIyy1ComponentOriginServid = DoubleAttr.valueOf(w_la.LocErrorIyy1ComponentOriginServid);
        w_oa.ExpErrorIyy1ComponentContextString = StringAttr.valueOf(w_la.LocErrorIyy1ComponentContextString, (short)512);
        w_oa.ExpErrorIyy1ComponentReturnCode = IntAttr.valueOf(w_la.LocErrorIyy1ComponentReturnCode);
        w_oa.ExpErrorIyy1ComponentReasonCode = IntAttr.valueOf(w_la.LocErrorIyy1ComponentReasonCode);
        w_oa.ExpErrorIyy1ComponentChecksum = FixedStringAttr.valueOf(w_la.LocErrorIyy1ComponentChecksum, (short)15);
      }
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  
      //    !!!!!!!!!!!                                                     
      //    !! WARNING: In D AB, if there'                                  
      //    s a need for generating context string, must exit from ESCAPE   
      //    AB.                                                             
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      globdata.getStateData().setLastStatementNumber( "0000000082" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        func_0020971719_esc_flag = true;
        func_0020971646_esc_flag = true;
      }
    }
  }
  
  public void f_20972331()
  	throws ABException
  {
    func_0020972331_esc_flag = false;
    globdata.getStateData().setLastStatementNumber( "0000000086" );
    f_0_trace();
    if ( trace_ret_code != 8 )
    {
      if ( CompareExit.compareTo(w_la.LocFilterIyy1ListListDirection, "P") == 0 )
      {
        globdata.getStateData().setLastStatementNumber( "0000000087" );
        f_0_trace();
        if ( trace_ret_code != 8 )
        {
          LocGroupList_PS_002 = (int)TIRD2DEC.TIRD2DC1(w_la.LocReadLbIyy1SuppliedTotalInteger, 0, TIRD2DEC.ROUND_NONE, 0);
          if ( (LocGroupList_PS_002 > w_la.LocGroupList_MA) && (LocGroupList_PS_002 <= 48) )
          w_la.LocGroupList_MA = IntAttr.valueOf(LocGroupList_PS_002);
        }
      }
      else 
      {
        globdata.getStateData().setLastSubStatementNumber( "1" );
        f_0_trace();
        {
          globdata.getStateData().setLastStatementNumber( "0000000088" );
          f_0_trace();
          if ( trace_ret_code != 8 )
          {
            LocGroupList_PS_002 = (int)TIRD2DEC.TIRD2DC1(1, 0, TIRD2DEC.ROUND_NONE, 0);
            if ( (LocGroupList_PS_002 > w_la.LocGroupList_MA) && (LocGroupList_PS_002 <= 48) )
            w_la.LocGroupList_MA = IntAttr.valueOf(LocGroupList_PS_002);
          }
        }
      }
      
    }
    globdata.getStateData().setLastStatementNumber( "0000000089" );
    f_0_trace();
    if ( trace_ret_code != 8 )
    {
      ExpGroupList_PS_001 = (int)TIRD2DEC.TIRD2DC1(0, 0, TIRD2DEC.ROUND_NONE, 0);
      if ( (ExpGroupList_PS_001 > w_oa.ExpGroupList_MA) && (ExpGroupList_PS_001 <= 48) )
      w_oa.ExpGroupList_MA = IntAttr.valueOf(ExpGroupList_PS_001);
    }
    globdata.getStateData().setLastStatementNumber( "0000000090" );
    globdata.getStateData().setLastSubStatementNumber( "1" );
    {
      repeat_0066060319_esc_flag = false;
      do
      {
        {
          f_20972693();
        }
        globdata.getStateData().setLastStatementNumber( "0000000090" );
        globdata.getStateData().setLastStatementNumber( "0000000090" );
        f_0_trace();
        if ( trace_ret_code != 8 )
        {
        }
        else {
          break;
        }
      }
      while ((!(TIRD2DEC.TIRD2DEC((double)w_la.LocReadLbIyy1SuppliedTotalInteger, 0, TIRD2DEC.ROUND_NORMAL)  ==  TIRD2DEC.TIRD2DEC((
      double)0, 0, TIRD2DEC.ROUND_NORMAL))) && (repeat_0066060319_esc_flag != true));}
  }
  
  public void f_20972001()
  	throws ABException
  {
    func_0020972001_esc_flag = false;
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    //    **************************************************************  
    //    **                                                              
    //    If From comes empty for Full list, it is made equal to Max.     
    //                                                                    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    globdata.getStateData().setLastStatementNumber( "0000000061" );
    f_0_trace();
    if ( trace_ret_code != 8 )
    {
      if ( (CompareExit.compareTo(w_la.LocFromChildCparentPkeyAttrText, w_la.LocEmptyChildCparentPkeyAttrText) <= 0 && ((double) 
        w_la.LocFromChildCkeyAttrNum <= (double) w_la.LocEmptyChildCkeyAttrNum)) )
      {
        globdata.getStateData().setLastStatementNumber( "0000000062" );
        f_0_trace();
        if ( trace_ret_code != 8 )
        {
          w_la.LocFromChildCparentPkeyAttrText = FixedStringAttr.valueOf(w_la.LocMaxChildCparentPkeyAttrText, (short)5);
        }
        globdata.getStateData().setLastStatementNumber( "0000000063" );
        f_0_trace();
        if ( trace_ret_code != 8 )
        {
          w_la.LocFromChildCkeyAttrNum = IntAttr.valueOf((int)TIRD2DEC.TIRD2DC1((double) w_la.LocMaxChildCkeyAttrNum, 0, 
            TIRD2DEC.ROUND_NONE, 6));
        }
      }
      
    }
  }
  
  public void f_20972693()
  	throws ABException
  {
    func_0020972693_esc_flag = false;
    globdata.getStateData().setLastStatementNumber( "0000000091" );
    f_0_trace();
    if ( trace_ret_code != 8 )
    {
      ExpGroupList_PS_001 = (int)TIRD2DEC.TIRD2DC1(((double)ExpGroupList_PS_001 + 1), 0, TIRD2DEC.ROUND_NONE, 0);
      if ( (ExpGroupList_PS_001 > w_oa.ExpGroupList_MA) && (ExpGroupList_PS_001 <= 48) )
      w_oa.ExpGroupList_MA = IntAttr.valueOf(ExpGroupList_PS_001);
    }
    globdata.getStateData().setLastStatementNumber( "0000000092" );
    f_0_trace();
    if ( trace_ret_code != 8 )
    {
      f_173015189_rgvc();
      f_173015042_rgvc();
      w_oa.ExpGListChildCinstanceId[ExpGroupList_PS_001-1] = TimestampAttr.valueOf(w_la.LocGListChildCinstanceId[
        LocGroupList_PS_002-1]);
      w_oa.ExpGListChildCreferenceId[ExpGroupList_PS_001-1] = TimestampAttr.valueOf(w_la.LocGListChildCreferenceId[
        LocGroupList_PS_002-1]);
      w_oa.ExpGListChildCparentPkeyAttrText[ExpGroupList_PS_001-1] = FixedStringAttr.valueOf(w_la.LocGListChildCparentPkeyAttrText[
        LocGroupList_PS_002-1], (short)5);
      w_oa.ExpGListChildCkeyAttrNum[ExpGroupList_PS_001-1] = IntAttr.valueOf(w_la.LocGListChildCkeyAttrNum[LocGroupList_PS_002-1]);
      w_oa.ExpGListChildCsearchAttrText[ExpGroupList_PS_001-1] = FixedStringAttr.valueOf(w_la.LocGListChildCsearchAttrText[
        LocGroupList_PS_002-1], (short)25);
      w_oa.ExpGListChildCotherAttrText[ExpGroupList_PS_001-1] = FixedStringAttr.valueOf(w_la.LocGListChildCotherAttrText[
        LocGroupList_PS_002-1], (short)25);
    }
    globdata.getStateData().setLastStatementNumber( "0000000093" );
    f_0_trace();
    if ( trace_ret_code != 8 )
    {
      if ( CompareExit.compareTo(w_la.LocFilterIyy1ListListDirection, "P") == 0 )
      {
        globdata.getStateData().setLastStatementNumber( "0000000094" );
        f_0_trace();
        if ( trace_ret_code != 8 )
        {
          LocGroupList_PS_002 = (int)TIRD2DEC.TIRD2DC1(((double)LocGroupList_PS_002 - 1), 0, TIRD2DEC.ROUND_NONE, 0);
          if ( (LocGroupList_PS_002 > w_la.LocGroupList_MA) && (LocGroupList_PS_002 <= 48) )
          w_la.LocGroupList_MA = IntAttr.valueOf(LocGroupList_PS_002);
        }
      }
      else 
      {
        globdata.getStateData().setLastSubStatementNumber( "1" );
        f_0_trace();
        {
          globdata.getStateData().setLastStatementNumber( "0000000095" );
          f_0_trace();
          if ( trace_ret_code != 8 )
          {
            LocGroupList_PS_002 = (int)TIRD2DEC.TIRD2DC1(((double)LocGroupList_PS_002 + 1), 0, TIRD2DEC.ROUND_NONE, 0);
            if ( (LocGroupList_PS_002 > w_la.LocGroupList_MA) && (LocGroupList_PS_002 <= 48) )
            w_la.LocGroupList_MA = IntAttr.valueOf(LocGroupList_PS_002);
          }
        }
      }
      
    }
    globdata.getStateData().setLastStatementNumber( "0000000096" );
    f_0_trace();
    if ( trace_ret_code != 8 )
    {
      w_la.LocReadLbIyy1SuppliedTotalInteger = DoubleAttr.valueOf(TIRD2DEC.TIRD2DC1((w_la.LocReadLbIyy1SuppliedTotalInteger - 1.), 0,
         TIRD2DEC.ROUND_NONE, 15));
    }
  }
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // INITIALIZATION UTILITY FUNCTIONS 
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  
  public void f_22020126_localAlloc(String abname)
  {
    // Request localview allocation 
    w_la = (gen.ort.yyy.CYYY0251_LA)(iefRuntimeParm2.getInstance("gen.ort.yyy.CYYY0251_LA"));
    if ( w_la == null )
    {
      globdata.getStateData().setCurrentABId( "0022020126" );
      globdata.getStateData().setCurrentABName( abname );
      globdata.getErrorData().setErrorEncounteredSW( ErrorData.ERROR_FOUND_SW );
      globdata.getErrorData().setLastStatus( ErrorData.IEF_ALLOCATION_ERROR_FL_LS );
    }
  }
  
  public void f_22020126_init()
  	throws ABException
  {
    if ( nestingLevel < 2 )
    {
      w_la.reset();
    }
    w_la.LocGroupList_MA = 0;
    for(LocGroupList_PS_002 = 1; LocGroupList_PS_002 <= 48; ++(LocGroupList_PS_002))
    {
    }
    w_la.LocGroupContext_MA = 0;
    for(LocGroupContext_PS_003 = 1; LocGroupContext_PS_003 <= 9; ++(LocGroupContext_PS_003))
    {
    }
    w_oa.ExpGroupList_MA = 0;
    for(ExpGroupList_PS_001 = 1; ExpGroupList_PS_001 <= 48; ++(ExpGroupList_PS_001))
    {
      w_oa.ExpGListChildCinstanceId[ExpGroupList_PS_001-1] = "00000000000000000000";
      w_oa.ExpGListChildCreferenceId[ExpGroupList_PS_001-1] = "00000000000000000000";
      w_oa.ExpGListChildCparentPkeyAttrText[ExpGroupList_PS_001-1] = "     ";
      w_oa.ExpGListChildCkeyAttrNum[ExpGroupList_PS_001-1] = 0;
      w_oa.ExpGListChildCsearchAttrText[ExpGroupList_PS_001-1] = "                         ";
      w_oa.ExpGListChildCotherAttrText[ExpGroupList_PS_001-1] = "                         ";
    }
    w_oa.ExpErrorIyy1ComponentSeverityCode = " ";
    w_oa.ExpErrorIyy1ComponentRollbackIndicator = " ";
    w_oa.ExpErrorIyy1ComponentOriginServid = 0.0;
    w_oa.ExpErrorIyy1ComponentContextString = "";
    w_oa.ExpErrorIyy1ComponentReturnCode = 0;
    w_oa.ExpErrorIyy1ComponentReasonCode = 0;
    w_oa.ExpErrorIyy1ComponentChecksum = "               ";
    ExpGroupList_PS_001 = 1;
    LocGroupList_PS_002 = 1;
    LocGroupContext_PS_003 = 1;
  }
  
  public void f_0_trace()
  	throws ABException
  {
    trace_ret_code = TIRTRCE.TIRTRCE(iefRuntimeParm1, iefRuntimeParm2, globdata, padtext, padview);
    if ( trace_ret_code == 20 )
    {
      throw new ABException();
    }
  }
  
  public void padview_init()
  {
padview[0] = PadView.getInstance("IMPORT                          ", 0, 0, 0, (short)1, PadView.VT_BASE, PadView.DT_NONE, w_ia, 
      "w_ia");
    padview[1] = PadView.getInstance("IMP_FILTER                      ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_ia, 
      null);
    padview[2] = PadView.getInstance("IYY1_LIST                       ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, w_ia,
       null);
    padview[3] = PadView.getInstance("SORT_OPTION                     ", 3, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_ia, "ImpFilterIyy1ListSortOption");
    padview[4] = PadView.getInstance("SCROLL_TYPE                     ", 1, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_ia, "ImpFilterIyy1ListScrollType");
    padview[5] = PadView.getInstance("LIST_DIRECTION                  ", 1, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_ia, "ImpFilterIyy1ListListDirection");
    padview[6] = PadView.getInstance("SCROLL_AMOUNT                   ", 5, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_NUMERIC,
       w_ia, "ImpFilterIyy1ListScrollAmount");
    padview[7] = PadView.getInstance("ORDER_BY_FIELD_NUM              ", 1, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_NUMERIC,
       w_ia, "ImpFilterIyy1ListOrderByFieldNum");
    padview[8] = PadView.getInstance("IMP_FROM                        ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_ia, 
      null);
    padview[9] = PadView.getInstance("CHILD                           ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, w_ia,
       null);
    padview[10] = PadView.getInstance("CINSTANCE_ID                    ", 20, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_TIMESTAMP, w_ia, "ImpFromChildCinstanceId");
    padview[11] = PadView.getInstance("CPARENT_PKEY_ATTR_TEXT          ", 5, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_ia, "ImpFromChildCparentPkeyAttrText");
    padview[12] = PadView.getInstance("CKEY_ATTR_NUM                   ", 6, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_ia, "ImpFromChildCkeyAttrNum");
    padview[13] = PadView.getInstance("IMP_FILTER_START                ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_ia, 
      null);
    padview[14] = PadView.getInstance("CHILD                           ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_ia, null);
    padview[15] = PadView.getInstance("CPARENT_PKEY_ATTR_TEXT          ", 5, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_ia, "ImpFilterStartChildCparentPkeyAttrText");
    padview[16] = PadView.getInstance("CKEY_ATTR_NUM                   ", 6, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_ia, "ImpFilterStartChildCkeyAttrNum");
    padview[17] = PadView.getInstance("IMP_FILTER_STOP                 ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_ia, 
      null);
    padview[18] = PadView.getInstance("CHILD                           ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_ia, null);
    padview[19] = PadView.getInstance("CPARENT_PKEY_ATTR_TEXT          ", 5, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_ia, "ImpFilterStopChildCparentPkeyAttrText");
    padview[20] = PadView.getInstance("CKEY_ATTR_NUM                   ", 6, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_ia, "ImpFilterStopChildCkeyAttrNum");
    padview[21] = PadView.getInstance("IMP_FILTER                      ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_ia, 
      null);
    padview[22] = PadView.getInstance("CHILD                           ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_ia, null);
    padview[23] = PadView.getInstance("CSEARCH_ATTR_TEXT               ", 25, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_ia, "ImpFilterChildCsearchAttrText");
    padview[24] = PadView.getInstance("EXPORT                          ", 0, 0, 0, (short)1, PadView.VT_BASE, PadView.DT_NONE, w_oa, 
      "w_oa");
    padview[25] = PadView.getInstance("EXP_GROUP_LIST                  ", 0, 0, 48, (short)2, PadView.VT_GROUP, PadView.DT_NONE, 
      w_oa, "ExpGroupList_MA");
    padview[26] = PadView.getInstance("EXP_G_LIST                      ", 0, 0, 0, (short)3, PadView.VT_VIEW, PadView.DT_NONE, w_oa, 
      null);
    padview[27] = PadView.getInstance("CHILD                           ", 0, 0, 0, (short)4, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_oa, null);
    padview[28] = PadView.getInstance("CINSTANCE_ID                    ", 20, 0, 0, (short)4, PadView.VT_PREDICATE, 
      PadView.DT_TIMESTAMP, w_oa, "ExpGListChildCinstanceId");
    padview[29] = PadView.getInstance("CREFERENCE_ID                   ", 20, 0, 0, (short)4, PadView.VT_PREDICATE, 
      PadView.DT_TIMESTAMP, w_oa, "ExpGListChildCreferenceId");
    padview[30] = PadView.getInstance("CPARENT_PKEY_ATTR_TEXT          ", 5, 0, 0, (short)4, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_oa, "ExpGListChildCparentPkeyAttrText");
    padview[31] = PadView.getInstance("CKEY_ATTR_NUM                   ", 6, 0, 0, (short)4, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_oa, "ExpGListChildCkeyAttrNum");
    padview[32] = PadView.getInstance("CSEARCH_ATTR_TEXT               ", 25, 0, 0, (short)4, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_oa, "ExpGListChildCsearchAttrText");
    padview[33] = PadView.getInstance("COTHER_ATTR_TEXT                ", 25, 0, 0, (short)4, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_oa, "ExpGListChildCotherAttrText");
    padview[34] = PadView.getInstance("EXP_ERROR                       ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_oa, 
      null);
    padview[35] = PadView.getInstance("IYY1_COMPONENT                  ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_oa, null);
    padview[36] = PadView.getInstance("SEVERITY_CODE                   ", 1, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_oa, "ExpErrorIyy1ComponentSeverityCode");
    padview[37] = PadView.getInstance("ROLLBACK_INDICATOR              ", 1, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_oa, "ExpErrorIyy1ComponentRollbackIndicator");
    padview[38] = PadView.getInstance("ORIGIN_SERVID                   ", 15, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_oa, "ExpErrorIyy1ComponentOriginServid");
    padview[39] = PadView.getInstance("CONTEXT_STRING                  ", 512, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_VARCHAR, w_oa, "ExpErrorIyy1ComponentContextString");
    padview[40] = PadView.getInstance("RETURN_CODE                     ", 5, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_oa, "ExpErrorIyy1ComponentReturnCode");
    padview[41] = PadView.getInstance("REASON_CODE                     ", 5, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_oa, "ExpErrorIyy1ComponentReasonCode");
    padview[42] = PadView.getInstance("CHECKSUM                        ", 15, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_oa, "ExpErrorIyy1ComponentChecksum");
    padview[43] = PadView.getInstance("LOCAL                           ", 0, 0, 0, (short)1, PadView.VT_BASE, PadView.DT_NONE, w_la, 
      "w_la");
    padview[44] = PadView.getInstance("LOC_FILTER                      ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_la, 
      null);
    padview[45] = PadView.getInstance("IYY1_LIST                       ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_la, null);
    padview[46] = PadView.getInstance("SORT_OPTION                     ", 3, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_la, "LocFilterIyy1ListSortOption");
    padview[47] = PadView.getInstance("SCROLL_TYPE                     ", 1, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_la, "LocFilterIyy1ListScrollType");
    padview[48] = PadView.getInstance("LIST_DIRECTION                  ", 1, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_la, "LocFilterIyy1ListListDirection");
    padview[49] = PadView.getInstance("SCROLL_AMOUNT                   ", 5, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_la, "LocFilterIyy1ListScrollAmount");
    padview[50] = PadView.getInstance("ORDER_BY_FIELD_NUM              ", 1, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_la, "LocFilterIyy1ListOrderByFieldNum");
    padview[51] = PadView.getInstance("LOC_FROM                        ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_la, 
      null);
    padview[52] = PadView.getInstance("CHILD                           ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_la, null);
    padview[53] = PadView.getInstance("CKEY_ATTR_NUM                   ", 6, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_la, "LocFromChildCkeyAttrNum");
    padview[54] = PadView.getInstance("CPARENT_PKEY_ATTR_TEXT          ", 5, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_la, "LocFromChildCparentPkeyAttrText");
    padview[55] = PadView.getInstance("CINSTANCE_ID                    ", 20, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_TIMESTAMP, w_la, "LocFromChildCinstanceId");
    padview[56] = PadView.getInstance("LOC_FILTER_START                ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_la, 
      null);
    padview[57] = PadView.getInstance("CHILD                           ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_la, null);
    padview[58] = PadView.getInstance("CPARENT_PKEY_ATTR_TEXT          ", 5, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_la, "LocFilterStartChildCparentPkeyAttrText");
    padview[59] = PadView.getInstance("CKEY_ATTR_NUM                   ", 6, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_la, "LocFilterStartChildCkeyAttrNum");
    padview[60] = PadView.getInstance("LOC_FILTER_STOP                 ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_la, 
      null);
    padview[61] = PadView.getInstance("CHILD                           ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_la, null);
    padview[62] = PadView.getInstance("CPARENT_PKEY_ATTR_TEXT          ", 5, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_la, "LocFilterStopChildCparentPkeyAttrText");
    padview[63] = PadView.getInstance("CKEY_ATTR_NUM                   ", 6, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_la, "LocFilterStopChildCkeyAttrNum");
    padview[64] = PadView.getInstance("LOC_FILTER                      ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_la, 
      null);
    padview[65] = PadView.getInstance("CHILD                           ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_la, null);
    padview[66] = PadView.getInstance("CSEARCH_ATTR_TEXT               ", 25, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_la, "LocFilterChildCsearchAttrText");
    padview[67] = PadView.getInstance("LOC_GROUP_LIST                  ", 0, 0, 48, (short)2, PadView.VT_GROUP, PadView.DT_NONE, 
      w_la, "LocGroupList_MA");
    padview[68] = PadView.getInstance("LOC_G_LIST                      ", 0, 0, 0, (short)3, PadView.VT_VIEW, PadView.DT_NONE, w_la, 
      null);
    padview[69] = PadView.getInstance("CHILD                           ", 0, 0, 0, (short)4, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_la, null);
    padview[70] = PadView.getInstance("CINSTANCE_ID                    ", 20, 0, 0, (short)4, PadView.VT_PREDICATE, 
      PadView.DT_TIMESTAMP, w_la, "LocGListChildCinstanceId");
    padview[71] = PadView.getInstance("CREFERENCE_ID                   ", 20, 0, 0, (short)4, PadView.VT_PREDICATE, 
      PadView.DT_TIMESTAMP, w_la, "LocGListChildCreferenceId");
    padview[72] = PadView.getInstance("CPARENT_PKEY_ATTR_TEXT          ", 5, 0, 0, (short)4, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_la, "LocGListChildCparentPkeyAttrText");
    padview[73] = PadView.getInstance("CKEY_ATTR_NUM                   ", 6, 0, 0, (short)4, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_la, "LocGListChildCkeyAttrNum");
    padview[74] = PadView.getInstance("CSEARCH_ATTR_TEXT               ", 25, 0, 0, (short)4, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_la, "LocGListChildCsearchAttrText");
    padview[75] = PadView.getInstance("COTHER_ATTR_TEXT                ", 25, 0, 0, (short)4, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_la, "LocGListChildCotherAttrText");
    padview[76] = PadView.getInstance("LOC_EMPTY                       ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_la, 
      null);
    padview[77] = PadView.getInstance("CHILD                           ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_la, null);
    padview[78] = PadView.getInstance("CINSTANCE_ID                    ", 20, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_TIMESTAMP, w_la, "LocEmptyChildCinstanceId");
    padview[79] = PadView.getInstance("CPARENT_PKEY_ATTR_TEXT          ", 5, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_la, "LocEmptyChildCparentPkeyAttrText");
    padview[80] = PadView.getInstance("CKEY_ATTR_NUM                   ", 6, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_la, "LocEmptyChildCkeyAttrNum");
    padview[81] = PadView.getInstance("LOC_MAX                         ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_la, 
      null);
    padview[82] = PadView.getInstance("CHILD                           ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_la, null);
    padview[83] = PadView.getInstance("CPARENT_PKEY_ATTR_TEXT          ", 5, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_la, "LocMaxChildCparentPkeyAttrText");
    padview[84] = PadView.getInstance("CKEY_ATTR_NUM                   ", 6, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_la, "LocMaxChildCkeyAttrNum");
    padview[85] = PadView.getInstance("LOC_READ_LB                     ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_la, 
      null);
    padview[86] = PadView.getInstance("IYY1_SUPPLIED                   ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_la, null);
    padview[87] = PadView.getInstance("TOTAL_INTEGER                   ", 15, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_la, "LocReadLbIyy1SuppliedTotalInteger");
    padview[88] = PadView.getInstance("LOC_ERROR                       ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_la, 
      null);
    padview[89] = PadView.getInstance("IYY1_COMPONENT                  ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_la, null);
    padview[90] = PadView.getInstance("SEVERITY_CODE                   ", 1, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_la, "LocErrorIyy1ComponentSeverityCode");
    padview[91] = PadView.getInstance("ROLLBACK_INDICATOR              ", 1, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_la, "LocErrorIyy1ComponentRollbackIndicator");
    padview[92] = PadView.getInstance("ORIGIN_SERVID                   ", 15, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_la, "LocErrorIyy1ComponentOriginServid");
    padview[93] = PadView.getInstance("CONTEXT_STRING                  ", 512, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_VARCHAR, w_la, "LocErrorIyy1ComponentContextString");
    padview[94] = PadView.getInstance("RETURN_CODE                     ", 5, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_la, "LocErrorIyy1ComponentReturnCode");
    padview[95] = PadView.getInstance("REASON_CODE                     ", 5, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_la, "LocErrorIyy1ComponentReasonCode");
    padview[96] = PadView.getInstance("CHECKSUM                        ", 15, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_la, "LocErrorIyy1ComponentChecksum");
    padview[97] = PadView.getInstance("LOC_GROUP_CONTEXT               ", 0, 0, 9, (short)2, PadView.VT_GROUP, PadView.DT_NONE, w_la,
       "LocGroupContext_MA");
    padview[98] = PadView.getInstance("LOC_G_CONTEXT                   ", 0, 0, 0, (short)3, PadView.VT_VIEW, PadView.DT_NONE, w_la, 
      null);
    padview[99] = PadView.getInstance("DONT_CHANGE_TEXT                ", 0, 0, 0, (short)4, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_la, null);
    padview[100] = PadView.getInstance("TEXT_150                        ", 150, 0, 0, (short)4, PadView.VT_PREDICATE, 
      PadView.DT_TEXT, w_la, "LocGContextDontChangeTextText150");
    padview[101] = PadView.getInstance("LOC                             ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_la,
       null);
    padview[102] = PadView.getInstance("DONT_CHANGE_RETURN_CODES        ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_la, null);
    padview[103] = PadView.getInstance("1_OK                            ", 5, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_la, "LocDontChangeReturnCodesQ1Ok");
    padview[104] = PadView.getInstance("LOC                             ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_la,
       null);
    padview[105] = PadView.getInstance("DONT_CHANGE_REASON_CODES        ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_la, null);
    padview[106] = PadView.getInstance("1_DEFAULT                       ", 5, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_la, "LocDontChangeReasonCodesQ1Default");
    padview[107] = PadView.getInstance("11_LIST_FULL                    ", 5, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_la, "LocDontChangeReasonCodesQ11ListFull");
    padview[108] = PadView.getInstance("12_LIST_EMPTY                   ", 5, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_la, "LocDontChangeReasonCodesQ12ListEmpty");
    padview[109] = PadView.getInstance("LOC_MVS_STRING_HIGH_VALUE       ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_la,
       null);
    padview[110] = PadView.getInstance("IYY1_SUPPLIED                   ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_la, null);
    padview[111] = PadView.getInstance("FLAG                            ", 1, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_la, "LocMvsStringHighValueIyy1SuppliedFlag");
    padview[112] = PadView.getInstance("LOC_PC_STRING_HIGH_VALUE        ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_la,
       null);
    padview[113] = PadView.getInstance("IYY1_SUPPLIED                   ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_la, null);
    padview[114] = PadView.getInstance("FLAG                            ", 1, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_la, "LocPcStringHighValueIyy1SuppliedFlag");
    padview[115] = PadView.getInstance("******** BOTTOM OF DATA ********", 0, 0, 0, (short)0, PadView.VT_END, PadView.DT_NONE, w_la, 
      null);
  }
  public void f_173015129_rgvc()
  	throws ABException
  {
    if ( (LocGroupContext_PS_003 > 9) || (LocGroupContext_PS_003 < 1) )
    {
      globdata.getErrorData().setViewOverflowSW( ErrorData.ERROR_FOUND_SW );
      {
        throw new ABException();
      }
    }
  }
  public void f_173015189_rgvc()
  	throws ABException
  {
    if ( (LocGroupList_PS_002 > 48) || (LocGroupList_PS_002 < 1) )
    {
      globdata.getErrorData().setViewOverflowSW( ErrorData.ERROR_FOUND_SW );
      {
        throw new ABException();
      }
    }
  }
  public void f_173015042_rgvc()
  	throws ABException
  {
    if ( (ExpGroupList_PS_001 > 48) || (ExpGroupList_PS_001 < 1) )
    {
      globdata.getErrorData().setViewOverflowSW( ErrorData.ERROR_FOUND_SW );
      {
        throw new ABException();
      }
    }
  }
}// end class


package gen.ort.yyy;
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
//
//                    Source Code Generated by
//                           CA Gen 8.6
//
//    Copyright (c) 2023 CA Technologies. All rights reserved.
//
//    Name: CYYY0251_IA                      Date: 2023/07/05
//    User: HakanBal                         Time: 15:09:02
//
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// Import Statements
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
import java.lang.*;
import java.io.*;
import java.util.*;
import java.math.*;
import java.sql.*;
import com.ca.gen.vwrt.*;
import com.ca.gen.vwrt.types.*;
import com.ca.gen.vwrt.vdf.*;
import com.ca.gen.csu.exception.*;

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// START OF IMPORT VIEW
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
/**
 * Internal data view storage for: CYYY0251_IA
 **/
public class CYYY0251_IA extends ViewBase implements IImportView, Serializable
{
  // Entity View: IMP_FILTER
  //        Type: IYY1_LIST
  /**
   * Attribute missing flag for: ImpFilterIyy1ListSortOption
   **/
  public char ImpFilterIyy1ListSortOption_AS;
  /**
   * Attribute for: ImpFilterIyy1ListSortOption
   * Domain: Text
   * Length: 3
   * Varying Length: N
   **/
  public String ImpFilterIyy1ListSortOption;
  /**
   * Attribute missing flag for: ImpFilterIyy1ListScrollType
   **/
  public char ImpFilterIyy1ListScrollType_AS;
  /**
   * Attribute for: ImpFilterIyy1ListScrollType
   * Domain: Text
   * Length: 1
   * Varying Length: N
   **/
  public String ImpFilterIyy1ListScrollType;
  /**
   * Attribute missing flag for: ImpFilterIyy1ListListDirection
   **/
  public char ImpFilterIyy1ListListDirection_AS;
  /**
   * Attribute for: ImpFilterIyy1ListListDirection
   * Domain: Text
   * Length: 1
   * Varying Length: N
   **/
  public String ImpFilterIyy1ListListDirection;
  /**
   * Attribute missing flag for: ImpFilterIyy1ListScrollAmount
   **/
  public char ImpFilterIyy1ListScrollAmount_AS;
  /**
   * Attribute for: ImpFilterIyy1ListScrollAmount
   * Domain: Number
   * Length: 5
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public int ImpFilterIyy1ListScrollAmount;
  /**
   * Attribute missing flag for: ImpFilterIyy1ListOrderByFieldNum
   **/
  public char ImpFilterIyy1ListOrderByFieldNum_AS;
  /**
   * Attribute for: ImpFilterIyy1ListOrderByFieldNum
   * Domain: Number
   * Length: 1
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public short ImpFilterIyy1ListOrderByFieldNum;
  // Entity View: IMP_FROM
  //        Type: CHILD
  /**
   * Attribute missing flag for: ImpFromChildCinstanceId
   **/
  public char ImpFromChildCinstanceId_AS;
  /**
   * Attribute for: ImpFromChildCinstanceId
   * Domain: Timestamp
   * Length: 20
   **/
  public String ImpFromChildCinstanceId;
  /**
   * Attribute missing flag for: ImpFromChildCparentPkeyAttrText
   **/
  public char ImpFromChildCparentPkeyAttrText_AS;
  /**
   * Attribute for: ImpFromChildCparentPkeyAttrText
   * Domain: Text
   * Length: 5
   * Varying Length: N
   **/
  public String ImpFromChildCparentPkeyAttrText;
  /**
   * Attribute missing flag for: ImpFromChildCkeyAttrNum
   **/
  public char ImpFromChildCkeyAttrNum_AS;
  /**
   * Attribute for: ImpFromChildCkeyAttrNum
   * Domain: Number
   * Length: 6
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public int ImpFromChildCkeyAttrNum;
  // Entity View: IMP_FILTER_START
  //        Type: CHILD
  /**
   * Attribute missing flag for: ImpFilterStartChildCparentPkeyAttrText
   **/
  public char ImpFilterStartChildCparentPkeyAttrText_AS;
  /**
   * Attribute for: ImpFilterStartChildCparentPkeyAttrText
   * Domain: Text
   * Length: 5
   * Varying Length: N
   **/
  public String ImpFilterStartChildCparentPkeyAttrText;
  /**
   * Attribute missing flag for: ImpFilterStartChildCkeyAttrNum
   **/
  public char ImpFilterStartChildCkeyAttrNum_AS;
  /**
   * Attribute for: ImpFilterStartChildCkeyAttrNum
   * Domain: Number
   * Length: 6
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public int ImpFilterStartChildCkeyAttrNum;
  // Entity View: IMP_FILTER_STOP
  //        Type: CHILD
  /**
   * Attribute missing flag for: ImpFilterStopChildCparentPkeyAttrText
   **/
  public char ImpFilterStopChildCparentPkeyAttrText_AS;
  /**
   * Attribute for: ImpFilterStopChildCparentPkeyAttrText
   * Domain: Text
   * Length: 5
   * Varying Length: N
   **/
  public String ImpFilterStopChildCparentPkeyAttrText;
  /**
   * Attribute missing flag for: ImpFilterStopChildCkeyAttrNum
   **/
  public char ImpFilterStopChildCkeyAttrNum_AS;
  /**
   * Attribute for: ImpFilterStopChildCkeyAttrNum
   * Domain: Number
   * Length: 6
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public int ImpFilterStopChildCkeyAttrNum;
  // Entity View: IMP_FILTER
  //        Type: CHILD
  /**
   * Attribute missing flag for: ImpFilterChildCsearchAttrText
   **/
  public char ImpFilterChildCsearchAttrText_AS;
  /**
   * Attribute for: ImpFilterChildCsearchAttrText
   * Domain: Text
   * Length: 25
   * Varying Length: N
   **/
  public String ImpFilterChildCsearchAttrText;
  /**
   * Default Constructor
   **/
  
  public CYYY0251_IA()
  {
    reset();
  }
  /**
   * Copy Constructor
   **/
  
  public CYYY0251_IA(CYYY0251_IA orig)
  {
    copyFrom(orig);
  }
  /**
   * Static instance creator function
   **/
  
  public static CYYY0251_IA getInstance()
  {
    return new CYYY0251_IA();
  }
  /**
   * Static free instance method
   **/
  
  public void freeInstance()
  {
  }
  /**
   * clone constructor
   **/
  
  @Override public Object clone()
  	throws CloneNotSupportedException
  {
    return(new CYYY0251_IA(this));
  }
  /**
   * Resets all properties to the defaults.
   **/
  
  public void reset()
  {
    ImpFilterIyy1ListSortOption_AS = ' ';
    ImpFilterIyy1ListSortOption = "   ";
    ImpFilterIyy1ListScrollType_AS = ' ';
    ImpFilterIyy1ListScrollType = " ";
    ImpFilterIyy1ListListDirection_AS = ' ';
    ImpFilterIyy1ListListDirection = " ";
    ImpFilterIyy1ListScrollAmount_AS = ' ';
    ImpFilterIyy1ListScrollAmount = 0;
    ImpFilterIyy1ListOrderByFieldNum_AS = ' ';
    ImpFilterIyy1ListOrderByFieldNum = 0;
    ImpFromChildCinstanceId_AS = ' ';
    ImpFromChildCinstanceId = "00000000000000000000";
    ImpFromChildCparentPkeyAttrText_AS = ' ';
    ImpFromChildCparentPkeyAttrText = "     ";
    ImpFromChildCkeyAttrNum_AS = ' ';
    ImpFromChildCkeyAttrNum = 0;
    ImpFilterStartChildCparentPkeyAttrText_AS = ' ';
    ImpFilterStartChildCparentPkeyAttrText = "     ";
    ImpFilterStartChildCkeyAttrNum_AS = ' ';
    ImpFilterStartChildCkeyAttrNum = 0;
    ImpFilterStopChildCparentPkeyAttrText_AS = ' ';
    ImpFilterStopChildCparentPkeyAttrText = "     ";
    ImpFilterStopChildCkeyAttrNum_AS = ' ';
    ImpFilterStopChildCkeyAttrNum = 0;
    ImpFilterChildCsearchAttrText_AS = ' ';
    ImpFilterChildCsearchAttrText = "                         ";
  }
  /**
   * Gets the VDF version of the current state of the instance.
   **/
  public VDF getVDF()
  {
    throw new RuntimeException("can only execute getVDF for a Procedure Step.");
  }
  
  /**
   * Sets the current state of the instance to the VDF version.
   **/
  public void setFromVDF(VDF vdf)
  {
    throw new RuntimeException("can only execute setFromVDF for a Procedure Step.");
  }
  
  /**
   * Sets the current instance based on the passed view.
   **/
  public void copyFrom(IImportView orig)
  {
    this.copyFrom((CYYY0251_IA) orig);
  }
  
  /**
   * Sets the current instance based on the passed view.
   **/
  public void copyFrom(CYYY0251_IA orig)
  {
    ImpFilterIyy1ListSortOption_AS = orig.ImpFilterIyy1ListSortOption_AS;
    ImpFilterIyy1ListSortOption = orig.ImpFilterIyy1ListSortOption;
    ImpFilterIyy1ListScrollType_AS = orig.ImpFilterIyy1ListScrollType_AS;
    ImpFilterIyy1ListScrollType = orig.ImpFilterIyy1ListScrollType;
    ImpFilterIyy1ListListDirection_AS = orig.ImpFilterIyy1ListListDirection_AS;
    ImpFilterIyy1ListListDirection = orig.ImpFilterIyy1ListListDirection;
    ImpFilterIyy1ListScrollAmount_AS = orig.ImpFilterIyy1ListScrollAmount_AS;
    ImpFilterIyy1ListScrollAmount = orig.ImpFilterIyy1ListScrollAmount;
    ImpFilterIyy1ListOrderByFieldNum_AS = orig.ImpFilterIyy1ListOrderByFieldNum_AS;
    ImpFilterIyy1ListOrderByFieldNum = orig.ImpFilterIyy1ListOrderByFieldNum;
    ImpFromChildCinstanceId_AS = orig.ImpFromChildCinstanceId_AS;
    ImpFromChildCinstanceId = orig.ImpFromChildCinstanceId;
    ImpFromChildCparentPkeyAttrText_AS = orig.ImpFromChildCparentPkeyAttrText_AS;
    ImpFromChildCparentPkeyAttrText = orig.ImpFromChildCparentPkeyAttrText;
    ImpFromChildCkeyAttrNum_AS = orig.ImpFromChildCkeyAttrNum_AS;
    ImpFromChildCkeyAttrNum = orig.ImpFromChildCkeyAttrNum;
    ImpFilterStartChildCparentPkeyAttrText_AS = orig.ImpFilterStartChildCparentPkeyAttrText_AS;
    ImpFilterStartChildCparentPkeyAttrText = orig.ImpFilterStartChildCparentPkeyAttrText;
    ImpFilterStartChildCkeyAttrNum_AS = orig.ImpFilterStartChildCkeyAttrNum_AS;
    ImpFilterStartChildCkeyAttrNum = orig.ImpFilterStartChildCkeyAttrNum;
    ImpFilterStopChildCparentPkeyAttrText_AS = orig.ImpFilterStopChildCparentPkeyAttrText_AS;
    ImpFilterStopChildCparentPkeyAttrText = orig.ImpFilterStopChildCparentPkeyAttrText;
    ImpFilterStopChildCkeyAttrNum_AS = orig.ImpFilterStopChildCkeyAttrNum_AS;
    ImpFilterStopChildCkeyAttrNum = orig.ImpFilterStopChildCkeyAttrNum;
    ImpFilterChildCsearchAttrText_AS = orig.ImpFilterChildCsearchAttrText_AS;
    ImpFilterChildCsearchAttrText = orig.ImpFilterChildCsearchAttrText;
  }
}

package gen.ort.yyy;
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
//
//                    Source Code Generated by
//                           CA Gen 8.6
//
//    Copyright (c) 2023 CA Technologies. All rights reserved.
//
//    Name: CYYY0251_LA                      Date: 2023/07/05
//    User: HakanBal                         Time: 15:09:02
//
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// Import Statements
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
import java.lang.*;
import java.io.*;
import java.util.*;
import java.math.*;
import java.sql.*;
import com.ca.gen.vwrt.*;
import com.ca.gen.vwrt.types.*;
import com.ca.gen.vwrt.vdf.*;
import com.ca.gen.csu.exception.*;

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// START OF LOCAL VIEW
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
/**
 * Internal data view storage for: CYYY0251_LA
 **/
public class CYYY0251_LA extends ViewBase implements ILocalView, Serializable
{
  // Entity View: LOC_FILTER
  //        Type: IYY1_LIST
  /**
   * Attribute missing flag for: LocFilterIyy1ListSortOption
   **/
  public char LocFilterIyy1ListSortOption_AS;
  /**
   * Attribute for: LocFilterIyy1ListSortOption
   * Domain: Text
   * Length: 3
   * Varying Length: N
   **/
  public String LocFilterIyy1ListSortOption;
  /**
   * Attribute missing flag for: LocFilterIyy1ListScrollType
   **/
  public char LocFilterIyy1ListScrollType_AS;
  /**
   * Attribute for: LocFilterIyy1ListScrollType
   * Domain: Text
   * Length: 1
   * Varying Length: N
   **/
  public String LocFilterIyy1ListScrollType;
  /**
   * Attribute missing flag for: LocFilterIyy1ListListDirection
   **/
  public char LocFilterIyy1ListListDirection_AS;
  /**
   * Attribute for: LocFilterIyy1ListListDirection
   * Domain: Text
   * Length: 1
   * Varying Length: N
   **/
  public String LocFilterIyy1ListListDirection;
  /**
   * Attribute missing flag for: LocFilterIyy1ListScrollAmount
   **/
  public char LocFilterIyy1ListScrollAmount_AS;
  /**
   * Attribute for: LocFilterIyy1ListScrollAmount
   * Domain: Number
   * Length: 5
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public int LocFilterIyy1ListScrollAmount;
  /**
   * Attribute missing flag for: LocFilterIyy1ListOrderByFieldNum
   **/
  public char LocFilterIyy1ListOrderByFieldNum_AS;
  /**
   * Attribute for: LocFilterIyy1ListOrderByFieldNum
   * Domain: Number
   * Length: 1
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public short LocFilterIyy1ListOrderByFieldNum;
  // Entity View: LOC_FROM
  //        Type: CHILD
  /**
   * Attribute missing flag for: LocFromChildCkeyAttrNum
   **/
  public char LocFromChildCkeyAttrNum_AS;
  /**
   * Attribute for: LocFromChildCkeyAttrNum
   * Domain: Number
   * Length: 6
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public int LocFromChildCkeyAttrNum;
  /**
   * Attribute missing flag for: LocFromChildCparentPkeyAttrText
   **/
  public char LocFromChildCparentPkeyAttrText_AS;
  /**
   * Attribute for: LocFromChildCparentPkeyAttrText
   * Domain: Text
   * Length: 5
   * Varying Length: N
   **/
  public String LocFromChildCparentPkeyAttrText;
  /**
   * Attribute missing flag for: LocFromChildCinstanceId
   **/
  public char LocFromChildCinstanceId_AS;
  /**
   * Attribute for: LocFromChildCinstanceId
   * Domain: Timestamp
   * Length: 20
   **/
  public String LocFromChildCinstanceId;
  // Entity View: LOC_FILTER_START
  //        Type: CHILD
  /**
   * Attribute missing flag for: LocFilterStartChildCparentPkeyAttrText
   **/
  public char LocFilterStartChildCparentPkeyAttrText_AS;
  /**
   * Attribute for: LocFilterStartChildCparentPkeyAttrText
   * Domain: Text
   * Length: 5
   * Varying Length: N
   **/
  public String LocFilterStartChildCparentPkeyAttrText;
  /**
   * Attribute missing flag for: LocFilterStartChildCkeyAttrNum
   **/
  public char LocFilterStartChildCkeyAttrNum_AS;
  /**
   * Attribute for: LocFilterStartChildCkeyAttrNum
   * Domain: Number
   * Length: 6
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public int LocFilterStartChildCkeyAttrNum;
  // Entity View: LOC_FILTER_STOP
  //        Type: CHILD
  /**
   * Attribute missing flag for: LocFilterStopChildCparentPkeyAttrText
   **/
  public char LocFilterStopChildCparentPkeyAttrText_AS;
  /**
   * Attribute for: LocFilterStopChildCparentPkeyAttrText
   * Domain: Text
   * Length: 5
   * Varying Length: N
   **/
  public String LocFilterStopChildCparentPkeyAttrText;
  /**
   * Attribute missing flag for: LocFilterStopChildCkeyAttrNum
   **/
  public char LocFilterStopChildCkeyAttrNum_AS;
  /**
   * Attribute for: LocFilterStopChildCkeyAttrNum
   * Domain: Number
   * Length: 6
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public int LocFilterStopChildCkeyAttrNum;
  // Entity View: LOC_FILTER
  //        Type: CHILD
  /**
   * Attribute missing flag for: LocFilterChildCsearchAttrText
   **/
  public char LocFilterChildCsearchAttrText_AS;
  /**
   * Attribute for: LocFilterChildCsearchAttrText
   * Domain: Text
   * Length: 25
   * Varying Length: N
   **/
  public String LocFilterChildCsearchAttrText;
  // Repeating GV:  LOC_GROUP_LIST
  //     Repeats: 48 times
  /**
   * Repeating group view count
   **/
  public int LocGroupList_MA;
  /**
   * Repeating group view occurrance array
   **/
  public char LocGroupList_AC[] = new char[48];
  // Entity View: LOC_G_LIST
  //        Type: CHILD
  /**
   * Attribute missing flag for: LocGListChildCinstanceId
   **/
  public char LocGListChildCinstanceId_AS[] = new char[48];
  /**
   * Attribute for: LocGListChildCinstanceId
   * Domain: Timestamp
   * Length: 20
   **/
  public String LocGListChildCinstanceId[] = new String[48];
  /**
   * Attribute missing flag for: LocGListChildCreferenceId
   **/
  public char LocGListChildCreferenceId_AS[] = new char[48];
  /**
   * Attribute for: LocGListChildCreferenceId
   * Domain: Timestamp
   * Length: 20
   **/
  public String LocGListChildCreferenceId[] = new String[48];
  /**
   * Attribute missing flag for: LocGListChildCparentPkeyAttrText
   **/
  public char LocGListChildCparentPkeyAttrText_AS[] = new char[48];
  /**
   * Attribute for: LocGListChildCparentPkeyAttrText
   * Domain: Text
   * Length: 5
   * Varying Length: N
   **/
  public String LocGListChildCparentPkeyAttrText[] = new String[48];
  /**
   * Attribute missing flag for: LocGListChildCkeyAttrNum
   **/
  public char LocGListChildCkeyAttrNum_AS[] = new char[48];
  /**
   * Attribute for: LocGListChildCkeyAttrNum
   * Domain: Number
   * Length: 6
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public int LocGListChildCkeyAttrNum[] = new int[48];
  /**
   * Attribute missing flag for: LocGListChildCsearchAttrText
   **/
  public char LocGListChildCsearchAttrText_AS[] = new char[48];
  /**
   * Attribute for: LocGListChildCsearchAttrText
   * Domain: Text
   * Length: 25
   * Varying Length: N
   **/
  public String LocGListChildCsearchAttrText[] = new String[48];
  /**
   * Attribute missing flag for: LocGListChildCotherAttrText
   **/
  public char LocGListChildCotherAttrText_AS[] = new char[48];
  /**
   * Attribute for: LocGListChildCotherAttrText
   * Domain: Text
   * Length: 25
   * Varying Length: N
   **/
  public String LocGListChildCotherAttrText[] = new String[48];
  // Entity View: LOC_EMPTY
  //        Type: CHILD
  /**
   * Attribute missing flag for: LocEmptyChildCinstanceId
   **/
  public char LocEmptyChildCinstanceId_AS;
  /**
   * Attribute for: LocEmptyChildCinstanceId
   * Domain: Timestamp
   * Length: 20
   **/
  public String LocEmptyChildCinstanceId;
  /**
   * Attribute missing flag for: LocEmptyChildCparentPkeyAttrText
   **/
  public char LocEmptyChildCparentPkeyAttrText_AS;
  /**
   * Attribute for: LocEmptyChildCparentPkeyAttrText
   * Domain: Text
   * Length: 5
   * Varying Length: N
   **/
  public String LocEmptyChildCparentPkeyAttrText;
  /**
   * Attribute missing flag for: LocEmptyChildCkeyAttrNum
   **/
  public char LocEmptyChildCkeyAttrNum_AS;
  /**
   * Attribute for: LocEmptyChildCkeyAttrNum
   * Domain: Number
   * Length: 6
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public int LocEmptyChildCkeyAttrNum;
  // Entity View: LOC_MAX
  //        Type: CHILD
  /**
   * Attribute missing flag for: LocMaxChildCparentPkeyAttrText
   **/
  public char LocMaxChildCparentPkeyAttrText_AS;
  /**
   * Attribute for: LocMaxChildCparentPkeyAttrText
   * Domain: Text
   * Length: 5
   * Varying Length: N
   **/
  public String LocMaxChildCparentPkeyAttrText;
  /**
   * Attribute missing flag for: LocMaxChildCkeyAttrNum
   **/
  public char LocMaxChildCkeyAttrNum_AS;
  /**
   * Attribute for: LocMaxChildCkeyAttrNum
   * Domain: Number
   * Length: 6
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public int LocMaxChildCkeyAttrNum;
  // Entity View: LOC_READ_LB
  //        Type: IYY1_SUPPLIED
  /**
   * Attribute missing flag for: LocReadLbIyy1SuppliedTotalInteger
   **/
  public char LocReadLbIyy1SuppliedTotalInteger_AS;
  /**
   * Attribute for: LocReadLbIyy1SuppliedTotalInteger
   * Domain: Number
   * Length: 15
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public double LocReadLbIyy1SuppliedTotalInteger;
  // Entity View: LOC_ERROR
  //        Type: IYY1_COMPONENT
  /**
   * Attribute missing flag for: LocErrorIyy1ComponentSeverityCode
   **/
  public char LocErrorIyy1ComponentSeverityCode_AS;
  /**
   * Attribute for: LocErrorIyy1ComponentSeverityCode
   * Domain: Text
   * Length: 1
   * Varying Length: N
   **/
  public String LocErrorIyy1ComponentSeverityCode;
  /**
   * Attribute missing flag for: LocErrorIyy1ComponentRollbackIndicator
   **/
  public char LocErrorIyy1ComponentRollbackIndicator_AS;
  /**
   * Attribute for: LocErrorIyy1ComponentRollbackIndicator
   * Domain: Text
   * Length: 1
   * Varying Length: N
   **/
  public String LocErrorIyy1ComponentRollbackIndicator;
  /**
   * Attribute missing flag for: LocErrorIyy1ComponentOriginServid
   **/
  public char LocErrorIyy1ComponentOriginServid_AS;
  /**
   * Attribute for: LocErrorIyy1ComponentOriginServid
   * Domain: Number
   * Length: 15
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public double LocErrorIyy1ComponentOriginServid;
  /**
   * Attribute missing flag for: LocErrorIyy1ComponentContextString
   **/
  public char LocErrorIyy1ComponentContextString_AS;
  /**
   * Attribute for: LocErrorIyy1ComponentContextString
   * Domain: Text
   * Length: 512
   * Varying Length: Y
   **/
  public String LocErrorIyy1ComponentContextString;
  /**
   * Attribute missing flag for: LocErrorIyy1ComponentReturnCode
   **/
  public char LocErrorIyy1ComponentReturnCode_AS;
  /**
   * Attribute for: LocErrorIyy1ComponentReturnCode
   * Domain: Number
   * Length: 5
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public int LocErrorIyy1ComponentReturnCode;
  /**
   * Attribute missing flag for: LocErrorIyy1ComponentReasonCode
   **/
  public char LocErrorIyy1ComponentReasonCode_AS;
  /**
   * Attribute for: LocErrorIyy1ComponentReasonCode
   * Domain: Number
   * Length: 5
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public int LocErrorIyy1ComponentReasonCode;
  /**
   * Attribute missing flag for: LocErrorIyy1ComponentChecksum
   **/
  public char LocErrorIyy1ComponentChecksum_AS;
  /**
   * Attribute for: LocErrorIyy1ComponentChecksum
   * Domain: Text
   * Length: 15
   * Varying Length: N
   **/
  public String LocErrorIyy1ComponentChecksum;
  // Repeating GV:  LOC_GROUP_CONTEXT
  //     Repeats: 9 times
  /**
   * Repeating group view count
   **/
  public int LocGroupContext_MA;
  /**
   * Repeating group view occurrance array
   **/
  public char LocGroupContext_AC[] = new char[9];
  // Entity View: LOC_G_CONTEXT
  //        Type: DONT_CHANGE_TEXT
  /**
   * Attribute missing flag for: LocGContextDontChangeTextText150
   **/
  public char LocGContextDontChangeTextText150_AS[] = new char[9];
  /**
   * Attribute for: LocGContextDontChangeTextText150
   * Domain: Text
   * Length: 150
   * Varying Length: N
   **/
  public String LocGContextDontChangeTextText150[] = new String[9];
  // Entity View: LOC
  //        Type: DONT_CHANGE_RETURN_CODES
  /**
   * Attribute missing flag for: LocDontChangeReturnCodesQ1Ok
   **/
  public char LocDontChangeReturnCodesQ1Ok_AS;
  /**
   * Attribute for: LocDontChangeReturnCodesQ1Ok
   * Domain: Number
   * Length: 5
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public int LocDontChangeReturnCodesQ1Ok;
  // Entity View: LOC
  //        Type: DONT_CHANGE_REASON_CODES
  /**
   * Attribute missing flag for: LocDontChangeReasonCodesQ1Default
   **/
  public char LocDontChangeReasonCodesQ1Default_AS;
  /**
   * Attribute for: LocDontChangeReasonCodesQ1Default
   * Domain: Number
   * Length: 5
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public int LocDontChangeReasonCodesQ1Default;
  /**
   * Attribute missing flag for: LocDontChangeReasonCodesQ11ListFull
   **/
  public char LocDontChangeReasonCodesQ11ListFull_AS;
  /**
   * Attribute for: LocDontChangeReasonCodesQ11ListFull
   * Domain: Number
   * Length: 5
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public int LocDontChangeReasonCodesQ11ListFull;
  /**
   * Attribute missing flag for: LocDontChangeReasonCodesQ12ListEmpty
   **/
  public char LocDontChangeReasonCodesQ12ListEmpty_AS;
  /**
   * Attribute for: LocDontChangeReasonCodesQ12ListEmpty
   * Domain: Number
   * Length: 5
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public int LocDontChangeReasonCodesQ12ListEmpty;
  // Entity View: LOC_MVS_STRING_HIGH_VALUE
  //        Type: IYY1_SUPPLIED
  /**
   * Attribute missing flag for: LocMvsStringHighValueIyy1SuppliedFlag
   **/
  public char LocMvsStringHighValueIyy1SuppliedFlag_AS;
  /**
   * Attribute for: LocMvsStringHighValueIyy1SuppliedFlag
   * Domain: Text
   * Length: 1
   * Varying Length: N
   **/
  public String LocMvsStringHighValueIyy1SuppliedFlag;
  // Entity View: LOC_PC_STRING_HIGH_VALUE
  //        Type: IYY1_SUPPLIED
  /**
   * Attribute missing flag for: LocPcStringHighValueIyy1SuppliedFlag
   **/
  public char LocPcStringHighValueIyy1SuppliedFlag_AS;
  /**
   * Attribute for: LocPcStringHighValueIyy1SuppliedFlag
   * Domain: Text
   * Length: 1
   * Varying Length: N
   **/
  public String LocPcStringHighValueIyy1SuppliedFlag;
  /**
   * Default Constructor
   **/
  
  public CYYY0251_LA()
  {
    reset();
  }
  /**
   * Copy Constructor
   **/
  
  public CYYY0251_LA(CYYY0251_LA orig)
  {
    LocFilterIyy1ListSortOption_AS = orig.LocFilterIyy1ListSortOption_AS;
    LocFilterIyy1ListSortOption = orig.LocFilterIyy1ListSortOption;
    LocFilterIyy1ListScrollType_AS = orig.LocFilterIyy1ListScrollType_AS;
    LocFilterIyy1ListScrollType = orig.LocFilterIyy1ListScrollType;
    LocFilterIyy1ListListDirection_AS = orig.LocFilterIyy1ListListDirection_AS;
    LocFilterIyy1ListListDirection = orig.LocFilterIyy1ListListDirection;
    LocFilterIyy1ListScrollAmount_AS = orig.LocFilterIyy1ListScrollAmount_AS;
    LocFilterIyy1ListScrollAmount = orig.LocFilterIyy1ListScrollAmount;
    LocFilterIyy1ListOrderByFieldNum_AS = orig.LocFilterIyy1ListOrderByFieldNum_AS;
    LocFilterIyy1ListOrderByFieldNum = orig.LocFilterIyy1ListOrderByFieldNum;
    LocFromChildCkeyAttrNum_AS = orig.LocFromChildCkeyAttrNum_AS;
    LocFromChildCkeyAttrNum = orig.LocFromChildCkeyAttrNum;
    LocFromChildCparentPkeyAttrText_AS = orig.LocFromChildCparentPkeyAttrText_AS;
    LocFromChildCparentPkeyAttrText = orig.LocFromChildCparentPkeyAttrText;
    LocFromChildCinstanceId_AS = orig.LocFromChildCinstanceId_AS;
    LocFromChildCinstanceId = orig.LocFromChildCinstanceId;
    LocFilterStartChildCparentPkeyAttrText_AS = orig.LocFilterStartChildCparentPkeyAttrText_AS;
    LocFilterStartChildCparentPkeyAttrText = orig.LocFilterStartChildCparentPkeyAttrText;
    LocFilterStartChildCkeyAttrNum_AS = orig.LocFilterStartChildCkeyAttrNum_AS;
    LocFilterStartChildCkeyAttrNum = orig.LocFilterStartChildCkeyAttrNum;
    LocFilterStopChildCparentPkeyAttrText_AS = orig.LocFilterStopChildCparentPkeyAttrText_AS;
    LocFilterStopChildCparentPkeyAttrText = orig.LocFilterStopChildCparentPkeyAttrText;
    LocFilterStopChildCkeyAttrNum_AS = orig.LocFilterStopChildCkeyAttrNum_AS;
    LocFilterStopChildCkeyAttrNum = orig.LocFilterStopChildCkeyAttrNum;
    LocFilterChildCsearchAttrText_AS = orig.LocFilterChildCsearchAttrText_AS;
    LocFilterChildCsearchAttrText = orig.LocFilterChildCsearchAttrText;
    LocGroupList_MA = orig.LocGroupList_MA;
    System.arraycopy(orig.LocGroupList_AC, 0, LocGroupList_AC, 0, LocGroupList_AC.length);
    System.arraycopy(orig.LocGListChildCinstanceId_AS, 0, LocGListChildCinstanceId_AS, 0, LocGListChildCinstanceId_AS.length);
    System.arraycopy(orig.LocGListChildCinstanceId, 0, LocGListChildCinstanceId, 0, LocGListChildCinstanceId.length);
    System.arraycopy(orig.LocGListChildCreferenceId_AS, 0, LocGListChildCreferenceId_AS, 0, LocGListChildCreferenceId_AS.length);
    System.arraycopy(orig.LocGListChildCreferenceId, 0, LocGListChildCreferenceId, 0, LocGListChildCreferenceId.length);
    System.arraycopy(orig.LocGListChildCparentPkeyAttrText_AS, 0, LocGListChildCparentPkeyAttrText_AS, 0, 
      LocGListChildCparentPkeyAttrText_AS.length);
    System.arraycopy(orig.LocGListChildCparentPkeyAttrText, 0, LocGListChildCparentPkeyAttrText, 0, 
      LocGListChildCparentPkeyAttrText.length);
    System.arraycopy(orig.LocGListChildCkeyAttrNum_AS, 0, LocGListChildCkeyAttrNum_AS, 0, LocGListChildCkeyAttrNum_AS.length);
    System.arraycopy(orig.LocGListChildCkeyAttrNum, 0, LocGListChildCkeyAttrNum, 0, LocGListChildCkeyAttrNum.length);
    System.arraycopy(orig.LocGListChildCsearchAttrText_AS, 0, LocGListChildCsearchAttrText_AS, 0, 
      LocGListChildCsearchAttrText_AS.length);
    System.arraycopy(orig.LocGListChildCsearchAttrText, 0, LocGListChildCsearchAttrText, 0, LocGListChildCsearchAttrText.length);
    System.arraycopy(orig.LocGListChildCotherAttrText_AS, 0, LocGListChildCotherAttrText_AS, 0, 
      LocGListChildCotherAttrText_AS.length);
    System.arraycopy(orig.LocGListChildCotherAttrText, 0, LocGListChildCotherAttrText, 0, LocGListChildCotherAttrText.length);
    LocEmptyChildCinstanceId_AS = orig.LocEmptyChildCinstanceId_AS;
    LocEmptyChildCinstanceId = orig.LocEmptyChildCinstanceId;
    LocEmptyChildCparentPkeyAttrText_AS = orig.LocEmptyChildCparentPkeyAttrText_AS;
    LocEmptyChildCparentPkeyAttrText = orig.LocEmptyChildCparentPkeyAttrText;
    LocEmptyChildCkeyAttrNum_AS = orig.LocEmptyChildCkeyAttrNum_AS;
    LocEmptyChildCkeyAttrNum = orig.LocEmptyChildCkeyAttrNum;
    LocMaxChildCparentPkeyAttrText_AS = orig.LocMaxChildCparentPkeyAttrText_AS;
    LocMaxChildCparentPkeyAttrText = orig.LocMaxChildCparentPkeyAttrText;
    LocMaxChildCkeyAttrNum_AS = orig.LocMaxChildCkeyAttrNum_AS;
    LocMaxChildCkeyAttrNum = orig.LocMaxChildCkeyAttrNum;
    LocReadLbIyy1SuppliedTotalInteger_AS = orig.LocReadLbIyy1SuppliedTotalInteger_AS;
    LocReadLbIyy1SuppliedTotalInteger = orig.LocReadLbIyy1SuppliedTotalInteger;
    LocErrorIyy1ComponentSeverityCode_AS = orig.LocErrorIyy1ComponentSeverityCode_AS;
    LocErrorIyy1ComponentSeverityCode = orig.LocErrorIyy1ComponentSeverityCode;
    LocErrorIyy1ComponentRollbackIndicator_AS = orig.LocErrorIyy1ComponentRollbackIndicator_AS;
    LocErrorIyy1ComponentRollbackIndicator = orig.LocErrorIyy1ComponentRollbackIndicator;
    LocErrorIyy1ComponentOriginServid_AS = orig.LocErrorIyy1ComponentOriginServid_AS;
    LocErrorIyy1ComponentOriginServid = orig.LocErrorIyy1ComponentOriginServid;
    LocErrorIyy1ComponentContextString_AS = orig.LocErrorIyy1ComponentContextString_AS;
    LocErrorIyy1ComponentContextString = orig.LocErrorIyy1ComponentContextString;
    LocErrorIyy1ComponentReturnCode_AS = orig.LocErrorIyy1ComponentReturnCode_AS;
    LocErrorIyy1ComponentReturnCode = orig.LocErrorIyy1ComponentReturnCode;
    LocErrorIyy1ComponentReasonCode_AS = orig.LocErrorIyy1ComponentReasonCode_AS;
    LocErrorIyy1ComponentReasonCode = orig.LocErrorIyy1ComponentReasonCode;
    LocErrorIyy1ComponentChecksum_AS = orig.LocErrorIyy1ComponentChecksum_AS;
    LocErrorIyy1ComponentChecksum = orig.LocErrorIyy1ComponentChecksum;
    LocGroupContext_MA = orig.LocGroupContext_MA;
    System.arraycopy(orig.LocGroupContext_AC, 0, LocGroupContext_AC, 0, LocGroupContext_AC.length);
    System.arraycopy(orig.LocGContextDontChangeTextText150_AS, 0, LocGContextDontChangeTextText150_AS, 0, 
      LocGContextDontChangeTextText150_AS.length);
    System.arraycopy(orig.LocGContextDontChangeTextText150, 0, LocGContextDontChangeTextText150, 0, 
      LocGContextDontChangeTextText150.length);
    LocDontChangeReturnCodesQ1Ok_AS = orig.LocDontChangeReturnCodesQ1Ok_AS;
    LocDontChangeReturnCodesQ1Ok = orig.LocDontChangeReturnCodesQ1Ok;
    LocDontChangeReasonCodesQ1Default_AS = orig.LocDontChangeReasonCodesQ1Default_AS;
    LocDontChangeReasonCodesQ1Default = orig.LocDontChangeReasonCodesQ1Default;
    LocDontChangeReasonCodesQ11ListFull_AS = orig.LocDontChangeReasonCodesQ11ListFull_AS;
    LocDontChangeReasonCodesQ11ListFull = orig.LocDontChangeReasonCodesQ11ListFull;
    LocDontChangeReasonCodesQ12ListEmpty_AS = orig.LocDontChangeReasonCodesQ12ListEmpty_AS;
    LocDontChangeReasonCodesQ12ListEmpty = orig.LocDontChangeReasonCodesQ12ListEmpty;
    LocMvsStringHighValueIyy1SuppliedFlag_AS = orig.LocMvsStringHighValueIyy1SuppliedFlag_AS;
    LocMvsStringHighValueIyy1SuppliedFlag = orig.LocMvsStringHighValueIyy1SuppliedFlag;
    LocPcStringHighValueIyy1SuppliedFlag_AS = orig.LocPcStringHighValueIyy1SuppliedFlag_AS;
    LocPcStringHighValueIyy1SuppliedFlag = orig.LocPcStringHighValueIyy1SuppliedFlag;
  }
  /**
   * Static instance creator function
   **/
  
  public static CYYY0251_LA getInstance()
  {
    return new CYYY0251_LA();
  }
  /**
   * Static free instance method
   **/
  
  public void freeInstance()
  {
  }
  /**
   * clone constructor
   **/
  
  @Override public Object clone()
  	throws CloneNotSupportedException
  {
    return(new CYYY0251_LA(this));
  }
  /**
   * Resets all properties to the defaults.
   **/
  
  public void reset()
  {
    LocFilterIyy1ListSortOption_AS = ' ';
    LocFilterIyy1ListSortOption = "   ";
    LocFilterIyy1ListScrollType_AS = ' ';
    LocFilterIyy1ListScrollType = " ";
    LocFilterIyy1ListListDirection_AS = ' ';
    LocFilterIyy1ListListDirection = " ";
    LocFilterIyy1ListScrollAmount_AS = ' ';
    LocFilterIyy1ListScrollAmount = 0;
    LocFilterIyy1ListOrderByFieldNum_AS = ' ';
    LocFilterIyy1ListOrderByFieldNum = 0;
    LocFromChildCkeyAttrNum_AS = ' ';
    LocFromChildCkeyAttrNum = 0;
    LocFromChildCparentPkeyAttrText_AS = ' ';
    LocFromChildCparentPkeyAttrText = "     ";
    LocFromChildCinstanceId_AS = ' ';
    LocFromChildCinstanceId = "00000000000000000000";
    LocFilterStartChildCparentPkeyAttrText_AS = ' ';
    LocFilterStartChildCparentPkeyAttrText = "     ";
    LocFilterStartChildCkeyAttrNum_AS = ' ';
    LocFilterStartChildCkeyAttrNum = 0;
    LocFilterStopChildCparentPkeyAttrText_AS = ' ';
    LocFilterStopChildCparentPkeyAttrText = "     ";
    LocFilterStopChildCkeyAttrNum_AS = ' ';
    LocFilterStopChildCkeyAttrNum = 0;
    LocFilterChildCsearchAttrText_AS = ' ';
    LocFilterChildCsearchAttrText = "                         ";
    LocGroupList_MA = 0;
    for(int a = 0; a < 48; a++)
    {
      LocGroupList_AC[a] = ' ';
      LocGListChildCinstanceId_AS[a] = ' ';
      LocGListChildCinstanceId[a] = "00000000000000000000";
      LocGListChildCreferenceId_AS[a] = ' ';
      LocGListChildCreferenceId[a] = "00000000000000000000";
      LocGListChildCparentPkeyAttrText_AS[a] = ' ';
      LocGListChildCparentPkeyAttrText[a] = "     ";
      LocGListChildCkeyAttrNum_AS[a] = ' ';
      LocGListChildCkeyAttrNum[a] = 0;
      LocGListChildCsearchAttrText_AS[a] = ' ';
      LocGListChildCsearchAttrText[a] = "                         ";
      LocGListChildCotherAttrText_AS[a] = ' ';
      LocGListChildCotherAttrText[a] = "                         ";
    }
    LocEmptyChildCinstanceId_AS = ' ';
    LocEmptyChildCinstanceId = "00000000000000000000";
    LocEmptyChildCparentPkeyAttrText_AS = ' ';
    LocEmptyChildCparentPkeyAttrText = "     ";
    LocEmptyChildCkeyAttrNum_AS = ' ';
    LocEmptyChildCkeyAttrNum = 0;
    LocMaxChildCparentPkeyAttrText_AS = ' ';
    LocMaxChildCparentPkeyAttrText = "     ";
    LocMaxChildCkeyAttrNum_AS = ' ';
    LocMaxChildCkeyAttrNum = 0;
    LocReadLbIyy1SuppliedTotalInteger_AS = ' ';
    LocReadLbIyy1SuppliedTotalInteger = 0.0;
    LocErrorIyy1ComponentSeverityCode_AS = ' ';
    LocErrorIyy1ComponentSeverityCode = " ";
    LocErrorIyy1ComponentRollbackIndicator_AS = ' ';
    LocErrorIyy1ComponentRollbackIndicator = " ";
    LocErrorIyy1ComponentOriginServid_AS = ' ';
    LocErrorIyy1ComponentOriginServid = 0.0;
    LocErrorIyy1ComponentContextString_AS = ' ';
    LocErrorIyy1ComponentContextString = "";
    LocErrorIyy1ComponentReturnCode_AS = ' ';
    LocErrorIyy1ComponentReturnCode = 0;
    LocErrorIyy1ComponentReasonCode_AS = ' ';
    LocErrorIyy1ComponentReasonCode = 0;
    LocErrorIyy1ComponentChecksum_AS = ' ';
    LocErrorIyy1ComponentChecksum = "               ";
    LocGroupContext_MA = 0;
    for(int a = 0; a < 9; a++)
    {
      LocGroupContext_AC[a] = ' ';
      LocGContextDontChangeTextText150_AS[a] = ' ';
      LocGContextDontChangeTextText150[a] = 
"                                                                                                                                                      "
        ;
    }
    LocDontChangeReturnCodesQ1Ok_AS = ' ';
    LocDontChangeReturnCodesQ1Ok = 0;
    LocDontChangeReasonCodesQ1Default_AS = ' ';
    LocDontChangeReasonCodesQ1Default = 0;
    LocDontChangeReasonCodesQ11ListFull_AS = ' ';
    LocDontChangeReasonCodesQ11ListFull = 0;
    LocDontChangeReasonCodesQ12ListEmpty_AS = ' ';
    LocDontChangeReasonCodesQ12ListEmpty = 0;
    LocMvsStringHighValueIyy1SuppliedFlag_AS = ' ';
    LocMvsStringHighValueIyy1SuppliedFlag = " ";
    LocPcStringHighValueIyy1SuppliedFlag_AS = ' ';
    LocPcStringHighValueIyy1SuppliedFlag = " ";
  }
}

package gen.ort.yyy;
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
//
//                    Source Code Generated by
//                           CA Gen 8.6
//
//    Copyright (c) 2023 CA Technologies. All rights reserved.
//
//    Name: CYYY0251_OA                      Date: 2023/07/05
//    User: HakanBal                         Time: 15:09:02
//
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// Import Statements
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
import java.lang.*;
import java.io.*;
import java.util.*;
import java.math.*;
import java.sql.*;
import com.ca.gen.vwrt.*;
import com.ca.gen.vwrt.types.*;
import com.ca.gen.vwrt.vdf.*;
import com.ca.gen.csu.exception.*;

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// START OF EXPORT VIEW
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
/**
 * Internal data view storage for: CYYY0251_OA
 **/
public class CYYY0251_OA extends ViewBase implements IExportView, Serializable
{
  // Repeating GV:  EXP_GROUP_LIST
  //     Repeats: 48 times
  /**
   * Repeating group view count
   **/
  public int ExpGroupList_MA;
  /**
   * Repeating group view occurrance array
   **/
  public char ExpGroupList_AC[] = new char[48];
  // Entity View: EXP_G_LIST
  //        Type: CHILD
  /**
   * Attribute missing flag for: ExpGListChildCinstanceId
   **/
  public char ExpGListChildCinstanceId_AS[] = new char[48];
  /**
   * Attribute for: ExpGListChildCinstanceId
   * Domain: Timestamp
   * Length: 20
   **/
  public String ExpGListChildCinstanceId[] = new String[48];
  /**
   * Attribute missing flag for: ExpGListChildCreferenceId
   **/
  public char ExpGListChildCreferenceId_AS[] = new char[48];
  /**
   * Attribute for: ExpGListChildCreferenceId
   * Domain: Timestamp
   * Length: 20
   **/
  public String ExpGListChildCreferenceId[] = new String[48];
  /**
   * Attribute missing flag for: ExpGListChildCparentPkeyAttrText
   **/
  public char ExpGListChildCparentPkeyAttrText_AS[] = new char[48];
  /**
   * Attribute for: ExpGListChildCparentPkeyAttrText
   * Domain: Text
   * Length: 5
   * Varying Length: N
   **/
  public String ExpGListChildCparentPkeyAttrText[] = new String[48];
  /**
   * Attribute missing flag for: ExpGListChildCkeyAttrNum
   **/
  public char ExpGListChildCkeyAttrNum_AS[] = new char[48];
  /**
   * Attribute for: ExpGListChildCkeyAttrNum
   * Domain: Number
   * Length: 6
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public int ExpGListChildCkeyAttrNum[] = new int[48];
  /**
   * Attribute missing flag for: ExpGListChildCsearchAttrText
   **/
  public char ExpGListChildCsearchAttrText_AS[] = new char[48];
  /**
   * Attribute for: ExpGListChildCsearchAttrText
   * Domain: Text
   * Length: 25
   * Varying Length: N
   **/
  public String ExpGListChildCsearchAttrText[] = new String[48];
  /**
   * Attribute missing flag for: ExpGListChildCotherAttrText
   **/
  public char ExpGListChildCotherAttrText_AS[] = new char[48];
  /**
   * Attribute for: ExpGListChildCotherAttrText
   * Domain: Text
   * Length: 25
   * Varying Length: N
   **/
  public String ExpGListChildCotherAttrText[] = new String[48];
  // Entity View: EXP_ERROR
  //        Type: IYY1_COMPONENT
  /**
   * Attribute missing flag for: ExpErrorIyy1ComponentSeverityCode
   **/
  public char ExpErrorIyy1ComponentSeverityCode_AS;
  /**
   * Attribute for: ExpErrorIyy1ComponentSeverityCode
   * Domain: Text
   * Length: 1
   * Varying Length: N
   **/
  public String ExpErrorIyy1ComponentSeverityCode;
  /**
   * Attribute missing flag for: ExpErrorIyy1ComponentRollbackIndicator
   **/
  public char ExpErrorIyy1ComponentRollbackIndicator_AS;
  /**
   * Attribute for: ExpErrorIyy1ComponentRollbackIndicator
   * Domain: Text
   * Length: 1
   * Varying Length: N
   **/
  public String ExpErrorIyy1ComponentRollbackIndicator;
  /**
   * Attribute missing flag for: ExpErrorIyy1ComponentOriginServid
   **/
  public char ExpErrorIyy1ComponentOriginServid_AS;
  /**
   * Attribute for: ExpErrorIyy1ComponentOriginServid
   * Domain: Number
   * Length: 15
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public double ExpErrorIyy1ComponentOriginServid;
  /**
   * Attribute missing flag for: ExpErrorIyy1ComponentContextString
   **/
  public char ExpErrorIyy1ComponentContextString_AS;
  /**
   * Attribute for: ExpErrorIyy1ComponentContextString
   * Domain: Text
   * Length: 512
   * Varying Length: Y
   **/
  public String ExpErrorIyy1ComponentContextString;
  /**
   * Attribute missing flag for: ExpErrorIyy1ComponentReturnCode
   **/
  public char ExpErrorIyy1ComponentReturnCode_AS;
  /**
   * Attribute for: ExpErrorIyy1ComponentReturnCode
   * Domain: Number
   * Length: 5
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public int ExpErrorIyy1ComponentReturnCode;
  /**
   * Attribute missing flag for: ExpErrorIyy1ComponentReasonCode
   **/
  public char ExpErrorIyy1ComponentReasonCode_AS;
  /**
   * Attribute for: ExpErrorIyy1ComponentReasonCode
   * Domain: Number
   * Length: 5
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public int ExpErrorIyy1ComponentReasonCode;
  /**
   * Attribute missing flag for: ExpErrorIyy1ComponentChecksum
   **/
  public char ExpErrorIyy1ComponentChecksum_AS;
  /**
   * Attribute for: ExpErrorIyy1ComponentChecksum
   * Domain: Text
   * Length: 15
   * Varying Length: N
   **/
  public String ExpErrorIyy1ComponentChecksum;
  /**
   * Default Constructor
   **/
  
  public CYYY0251_OA()
  {
    reset();
  }
  /**
   * Copy Constructor
   **/
  
  public CYYY0251_OA(CYYY0251_OA orig)
  {
    copyFrom(orig);
  }
  /**
   * Static instance creator function
   **/
  
  public static CYYY0251_OA getInstance()
  {
    return new CYYY0251_OA();
  }
  /**
   * Static free instance method
   **/
  
  public void freeInstance()
  {
  }
  /**
   * clone constructor
   **/
  
  @Override public Object clone()
  	throws CloneNotSupportedException
  {
    return(new CYYY0251_OA(this));
  }
  /**
   * Resets all properties to the defaults.
   **/
  
  public void reset()
  {
    ExpGroupList_MA = 0;
    for(int a = 0; a < 48; a++)
    {
      ExpGroupList_AC[a] = ' ';
      ExpGListChildCinstanceId_AS[a] = ' ';
      ExpGListChildCinstanceId[a] = "00000000000000000000";
      ExpGListChildCreferenceId_AS[a] = ' ';
      ExpGListChildCreferenceId[a] = "00000000000000000000";
      ExpGListChildCparentPkeyAttrText_AS[a] = ' ';
      ExpGListChildCparentPkeyAttrText[a] = "     ";
      ExpGListChildCkeyAttrNum_AS[a] = ' ';
      ExpGListChildCkeyAttrNum[a] = 0;
      ExpGListChildCsearchAttrText_AS[a] = ' ';
      ExpGListChildCsearchAttrText[a] = "                         ";
      ExpGListChildCotherAttrText_AS[a] = ' ';
      ExpGListChildCotherAttrText[a] = "                         ";
    }
    ExpErrorIyy1ComponentSeverityCode_AS = ' ';
    ExpErrorIyy1ComponentSeverityCode = " ";
    ExpErrorIyy1ComponentRollbackIndicator_AS = ' ';
    ExpErrorIyy1ComponentRollbackIndicator = " ";
    ExpErrorIyy1ComponentOriginServid_AS = ' ';
    ExpErrorIyy1ComponentOriginServid = 0.0;
    ExpErrorIyy1ComponentContextString_AS = ' ';
    ExpErrorIyy1ComponentContextString = "";
    ExpErrorIyy1ComponentReturnCode_AS = ' ';
    ExpErrorIyy1ComponentReturnCode = 0;
    ExpErrorIyy1ComponentReasonCode_AS = ' ';
    ExpErrorIyy1ComponentReasonCode = 0;
    ExpErrorIyy1ComponentChecksum_AS = ' ';
    ExpErrorIyy1ComponentChecksum = "               ";
  }
  /**
   * Sets the current state of the instance to the VDF version.
   **/
  public void setFromVDF(VDF vdf)
  {
    throw new RuntimeException("can only execute setFromVDF for a Procedure Step.");
  }
  
  /**
   * Gets the VDF version of the current state of the instance.
   **/
  public VDF getVDF()
  {
    throw new RuntimeException("can only execute getVDF for a Procedure Step.");
  }
  
  /**
   * Sets the current instance based on the passed view.
   **/
  public void copyFrom(IExportView orig)
  {
    this.copyFrom((CYYY0251_OA) orig);
  }
  
  /**
   * Sets the current instance based on the passed view.
   **/
  public void copyFrom(CYYY0251_OA orig)
  {
    ExpGroupList_MA = orig.ExpGroupList_MA;
    for(int a = 0; a < 48; a++)
    {
      ExpGroupList_AC[a] = orig.ExpGroupList_AC[a];
      ExpGListChildCinstanceId_AS[a] = orig.ExpGListChildCinstanceId_AS[a];
      ExpGListChildCinstanceId[a] = orig.ExpGListChildCinstanceId[a];
      ExpGListChildCreferenceId_AS[a] = orig.ExpGListChildCreferenceId_AS[a];
      ExpGListChildCreferenceId[a] = orig.ExpGListChildCreferenceId[a];
      ExpGListChildCparentPkeyAttrText_AS[a] = orig.ExpGListChildCparentPkeyAttrText_AS[a];
      ExpGListChildCparentPkeyAttrText[a] = orig.ExpGListChildCparentPkeyAttrText[a];
      ExpGListChildCkeyAttrNum_AS[a] = orig.ExpGListChildCkeyAttrNum_AS[a];
      ExpGListChildCkeyAttrNum[a] = orig.ExpGListChildCkeyAttrNum[a];
      ExpGListChildCsearchAttrText_AS[a] = orig.ExpGListChildCsearchAttrText_AS[a];
      ExpGListChildCsearchAttrText[a] = orig.ExpGListChildCsearchAttrText[a];
      ExpGListChildCotherAttrText_AS[a] = orig.ExpGListChildCotherAttrText_AS[a];
      ExpGListChildCotherAttrText[a] = orig.ExpGListChildCotherAttrText[a];
    }
    ExpErrorIyy1ComponentSeverityCode_AS = orig.ExpErrorIyy1ComponentSeverityCode_AS;
    ExpErrorIyy1ComponentSeverityCode = orig.ExpErrorIyy1ComponentSeverityCode;
    ExpErrorIyy1ComponentRollbackIndicator_AS = orig.ExpErrorIyy1ComponentRollbackIndicator_AS;
    ExpErrorIyy1ComponentRollbackIndicator = orig.ExpErrorIyy1ComponentRollbackIndicator;
    ExpErrorIyy1ComponentOriginServid_AS = orig.ExpErrorIyy1ComponentOriginServid_AS;
    ExpErrorIyy1ComponentOriginServid = orig.ExpErrorIyy1ComponentOriginServid;
    ExpErrorIyy1ComponentContextString_AS = orig.ExpErrorIyy1ComponentContextString_AS;
    ExpErrorIyy1ComponentContextString = orig.ExpErrorIyy1ComponentContextString;
    ExpErrorIyy1ComponentReturnCode_AS = orig.ExpErrorIyy1ComponentReturnCode_AS;
    ExpErrorIyy1ComponentReturnCode = orig.ExpErrorIyy1ComponentReturnCode;
    ExpErrorIyy1ComponentReasonCode_AS = orig.ExpErrorIyy1ComponentReasonCode_AS;
    ExpErrorIyy1ComponentReasonCode = orig.ExpErrorIyy1ComponentReasonCode;
    ExpErrorIyy1ComponentChecksum_AS = orig.ExpErrorIyy1ComponentChecksum_AS;
    ExpErrorIyy1ComponentChecksum = orig.ExpErrorIyy1ComponentChecksum;
  }
}
