
package gen.ort.yyy;

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
//
//                    Source Code Generated by
//                           CA Gen 8.6
//
//    Copyright (c) 2023 CA Technologies. All rights reserved.
//
//    Name: CYYY0351_TYPE_LIST               Date: 2023/07/05
//    Target OS:   JVM                       Time: 15:09:32
//    Target DBMS: JDBC                      User: HakanBal
//    Access Method: JDBC           
//
//    Generation options:
//    Debug trace option selected
//    Data modeling constraint enforcement not selected
//    Optimized import view initialization not selected
//    Enforce default values with DBMS not selected
//    Init unspecified optional fields to NULL not selected
//
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// Import Statements
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
import java.lang.*;
import java.io.*;
import java.util.*;
import java.math.*;
import java.sql.*;
import com.ca.gen.vwrt.*;
import com.ca.gen.vwrt.types.*;
import com.ca.gen.vwrt.vdf.*;

import com.ca.gen.abrt.*;
import com.ca.gen.abrt.functions.*;
import com.ca.gen.abrt.cascade.*;
import com.ca.gen.abrt.trace.*;
import com.ca.gen.exits.common.*;
import com.ca.gen.odc.*;

public class CYYY0351 extends ABBase
{
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // IMPORT VIEW CLASS VARIABLE
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  CYYY0351_IA w_ia;
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // EXPORT VIEW CLASS VARIABLE
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  CYYY0351_OA w_oa;
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // LOCAL VIEW CLASS VARIABLE
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  CYYY0351_LA w_la;
  
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // ACTION BLOCK IMPORT/EXPORT VIEWS CLASS VARIABLES
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // Data Structure for string function
  // Data View Group: workarea_001
  //      DVG id name: workarea_001_oa
  // Entity View: EXPORT
  //        Type: STORAGE
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  StringAttr workarea_001_oa_output_string_FP_001 = StringAttr.getInstance();
  
  // Data View Group: workarea_002
  //      DVG id name: workarea_002_oa
  // Entity View: EXPORT
  //        Type: STORAGE
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  StringAttr workarea_002_oa_output_string_FP_002 = StringAttr.getInstance();
  
  gen.ort.yyy.DYYY0351_IA dyyy0351_ia;
  gen.ort.yyy.DYYY0351_OA dyyy0351_oa;
  gen.ort.yyy.CYYY9001_OA cyyy9001_oa;
  gen.ort.yyy.CYYY9141_IA cyyy9141_ia;
  gen.ort.yyy.CYYY9141_OA cyyy9141_oa;
  // Data View Group: TRIM_IA
  // Entity View: IMPORT
  //        Type: TRIM
  StringAttr trim_ia_ImportTrimInputString_FP_156 = StringAttr.getInstance();
  // Data View Group: CONCAT_IA
  // Entity View: IMPORT
  //        Type: CONCAT
  StringAttr concat_ia_ImportConcatString1_FP_157 = StringAttr.getInstance();
  StringAttr concat_ia_ImportConcatString2_FP_157 = StringAttr.getInstance();
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // REPEATING GROUP VIEW STATUS FIELDS 
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  boolean ExpGroupList_FL_001;
  int ExpGroupList_PS_001;
  boolean ExpGroupList_RF_001;
  public final static int ExpGroupList_MM_001 = 48;
  boolean LocGroupList_FL_002;
  int LocGroupList_PS_002;
  boolean LocGroupList_RF_002;
  public final static int LocGroupList_MM_002 = 48;
  boolean LocGroupContext_FL_003;
  int LocGroupContext_PS_003;
  boolean LocGroupContext_RF_003;
  public final static int LocGroupContext_MM_003 = 9;
  boolean ExpGroupList_FL_004;
  int ExpGroupList_PS_004;
  boolean ExpGroupList_RF_004;
  public final static int ExpGroupList_MM_004 = 48;
  boolean ImpGroupContext_FL_005;
  int ImpGroupContext_PS_005;
  boolean ImpGroupContext_RF_005;
  public final static int ImpGroupContext_MM_005 = 9;
  
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // MISC DECLARATIONS AND PROTOTYPES 
  //    FOLLOW AS NEEDED:             
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  boolean func_0022020162_esc_flag;
  boolean func_0020971777_esc_flag;
  boolean func_0020971737_esc_flag;
  boolean func_0020971530_esc_flag;
  boolean func_0020972141_esc_flag;
  boolean func_0020971582_esc_flag;
  boolean func_0020972105_esc_flag;
  boolean func_0020971773_esc_flag;
  boolean func_0020971625_esc_flag;
  boolean repeat_0066060816_esc_flag;
  boolean func_0020971977_esc_flag;
  boolean func_0020971850_esc_flag;
  PadView padview[] = new PadView [120];
  int trace_ret_code;
  PadText padtext[] = initPadText();
  public PadText [] initPadText()
  {
    PadText [] result = new PadText [PADTEXT_SIZE];
    result[0] = PadText.getInstance(   0,"+->   CYYY0351_TYPE_LIST                07/05/2023  15:09");
    result[1] = PadText.getInstance(   0,"!       IMPORTS:");
    result[2] = PadText.getInstance(   0,"!         Work View imp_filter iyy1_list (Transient, Mandatory, Import only)");
    result[3] = PadText.getInstance(   0,"!           sort_option");
    result[4] = PadText.getInstance(   0,"!           scroll_type");
    result[5] = PadText.getInstance(   0,"!           list_direction");
    result[6] = PadText.getInstance(   0,"!           scroll_amount");
    result[7] = PadText.getInstance(   0,"!           order_by_field_num");
    result[8] = PadText.getInstance(   0,"!         Entity View imp_from type (Transient, Mandatory, Import only)");
    result[9] = PadText.getInstance(   0,"!           tinstance_id");
    result[10] = PadText.getInstance(   0,"!           tkey_attr_text");
    result[11] = PadText.getInstance(   0,"!           tsearch_attr_text");
    result[12] = PadText.getInstance(   0,"!         Entity View imp_filter_start type (Transient, Mandatory, Import only)");
    result[13] = PadText.getInstance(   0,"!           tkey_attr_text");
    result[14] = PadText.getInstance(   0,"!         Entity View imp_filter_stop type (Transient, Mandatory, Import only)");
    result[15] = PadText.getInstance(   0,"!           tkey_attr_text");
    result[16] = PadText.getInstance(   0,"!         Entity View imp_filter type (Transient, Mandatory, Import only)");
    result[17] = PadText.getInstance(   0,"!           tsearch_attr_text");
    result[18] = PadText.getInstance(   0,"!           tother_attr_text");
    result[19] = PadText.getInstance(   0,"!       EXPORTS:");
    result[20] = PadText.getInstance(   0,"!         Group View (48) exp_group_list");
    result[21] = PadText.getInstance(   0,"!           Entity View exp_g_list type (Transient, Export only)");
    result[22] = PadText.getInstance(   0,"!             tinstance_id");
    result[23] = PadText.getInstance(   0,"!             treference_id");
    result[24] = PadText.getInstance(   0,"!             tcreate_user_id");
    result[25] = PadText.getInstance(   0,"!             tupdate_user_id");
    result[26] = PadText.getInstance(   0,"!             tkey_attr_text");
    result[27] = PadText.getInstance(   0,"!             tsearch_attr_text");
    result[28] = PadText.getInstance(   0,"!             tother_attr_text");
    result[29] = PadText.getInstance(   0,"!             tother_attr_date");
    result[30] = PadText.getInstance(   0,"!             tother_attr_time");
    result[31] = PadText.getInstance(   0,"!             tother_attr_amount");
    result[32] = PadText.getInstance(   0,"!         Work View exp_error iyy1_component (Transient, Export only)");
    result[33] = PadText.getInstance(   0,"!           severity_code");
    result[34] = PadText.getInstance(   0,"!           rollback_indicator");
    result[35] = PadText.getInstance(   0,"!           origin_servid");
    result[36] = PadText.getInstance(   0,"!           context_string");
    result[37] = PadText.getInstance(   0,"!           return_code");
    result[38] = PadText.getInstance(   0,"!           reason_code");
    result[39] = PadText.getInstance(   0,"!           checksum");
    result[40] = PadText.getInstance(   0,"!       LOCALS:");
    result[41] = PadText.getInstance(   0,"!         Work View loc_filter iyy1_list");
    result[42] = PadText.getInstance(   0,"!           sort_option");
    result[43] = PadText.getInstance(   0,"!           scroll_type");
    result[44] = PadText.getInstance(   0,"!           list_direction");
    result[45] = PadText.getInstance(   0,"!           scroll_amount");
    result[46] = PadText.getInstance(   0,"!           order_by_field_num");
    result[47] = PadText.getInstance(   0,"!         Entity View loc_from type");
    result[48] = PadText.getInstance(   0,"!           tinstance_id");
    result[49] = PadText.getInstance(   0,"!           tkey_attr_text");
    result[50] = PadText.getInstance(   0,"!           tsearch_attr_text");
    result[51] = PadText.getInstance(   0,"!         Entity View loc_filter_start type");
    result[52] = PadText.getInstance(   0,"!           tkey_attr_text");
    result[53] = PadText.getInstance(   0,"!         Entity View loc_filter_stop type");
    result[54] = PadText.getInstance(   0,"!           tkey_attr_text");
    result[55] = PadText.getInstance(   0,"!         Entity View loc_filter type");
    result[56] = PadText.getInstance(   0,"!           tsearch_attr_text");
    result[57] = PadText.getInstance(   0,"!           tother_attr_text");
    result[58] = PadText.getInstance(   0,"!         Group View (48) loc_group_list");
    result[59] = PadText.getInstance(   0,"!           Entity View loc_g_list type");
    result[60] = PadText.getInstance(   0,"!             tinstance_id");
    result[61] = PadText.getInstance(   0,"!             treference_id");
    result[62] = PadText.getInstance(   0,"!             tcreate_user_id");
    result[63] = PadText.getInstance(   0,"!             tupdate_user_id");
    result[64] = PadText.getInstance(   0,"!             tkey_attr_text");
    result[65] = PadText.getInstance(   0,"!             tsearch_attr_text");
    result[66] = PadText.getInstance(   0,"!             tother_attr_text");
    result[67] = PadText.getInstance(   0,"!             tother_attr_date");
    result[68] = PadText.getInstance(   0,"!             tother_attr_time");
    result[69] = PadText.getInstance(   0,"!             tother_attr_amount");
    result[70] = PadText.getInstance(   0,"!         Entity View loc_empty type");
    result[71] = PadText.getInstance(   0,"!           tinstance_id");
    result[72] = PadText.getInstance(   0,"!           tkey_attr_text");
    result[73] = PadText.getInstance(   0,"!           tsearch_attr_text");
    result[74] = PadText.getInstance(   0,"!         Entity View loc_max type");
    result[75] = PadText.getInstance(   0,"!           tkey_attr_text");
    result[76] = PadText.getInstance(   0,"!           tsearch_attr_text");
    result[77] = PadText.getInstance(   0,"!         Work View loc_read_lb iyy1_supplied");
    result[78] = PadText.getInstance(   0,"!           total_integer");
    result[79] = PadText.getInstance(   0,"!         Work View loc_error iyy1_component");
    result[80] = PadText.getInstance(   0,"!           severity_code");
    result[81] = PadText.getInstance(   0,"!           rollback_indicator");
    result[82] = PadText.getInstance(   0,"!           origin_servid");
    result[83] = PadText.getInstance(   0,"!           context_string");
    result[84] = PadText.getInstance(   0,"!           return_code");
    result[85] = PadText.getInstance(   0,"!           reason_code");
    result[86] = PadText.getInstance(   0,"!           checksum");
    result[87] = PadText.getInstance(   0,"!         Group View (9) loc_group_context");
    result[88] = PadText.getInstance(   0,"!           Work View loc_g_context dont_change_text");
    result[89] = PadText.getInstance(   0,"!             text_150");
    result[90] = PadText.getInstance(   0,"!         Work View loc dont_change_return_codes");
    result[91] = PadText.getInstance(   0,"!           1_ok");
    result[92] = PadText.getInstance(   0,"!         Work View loc dont_change_reason_codes");
    result[93] = PadText.getInstance(   0,"!           1_default");
    result[94] = PadText.getInstance(   0,"!         Work View loc_mvs_string_high_value iyy1_supplied");
    result[95] = PadText.getInstance(   0,"!           flag");
    result[96] = PadText.getInstance(   0,"!         Work View loc_pc_string_high_value iyy1_supplied");
    result[97] = PadText.getInstance(   0,"!           flag");
    result[98] = PadText.getInstance(   0,"!");
    result[99] = PadText.getInstance(   0,"!     PROCEDURE STATEMENTS");
    result[100] = PadText.getInstance(   0,"!");
    result[101] = PadText.getInstance(   1,"!  NOTE: ");
    result[102] = PadText.getInstance(   1,"!  Please review explanation for purpose.");
    result[103] = PadText.getInstance(   1,"!  ");
    result[104] = PadText.getInstance(   2,"!  NOTE: ");
    result[105] = PadText.getInstance(   2,"!  RELEASE HISTORY");
    result[106] = PadText.getInstance(   2,"!  01_00 23-02-1998 New release");
    result[107] = PadText.getInstance(   2,"!  ");
    result[108] = PadText.getInstance(   3,"!  USE cyyy9001_exception_hndlng_dflt");
    result[109] = PadText.getInstance(   3,
      "!     WHICH EXPORTS: Work View exp_error iyy1_component FROM Work View exp_error iyy1_component");
    result[110] = PadText.getInstance(   4,"!   ");
    result[111] = PadText.getInstance(   5,"!  NOTE: ");
    result[112] = PadText.getInstance(   5,"!  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
    result[113] = PadText.getInstance(   5,"!  Please rename the procedure name below.");
    result[114] = PadText.getInstance(   5,"!  ");
    result[115] = PadText.getInstance(   6,"!  SET SUBSCRIPT OF loc_group_context TO 1 ");
    result[116] = PadText.getInstance(   7,"!  SET loc_g_context dont_change_text text_150 TO \"CYYY0351\" ");
    result[117] = PadText.getInstance(   8,"!  SET SUBSCRIPT OF loc_group_context TO 2 ");
    result[118] = PadText.getInstance(   9,"!  SET loc_g_context dont_change_text text_150 TO \"LIST\" ");
    result[119] = PadText.getInstance(  10,"!   ");
    result[120] = PadText.getInstance(  11,"!  NOTE: ");
    result[121] = PadText.getInstance(  11,"!  ****************************************************************");
    result[122] = PadText.getInstance(  11,"!  Values of the ReturnCode/ReasonCode used.");
    result[123] = PadText.getInstance(  11,"!  ");
    result[124] = PadText.getInstance(  12,"!  NOTE: ");
    result[125] = PadText.getInstance(  12,"!  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
    result[126] = PadText.getInstance(  12,"!  Please set the return ve reason code values below.");
    result[127] = PadText.getInstance(  12,"!  ");
    result[128] = PadText.getInstance(  13,"!  SET loc dont_change_return_codes 1_ok TO 1 ");
    result[129] = PadText.getInstance(  14,"!   ");
    result[130] = PadText.getInstance(  15,"!  SET loc dont_change_reason_codes 1_default TO 1 ");
    result[131] = PadText.getInstance(  16,"!   ");
    result[132] = PadText.getInstance(  17,"!  NOTE: ");
    result[133] = PadText.getInstance(  17,"!  ****************************************************************");
    result[134] = PadText.getInstance(  17,"!  a) The attribute(s) to be sorted must be located in imp_from.");
    result[135] = PadText.getInstance(  17,"!  b) If the attribute(s) to be sorted is not unique,");
    result[136] = PadText.getInstance(  17,"!     new attribute(s) should be added to make it unique.");
    result[137] = PadText.getInstance(  17,"!     (An index definition in DB is not essential.)");
    result[138] = PadText.getInstance(  17,"!  c) If more than one sorting way, common attribute(s) naturally");
    result[139] = PadText.getInstance(  17,"!     should be present in imp_from only once.");
    result[140] = PadText.getInstance(  17,"!  d) The attribute(s) to be sorted must be located in SORTED BY(s),");
    result[141] = PadText.getInstance(  17,"!     If attribute(s) is addded for uniqueness, these should be at the end.");
    result[142] = PadText.getInstance(  17,"!  e) The attribute(s) in SORTED BY(s) should be in the first place of WHERE");
    result[143] = PadText.getInstance(  17,"!     clause and they should keep the same order.");
    result[144] = PadText.getInstance(  17,"!  ");
    result[145] = PadText.getInstance(  18,"!  +->IF exp_error iyy1_component return_code >= loc dont_change_return_codes 1_ok");
    result[146] = PadText.getInstance(  19,"!  !  MOVE imp_filter iyy1_list TO loc_filter iyy1_list");
    result[147] = PadText.getInstance(  20,"!  !   ");
    result[148] = PadText.getInstance(  21,"!  !  +->IF loc_filter iyy1_list scroll_amount > MAX OF exp_group_list  ");
    result[149] = PadText.getInstance(  21,"!  !  !        OR  loc_filter iyy1_list scroll_amount < 1");
    result[150] = PadText.getInstance(  22,"!  !  !  SET loc_filter iyy1_list scroll_amount TO MAX OF exp_group_list ");
    result[151] = PadText.getInstance(  21,"!  !  +--");
    result[152] = PadText.getInstance(  23,"!  !  +->IF loc_filter iyy1_list sort_option = SPACES");
    result[153] = PadText.getInstance(  24,"!  !  !  SET loc_filter iyy1_list sort_option TO \"ASC\" ");
    result[154] = PadText.getInstance(  23,"!  !  +--");
    result[155] = PadText.getInstance(  25,"!  !  +->IF loc_filter iyy1_list list_direction = \"P\"");
    result[156] = PadText.getInstance(  26,"!  !  !  +->IF loc_filter iyy1_list sort_option = \"ASC\"");
    result[157] = PadText.getInstance(  27,"!  !  !  !  SET loc_filter iyy1_list sort_option TO \"DES\" ");
    result[158] = PadText.getInstance(  26, 1, "!  !  !  +> ELSE");
    result[159] = PadText.getInstance(  28,"!  !  !  !  SET loc_filter iyy1_list sort_option TO \"ASC\" ");
    result[160] = PadText.getInstance(  26,"!  !  !  +--");
    result[161] = PadText.getInstance(  25,"!  !  +--");
    result[162] = PadText.getInstance(  29,"!  !   ");
    result[163] = PadText.getInstance(  30,"!  !  NOTE: ");
    result[164] = PadText.getInstance(  30,"!  !  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
    result[165] = PadText.getInstance(  30,"!  !  Please review the filter code block.");
    result[166] = PadText.getInstance(  30,"!  !  ");
    result[167] = PadText.getInstance(  31,"!  !  NOTE: ");
    result[168] = PadText.getInstance(  31,"!  !  ****************************************************************");
    result[169] = PadText.getInstance(  31,"!  !  Min-Max interval filtering");
    result[170] = PadText.getInstance(  31,"!  !  ");
    result[171] = PadText.getInstance(  32,"!  !  MOVE imp_filter_start type TO loc_filter_start type");
    result[172] = PadText.getInstance(  33,"!  !  MOVE imp_filter_stop type TO loc_filter_stop type");
    result[173] = PadText.getInstance(  34,"!  !   ");
    result[174] = PadText.getInstance(  35,"!  !  NOTE: ");
    result[175] = PadText.getInstance(  35,"!  !  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
    result[176] = PadText.getInstance(  35,
      "!  !  Please specify the maximum values that can be assigned to each key and filter_stop variable.");
    result[177] = PadText.getInstance(  35,"!  !  ");
    result[178] = PadText.getInstance(  36,"!  !  SET loc_mvs_string_high_value iyy1_supplied flag TO \"9\" ");
    result[179] = PadText.getInstance(  37,"!  !  SET loc_pc_string_high_value iyy1_supplied flag TO \"Z\" ");
    result[180] = PadText.getInstance(  38,"!  !   ");
    result[181] = PadText.getInstance(  39,
      "!  !  +->IF loc_pc_string_high_value iyy1_supplied flag > loc_mvs_string_high_value iyy1_supplied flag");
    result[182] = PadText.getInstance(  40,"!  !  !  SET loc_max type tkey_attr_text TO \"ZZZZ\" ");
    result[183] = PadText.getInstance(  41,"!  !  !  SET loc_max type tsearch_attr_text TO \"ZZZZZZZZZZZZZZZZZZZZ\" ");
    result[184] = PadText.getInstance(  39, 1, "!  !  +> ELSE");
    result[185] = PadText.getInstance(  42,"!  !  !  SET loc_max type tkey_attr_text TO \"9999\" ");
    result[186] = PadText.getInstance(  43,"!  !  !  SET loc_max type tsearch_attr_text TO \"99999999999999999999\" ");
    result[187] = PadText.getInstance(  39,"!  !  +--");
    result[188] = PadText.getInstance(  44,"!  !   ");
    result[189] = PadText.getInstance(  45,"!  !  NOTE: ");
    result[190] = PadText.getInstance(  45,"!  !  ****************************************************************");
    result[191] = PadText.getInstance(  45,"!  !  If Stop is empty, it is assumed as maximum.");
    result[192] = PadText.getInstance(  45,
      "!  !  If Stop is full, it can not be smaller than Start, if smaller it is made equal to Start.");
    result[193] = PadText.getInstance(  45,"!  !  ");
    result[194] = PadText.getInstance(  45,"!  !  ");
    result[195] = PadText.getInstance(  46,"!  !  +->IF loc_filter_stop type tkey_attr_text = loc_empty type tkey_attr_text");
    result[196] = PadText.getInstance(  47,"!  !  !  SET loc_filter_stop type tkey_attr_text TO loc_max type tkey_attr_text ");
    result[197] = PadText.getInstance(  46, 1, "!  !  +> ELSE");
    result[198] = PadText.getInstance(  48,
      "!  !  !  +->IF loc_filter_start type tkey_attr_text > loc_filter_stop type tkey_attr_text");
    result[199] = PadText.getInstance(  49,
      "!  !  !  !  SET loc_filter_stop type tkey_attr_text TO loc_filter_start type tkey_attr_text ");
    result[200] = PadText.getInstance(  48,"!  !  !  +--");
    result[201] = PadText.getInstance(  46,"!  !  +--");
    result[202] = PadText.getInstance(  50,"!  !   ");
    result[203] = PadText.getInstance(  51,"!  !  MOVE imp_from type TO loc_from type");
    result[204] = PadText.getInstance(  52,"!  !   ");
    result[205] = PadText.getInstance(  53,"!  !  NOTE: ");
    result[206] = PadText.getInstance(  53,"!  !  ****************************************************************");
    result[207] = PadText.getInstance(  53,"!  !  From starting value is checked.");
    result[208] = PadText.getInstance(  53,"!  !  ");
    result[209] = PadText.getInstance(  54,"!  !  +->IF loc_filter iyy1_list sort_option = \"ASC\"");
    result[210] = PadText.getInstance(  54, 1, "!  !  +> ELSE");
    result[211] = PadText.getInstance(  55,"!  !  !  NOTE: ");
    result[212] = PadText.getInstance(  55,"!  !  !  ****************************************************************");
    result[213] = PadText.getInstance(  55,"!  !  !  If From is empty for the full list, it is made equal to max.");
    result[214] = PadText.getInstance(  55,"!  !  !  ");
    result[215] = PadText.getInstance(  56,"!  !  !  +->IF loc_filter iyy1_list scroll_type ^= \"S\"");
    result[216] = PadText.getInstance(  57,"!  !  !  !  NOTE: ");
    result[217] = PadText.getInstance(  57,"!  !  !  !  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
    result[218] = PadText.getInstance(  57,"!  !  !  !  !!!  ATTENTION  !!!");
    result[219] = PadText.getInstance(  57,"!  !  !  !  For splitted key(s) (namely key is formed more than one field)");
    result[220] = PadText.getInstance(  57,"!  !  !  !  refer to the CYYY0251_CHILD_LIST Action Block.");
    result[221] = PadText.getInstance(  57,"!  !  !  !  ");
    result[222] = PadText.getInstance(  58,"!  !  !  !  +->IF loc_from type tkey_attr_text <= loc_empty type tkey_attr_text");
    result[223] = PadText.getInstance(  59,"!  !  !  !  !  SET loc_from type tkey_attr_text TO loc_max type tkey_attr_text ");
    result[224] = PadText.getInstance(  58,"!  !  !  !  +--");
    result[225] = PadText.getInstance(  60,"!  !  !  !  NOTE: ");
    result[226] = PadText.getInstance(  60,"!  !  !  !  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
    result[227] = PadText.getInstance(  60,"!  !  !  !  !!!  ATTENTION  !!!");
    result[228] = PadText.getInstance(  60,"!  !  !  !  For splitted key(s) (namely key is formed more than one field)");
    result[229] = PadText.getInstance(  60,"!  !  !  !  refer to the CYYY0251_CHILD_LIST Action Block.");
    result[230] = PadText.getInstance(  61,"!  !  !  !  +->IF loc_from type tsearch_attr_text <= loc_empty type tsearch_attr_text");
    result[231] = PadText.getInstance(  62,"!  !  !  !  !  SET loc_from type tsearch_attr_text TO loc_max type tsearch_attr_text ");
    result[232] = PadText.getInstance(  61,"!  !  !  !  +--");
    result[233] = PadText.getInstance(  56,"!  !  !  +--");
    result[234] = PadText.getInstance(  54,"!  !  +--");
    result[235] = PadText.getInstance(  63,"!  !   ");
    result[236] = PadText.getInstance(  64,"!  !  NOTE: ");
    result[237] = PadText.getInstance(  64,"!  !  ****************************************************************");
    result[238] = PadText.getInstance(  64,"!  !  If the attributes in filter_start and filter_stop is located in from,");
    result[239] = PadText.getInstance(  64,"!  !  From can not be smaller than filter_Start and greater than filter_Stop.");
    result[240] = PadText.getInstance(  64,"!  !  ");
    result[241] = PadText.getInstance(  65,"!  !  NOTE: ");
    result[242] = PadText.getInstance(  65,"!  !  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
    result[243] = PadText.getInstance(  65,"!  !  !!!  ATTENTION  !!!");
    result[244] = PadText.getInstance(  65,"!  !  For splitted key(s) (namely key is formed more than one field)");
    result[245] = PadText.getInstance(  65,"!  !  refer to the CYYY0251_CHILD_LIST Action Block.");
    result[246] = PadText.getInstance(  65,"!  !  ");
    result[247] = PadText.getInstance(  66,"!  !  +->IF (loc_from type tkey_attr_text < loc_filter_start type tkey_attr_text)  ");
    result[248] = PadText.getInstance(  66,"!  !  !        OR  (loc_from type tkey_attr_text > loc_filter_stop type tkey_attr_text)")
      ;
    result[249] = PadText.getInstance(  67,"!  !  !   ");
    result[250] = PadText.getInstance(  68,"!  !  !  +->IF loc_filter iyy1_list sort_option = \"ASC\"");
    result[251] = PadText.getInstance(  69,"!  !  !  !  SET loc_from type tkey_attr_text TO loc_filter_start type tkey_attr_text ");
    result[252] = PadText.getInstance(  68, 1, "!  !  !  +> ELSE");
    result[253] = PadText.getInstance(  70,"!  !  !  !  SET loc_from type tkey_attr_text TO loc_filter_stop type tkey_attr_text ");
    result[254] = PadText.getInstance(  68,"!  !  !  +--");
    result[255] = PadText.getInstance(  66,"!  !  +--");
    result[256] = PadText.getInstance(  71,"!  !   ");
    result[257] = PadText.getInstance(  72,"!  !  NOTE: ");
    result[258] = PadText.getInstance(  72,"!  !  ****************************************************************");
    result[259] = PadText.getInstance(  72,"!  !  Filtering (append % till filter variable length)");
    result[260] = PadText.getInstance(  72,"!  !  ");
    result[261] = PadText.getInstance(  73,"!  !  SET loc_filter type tsearch_attr_text TO \"%%%%%%%%%%%%%%%%%%%%%%%%%\" ");
    result[262] = PadText.getInstance(  74,
      "!  !  SET loc_filter type tsearch_attr_text TO concat(trim(imp_filter type tsearch_attr_text),");
    result[263] = PadText.getInstance(  74,"!  !              loc_filter type tsearch_attr_text) ");
    result[264] = PadText.getInstance(  75,"!  !  SET loc_filter type tother_attr_text TO \"%%\" ");
    result[265] = PadText.getInstance(  76,
      "!  !  SET loc_filter type tother_attr_text TO concat(trim(imp_filter type tother_attr_text),");
    result[266] = PadText.getInstance(  76,"!  !              loc_filter type tother_attr_text) ");
    result[267] = PadText.getInstance(  77,"!  !   ");
    result[268] = PadText.getInstance(  78,"!  !  NOTE: ");
    result[269] = PadText.getInstance(  78,"!  !  ****************************************************************");
    result[270] = PadText.getInstance(  78,"!  !  End of filtering");
    result[271] = PadText.getInstance(  78,"!  !  ");
    result[272] = PadText.getInstance(  79,"!  !  USE dyyy0351_type_list");
    result[273] = PadText.getInstance(  79,
      "!  !     WHICH IMPORTS: Work View exp_error iyy1_component TO Work View imp_error iyy1_component");
    result[274] = PadText.getInstance(  79,"!  !                    Work View loc_filter iyy1_list TO Work View imp_filter iyy1_list"
      );
    result[275] = PadText.getInstance(  79,"!  !                    Entity View loc_from type TO Entity View imp_from type");
    result[276] = PadText.getInstance(  79,
      "!  !                    Entity View loc_filter_start type TO Entity View imp_filter_start type");
    result[277] = PadText.getInstance(  79,
      "!  !                    Entity View loc_filter_stop type TO Entity View imp_filter_stop type");
    result[278] = PadText.getInstance(  79,"!  !                    Entity View loc_filter type TO Entity View imp_filter type");
    result[279] = PadText.getInstance(  79,"!  !     WHICH EXPORTS: Group View  loc_group_list FROM Group View exp_group_list");
    result[280] = PadText.getInstance(  79,
      "!  !                    Work View loc_error iyy1_component FROM Work View exp_error iyy1_component");
    result[281] = PadText.getInstance(  80,"!  !   ");
    result[282] = PadText.getInstance(  81,"!  !  NOTE: ");
    result[283] = PadText.getInstance(  81,"!  !  ****************************************************************");
    result[284] = PadText.getInstance(  81,"!  !  If External will be USEd the code sample replacement for above code:");
    result[285] = PadText.getInstance(  81,"!  !  | USE eyyy0351_type_list");
    result[286] = PadText.getInstance(  81,
      "!  !  |   WHICH IMPORTS: Work View   loc_filter iyy1_list  TO Work View   imp_filter iyy1_list ");
    result[287] = PadText.getInstance(  81,"!  !  |                  Entity View loc_from type  TO Entity View imp_from type ");
    result[288] = PadText.getInstance(  81,
      "!  !  |                  Entity View loc_filter_start type  TO Entity View imp_filter_start type ");
    result[289] = PadText.getInstance(  81,
      "!  !  |                  Entity View loc_filter_stop type  TO Entity View imp_filter_stop type ");
    result[290] = PadText.getInstance(  81,"!  !  |                  Entity View loc_filter type  TO Entity View imp_filter type ");
    result[291] = PadText.getInstance(  81,"!  !  |   WHICH EXPORTS: Group View  loc_group_list  FROM Group View  exp_group_list ");
    result[292] = PadText.getInstance(  81,
      "!  !  |                  Work View   loc_error d._c._text  FROM Work View   exp_error d._c._text ");
    result[293] = PadText.getInstance(  81,"!  !  |");
    result[294] = PadText.getInstance(  81,"!  !  | +- CASE OF loc_error dont_change_text text_2 ");
    result[295] = PadText.getInstance(  81,"!  !  | +- CASE \"OK\" ");
    result[296] = PadText.getInstance(  81,"!  !  | +- CASE \"LE\" ");
    result[297] = PadText.getInstance(  81,"!  !  | |  SET exp_error iyy1_com.. return_code TO loc d._c._return_codes 1_ok");
    result[298] = PadText.getInstance(  81,"!  !  | |  SET exp_error iyy1_com.. reason_code TO loc d._c._reason_codes 12_list_empty")
      ;
    result[299] = PadText.getInstance(  81,"!  !  | +- CASE \"LF\" ");
    result[300] = PadText.getInstance(  81,"!  !  | |  SET exp_error iyy1_com.. return_code TO loc d._c._return_codes 1_ok");
    result[301] = PadText.getInstance(  81,"!  !  | |  SET exp_error iyy1_com.. reason_code TO loc d._c._reason_codes 11_list_full")
      ;
    result[302] = PadText.getInstance(  81,"!  !  | +- OTHERWISE ");
    result[303] = PadText.getInstance(  81,
      "!  !  | |  SET exp_error iyy1_com.. return_code TO loc d._c._return_codes n999_unexpected_exception ");
    result[304] = PadText.getInstance(  81,"!  !  | |  SET exp_error iyy1_com.. reason_code TO loc d._c._reason_codes 1_default ");
    result[305] = PadText.getInstance(  81,"!  !  | +--");
    result[306] = PadText.getInstance(  81,"!  !  ");
    result[307] = PadText.getInstance(  82,"!  !  +->IF loc_error iyy1_component return_code < loc dont_change_return_codes 1_ok");
    result[308] = PadText.getInstance(  83,"!  !  !  MOVE loc_error iyy1_component TO exp_error iyy1_component");
    result[309] = PadText.getInstance(  84,"!  !  !  NOTE: ");
    result[310] = PadText.getInstance(  84,"!  !  !  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
    result[311] = PadText.getInstance(  84,
      "!  !  !  !! ATTENTION : In D AB, if context string must be formed ESCAPE AB must be exited.");
    result[312] = PadText.getInstance(  85,"! <------ESCAPE");
    result[313] = PadText.getInstance(  82,"!  !  +--");
    result[314] = PadText.getInstance(  86,"!  !   ");
    result[315] = PadText.getInstance(  87,"!  !  SET loc_read_lb iyy1_supplied total_integer TO LAST OF loc_group_list ");
    result[316] = PadText.getInstance(  88,"!  !  +->IF loc_read_lb iyy1_supplied total_integer > 0");
    result[317] = PadText.getInstance(  89,"!  !  !  +->IF loc_filter iyy1_list list_direction = \"P\"");
    result[318] = PadText.getInstance(  90,"!  !  !  !  SET SUBSCRIPT OF loc_group_list TO loc_read_lb iyy1_supplied total_integer ")
      ;
    result[319] = PadText.getInstance(  89, 1, "!  !  !  +> ELSE");
    result[320] = PadText.getInstance(  91,"!  !  !  !  SET SUBSCRIPT OF loc_group_list TO 1 ");
    result[321] = PadText.getInstance(  89,"!  !  !  +--");
    result[322] = PadText.getInstance(  92,"!  !  !  SET SUBSCRIPT OF exp_group_list TO 0 ");
    result[323] = PadText.getInstance(  93, 1, "!  !  !  +=>REPEAT");
    result[324] = PadText.getInstance(  94,"!  !  !  !  SET SUBSCRIPT OF exp_group_list TO SUBSCRIPT OF exp_group_list + 1 ");
    result[325] = PadText.getInstance(  95,"!  !  !  !  MOVE loc_g_list type TO exp_g_list type");
    result[326] = PadText.getInstance(  96,"!  !  !  !  +->IF loc_filter iyy1_list list_direction = \"P\"");
    result[327] = PadText.getInstance(  97,"!  !  !  !  !  SET SUBSCRIPT OF loc_group_list TO SUBSCRIPT OF loc_group_list - 1 ");
    result[328] = PadText.getInstance(  96, 1, "!  !  !  !  +> ELSE");
    result[329] = PadText.getInstance(  98,"!  !  !  !  !  SET SUBSCRIPT OF loc_group_list TO SUBSCRIPT OF loc_group_list + 1 ");
    result[330] = PadText.getInstance(  96,"!  !  !  !  +--");
    result[331] = PadText.getInstance(  99,
      "!  !  !  !  SET loc_read_lb iyy1_supplied total_integer TO loc_read_lb iyy1_supplied total_integer - 1 ");
    result[332] = PadText.getInstance(  93,"!  !  !  +--UNTIL loc_read_lb iyy1_supplied total_integer = 0");
    result[333] = PadText.getInstance(  88,"!  !  +--");
    result[334] = PadText.getInstance(  18,"!  +--");
    result[335] = PadText.getInstance( 100,"!   ");
    result[336] = PadText.getInstance( 101,"!  +->IF exp_error iyy1_component return_code < loc dont_change_return_codes 1_ok");
    result[337] = PadText.getInstance( 102,"!  !  USE cyyy9141_context_string_set");
    result[338] = PadText.getInstance( 102,"!  !     WHICH IMPORTS: Group View  loc_group_context TO Group View imp_group_context");
    result[339] = PadText.getInstance( 102,
      "!  !     WHICH EXPORTS: Work View loc_error iyy1_component FROM Work View exp_error iyy1_component");
    result[340] = PadText.getInstance( 102,
      "!  !                    Work View exp_error iyy1_component FROM Work View exp_context iyy1_component");
    result[341] = PadText.getInstance( 103,"!  !   ");
    result[342] = PadText.getInstance( 104,"!  !  +->IF loc_error iyy1_component return_code < loc dont_change_return_codes 1_ok");
    result[343] = PadText.getInstance( 105,"!  !  !  MOVE loc_error iyy1_component TO exp_error iyy1_component");
    result[344] = PadText.getInstance( 104,"!  !  +--");
    result[345] = PadText.getInstance( 106,"!  !  SET exp_error iyy1_component severity_code TO \"E\" ");
    result[346] = PadText.getInstance( 101,"!  +--");
    result[347] = PadText.getInstance(   0,"+---");
    result[348] = PadText.getInstance(PadText.LASTLINE,"************************* BOTTOM OF DATA *************************");
    return result;
  }
  final static int PADTEXT_SIZE = 349;
  //       +->   CYYY0351_TYPE_LIST                07/05/2023  15:09
  //       !       IMPORTS:
  //       !         Work View imp_filter iyy1_list (Transient, Mandatory, Import only)
  //       !           sort_option
  //       !           scroll_type
  //       !           list_direction
  //       !           scroll_amount
  //       !           order_by_field_num
  //       !         Entity View imp_from type (Transient, Mandatory, Import only)
  //       !           tinstance_id
  //       !           tkey_attr_text
  //       !           tsearch_attr_text
  //       !         Entity View imp_filter_start type (Transient, Mandatory, Import only)
  //       !           tkey_attr_text
  //       !         Entity View imp_filter_stop type (Transient, Mandatory, Import only)
  //       !           tkey_attr_text
  //       !         Entity View imp_filter type (Transient, Mandatory, Import only)
  //       !           tsearch_attr_text
  //       !           tother_attr_text
  //       !       EXPORTS:
  //       !         Group View (48) exp_group_list
  //       !           Entity View exp_g_list type (Transient, Export only)
  //       !             tinstance_id
  //       !             treference_id
  //       !             tcreate_user_id
  //       !             tupdate_user_id
  //       !             tkey_attr_text
  //       !             tsearch_attr_text
  //       !             tother_attr_text
  //       !             tother_attr_date
  //       !             tother_attr_time
  //       !             tother_attr_amount
  //       !         Work View exp_error iyy1_component (Transient, Export only)
  //       !           severity_code
  //       !           rollback_indicator
  //       !           origin_servid
  //       !           context_string
  //       !           return_code
  //       !           reason_code
  //       !           checksum
  //       !       LOCALS:
  //       !         Work View loc_filter iyy1_list
  //       !           sort_option
  //       !           scroll_type
  //       !           list_direction
  //       !           scroll_amount
  //       !           order_by_field_num
  //       !         Entity View loc_from type
  //       !           tinstance_id
  //       !           tkey_attr_text
  //       !           tsearch_attr_text
  //       !         Entity View loc_filter_start type
  //       !           tkey_attr_text
  //       !         Entity View loc_filter_stop type
  //       !           tkey_attr_text
  //       !         Entity View loc_filter type
  //       !           tsearch_attr_text
  //       !           tother_attr_text
  //       !         Group View (48) loc_group_list
  //       !           Entity View loc_g_list type
  //       !             tinstance_id
  //       !             treference_id
  //       !             tcreate_user_id
  //       !             tupdate_user_id
  //       !             tkey_attr_text
  //       !             tsearch_attr_text
  //       !             tother_attr_text
  //       !             tother_attr_date
  //       !             tother_attr_time
  //       !             tother_attr_amount
  //       !         Entity View loc_empty type
  //       !           tinstance_id
  //       !           tkey_attr_text
  //       !           tsearch_attr_text
  //       !         Entity View loc_max type
  //       !           tkey_attr_text
  //       !           tsearch_attr_text
  //       !         Work View loc_read_lb iyy1_supplied
  //       !           total_integer
  //       !         Work View loc_error iyy1_component
  //       !           severity_code
  //       !           rollback_indicator
  //       !           origin_servid
  //       !           context_string
  //       !           return_code
  //       !           reason_code
  //       !           checksum
  //       !         Group View (9) loc_group_context
  //       !           Work View loc_g_context dont_change_text
  //       !             text_150
  //       !         Work View loc dont_change_return_codes
  //       !           1_ok
  //       !         Work View loc dont_change_reason_codes
  //       !           1_default
  //       !         Work View loc_mvs_string_high_value iyy1_supplied
  //       !           flag
  //       !         Work View loc_pc_string_high_value iyy1_supplied
  //       !           flag
  //       !
  //       !     PROCEDURE STATEMENTS
  //       !
  //     1 !  NOTE: 
  //     1 !  Please review explanation for purpose.
  //     1 !  
  //     2 !  NOTE: 
  //     2 !  RELEASE HISTORY
  //     2 !  01_00 23-02-1998 New release
  //     2 !  
  //     3 !  USE cyyy9001_exception_hndlng_dflt
  //     3 !     WHICH EXPORTS: Work View exp_error iyy1_component FROM Work View exp_error iyy1_component
  //     4 !   
  //     5 !  NOTE: 
  //     5 !  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  //     5 !  Please rename the procedure name below.
  //     5 !  
  //     6 !  SET SUBSCRIPT OF loc_group_context TO 1 
  //     7 !  SET loc_g_context dont_change_text text_150 TO "CYYY0351" 
  //     8 !  SET SUBSCRIPT OF loc_group_context TO 2 
  //     9 !  SET loc_g_context dont_change_text text_150 TO "LIST" 
  //    10 !   
  //    11 !  NOTE: 
  //    11 !  ****************************************************************
  //    11 !  Values of the ReturnCode/ReasonCode used.
  //    11 !  
  //    12 !  NOTE: 
  //    12 !  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  //    12 !  Please set the return ve reason code values below.
  //    12 !  
  //    13 !  SET loc dont_change_return_codes 1_ok TO 1 
  //    14 !   
  //    15 !  SET loc dont_change_reason_codes 1_default TO 1 
  //    16 !   
  //    17 !  NOTE: 
  //    17 !  ****************************************************************
  //    17 !  a) The attribute(s) to be sorted must be located in imp_from.
  //    17 !  b) If the attribute(s) to be sorted is not unique,
  //    17 !     new attribute(s) should be added to make it unique.
  //    17 !     (An index definition in DB is not essential.)
  //    17 !  c) If more than one sorting way, common attribute(s) naturally
  //    17 !     should be present in imp_from only once.
  //    17 !  d) The attribute(s) to be sorted must be located in SORTED BY(s),
  //    17 !     If attribute(s) is addded for uniqueness, these should be at the end.
  //    17 !  e) The attribute(s) in SORTED BY(s) should be in the first place of WHERE
  //    17 !     clause and they should keep the same order.
  //    17 !  
  //    18 !  +->IF exp_error iyy1_component return_code >= loc dont_change_return_codes 1_ok
  //    19 !  !  MOVE imp_filter iyy1_list TO loc_filter iyy1_list
  //    20 !  !   
  //    21 !  !  +->IF loc_filter iyy1_list scroll_amount > MAX OF exp_group_list  
  //    21 !  !  !        OR  loc_filter iyy1_list scroll_amount < 1
  //    22 !  !  !  SET loc_filter iyy1_list scroll_amount TO MAX OF exp_group_list 
  //    21 !  !  +--
  //    23 !  !  +->IF loc_filter iyy1_list sort_option = SPACES
  //    24 !  !  !  SET loc_filter iyy1_list sort_option TO "ASC" 
  //    23 !  !  +--
  //    25 !  !  +->IF loc_filter iyy1_list list_direction = "P"
  //    26 !  !  !  +->IF loc_filter iyy1_list sort_option = "ASC"
  //    27 !  !  !  !  SET loc_filter iyy1_list sort_option TO "DES" 
  //    26 !  !  !  +> ELSE
  //    28 !  !  !  !  SET loc_filter iyy1_list sort_option TO "ASC" 
  //    26 !  !  !  +--
  //    25 !  !  +--
  //    29 !  !   
  //    30 !  !  NOTE: 
  //    30 !  !  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  //    30 !  !  Please review the filter code block.
  //    30 !  !  
  //    31 !  !  NOTE: 
  //    31 !  !  ****************************************************************
  //    31 !  !  Min-Max interval filtering
  //    31 !  !  
  //    32 !  !  MOVE imp_filter_start type TO loc_filter_start type
  //    33 !  !  MOVE imp_filter_stop type TO loc_filter_stop type
  //    34 !  !   
  //    35 !  !  NOTE: 
  //    35 !  !  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  //    35 !  !  Please specify the maximum values that can be assigned to each key and filter_stop variable.
  //    35 !  !  
  //    36 !  !  SET loc_mvs_string_high_value iyy1_supplied flag TO "9" 
  //    37 !  !  SET loc_pc_string_high_value iyy1_supplied flag TO "Z" 
  //    38 !  !   
  //    39 !  !  +->IF loc_pc_string_high_value iyy1_supplied flag > loc_mvs_string_high_value iyy1_supplied flag
  //    40 !  !  !  SET loc_max type tkey_attr_text TO "ZZZZ" 
  //    41 !  !  !  SET loc_max type tsearch_attr_text TO "ZZZZZZZZZZZZZZZZZZZZ" 
  //    39 !  !  +> ELSE
  //    42 !  !  !  SET loc_max type tkey_attr_text TO "9999" 
  //    43 !  !  !  SET loc_max type tsearch_attr_text TO "99999999999999999999" 
  //    39 !  !  +--
  //    44 !  !   
  //    45 !  !  NOTE: 
  //    45 !  !  ****************************************************************
  //    45 !  !  If Stop is empty, it is assumed as maximum.
  //    45 !  !  If Stop is full, it can not be smaller than Start, if smaller it is made equal to Start.
  //    45 !  !  
  //    45 !  !  
  //    46 !  !  +->IF loc_filter_stop type tkey_attr_text = loc_empty type tkey_attr_text
  //    47 !  !  !  SET loc_filter_stop type tkey_attr_text TO loc_max type tkey_attr_text 
  //    46 !  !  +> ELSE
  //    48 !  !  !  +->IF loc_filter_start type tkey_attr_text > loc_filter_stop type tkey_attr_text
  //    49 !  !  !  !  SET loc_filter_stop type tkey_attr_text TO loc_filter_start type tkey_attr_text 
  //    48 !  !  !  +--
  //    46 !  !  +--
  //    50 !  !   
  //    51 !  !  MOVE imp_from type TO loc_from type
  //    52 !  !   
  //    53 !  !  NOTE: 
  //    53 !  !  ****************************************************************
  //    53 !  !  From starting value is checked.
  //    53 !  !  
  //    54 !  !  +->IF loc_filter iyy1_list sort_option = "ASC"
  //    54 !  !  +> ELSE
  //    55 !  !  !  NOTE: 
  //    55 !  !  !  ****************************************************************
  //    55 !  !  !  If From is empty for the full list, it is made equal to max.
  //    55 !  !  !  
  //    56 !  !  !  +->IF loc_filter iyy1_list scroll_type ^= "S"
  //    57 !  !  !  !  NOTE: 
  //    57 !  !  !  !  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  //    57 !  !  !  !  !!!  ATTENTION  !!!
  //    57 !  !  !  !  For splitted key(s) (namely key is formed more than one field)
  //    57 !  !  !  !  refer to the CYYY0251_CHILD_LIST Action Block.
  //    57 !  !  !  !  
  //    58 !  !  !  !  +->IF loc_from type tkey_attr_text <= loc_empty type tkey_attr_text
  //    59 !  !  !  !  !  SET loc_from type tkey_attr_text TO loc_max type tkey_attr_text 
  //    58 !  !  !  !  +--
  //    60 !  !  !  !  NOTE: 
  //    60 !  !  !  !  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  //    60 !  !  !  !  !!!  ATTENTION  !!!
  //    60 !  !  !  !  For splitted key(s) (namely key is formed more than one field)
  //    60 !  !  !  !  refer to the CYYY0251_CHILD_LIST Action Block.
  //    61 !  !  !  !  +->IF loc_from type tsearch_attr_text <= loc_empty type tsearch_attr_text
  //    62 !  !  !  !  !  SET loc_from type tsearch_attr_text TO loc_max type tsearch_attr_text 
  //    61 !  !  !  !  +--
  //    56 !  !  !  +--
  //    54 !  !  +--
  //    63 !  !   
  //    64 !  !  NOTE: 
  //    64 !  !  ****************************************************************
  //    64 !  !  If the attributes in filter_start and filter_stop is located in from,
  //    64 !  !  From can not be smaller than filter_Start and greater than filter_Stop.
  //    64 !  !  
  //    65 !  !  NOTE: 
  //    65 !  !  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  //    65 !  !  !!!  ATTENTION  !!!
  //    65 !  !  For splitted key(s) (namely key is formed more than one field)
  //    65 !  !  refer to the CYYY0251_CHILD_LIST Action Block.
  //    65 !  !  
  //    66 !  !  +->IF (loc_from type tkey_attr_text < loc_filter_start type tkey_attr_text)  
  //    66 !  !  !        OR  (loc_from type tkey_attr_text > loc_filter_stop type tkey_attr_text)
  //    67 !  !  !   
  //    68 !  !  !  +->IF loc_filter iyy1_list sort_option = "ASC"
  //    69 !  !  !  !  SET loc_from type tkey_attr_text TO loc_filter_start type tkey_attr_text 
  //    68 !  !  !  +> ELSE
  //    70 !  !  !  !  SET loc_from type tkey_attr_text TO loc_filter_stop type tkey_attr_text 
  //    68 !  !  !  +--
  //    66 !  !  +--
  //    71 !  !   
  //    72 !  !  NOTE: 
  //    72 !  !  ****************************************************************
  //    72 !  !  Filtering (append % till filter variable length)
  //    72 !  !  
  //    73 !  !  SET loc_filter type tsearch_attr_text TO "%%%%%%%%%%%%%%%%%%%%%%%%%" 
  //    74 !  !  SET loc_filter type tsearch_attr_text TO concat(trim(imp_filter type tsearch_attr_text),
  //    74 !  !              loc_filter type tsearch_attr_text) 
  //    75 !  !  SET loc_filter type tother_attr_text TO "%%" 
  //    76 !  !  SET loc_filter type tother_attr_text TO concat(trim(imp_filter type tother_attr_text),
  //    76 !  !              loc_filter type tother_attr_text) 
  //    77 !  !   
  //    78 !  !  NOTE: 
  //    78 !  !  ****************************************************************
  //    78 !  !  End of filtering
  //    78 !  !  
  //    79 !  !  USE dyyy0351_type_list
  //    79 !  !     WHICH IMPORTS: Work View exp_error iyy1_component TO Work View imp_error iyy1_component
  //    79 !  !                    Work View loc_filter iyy1_list TO Work View imp_filter iyy1_list
  //    79 !  !                    Entity View loc_from type TO Entity View imp_from type
  //    79 !  !                    Entity View loc_filter_start type TO Entity View imp_filter_start type
  //    79 !  !                    Entity View loc_filter_stop type TO Entity View imp_filter_stop type
  //    79 !  !                    Entity View loc_filter type TO Entity View imp_filter type
  //    79 !  !     WHICH EXPORTS: Group View  loc_group_list FROM Group View exp_group_list
  //    79 !  !                    Work View loc_error iyy1_component FROM Work View exp_error iyy1_component
  //    80 !  !   
  //    81 !  !  NOTE: 
  //    81 !  !  ****************************************************************
  //    81 !  !  If External will be USEd the code sample replacement for above code:
  //    81 !  !  | USE eyyy0351_type_list
  //    81 !  !  |   WHICH IMPORTS: Work View   loc_filter iyy1_list  TO Work View   imp_filter iyy1_list 
  //    81 !  !  |                  Entity View loc_from type  TO Entity View imp_from type 
  //    81 !  !  |                  Entity View loc_filter_start type  TO Entity View imp_filter_start type 
  //    81 !  !  |                  Entity View loc_filter_stop type  TO Entity View imp_filter_stop type 
  //    81 !  !  |                  Entity View loc_filter type  TO Entity View imp_filter type 
  //    81 !  !  |   WHICH EXPORTS: Group View  loc_group_list  FROM Group View  exp_group_list 
  //    81 !  !  |                  Work View   loc_error d._c._text  FROM Work View   exp_error d._c._text 
  //    81 !  !  |
  //    81 !  !  | +- CASE OF loc_error dont_change_text text_2 
  //    81 !  !  | +- CASE "OK" 
  //    81 !  !  | +- CASE "LE" 
  //    81 !  !  | |  SET exp_error iyy1_com.. return_code TO loc d._c._return_codes 1_ok
  //    81 !  !  | |  SET exp_error iyy1_com.. reason_code TO loc d._c._reason_codes 12_list_empty
  //    81 !  !  | +- CASE "LF" 
  //    81 !  !  | |  SET exp_error iyy1_com.. return_code TO loc d._c._return_codes 1_ok
  //    81 !  !  | |  SET exp_error iyy1_com.. reason_code TO loc d._c._reason_codes 11_list_full
  //    81 !  !  | +- OTHERWISE 
  //    81 !  !  | |  SET exp_error iyy1_com.. return_code TO loc d._c._return_codes n999_unexpected_exception 
  //    81 !  !  | |  SET exp_error iyy1_com.. reason_code TO loc d._c._reason_codes 1_default 
  //    81 !  !  | +--
  //    81 !  !  
  //    82 !  !  +->IF loc_error iyy1_component return_code < loc dont_change_return_codes 1_ok
  //    83 !  !  !  MOVE loc_error iyy1_component TO exp_error iyy1_component
  //    84 !  !  !  NOTE: 
  //    84 !  !  !  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  //    84 !  !  !  !! ATTENTION : In D AB, if context string must be formed ESCAPE AB must be exited.
  //    85 ! <------ESCAPE
  //    82 !  !  +--
  //    86 !  !   
  //    87 !  !  SET loc_read_lb iyy1_supplied total_integer TO LAST OF loc_group_list 
  //    88 !  !  +->IF loc_read_lb iyy1_supplied total_integer > 0
  //    89 !  !  !  +->IF loc_filter iyy1_list list_direction = "P"
  //    90 !  !  !  !  SET SUBSCRIPT OF loc_group_list TO loc_read_lb iyy1_supplied total_integer 
  //    89 !  !  !  +> ELSE
  //    91 !  !  !  !  SET SUBSCRIPT OF loc_group_list TO 1 
  //    89 !  !  !  +--
  //    92 !  !  !  SET SUBSCRIPT OF exp_group_list TO 0 
  //    93 !  !  !  +=>REPEAT
  //    94 !  !  !  !  SET SUBSCRIPT OF exp_group_list TO SUBSCRIPT OF exp_group_list + 1 
  //    95 !  !  !  !  MOVE loc_g_list type TO exp_g_list type
  //    96 !  !  !  !  +->IF loc_filter iyy1_list list_direction = "P"
  //    97 !  !  !  !  !  SET SUBSCRIPT OF loc_group_list TO SUBSCRIPT OF loc_group_list - 1 
  //    96 !  !  !  !  +> ELSE
  //    98 !  !  !  !  !  SET SUBSCRIPT OF loc_group_list TO SUBSCRIPT OF loc_group_list + 1 
  //    96 !  !  !  !  +--
  //    99 !  !  !  !  SET loc_read_lb iyy1_supplied total_integer TO loc_read_lb iyy1_supplied total_integer - 1 
  //    93 !  !  !  +--UNTIL loc_read_lb iyy1_supplied total_integer = 0
  //    88 !  !  +--
  //    18 !  +--
  //   100 !   
  //   101 !  +->IF exp_error iyy1_component return_code < loc dont_change_return_codes 1_ok
  //   102 !  !  USE cyyy9141_context_string_set
  //   102 !  !     WHICH IMPORTS: Group View  loc_group_context TO Group View imp_group_context
  //   102 !  !     WHICH EXPORTS: Work View loc_error iyy1_component FROM Work View exp_error iyy1_component
  //   102 !  !                    Work View exp_error iyy1_component FROM Work View exp_context iyy1_component
  //   103 !  !   
  //   104 !  !  +->IF loc_error iyy1_component return_code < loc dont_change_return_codes 1_ok
  //   105 !  !  !  MOVE loc_error iyy1_component TO exp_error iyy1_component
  //   104 !  !  +--
  //   106 !  !  SET exp_error iyy1_component severity_code TO "E" 
  //   101 !  +--
  //       +---
  
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  //  CONSTRUCTOR FOR THE CLASS       
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  public CYYY0351()
  {
    iefCGenRlse = "CA Gen 8.6";
    ssCopyright = "Copyright (c) 2023 CA Technologies. All rights reserved.";
    iefCGenDate = "2023/07/05";
    iefCGenTime = "15:09:32";
    iefCGenEncy = "9.2.A6";
    iefCGenUserId = "HakanBal";
    iefCGenModel = "N8I_ORT_YYY_0112_TEMPLATE";
    iefCGenSubset = "ALL";
    iefCGenName = "CYYY0351_TYPE_LIST";
    nestingLevel = 0;
    valChkDeadlockTimeout = false;
    valChkDBError = false;
  }
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // ACTION BLOCK FUNCTION DECLARATIONS 
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  
  public void CYYY0351( Object in_runtime_parm1, 
  	IRuntimePStepContext in_runtime_parm2, 
  	GlobData in_globdata, 
  	CYYY0351_IA import_view, 
  	CYYY0351_OA export_view )
  {
    iefRuntimeParm1 = in_runtime_parm1;
    iefRuntimeParm2 = in_runtime_parm2;
    globdata = in_globdata;
    w_ia = import_view;
    w_oa = export_view;
    _CYYY0351();
  }
  
  private void _CYYY0351()
  {
    
    f_22020162_localAlloc("CYYY0351_TYPE_LIST");
    if ( globdata.getErrorData().getLastStatus() == ErrorData.IEF_ALLOCATION_ERROR_FL_LS )
    	return;
    
    ++(nestingLevel);
    try {
      f_22020162_init();
      f_22020162();
    } catch( ABException e ) {
    } finally {
      --(nestingLevel);
    }
    String last_stmt_num_saved = globdata.getStateData().getLastStatementNumber();
    globdata.getStateData().setLastStatementNumber( "9999999999" );
    try {
      f_0_trace();
    } catch( ABException e ) {
    }
    globdata.getStateData().setLastStatementNumber( last_stmt_num_saved );
  }
  public void f_22020162()
  	throws ABException
  {
    func_0022020162_esc_flag = false;
    globdata.getStateData().setCurrentABId( "0022020162" );
    globdata.getStateData().setCurrentABName( "CYYY0351_TYPE_LIST" );
    padview_init();
    globdata.getStateData().setLastStatementNumber( "0000000000" );
    f_0_trace();
    f_0022020162_esctag: 
    {
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    Please review explanation for purpose.                          
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    RELEASE HISTORY                                                 
      //    01_00 23-02-1998 New release                                    
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      globdata.getStateData().setLastStatementNumber( "0000000003" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        
        cyyy9001_oa = (gen.ort.yyy.CYYY9001_OA)(iefRuntimeParm2.getInstance("gen.ort.yyy.CYYY9001_OA"));
        globdata.getErrorData().setErrorEncounteredSW( ErrorData.NO_ERROR_FOUND_SW );
        iefRuntimeParm2.useActionBlock("gen.ort.yyy.CYYY9001", "CYYY9001", null, cyyy9001_oa);
        if ( ((!(globdata.getErrorData().getStatus().equals( ErrorData.NONE_SF ))) || (globdata.getErrorData().getErrorEncounteredSW(
          ) != ErrorData.NO_ERROR_FOUND_SW)) || (globdata.getErrorData().getViewOverflowSW() != ErrorData.NO_ERROR_FOUND_SW) )
        {
          throw new ABException();
        }
        globdata.getStateData().setCurrentABId( "0022020162" );
        globdata.getStateData().setCurrentABName( "CYYY0351_TYPE_LIST" );
        globdata.getStateData().setLastStatementNumber( "0000000003" );
        w_oa.ExpErrorIyy1ComponentSeverityCode = FixedStringAttr.valueOf(cyyy9001_oa.ExpErrorIyy1ComponentSeverityCode, (short)1);
        w_oa.ExpErrorIyy1ComponentRollbackIndicator = FixedStringAttr.valueOf(cyyy9001_oa.ExpErrorIyy1ComponentRollbackIndicator, (
          short)1);
        w_oa.ExpErrorIyy1ComponentOriginServid = DoubleAttr.valueOf(cyyy9001_oa.ExpErrorIyy1ComponentOriginServid);
        w_oa.ExpErrorIyy1ComponentContextString = StringAttr.valueOf(cyyy9001_oa.ExpErrorIyy1ComponentContextString, (short)512);
        w_oa.ExpErrorIyy1ComponentReturnCode = IntAttr.valueOf(cyyy9001_oa.ExpErrorIyy1ComponentReturnCode);
        w_oa.ExpErrorIyy1ComponentReasonCode = IntAttr.valueOf(cyyy9001_oa.ExpErrorIyy1ComponentReasonCode);
        w_oa.ExpErrorIyy1ComponentChecksum = FixedStringAttr.valueOf(cyyy9001_oa.ExpErrorIyy1ComponentChecksum, (short)15);
        cyyy9001_oa.freeInstance();
        cyyy9001_oa = null;
      }
      
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!                      
      //    Please rename the procedure name below.                         
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      globdata.getStateData().setLastStatementNumber( "0000000006" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        LocGroupContext_PS_003 = (int)TIRD2DEC.TIRD2DC1(1, 0, TIRD2DEC.ROUND_NONE, 0);
        if ( (LocGroupContext_PS_003 > w_la.LocGroupContext_MA) && (LocGroupContext_PS_003 <= 9) )
        w_la.LocGroupContext_MA = IntAttr.valueOf(LocGroupContext_PS_003);
      }
      globdata.getStateData().setLastStatementNumber( "0000000007" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        w_la.LocGContextDontChangeTextText150[LocGroupContext_PS_003-1] = FixedStringAttr.valueOf("CYYY0351", (short)150);
        f_173015079_rgvc();
      }
      globdata.getStateData().setLastStatementNumber( "0000000008" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        LocGroupContext_PS_003 = (int)TIRD2DEC.TIRD2DC1(2, 0, TIRD2DEC.ROUND_NONE, 0);
        if ( (LocGroupContext_PS_003 > w_la.LocGroupContext_MA) && (LocGroupContext_PS_003 <= 9) )
        w_la.LocGroupContext_MA = IntAttr.valueOf(LocGroupContext_PS_003);
      }
      globdata.getStateData().setLastStatementNumber( "0000000009" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        w_la.LocGContextDontChangeTextText150[LocGroupContext_PS_003-1] = FixedStringAttr.valueOf("LIST", (short)150);
        f_173015079_rgvc();
      }
      
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    **************************************************************  
      //    **                                                              
      //    Values of the ReturnCode/ReasonCode used.                       
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  
      //    !!                                                              
      //    Please set the return ve reason code values below.              
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      globdata.getStateData().setLastStatementNumber( "0000000013" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        w_la.LocDontChangeReturnCodesQ1Ok = IntAttr.valueOf((int)TIRD2DEC.TIRD2DC1(1, 0, TIRD2DEC.ROUND_NONE, 5));
      }
      
      globdata.getStateData().setLastStatementNumber( "0000000015" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        w_la.LocDontChangeReasonCodesQ1Default = IntAttr.valueOf((int)TIRD2DEC.TIRD2DC1(1, 0, TIRD2DEC.ROUND_NONE, 5));
      }
      
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    **************************************************************  
      //    **                                                              
      //    a) The attribute(s) to be sorted must be located in imp_from.   
      //    b) If the attribute(s) to be sorted is not unique,              
      //       new attribute(s) should be added to make it unique.          
      //       (An index definition in DB is not essential.)                
      //    c) If more than one sorting way, common attribute(s)            
      //    naturally                                                       
      //       should be present in imp_from only once.                     
      //    d) The attribute(s) to be sorted must be located in SORTED      
      //    BY(s),                                                          
      //       If attribute(s) is addded for uniqueness,                    
      //    these should be at the end.                                     
      //    e) The attribute(s) in SORTED BY(s)                             
      //    should be in the first place of WHERE                           
      //       clause and they should keep the same order.                  
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      globdata.getStateData().setLastStatementNumber( "0000000018" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        if ( ((double) w_oa.ExpErrorIyy1ComponentReturnCode >= (double) w_la.LocDontChangeReturnCodesQ1Ok) )
        {
          f_20971777();
        }
        
      }
      if ( func_0022020162_esc_flag )
      {
        break f_0022020162_esctag;
      }
      
      globdata.getStateData().setLastStatementNumber( "0000000101" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        if ( ((double) w_oa.ExpErrorIyy1ComponentReturnCode < (double) w_la.LocDontChangeReturnCodesQ1Ok) )
        {
          f_20971737();
        }
        
      }
    }
  }
  
  
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // SUBORDINATE FUNCTIONS
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  
  
  public void f_20971777()
  	throws ABException
  {
    func_0020971777_esc_flag = false;
    f_0020971777_esctag: 
    {
      globdata.getStateData().setLastStatementNumber( "0000000019" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        w_la.LocFilterIyy1ListSortOption = FixedStringAttr.valueOf(w_ia.ImpFilterIyy1ListSortOption, (short)3);
        w_la.LocFilterIyy1ListScrollType = FixedStringAttr.valueOf(w_ia.ImpFilterIyy1ListScrollType, (short)1);
        w_la.LocFilterIyy1ListListDirection = FixedStringAttr.valueOf(w_ia.ImpFilterIyy1ListListDirection, (short)1);
        w_la.LocFilterIyy1ListScrollAmount = IntAttr.valueOf(w_ia.ImpFilterIyy1ListScrollAmount);
        w_la.LocFilterIyy1ListOrderByFieldNum = ShortAttr.valueOf(w_ia.ImpFilterIyy1ListOrderByFieldNum);
      }
      
      globdata.getStateData().setLastStatementNumber( "0000000021" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        if ( (((double) w_la.LocFilterIyy1ListScrollAmount > ExpGroupList_MM_001) || ((double) w_la.LocFilterIyy1ListScrollAmount < 
          1)) )
        {
          globdata.getStateData().setLastStatementNumber( "0000000022" );
          f_0_trace();
          if ( trace_ret_code != 8 )
          {
            w_la.LocFilterIyy1ListScrollAmount = IntAttr.valueOf((int)TIRD2DEC.TIRD2DC1(ExpGroupList_MM_001, 0, TIRD2DEC.ROUND_NONE, 
              5));
          }
        }
        
      }
      globdata.getStateData().setLastStatementNumber( "0000000023" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        if ( CompareExit.compareTo(w_la.LocFilterIyy1ListSortOption, SPACES) == 0 )
        {
          globdata.getStateData().setLastStatementNumber( "0000000024" );
          f_0_trace();
          if ( trace_ret_code != 8 )
          {
            w_la.LocFilterIyy1ListSortOption = FixedStringAttr.valueOf("ASC", (short)3);
          }
        }
        
      }
      globdata.getStateData().setLastStatementNumber( "0000000025" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        if ( CompareExit.compareTo(w_la.LocFilterIyy1ListListDirection, "P") == 0 )
        {
          f_20971530();
        }
        
      }
      
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  
      //    !!!!!                                                           
      //    Please review the filter code block.                            
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    **************************************************************  
      //    **                                                              
      //    Min-Max interval filtering                                      
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      globdata.getStateData().setLastStatementNumber( "0000000032" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        w_la.LocFilterStartTypeTkeyAttrText = FixedStringAttr.valueOf(w_ia.ImpFilterStartTypeTkeyAttrText, (short)4);
      }
      globdata.getStateData().setLastStatementNumber( "0000000033" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        w_la.LocFilterStopTypeTkeyAttrText = FixedStringAttr.valueOf(w_ia.ImpFilterStopTypeTkeyAttrText, (short)4);
      }
      
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  
      //    !!!!!!!!!!!                                                     
      //    Please specify the maximum values that can be assigned to each  
      //    key and filter_stop variable.                                   
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      globdata.getStateData().setLastStatementNumber( "0000000036" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        w_la.LocMvsStringHighValueIyy1SuppliedFlag = FixedStringAttr.valueOf("9", (short)1);
      }
      globdata.getStateData().setLastStatementNumber( "0000000037" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        w_la.LocPcStringHighValueIyy1SuppliedFlag = FixedStringAttr.valueOf("Z", (short)1);
      }
      
      globdata.getStateData().setLastStatementNumber( "0000000039" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        if ( CompareExit.compareTo(w_la.LocPcStringHighValueIyy1SuppliedFlag, w_la.LocMvsStringHighValueIyy1SuppliedFlag) > 0 )
        {
          globdata.getStateData().setLastStatementNumber( "0000000040" );
          f_0_trace();
          if ( trace_ret_code != 8 )
          {
            w_la.LocMaxTypeTkeyAttrText = FixedStringAttr.valueOf("ZZZZ", (short)4);
          }
          globdata.getStateData().setLastStatementNumber( "0000000041" );
          f_0_trace();
          if ( trace_ret_code != 8 )
          {
            w_la.LocMaxTypeTsearchAttrText = FixedStringAttr.valueOf("ZZZZZZZZZZZZZZZZZZZZ", (short)20);
          }
        }
        else 
        {
          globdata.getStateData().setLastSubStatementNumber( "1" );
          f_0_trace();
          {
            globdata.getStateData().setLastStatementNumber( "0000000042" );
            f_0_trace();
            if ( trace_ret_code != 8 )
            {
              w_la.LocMaxTypeTkeyAttrText = FixedStringAttr.valueOf("9999", (short)4);
            }
            globdata.getStateData().setLastStatementNumber( "0000000043" );
            f_0_trace();
            if ( trace_ret_code != 8 )
            {
              w_la.LocMaxTypeTsearchAttrText = FixedStringAttr.valueOf("99999999999999999999", (short)20);
            }
          }
        }
        
      }
      
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    **************************************************************  
      //    **                                                              
      //    If Stop is empty, it is assumed as maximum.                     
      //    If Stop is full, it can not be smaller than Start,              
      //    if smaller it is made equal to Start.                           
      //                                                                    
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      globdata.getStateData().setLastStatementNumber( "0000000046" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        if ( CompareExit.compareTo(w_la.LocFilterStopTypeTkeyAttrText, w_la.LocEmptyTypeTkeyAttrText) == 0 )
        {
          globdata.getStateData().setLastStatementNumber( "0000000047" );
          f_0_trace();
          if ( trace_ret_code != 8 )
          {
            w_la.LocFilterStopTypeTkeyAttrText = FixedStringAttr.valueOf(w_la.LocMaxTypeTkeyAttrText, (short)4);
          }
        }
        else 
        {
          globdata.getStateData().setLastSubStatementNumber( "1" );
          f_0_trace();
          {
            f_20972141();
          }
        }
        
      }
      
      globdata.getStateData().setLastStatementNumber( "0000000051" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        w_la.LocFromTypeTinstanceId = TimestampAttr.valueOf(w_ia.ImpFromTypeTinstanceId);
        w_la.LocFromTypeTkeyAttrText = FixedStringAttr.valueOf(w_ia.ImpFromTypeTkeyAttrText, (short)4);
        w_la.LocFromTypeTsearchAttrText = FixedStringAttr.valueOf(w_ia.ImpFromTypeTsearchAttrText, (short)20);
      }
      
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    **************************************************************  
      //    **                                                              
      //    From starting value is checked.                                 
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      globdata.getStateData().setLastStatementNumber( "0000000054" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        if ( CompareExit.compareTo(w_la.LocFilterIyy1ListSortOption, "ASC") == 0 )
        {
          // Empty statement here.
          ;
        }
        else 
        {
          globdata.getStateData().setLastSubStatementNumber( "1" );
          f_0_trace();
          {
            f_20971582();
          }
        }
        
      }
      
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    **************************************************************  
      //    **                                                              
      //    If the attributes in filter_start and filter_stop is located i  
      //    n from,                                                         
      //    From can not be smaller than filter_Start and greater than fil  
      //    ter_Stop.                                                       
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  
      //    !!!!!!!!!!!                                                     
      //    !!!  ATTENTION  !!!                                             
      //    For splitted key(s)                                             
      //    (namely key is formed more than one field)                      
      //    refer to the CYYY0251_CHILD_LIST Action Block.                  
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      globdata.getStateData().setLastStatementNumber( "0000000066" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        if ( (CompareExit.compareTo(w_la.LocFromTypeTkeyAttrText, w_la.LocFilterStartTypeTkeyAttrText) < 0 || CompareExit.compareTo(
          w_la.LocFromTypeTkeyAttrText, w_la.LocFilterStopTypeTkeyAttrText) > 0) )
        {
          f_20972105();
        }
        
      }
      
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    **************************************************************  
      //    **                                                              
      //    Filtering (append % till filter variable length)                
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      globdata.getStateData().setLastStatementNumber( "0000000073" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        w_la.LocFilterTypeTsearchAttrText = FixedStringAttr.valueOf("%%%%%%%%%%%%%%%%%%%%%%%%%", (short)20);
      }
      globdata.getStateData().setLastStatementNumber( "0000000074" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        BaseAttr.reset(workarea_002_oa_output_string_FP_002);
        globdata.getErrorData().setErrorEncounteredSW( ErrorData.NO_ERROR_FOUND_SW );
        TIRFTRIM.TIRFTRIM(iefRuntimeParm1, iefRuntimeParm2, globdata, w_ia.ImpFilterTypeTsearchAttrText, 
          workarea_002_oa_output_string_FP_002);
        if ( ((!(globdata.getErrorData().getStatus().equals( ErrorData.NONE_SF ))) || (globdata.getErrorData().getErrorEncounteredSW(
          ) != ErrorData.NO_ERROR_FOUND_SW)) || (globdata.getErrorData().getViewOverflowSW() != ErrorData.NO_ERROR_FOUND_SW) )
        {
          throw new ABException();
        }
        BaseAttr.reset(workarea_001_oa_output_string_FP_001);
        globdata.getErrorData().setErrorEncounteredSW( ErrorData.NO_ERROR_FOUND_SW );
        TIRFCCAT.TIRFCCAT(iefRuntimeParm1, iefRuntimeParm2, globdata, workarea_002_oa_output_string_FP_002.get(), 
          w_la.LocFilterTypeTsearchAttrText, workarea_001_oa_output_string_FP_001);
        if ( ((!(globdata.getErrorData().getStatus().equals( ErrorData.NONE_SF ))) || (globdata.getErrorData().getErrorEncounteredSW(
          ) != ErrorData.NO_ERROR_FOUND_SW)) || (globdata.getErrorData().getViewOverflowSW() != ErrorData.NO_ERROR_FOUND_SW) )
        {
          throw new ABException();
        }
        w_la.LocFilterTypeTsearchAttrText = FixedStringAttr.valueOf(workarea_001_oa_output_string_FP_001.get(), (short)20);
      }
      globdata.getStateData().setLastStatementNumber( "0000000075" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        w_la.LocFilterTypeTotherAttrText = FixedStringAttr.valueOf("%%", (short)2);
      }
      globdata.getStateData().setLastStatementNumber( "0000000076" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        BaseAttr.reset(workarea_002_oa_output_string_FP_002);
        globdata.getErrorData().setErrorEncounteredSW( ErrorData.NO_ERROR_FOUND_SW );
        TIRFTRIM.TIRFTRIM(iefRuntimeParm1, iefRuntimeParm2, globdata, w_ia.ImpFilterTypeTotherAttrText, 
          workarea_002_oa_output_string_FP_002);
        if ( ((!(globdata.getErrorData().getStatus().equals( ErrorData.NONE_SF ))) || (globdata.getErrorData().getErrorEncounteredSW(
          ) != ErrorData.NO_ERROR_FOUND_SW)) || (globdata.getErrorData().getViewOverflowSW() != ErrorData.NO_ERROR_FOUND_SW) )
        {
          throw new ABException();
        }
        BaseAttr.reset(workarea_001_oa_output_string_FP_001);
        globdata.getErrorData().setErrorEncounteredSW( ErrorData.NO_ERROR_FOUND_SW );
        TIRFCCAT.TIRFCCAT(iefRuntimeParm1, iefRuntimeParm2, globdata, workarea_002_oa_output_string_FP_002.get(), 
          w_la.LocFilterTypeTotherAttrText, workarea_001_oa_output_string_FP_001);
        if ( ((!(globdata.getErrorData().getStatus().equals( ErrorData.NONE_SF ))) || (globdata.getErrorData().getErrorEncounteredSW(
          ) != ErrorData.NO_ERROR_FOUND_SW)) || (globdata.getErrorData().getViewOverflowSW() != ErrorData.NO_ERROR_FOUND_SW) )
        {
          throw new ABException();
        }
        w_la.LocFilterTypeTotherAttrText = FixedStringAttr.valueOf(workarea_001_oa_output_string_FP_001.get(), (short)2);
      }
      
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    **************************************************************  
      //    **                                                              
      //    End of filtering                                                
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      globdata.getStateData().setLastStatementNumber( "0000000079" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        
        dyyy0351_ia = (gen.ort.yyy.DYYY0351_IA)(iefRuntimeParm2.getInstance("gen.ort.yyy.DYYY0351_IA"));
        dyyy0351_oa = (gen.ort.yyy.DYYY0351_OA)(iefRuntimeParm2.getInstance("gen.ort.yyy.DYYY0351_OA"));
        dyyy0351_ia.ImpFilterTypeTsearchAttrText = FixedStringAttr.valueOf(w_la.LocFilterTypeTsearchAttrText, (short)20);
        dyyy0351_ia.ImpFilterTypeTotherAttrText = FixedStringAttr.valueOf(w_la.LocFilterTypeTotherAttrText, (short)2);
        dyyy0351_ia.ImpFilterStopTypeTkeyAttrText = FixedStringAttr.valueOf(w_la.LocFilterStopTypeTkeyAttrText, (short)4);
        dyyy0351_ia.ImpFilterStartTypeTkeyAttrText = FixedStringAttr.valueOf(w_la.LocFilterStartTypeTkeyAttrText, (short)4);
        dyyy0351_ia.ImpFromTypeTinstanceId = TimestampAttr.valueOf(w_la.LocFromTypeTinstanceId);
        dyyy0351_ia.ImpFromTypeTkeyAttrText = FixedStringAttr.valueOf(w_la.LocFromTypeTkeyAttrText, (short)4);
        dyyy0351_ia.ImpFromTypeTsearchAttrText = FixedStringAttr.valueOf(w_la.LocFromTypeTsearchAttrText, (short)20);
        dyyy0351_ia.ImpFilterIyy1ListSortOption = FixedStringAttr.valueOf(w_la.LocFilterIyy1ListSortOption, (short)3);
        dyyy0351_ia.ImpFilterIyy1ListScrollType = FixedStringAttr.valueOf(w_la.LocFilterIyy1ListScrollType, (short)1);
        dyyy0351_ia.ImpFilterIyy1ListListDirection = FixedStringAttr.valueOf(w_la.LocFilterIyy1ListListDirection, (short)1);
        dyyy0351_ia.ImpFilterIyy1ListScrollAmount = IntAttr.valueOf(w_la.LocFilterIyy1ListScrollAmount);
        dyyy0351_ia.ImpFilterIyy1ListOrderByFieldNum = ShortAttr.valueOf(w_la.LocFilterIyy1ListOrderByFieldNum);
        dyyy0351_ia.ImpErrorIyy1ComponentSeverityCode = FixedStringAttr.valueOf(w_oa.ExpErrorIyy1ComponentSeverityCode, (short)1);
        dyyy0351_ia.ImpErrorIyy1ComponentRollbackIndicator = FixedStringAttr.valueOf(w_oa.ExpErrorIyy1ComponentRollbackIndicator, (
          short)1);
        dyyy0351_ia.ImpErrorIyy1ComponentOriginServid = DoubleAttr.valueOf(w_oa.ExpErrorIyy1ComponentOriginServid);
        dyyy0351_ia.ImpErrorIyy1ComponentContextString = StringAttr.valueOf(w_oa.ExpErrorIyy1ComponentContextString, (short)512);
        dyyy0351_ia.ImpErrorIyy1ComponentReturnCode = IntAttr.valueOf(w_oa.ExpErrorIyy1ComponentReturnCode);
        dyyy0351_ia.ImpErrorIyy1ComponentReasonCode = IntAttr.valueOf(w_oa.ExpErrorIyy1ComponentReasonCode);
        dyyy0351_ia.ImpErrorIyy1ComponentChecksum = FixedStringAttr.valueOf(w_oa.ExpErrorIyy1ComponentChecksum, (short)15);
        globdata.getErrorData().setErrorEncounteredSW( ErrorData.NO_ERROR_FOUND_SW );
        iefRuntimeParm2.useActionBlock("gen.ort.yyy.DYYY0351", "DYYY0351", dyyy0351_ia, dyyy0351_oa);
        if ( ((!(globdata.getErrorData().getStatus().equals( ErrorData.NONE_SF ))) || (globdata.getErrorData().getErrorEncounteredSW(
          ) != ErrorData.NO_ERROR_FOUND_SW)) || (globdata.getErrorData().getViewOverflowSW() != ErrorData.NO_ERROR_FOUND_SW) )
        {
          throw new ABException();
        }
        globdata.getStateData().setCurrentABId( "0022020162" );
        globdata.getStateData().setCurrentABName( "CYYY0351_TYPE_LIST" );
        globdata.getStateData().setLastStatementNumber( "0000000079" );
        w_la.LocErrorIyy1ComponentSeverityCode = FixedStringAttr.valueOf(dyyy0351_oa.ExpErrorIyy1ComponentSeverityCode, (short)1);
        w_la.LocErrorIyy1ComponentRollbackIndicator = FixedStringAttr.valueOf(dyyy0351_oa.ExpErrorIyy1ComponentRollbackIndicator, (
          short)1);
        w_la.LocErrorIyy1ComponentOriginServid = DoubleAttr.valueOf(dyyy0351_oa.ExpErrorIyy1ComponentOriginServid);
        w_la.LocErrorIyy1ComponentContextString = StringAttr.valueOf(dyyy0351_oa.ExpErrorIyy1ComponentContextString, (short)512);
        w_la.LocErrorIyy1ComponentReturnCode = IntAttr.valueOf(dyyy0351_oa.ExpErrorIyy1ComponentReturnCode);
        w_la.LocErrorIyy1ComponentReasonCode = IntAttr.valueOf(dyyy0351_oa.ExpErrorIyy1ComponentReasonCode);
        w_la.LocErrorIyy1ComponentChecksum = FixedStringAttr.valueOf(dyyy0351_oa.ExpErrorIyy1ComponentChecksum, (short)15);
        w_la.LocGroupList_MA = IntAttr.valueOf(dyyy0351_oa.ExpGroupList_MA);
        for(adim1 = 1; adim1 <= w_la.LocGroupList_MA; ++(adim1))
        {
          w_la.LocGListTypeTinstanceId[adim1-1] = TimestampAttr.valueOf(dyyy0351_oa.ExpGListTypeTinstanceId[adim1-1]);
          w_la.LocGListTypeTreferenceId[adim1-1] = TimestampAttr.valueOf(dyyy0351_oa.ExpGListTypeTreferenceId[adim1-1]);
          w_la.LocGListTypeTcreateUserId[adim1-1] = FixedStringAttr.valueOf(dyyy0351_oa.ExpGListTypeTcreateUserId[adim1-1], (short)8)
            ;
          w_la.LocGListTypeTupdateUserId[adim1-1] = FixedStringAttr.valueOf(dyyy0351_oa.ExpGListTypeTupdateUserId[adim1-1], (short)8)
            ;
          w_la.LocGListTypeTkeyAttrText[adim1-1] = FixedStringAttr.valueOf(dyyy0351_oa.ExpGListTypeTkeyAttrText[adim1-1], (short)4);
          w_la.LocGListTypeTsearchAttrText[adim1-1] = FixedStringAttr.valueOf(dyyy0351_oa.ExpGListTypeTsearchAttrText[adim1-1], (
            short)20);
          w_la.LocGListTypeTotherAttrText[adim1-1] = FixedStringAttr.valueOf(dyyy0351_oa.ExpGListTypeTotherAttrText[adim1-1], (short)
            2);
          w_la.LocGListTypeTotherAttrDate[adim1-1] = DateAttr.valueOf(dyyy0351_oa.ExpGListTypeTotherAttrDate[adim1-1]);
          w_la.LocGListTypeTotherAttrTime[adim1-1] = TimeAttr.valueOf(dyyy0351_oa.ExpGListTypeTotherAttrTime[adim1-1]);
          w_la.LocGListTypeTotherAttrAmount[adim1-1] = BigDecimalAttr.valueOf(dyyy0351_oa.ExpGListTypeTotherAttrAmount[adim1-1]);
        }
        dyyy0351_ia.freeInstance();
        dyyy0351_ia = null;
        dyyy0351_oa.freeInstance();
        dyyy0351_oa = null;
      }
      
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    **************************************************************  
      //    **                                                              
      //    If External will be                                             
      //    USEd the code sample replacement for above code:                
      //    | USE eyyy0351_type_list                                        
      //    |   WHICH IMPORTS: Work View   loc_filter iyy1_list  TO Work    
      //    View   imp_filter iyy1_list                                     
      //    |                  Entity View loc_from type  TO Entity         
      //    View imp_from type                                              
      //    |                  Entity View loc_filter_start type  TO        
      //    Entity View imp_filter_start type                               
      //    |                  Entity View loc_filter_stop type  TO         
      //    Entity View imp_filter_stop type                                
      //    |                  Entity View loc_filter type  TO Entity       
      //    View imp_filter type                                            
      //    |   WHICH EXPORTS: Group View  loc_group_list  FROM Group       
      //    View  exp_group_list                                            
      //    |                  Work View   loc_error d._c._text  FROM       
      //    Work View   exp_error d._c._text                                
      //    |                                                               
      //    | +- CASE OF loc_error dont_change_text text_2                  
      //    | +- CASE "OK"                                                  
      //    | +- CASE "LE"                                                  
      //    | |  SET exp_error iyy1_com.. return_code TO                    
      //    loc d._c._return_codes 1_ok                                     
      //    | |  SET exp_error iyy1_com.. reason_code TO                    
      //    loc d._c._reason_codes 12_list_empty                            
      //    | +- CASE "LF"                                                  
      //    | |  SET exp_error iyy1_com.. return_code TO                    
      //    loc d._c._return_codes 1_ok                                     
      //    | |  SET exp_error iyy1_com.. reason_code TO                    
      //    loc d._c._reason_codes 11_list_full                             
      //    | +- OTHERWISE                                                  
      //    | |  SET exp_error iyy1_com.. return_code TO                    
      //    loc d._c._return_codes n999_unexpected_exception                
      //    | |  SET exp_error iyy1_com.. reason_code TO                    
      //    loc d._c._reason_codes 1_default                                
      //    | +--                                                           
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      globdata.getStateData().setLastStatementNumber( "0000000082" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        if ( ((double) w_la.LocErrorIyy1ComponentReturnCode < (double) w_la.LocDontChangeReturnCodesQ1Ok) )
        {
          f_20971773();
        }
        
      }
      if ( func_0020971777_esc_flag )
      {
        break f_0020971777_esctag;
      }
      
      globdata.getStateData().setLastStatementNumber( "0000000087" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        w_la.LocReadLbIyy1SuppliedTotalInteger = DoubleAttr.valueOf(TIRD2DEC.TIRD2DC1(w_la.LocGroupList_MA, 0, TIRD2DEC.ROUND_NONE, 
          15));
      }
      globdata.getStateData().setLastStatementNumber( "0000000088" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        if ( TIRD2DEC.TIRD2DEC((double)w_la.LocReadLbIyy1SuppliedTotalInteger, 0, TIRD2DEC.ROUND_NORMAL)  >  TIRD2DEC.TIRD2DEC((
          double)0, 0, TIRD2DEC.ROUND_NORMAL) )
        {
          f_20971625();
        }
        
      }
    }
  }
  
  public void f_20971737()
  	throws ABException
  {
    func_0020971737_esc_flag = false;
    globdata.getStateData().setLastStatementNumber( "0000000102" );
    f_0_trace();
    if ( trace_ret_code != 8 )
    {
      
      cyyy9141_ia = (gen.ort.yyy.CYYY9141_IA)(iefRuntimeParm2.getInstance("gen.ort.yyy.CYYY9141_IA"));
      cyyy9141_oa = (gen.ort.yyy.CYYY9141_OA)(iefRuntimeParm2.getInstance("gen.ort.yyy.CYYY9141_OA"));
      cyyy9141_ia.ImpGroupContext_MA = IntAttr.valueOf(w_la.LocGroupContext_MA);
      for(adim1 = 1; adim1 <= w_la.LocGroupContext_MA; ++(adim1))
      {
        cyyy9141_ia.ImpGContextDontChangeTextText150[adim1-1] = FixedStringAttr.valueOf(w_la.LocGContextDontChangeTextText150[
          adim1-1], (short)150);
      }
      for(adim1 = w_la.LocGroupContext_MA + 1; adim1 <= 9; ++(adim1))
      {
        cyyy9141_ia.ImpGContextDontChangeTextText150[adim1-1] = 
"                                                                                                                                                      "
          ;
      }
      globdata.getErrorData().setErrorEncounteredSW( ErrorData.NO_ERROR_FOUND_SW );
      iefRuntimeParm2.useActionBlock("gen.ort.yyy.CYYY9141", "CYYY9141", cyyy9141_ia, cyyy9141_oa);
      if ( ((!(globdata.getErrorData().getStatus().equals( ErrorData.NONE_SF ))) || (globdata.getErrorData().getErrorEncounteredSW() 
        != ErrorData.NO_ERROR_FOUND_SW)) || (globdata.getErrorData().getViewOverflowSW() != ErrorData.NO_ERROR_FOUND_SW) )
      {
        throw new ABException();
      }
      globdata.getStateData().setCurrentABId( "0022020162" );
      globdata.getStateData().setCurrentABName( "CYYY0351_TYPE_LIST" );
      globdata.getStateData().setLastStatementNumber( "0000000102" );
      w_oa.ExpErrorIyy1ComponentContextString = StringAttr.valueOf(cyyy9141_oa.ExpContextIyy1ComponentContextString, (short)512);
      w_la.LocErrorIyy1ComponentSeverityCode = FixedStringAttr.valueOf(cyyy9141_oa.ExpErrorIyy1ComponentSeverityCode, (short)1);
      w_la.LocErrorIyy1ComponentRollbackIndicator = FixedStringAttr.valueOf(cyyy9141_oa.ExpErrorIyy1ComponentRollbackIndicator, (
        short)1);
      w_la.LocErrorIyy1ComponentOriginServid = DoubleAttr.valueOf(cyyy9141_oa.ExpErrorIyy1ComponentOriginServid);
      w_la.LocErrorIyy1ComponentContextString = StringAttr.valueOf(cyyy9141_oa.ExpErrorIyy1ComponentContextString, (short)512);
      w_la.LocErrorIyy1ComponentReturnCode = IntAttr.valueOf(cyyy9141_oa.ExpErrorIyy1ComponentReturnCode);
      w_la.LocErrorIyy1ComponentReasonCode = IntAttr.valueOf(cyyy9141_oa.ExpErrorIyy1ComponentReasonCode);
      w_la.LocErrorIyy1ComponentChecksum = FixedStringAttr.valueOf(cyyy9141_oa.ExpErrorIyy1ComponentChecksum, (short)15);
      cyyy9141_ia.freeInstance();
      cyyy9141_ia = null;
      cyyy9141_oa.freeInstance();
      cyyy9141_oa = null;
    }
    
    globdata.getStateData().setLastStatementNumber( "0000000104" );
    f_0_trace();
    if ( trace_ret_code != 8 )
    {
      if ( ((double) w_la.LocErrorIyy1ComponentReturnCode < (double) w_la.LocDontChangeReturnCodesQ1Ok) )
      {
        globdata.getStateData().setLastStatementNumber( "0000000105" );
        f_0_trace();
        if ( trace_ret_code != 8 )
        {
          w_oa.ExpErrorIyy1ComponentSeverityCode = FixedStringAttr.valueOf(w_la.LocErrorIyy1ComponentSeverityCode, (short)1);
          w_oa.ExpErrorIyy1ComponentRollbackIndicator = FixedStringAttr.valueOf(w_la.LocErrorIyy1ComponentRollbackIndicator, (short)
            1);
          w_oa.ExpErrorIyy1ComponentOriginServid = DoubleAttr.valueOf(w_la.LocErrorIyy1ComponentOriginServid);
          w_oa.ExpErrorIyy1ComponentContextString = StringAttr.valueOf(w_la.LocErrorIyy1ComponentContextString, (short)512);
          w_oa.ExpErrorIyy1ComponentReturnCode = IntAttr.valueOf(w_la.LocErrorIyy1ComponentReturnCode);
          w_oa.ExpErrorIyy1ComponentReasonCode = IntAttr.valueOf(w_la.LocErrorIyy1ComponentReasonCode);
          w_oa.ExpErrorIyy1ComponentChecksum = FixedStringAttr.valueOf(w_la.LocErrorIyy1ComponentChecksum, (short)15);
        }
      }
      
    }
    globdata.getStateData().setLastStatementNumber( "0000000106" );
    f_0_trace();
    if ( trace_ret_code != 8 )
    {
      w_oa.ExpErrorIyy1ComponentSeverityCode = FixedStringAttr.valueOf("E", (short)1);
    }
  }
  
  public void f_20971530()
  	throws ABException
  {
    func_0020971530_esc_flag = false;
    globdata.getStateData().setLastStatementNumber( "0000000026" );
    f_0_trace();
    if ( trace_ret_code != 8 )
    {
      if ( CompareExit.compareTo(w_la.LocFilterIyy1ListSortOption, "ASC") == 0 )
      {
        globdata.getStateData().setLastStatementNumber( "0000000027" );
        f_0_trace();
        if ( trace_ret_code != 8 )
        {
          w_la.LocFilterIyy1ListSortOption = FixedStringAttr.valueOf("DES", (short)3);
        }
      }
      else 
      {
        globdata.getStateData().setLastSubStatementNumber( "1" );
        f_0_trace();
        {
          globdata.getStateData().setLastStatementNumber( "0000000028" );
          f_0_trace();
          if ( trace_ret_code != 8 )
          {
            w_la.LocFilterIyy1ListSortOption = FixedStringAttr.valueOf("ASC", (short)3);
          }
        }
      }
      
    }
  }
  
  public void f_20972141()
  	throws ABException
  {
    func_0020972141_esc_flag = false;
    globdata.getStateData().setLastStatementNumber( "0000000048" );
    f_0_trace();
    if ( trace_ret_code != 8 )
    {
      if ( CompareExit.compareTo(w_la.LocFilterStartTypeTkeyAttrText, w_la.LocFilterStopTypeTkeyAttrText) > 0 )
      {
        globdata.getStateData().setLastStatementNumber( "0000000049" );
        f_0_trace();
        if ( trace_ret_code != 8 )
        {
          w_la.LocFilterStopTypeTkeyAttrText = FixedStringAttr.valueOf(w_la.LocFilterStartTypeTkeyAttrText, (short)4);
        }
      }
      
    }
  }
  
  public void f_20971582()
  	throws ABException
  {
    func_0020971582_esc_flag = false;
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    //    **************************************************************  
    //    **                                                              
    //    If From is empty for the full list, it is made equal to max.    
    //                                                                    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    globdata.getStateData().setLastStatementNumber( "0000000056" );
    f_0_trace();
    if ( trace_ret_code != 8 )
    {
      if ( CompareExit.compareTo(w_la.LocFilterIyy1ListScrollType, "S") != 0 )
      {
        f_20971977();
      }
      
    }
  }
  
  public void f_20972105()
  	throws ABException
  {
    func_0020972105_esc_flag = false;
    
    globdata.getStateData().setLastStatementNumber( "0000000068" );
    f_0_trace();
    if ( trace_ret_code != 8 )
    {
      if ( CompareExit.compareTo(w_la.LocFilterIyy1ListSortOption, "ASC") == 0 )
      {
        globdata.getStateData().setLastStatementNumber( "0000000069" );
        f_0_trace();
        if ( trace_ret_code != 8 )
        {
          w_la.LocFromTypeTkeyAttrText = FixedStringAttr.valueOf(w_la.LocFilterStartTypeTkeyAttrText, (short)4);
        }
      }
      else 
      {
        globdata.getStateData().setLastSubStatementNumber( "1" );
        f_0_trace();
        {
          globdata.getStateData().setLastStatementNumber( "0000000070" );
          f_0_trace();
          if ( trace_ret_code != 8 )
          {
            w_la.LocFromTypeTkeyAttrText = FixedStringAttr.valueOf(w_la.LocFilterStopTypeTkeyAttrText, (short)4);
          }
        }
      }
      
    }
  }
  
  public void f_20971773()
  	throws ABException
  {
    func_0020971773_esc_flag = false;
    f_0020971773_esctag: 
    {
      globdata.getStateData().setLastStatementNumber( "0000000083" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        w_oa.ExpErrorIyy1ComponentSeverityCode = FixedStringAttr.valueOf(w_la.LocErrorIyy1ComponentSeverityCode, (short)1);
        w_oa.ExpErrorIyy1ComponentRollbackIndicator = FixedStringAttr.valueOf(w_la.LocErrorIyy1ComponentRollbackIndicator, (short)1)
          ;
        w_oa.ExpErrorIyy1ComponentOriginServid = DoubleAttr.valueOf(w_la.LocErrorIyy1ComponentOriginServid);
        w_oa.ExpErrorIyy1ComponentContextString = StringAttr.valueOf(w_la.LocErrorIyy1ComponentContextString, (short)512);
        w_oa.ExpErrorIyy1ComponentReturnCode = IntAttr.valueOf(w_la.LocErrorIyy1ComponentReturnCode);
        w_oa.ExpErrorIyy1ComponentReasonCode = IntAttr.valueOf(w_la.LocErrorIyy1ComponentReasonCode);
        w_oa.ExpErrorIyy1ComponentChecksum = FixedStringAttr.valueOf(w_la.LocErrorIyy1ComponentChecksum, (short)15);
      }
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  
      //    !!!!!!!!!!!                                                     
      //    !! ATTENTION : In D AB, if context string must be formed        
      //    ESCAPE AB must be exited.                                       
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      globdata.getStateData().setLastStatementNumber( "0000000085" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        func_0020971773_esc_flag = true;
        func_0020971777_esc_flag = true;
      }
    }
  }
  
  public void f_20971625()
  	throws ABException
  {
    func_0020971625_esc_flag = false;
    globdata.getStateData().setLastStatementNumber( "0000000089" );
    f_0_trace();
    if ( trace_ret_code != 8 )
    {
      if ( CompareExit.compareTo(w_la.LocFilterIyy1ListListDirection, "P") == 0 )
      {
        globdata.getStateData().setLastStatementNumber( "0000000090" );
        f_0_trace();
        if ( trace_ret_code != 8 )
        {
          LocGroupList_PS_002 = (int)TIRD2DEC.TIRD2DC1(w_la.LocReadLbIyy1SuppliedTotalInteger, 0, TIRD2DEC.ROUND_NONE, 0);
          if ( (LocGroupList_PS_002 > w_la.LocGroupList_MA) && (LocGroupList_PS_002 <= 48) )
          w_la.LocGroupList_MA = IntAttr.valueOf(LocGroupList_PS_002);
        }
      }
      else 
      {
        globdata.getStateData().setLastSubStatementNumber( "1" );
        f_0_trace();
        {
          globdata.getStateData().setLastStatementNumber( "0000000091" );
          f_0_trace();
          if ( trace_ret_code != 8 )
          {
            LocGroupList_PS_002 = (int)TIRD2DEC.TIRD2DC1(1, 0, TIRD2DEC.ROUND_NONE, 0);
            if ( (LocGroupList_PS_002 > w_la.LocGroupList_MA) && (LocGroupList_PS_002 <= 48) )
            w_la.LocGroupList_MA = IntAttr.valueOf(LocGroupList_PS_002);
          }
        }
      }
      
    }
    globdata.getStateData().setLastStatementNumber( "0000000092" );
    f_0_trace();
    if ( trace_ret_code != 8 )
    {
      ExpGroupList_PS_001 = (int)TIRD2DEC.TIRD2DC1(0, 0, TIRD2DEC.ROUND_NONE, 0);
      if ( (ExpGroupList_PS_001 > w_oa.ExpGroupList_MA) && (ExpGroupList_PS_001 <= 48) )
      w_oa.ExpGroupList_MA = IntAttr.valueOf(ExpGroupList_PS_001);
    }
    globdata.getStateData().setLastStatementNumber( "0000000093" );
    globdata.getStateData().setLastSubStatementNumber( "1" );
    {
      repeat_0066060816_esc_flag = false;
      do
      {
        {
          f_20971850();
        }
        globdata.getStateData().setLastStatementNumber( "0000000093" );
        globdata.getStateData().setLastStatementNumber( "0000000093" );
        f_0_trace();
        if ( trace_ret_code != 8 )
        {
        }
        else {
          break;
        }
      }
      while ((!(TIRD2DEC.TIRD2DEC((double)w_la.LocReadLbIyy1SuppliedTotalInteger, 0, TIRD2DEC.ROUND_NORMAL)  ==  TIRD2DEC.TIRD2DEC((
      double)0, 0, TIRD2DEC.ROUND_NORMAL))) && (repeat_0066060816_esc_flag != true));}
  }
  
  public void f_20971977()
  	throws ABException
  {
    func_0020971977_esc_flag = false;
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    //    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  
    //    !!!!!!!!!!!                                                     
    //    !!!  ATTENTION  !!!                                             
    //    For splitted key(s)                                             
    //    (namely key is formed more than one field)                      
    //    refer to the CYYY0251_CHILD_LIST Action Block.                  
    //                                                                    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    globdata.getStateData().setLastStatementNumber( "0000000058" );
    f_0_trace();
    if ( trace_ret_code != 8 )
    {
      if ( CompareExit.compareTo(w_la.LocFromTypeTkeyAttrText, w_la.LocEmptyTypeTkeyAttrText) <= 0 )
      {
        globdata.getStateData().setLastStatementNumber( "0000000059" );
        f_0_trace();
        if ( trace_ret_code != 8 )
        {
          w_la.LocFromTypeTkeyAttrText = FixedStringAttr.valueOf(w_la.LocMaxTypeTkeyAttrText, (short)4);
        }
      }
      
    }
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    //    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  
    //    !!!!!!!!!!!                                                     
    //    !!!  ATTENTION  !!!                                             
    //    For splitted key(s)                                             
    //    (namely key is formed more than one field)                      
    //    refer to the CYYY0251_CHILD_LIST Action Block.                  
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    globdata.getStateData().setLastStatementNumber( "0000000061" );
    f_0_trace();
    if ( trace_ret_code != 8 )
    {
      if ( CompareExit.compareTo(w_la.LocFromTypeTsearchAttrText, w_la.LocEmptyTypeTsearchAttrText) <= 0 )
      {
        globdata.getStateData().setLastStatementNumber( "0000000062" );
        f_0_trace();
        if ( trace_ret_code != 8 )
        {
          w_la.LocFromTypeTsearchAttrText = FixedStringAttr.valueOf(w_la.LocMaxTypeTsearchAttrText, (short)20);
        }
      }
      
    }
  }
  
  public void f_20971850()
  	throws ABException
  {
    func_0020971850_esc_flag = false;
    globdata.getStateData().setLastStatementNumber( "0000000094" );
    f_0_trace();
    if ( trace_ret_code != 8 )
    {
      ExpGroupList_PS_001 = (int)TIRD2DEC.TIRD2DC1(((double)ExpGroupList_PS_001 + 1), 0, TIRD2DEC.ROUND_NONE, 0);
      if ( (ExpGroupList_PS_001 > w_oa.ExpGroupList_MA) && (ExpGroupList_PS_001 <= 48) )
      w_oa.ExpGroupList_MA = IntAttr.valueOf(ExpGroupList_PS_001);
    }
    globdata.getStateData().setLastStatementNumber( "0000000095" );
    f_0_trace();
    if ( trace_ret_code != 8 )
    {
      f_173015162_rgvc();
      f_173015043_rgvc();
      w_oa.ExpGListTypeTinstanceId[ExpGroupList_PS_001-1] = TimestampAttr.valueOf(w_la.LocGListTypeTinstanceId[LocGroupList_PS_002-1]
        );
      w_oa.ExpGListTypeTreferenceId[ExpGroupList_PS_001-1] = TimestampAttr.valueOf(w_la.LocGListTypeTreferenceId[
        LocGroupList_PS_002-1]);
      w_oa.ExpGListTypeTcreateUserId[ExpGroupList_PS_001-1] = FixedStringAttr.valueOf(w_la.LocGListTypeTcreateUserId[
        LocGroupList_PS_002-1], (short)8);
      w_oa.ExpGListTypeTupdateUserId[ExpGroupList_PS_001-1] = FixedStringAttr.valueOf(w_la.LocGListTypeTupdateUserId[
        LocGroupList_PS_002-1], (short)8);
      w_oa.ExpGListTypeTkeyAttrText[ExpGroupList_PS_001-1] = FixedStringAttr.valueOf(w_la.LocGListTypeTkeyAttrText[
        LocGroupList_PS_002-1], (short)4);
      w_oa.ExpGListTypeTsearchAttrText[ExpGroupList_PS_001-1] = FixedStringAttr.valueOf(w_la.LocGListTypeTsearchAttrText[
        LocGroupList_PS_002-1], (short)20);
      w_oa.ExpGListTypeTotherAttrText[ExpGroupList_PS_001-1] = FixedStringAttr.valueOf(w_la.LocGListTypeTotherAttrText[
        LocGroupList_PS_002-1], (short)2);
      w_oa.ExpGListTypeTotherAttrDate[ExpGroupList_PS_001-1] = DateAttr.valueOf(w_la.LocGListTypeTotherAttrDate[
        LocGroupList_PS_002-1]);
      w_oa.ExpGListTypeTotherAttrTime[ExpGroupList_PS_001-1] = TimeAttr.valueOf(w_la.LocGListTypeTotherAttrTime[
        LocGroupList_PS_002-1]);
      w_oa.ExpGListTypeTotherAttrAmount[ExpGroupList_PS_001-1] = BigDecimalAttr.valueOf(TIRBDTRU.truncateToBigDecimal(
        w_la.LocGListTypeTotherAttrAmount[LocGroupList_PS_002-1], 2));
    }
    globdata.getStateData().setLastStatementNumber( "0000000096" );
    f_0_trace();
    if ( trace_ret_code != 8 )
    {
      if ( CompareExit.compareTo(w_la.LocFilterIyy1ListListDirection, "P") == 0 )
      {
        globdata.getStateData().setLastStatementNumber( "0000000097" );
        f_0_trace();
        if ( trace_ret_code != 8 )
        {
          LocGroupList_PS_002 = (int)TIRD2DEC.TIRD2DC1(((double)LocGroupList_PS_002 - 1), 0, TIRD2DEC.ROUND_NONE, 0);
          if ( (LocGroupList_PS_002 > w_la.LocGroupList_MA) && (LocGroupList_PS_002 <= 48) )
          w_la.LocGroupList_MA = IntAttr.valueOf(LocGroupList_PS_002);
        }
      }
      else 
      {
        globdata.getStateData().setLastSubStatementNumber( "1" );
        f_0_trace();
        {
          globdata.getStateData().setLastStatementNumber( "0000000098" );
          f_0_trace();
          if ( trace_ret_code != 8 )
          {
            LocGroupList_PS_002 = (int)TIRD2DEC.TIRD2DC1(((double)LocGroupList_PS_002 + 1), 0, TIRD2DEC.ROUND_NONE, 0);
            if ( (LocGroupList_PS_002 > w_la.LocGroupList_MA) && (LocGroupList_PS_002 <= 48) )
            w_la.LocGroupList_MA = IntAttr.valueOf(LocGroupList_PS_002);
          }
        }
      }
      
    }
    globdata.getStateData().setLastStatementNumber( "0000000099" );
    f_0_trace();
    if ( trace_ret_code != 8 )
    {
      w_la.LocReadLbIyy1SuppliedTotalInteger = DoubleAttr.valueOf(TIRD2DEC.TIRD2DC1((w_la.LocReadLbIyy1SuppliedTotalInteger - 1.), 0,
         TIRD2DEC.ROUND_NONE, 15));
    }
  }
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // INITIALIZATION UTILITY FUNCTIONS 
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  
  public void f_22020162_localAlloc(String abname)
  {
    // Request localview allocation 
    w_la = (gen.ort.yyy.CYYY0351_LA)(iefRuntimeParm2.getInstance("gen.ort.yyy.CYYY0351_LA"));
    if ( w_la == null )
    {
      globdata.getStateData().setCurrentABId( "0022020162" );
      globdata.getStateData().setCurrentABName( abname );
      globdata.getErrorData().setErrorEncounteredSW( ErrorData.ERROR_FOUND_SW );
      globdata.getErrorData().setLastStatus( ErrorData.IEF_ALLOCATION_ERROR_FL_LS );
    }
  }
  
  public void f_22020162_init()
  	throws ABException
  {
    if ( nestingLevel < 2 )
    {
      w_la.reset();
    }
    w_la.LocGroupList_MA = 0;
    for(LocGroupList_PS_002 = 1; LocGroupList_PS_002 <= 48; ++(LocGroupList_PS_002))
    {
    }
    w_la.LocGroupContext_MA = 0;
    for(LocGroupContext_PS_003 = 1; LocGroupContext_PS_003 <= 9; ++(LocGroupContext_PS_003))
    {
    }
    w_oa.ExpGroupList_MA = 0;
    for(ExpGroupList_PS_001 = 1; ExpGroupList_PS_001 <= 48; ++(ExpGroupList_PS_001))
    {
      w_oa.ExpGListTypeTinstanceId[ExpGroupList_PS_001-1] = "00000000000000000000";
      w_oa.ExpGListTypeTreferenceId[ExpGroupList_PS_001-1] = "00000000000000000000";
      w_oa.ExpGListTypeTcreateUserId[ExpGroupList_PS_001-1] = "        ";
      w_oa.ExpGListTypeTupdateUserId[ExpGroupList_PS_001-1] = "        ";
      w_oa.ExpGListTypeTkeyAttrText[ExpGroupList_PS_001-1] = "    ";
      w_oa.ExpGListTypeTsearchAttrText[ExpGroupList_PS_001-1] = "                    ";
      w_oa.ExpGListTypeTotherAttrText[ExpGroupList_PS_001-1] = "  ";
      w_oa.ExpGListTypeTotherAttrDate[ExpGroupList_PS_001-1] = 00000000;
      w_oa.ExpGListTypeTotherAttrTime[ExpGroupList_PS_001-1] = 00000000;
      w_oa.ExpGListTypeTotherAttrAmount[ExpGroupList_PS_001-1] = BigDecimalAttr.getDefaultValue();
    }
    w_oa.ExpErrorIyy1ComponentSeverityCode = " ";
    w_oa.ExpErrorIyy1ComponentRollbackIndicator = " ";
    w_oa.ExpErrorIyy1ComponentOriginServid = 0.0;
    w_oa.ExpErrorIyy1ComponentContextString = "";
    w_oa.ExpErrorIyy1ComponentReturnCode = 0;
    w_oa.ExpErrorIyy1ComponentReasonCode = 0;
    w_oa.ExpErrorIyy1ComponentChecksum = "               ";
    ExpGroupList_PS_001 = 1;
    LocGroupList_PS_002 = 1;
    LocGroupContext_PS_003 = 1;
  }
  
  public void f_0_trace()
  	throws ABException
  {
    trace_ret_code = TIRTRCE.TIRTRCE(iefRuntimeParm1, iefRuntimeParm2, globdata, padtext, padview);
    if ( trace_ret_code == 20 )
    {
      throw new ABException();
    }
  }
  
  public void padview_init()
  {
padview[0] = PadView.getInstance("IMPORT                          ", 0, 0, 0, (short)1, PadView.VT_BASE, PadView.DT_NONE, w_ia, 
      "w_ia");
    padview[1] = PadView.getInstance("IMP_FILTER                      ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_ia, 
      null);
    padview[2] = PadView.getInstance("IYY1_LIST                       ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, w_ia,
       null);
    padview[3] = PadView.getInstance("SORT_OPTION                     ", 3, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_ia, "ImpFilterIyy1ListSortOption");
    padview[4] = PadView.getInstance("SCROLL_TYPE                     ", 1, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_ia, "ImpFilterIyy1ListScrollType");
    padview[5] = PadView.getInstance("LIST_DIRECTION                  ", 1, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_ia, "ImpFilterIyy1ListListDirection");
    padview[6] = PadView.getInstance("SCROLL_AMOUNT                   ", 5, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_NUMERIC,
       w_ia, "ImpFilterIyy1ListScrollAmount");
    padview[7] = PadView.getInstance("ORDER_BY_FIELD_NUM              ", 1, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_NUMERIC,
       w_ia, "ImpFilterIyy1ListOrderByFieldNum");
    padview[8] = PadView.getInstance("IMP_FROM                        ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_ia, 
      null);
    padview[9] = PadView.getInstance("TYPE                            ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, w_ia,
       null);
    padview[10] = PadView.getInstance("TINSTANCE_ID                    ", 20, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_TIMESTAMP, w_ia, "ImpFromTypeTinstanceId");
    padview[11] = PadView.getInstance("TKEY_ATTR_TEXT                  ", 4, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_ia, "ImpFromTypeTkeyAttrText");
    padview[12] = PadView.getInstance("TSEARCH_ATTR_TEXT               ", 20, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_ia, "ImpFromTypeTsearchAttrText");
    padview[13] = PadView.getInstance("IMP_FILTER_START                ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_ia, 
      null);
    padview[14] = PadView.getInstance("TYPE                            ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_ia, null);
    padview[15] = PadView.getInstance("TKEY_ATTR_TEXT                  ", 4, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_ia, "ImpFilterStartTypeTkeyAttrText");
    padview[16] = PadView.getInstance("IMP_FILTER_STOP                 ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_ia, 
      null);
    padview[17] = PadView.getInstance("TYPE                            ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_ia, null);
    padview[18] = PadView.getInstance("TKEY_ATTR_TEXT                  ", 4, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_ia, "ImpFilterStopTypeTkeyAttrText");
    padview[19] = PadView.getInstance("IMP_FILTER                      ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_ia, 
      null);
    padview[20] = PadView.getInstance("TYPE                            ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_ia, null);
    padview[21] = PadView.getInstance("TSEARCH_ATTR_TEXT               ", 20, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_ia, "ImpFilterTypeTsearchAttrText");
    padview[22] = PadView.getInstance("TOTHER_ATTR_TEXT                ", 2, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_ia, "ImpFilterTypeTotherAttrText");
    padview[23] = PadView.getInstance("EXPORT                          ", 0, 0, 0, (short)1, PadView.VT_BASE, PadView.DT_NONE, w_oa, 
      "w_oa");
    padview[24] = PadView.getInstance("EXP_GROUP_LIST                  ", 0, 0, 48, (short)2, PadView.VT_GROUP, PadView.DT_NONE, 
      w_oa, "ExpGroupList_MA");
    padview[25] = PadView.getInstance("EXP_G_LIST                      ", 0, 0, 0, (short)3, PadView.VT_VIEW, PadView.DT_NONE, w_oa, 
      null);
    padview[26] = PadView.getInstance("TYPE                            ", 0, 0, 0, (short)4, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_oa, null);
    padview[27] = PadView.getInstance("TINSTANCE_ID                    ", 20, 0, 0, (short)4, PadView.VT_PREDICATE, 
      PadView.DT_TIMESTAMP, w_oa, "ExpGListTypeTinstanceId");
    padview[28] = PadView.getInstance("TREFERENCE_ID                   ", 20, 0, 0, (short)4, PadView.VT_PREDICATE, 
      PadView.DT_TIMESTAMP, w_oa, "ExpGListTypeTreferenceId");
    padview[29] = PadView.getInstance("TCREATE_USER_ID                 ", 8, 0, 0, (short)4, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_oa, "ExpGListTypeTcreateUserId");
    padview[30] = PadView.getInstance("TUPDATE_USER_ID                 ", 8, 0, 0, (short)4, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_oa, "ExpGListTypeTupdateUserId");
    padview[31] = PadView.getInstance("TKEY_ATTR_TEXT                  ", 4, 0, 0, (short)4, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_oa, "ExpGListTypeTkeyAttrText");
    padview[32] = PadView.getInstance("TSEARCH_ATTR_TEXT               ", 20, 0, 0, (short)4, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_oa, "ExpGListTypeTsearchAttrText");
    padview[33] = PadView.getInstance("TOTHER_ATTR_TEXT                ", 2, 0, 0, (short)4, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_oa, "ExpGListTypeTotherAttrText");
    padview[34] = PadView.getInstance("TOTHER_ATTR_DATE                ", 8, 0, 0, (short)4, PadView.VT_PREDICATE, PadView.DT_DATE, 
      w_oa, "ExpGListTypeTotherAttrDate");
    padview[35] = PadView.getInstance("TOTHER_ATTR_TIME                ", 6, 0, 0, (short)4, PadView.VT_PREDICATE, PadView.DT_TIME, 
      w_oa, "ExpGListTypeTotherAttrTime");
    padview[36] = PadView.getInstance("TOTHER_ATTR_AMOUNT              ", 17, 2, 0, (short)4, PadView.VT_PREDICATE, PadView.DT_FIXED,
       w_oa, "ExpGListTypeTotherAttrAmount");
    padview[37] = PadView.getInstance("EXP_ERROR                       ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_oa, 
      null);
    padview[38] = PadView.getInstance("IYY1_COMPONENT                  ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_oa, null);
    padview[39] = PadView.getInstance("SEVERITY_CODE                   ", 1, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_oa, "ExpErrorIyy1ComponentSeverityCode");
    padview[40] = PadView.getInstance("ROLLBACK_INDICATOR              ", 1, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_oa, "ExpErrorIyy1ComponentRollbackIndicator");
    padview[41] = PadView.getInstance("ORIGIN_SERVID                   ", 15, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_oa, "ExpErrorIyy1ComponentOriginServid");
    padview[42] = PadView.getInstance("CONTEXT_STRING                  ", 512, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_VARCHAR, w_oa, "ExpErrorIyy1ComponentContextString");
    padview[43] = PadView.getInstance("RETURN_CODE                     ", 5, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_oa, "ExpErrorIyy1ComponentReturnCode");
    padview[44] = PadView.getInstance("REASON_CODE                     ", 5, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_oa, "ExpErrorIyy1ComponentReasonCode");
    padview[45] = PadView.getInstance("CHECKSUM                        ", 15, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_oa, "ExpErrorIyy1ComponentChecksum");
    padview[46] = PadView.getInstance("LOCAL                           ", 0, 0, 0, (short)1, PadView.VT_BASE, PadView.DT_NONE, w_la, 
      "w_la");
    padview[47] = PadView.getInstance("LOC_FILTER                      ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_la, 
      null);
    padview[48] = PadView.getInstance("IYY1_LIST                       ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_la, null);
    padview[49] = PadView.getInstance("SORT_OPTION                     ", 3, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_la, "LocFilterIyy1ListSortOption");
    padview[50] = PadView.getInstance("SCROLL_TYPE                     ", 1, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_la, "LocFilterIyy1ListScrollType");
    padview[51] = PadView.getInstance("LIST_DIRECTION                  ", 1, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_la, "LocFilterIyy1ListListDirection");
    padview[52] = PadView.getInstance("SCROLL_AMOUNT                   ", 5, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_la, "LocFilterIyy1ListScrollAmount");
    padview[53] = PadView.getInstance("ORDER_BY_FIELD_NUM              ", 1, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_la, "LocFilterIyy1ListOrderByFieldNum");
    padview[54] = PadView.getInstance("LOC_FROM                        ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_la, 
      null);
    padview[55] = PadView.getInstance("TYPE                            ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_la, null);
    padview[56] = PadView.getInstance("TINSTANCE_ID                    ", 20, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_TIMESTAMP, w_la, "LocFromTypeTinstanceId");
    padview[57] = PadView.getInstance("TKEY_ATTR_TEXT                  ", 4, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_la, "LocFromTypeTkeyAttrText");
    padview[58] = PadView.getInstance("TSEARCH_ATTR_TEXT               ", 20, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_la, "LocFromTypeTsearchAttrText");
    padview[59] = PadView.getInstance("LOC_FILTER_START                ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_la, 
      null);
    padview[60] = PadView.getInstance("TYPE                            ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_la, null);
    padview[61] = PadView.getInstance("TKEY_ATTR_TEXT                  ", 4, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_la, "LocFilterStartTypeTkeyAttrText");
    padview[62] = PadView.getInstance("LOC_FILTER_STOP                 ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_la, 
      null);
    padview[63] = PadView.getInstance("TYPE                            ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_la, null);
    padview[64] = PadView.getInstance("TKEY_ATTR_TEXT                  ", 4, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_la, "LocFilterStopTypeTkeyAttrText");
    padview[65] = PadView.getInstance("LOC_FILTER                      ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_la, 
      null);
    padview[66] = PadView.getInstance("TYPE                            ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_la, null);
    padview[67] = PadView.getInstance("TSEARCH_ATTR_TEXT               ", 20, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_la, "LocFilterTypeTsearchAttrText");
    padview[68] = PadView.getInstance("TOTHER_ATTR_TEXT                ", 2, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_la, "LocFilterTypeTotherAttrText");
    padview[69] = PadView.getInstance("LOC_GROUP_LIST                  ", 0, 0, 48, (short)2, PadView.VT_GROUP, PadView.DT_NONE, 
      w_la, "LocGroupList_MA");
    padview[70] = PadView.getInstance("LOC_G_LIST                      ", 0, 0, 0, (short)3, PadView.VT_VIEW, PadView.DT_NONE, w_la, 
      null);
    padview[71] = PadView.getInstance("TYPE                            ", 0, 0, 0, (short)4, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_la, null);
    padview[72] = PadView.getInstance("TINSTANCE_ID                    ", 20, 0, 0, (short)4, PadView.VT_PREDICATE, 
      PadView.DT_TIMESTAMP, w_la, "LocGListTypeTinstanceId");
    padview[73] = PadView.getInstance("TREFERENCE_ID                   ", 20, 0, 0, (short)4, PadView.VT_PREDICATE, 
      PadView.DT_TIMESTAMP, w_la, "LocGListTypeTreferenceId");
    padview[74] = PadView.getInstance("TCREATE_USER_ID                 ", 8, 0, 0, (short)4, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_la, "LocGListTypeTcreateUserId");
    padview[75] = PadView.getInstance("TUPDATE_USER_ID                 ", 8, 0, 0, (short)4, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_la, "LocGListTypeTupdateUserId");
    padview[76] = PadView.getInstance("TKEY_ATTR_TEXT                  ", 4, 0, 0, (short)4, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_la, "LocGListTypeTkeyAttrText");
    padview[77] = PadView.getInstance("TSEARCH_ATTR_TEXT               ", 20, 0, 0, (short)4, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_la, "LocGListTypeTsearchAttrText");
    padview[78] = PadView.getInstance("TOTHER_ATTR_TEXT                ", 2, 0, 0, (short)4, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_la, "LocGListTypeTotherAttrText");
    padview[79] = PadView.getInstance("TOTHER_ATTR_DATE                ", 8, 0, 0, (short)4, PadView.VT_PREDICATE, PadView.DT_DATE, 
      w_la, "LocGListTypeTotherAttrDate");
    padview[80] = PadView.getInstance("TOTHER_ATTR_TIME                ", 6, 0, 0, (short)4, PadView.VT_PREDICATE, PadView.DT_TIME, 
      w_la, "LocGListTypeTotherAttrTime");
    padview[81] = PadView.getInstance("TOTHER_ATTR_AMOUNT              ", 17, 2, 0, (short)4, PadView.VT_PREDICATE, PadView.DT_FIXED,
       w_la, "LocGListTypeTotherAttrAmount");
    padview[82] = PadView.getInstance("LOC_EMPTY                       ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_la, 
      null);
    padview[83] = PadView.getInstance("TYPE                            ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_la, null);
    padview[84] = PadView.getInstance("TINSTANCE_ID                    ", 20, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_TIMESTAMP, w_la, "LocEmptyTypeTinstanceId");
    padview[85] = PadView.getInstance("TKEY_ATTR_TEXT                  ", 4, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_la, "LocEmptyTypeTkeyAttrText");
    padview[86] = PadView.getInstance("TSEARCH_ATTR_TEXT               ", 20, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_la, "LocEmptyTypeTsearchAttrText");
    padview[87] = PadView.getInstance("LOC_MAX                         ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_la, 
      null);
    padview[88] = PadView.getInstance("TYPE                            ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_la, null);
    padview[89] = PadView.getInstance("TKEY_ATTR_TEXT                  ", 4, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_la, "LocMaxTypeTkeyAttrText");
    padview[90] = PadView.getInstance("TSEARCH_ATTR_TEXT               ", 20, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_la, "LocMaxTypeTsearchAttrText");
    padview[91] = PadView.getInstance("LOC_READ_LB                     ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_la, 
      null);
    padview[92] = PadView.getInstance("IYY1_SUPPLIED                   ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_la, null);
    padview[93] = PadView.getInstance("TOTAL_INTEGER                   ", 15, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_la, "LocReadLbIyy1SuppliedTotalInteger");
    padview[94] = PadView.getInstance("LOC_ERROR                       ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_la, 
      null);
    padview[95] = PadView.getInstance("IYY1_COMPONENT                  ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_la, null);
    padview[96] = PadView.getInstance("SEVERITY_CODE                   ", 1, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_la, "LocErrorIyy1ComponentSeverityCode");
    padview[97] = PadView.getInstance("ROLLBACK_INDICATOR              ", 1, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_la, "LocErrorIyy1ComponentRollbackIndicator");
    padview[98] = PadView.getInstance("ORIGIN_SERVID                   ", 15, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_la, "LocErrorIyy1ComponentOriginServid");
    padview[99] = PadView.getInstance("CONTEXT_STRING                  ", 512, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_VARCHAR, w_la, "LocErrorIyy1ComponentContextString");
    padview[100] = PadView.getInstance("RETURN_CODE                     ", 5, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_la, "LocErrorIyy1ComponentReturnCode");
    padview[101] = PadView.getInstance("REASON_CODE                     ", 5, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_la, "LocErrorIyy1ComponentReasonCode");
    padview[102] = PadView.getInstance("CHECKSUM                        ", 15, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT,
       w_la, "LocErrorIyy1ComponentChecksum");
    padview[103] = PadView.getInstance("LOC_GROUP_CONTEXT               ", 0, 0, 9, (short)2, PadView.VT_GROUP, PadView.DT_NONE, 
      w_la, "LocGroupContext_MA");
    padview[104] = PadView.getInstance("LOC_G_CONTEXT                   ", 0, 0, 0, (short)3, PadView.VT_VIEW, PadView.DT_NONE, w_la,
       null);
    padview[105] = PadView.getInstance("DONT_CHANGE_TEXT                ", 0, 0, 0, (short)4, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_la, null);
    padview[106] = PadView.getInstance("TEXT_150                        ", 150, 0, 0, (short)4, PadView.VT_PREDICATE, 
      PadView.DT_TEXT, w_la, "LocGContextDontChangeTextText150");
    padview[107] = PadView.getInstance("LOC                             ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_la,
       null);
    padview[108] = PadView.getInstance("DONT_CHANGE_RETURN_CODES        ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_la, null);
    padview[109] = PadView.getInstance("1_OK                            ", 5, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_la, "LocDontChangeReturnCodesQ1Ok");
    padview[110] = PadView.getInstance("LOC                             ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_la,
       null);
    padview[111] = PadView.getInstance("DONT_CHANGE_REASON_CODES        ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_la, null);
    padview[112] = PadView.getInstance("1_DEFAULT                       ", 5, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_la, "LocDontChangeReasonCodesQ1Default");
    padview[113] = PadView.getInstance("LOC_MVS_STRING_HIGH_VALUE       ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_la,
       null);
    padview[114] = PadView.getInstance("IYY1_SUPPLIED                   ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_la, null);
    padview[115] = PadView.getInstance("FLAG                            ", 1, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_la, "LocMvsStringHighValueIyy1SuppliedFlag");
    padview[116] = PadView.getInstance("LOC_PC_STRING_HIGH_VALUE        ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_la,
       null);
    padview[117] = PadView.getInstance("IYY1_SUPPLIED                   ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_la, null);
    padview[118] = PadView.getInstance("FLAG                            ", 1, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_la, "LocPcStringHighValueIyy1SuppliedFlag");
    padview[119] = PadView.getInstance("******** BOTTOM OF DATA ********", 0, 0, 0, (short)0, PadView.VT_END, PadView.DT_NONE, w_la, 
      null);
  }
  public void f_173015079_rgvc()
  	throws ABException
  {
    if ( (LocGroupContext_PS_003 > 9) || (LocGroupContext_PS_003 < 1) )
    {
      globdata.getErrorData().setViewOverflowSW( ErrorData.ERROR_FOUND_SW );
      {
        throw new ABException();
      }
    }
  }
  public void f_173015162_rgvc()
  	throws ABException
  {
    if ( (LocGroupList_PS_002 > 48) || (LocGroupList_PS_002 < 1) )
    {
      globdata.getErrorData().setViewOverflowSW( ErrorData.ERROR_FOUND_SW );
      {
        throw new ABException();
      }
    }
  }
  public void f_173015043_rgvc()
  	throws ABException
  {
    if ( (ExpGroupList_PS_001 > 48) || (ExpGroupList_PS_001 < 1) )
    {
      globdata.getErrorData().setViewOverflowSW( ErrorData.ERROR_FOUND_SW );
      {
        throw new ABException();
      }
    }
  }
}// end class


package gen.ort.yyy;
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
//
//                    Source Code Generated by
//                           CA Gen 8.6
//
//    Copyright (c) 2023 CA Technologies. All rights reserved.
//
//    Name: CYYY0351_IA                      Date: 2023/07/05
//    User: HakanBal                         Time: 15:10:15
//
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// Import Statements
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
import java.lang.*;
import java.io.*;
import java.util.*;
import java.math.*;
import java.sql.*;
import com.ca.gen.vwrt.*;
import com.ca.gen.vwrt.types.*;
import com.ca.gen.vwrt.vdf.*;
import com.ca.gen.csu.exception.*;

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// START OF IMPORT VIEW
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
/**
 * Internal data view storage for: CYYY0351_IA
 **/
public class CYYY0351_IA extends ViewBase implements IImportView, Serializable
{
  // Entity View: IMP_FILTER
  //        Type: IYY1_LIST
  /**
   * Attribute missing flag for: ImpFilterIyy1ListSortOption
   **/
  public char ImpFilterIyy1ListSortOption_AS;
  /**
   * Attribute for: ImpFilterIyy1ListSortOption
   * Domain: Text
   * Length: 3
   * Varying Length: N
   **/
  public String ImpFilterIyy1ListSortOption;
  /**
   * Attribute missing flag for: ImpFilterIyy1ListScrollType
   **/
  public char ImpFilterIyy1ListScrollType_AS;
  /**
   * Attribute for: ImpFilterIyy1ListScrollType
   * Domain: Text
   * Length: 1
   * Varying Length: N
   **/
  public String ImpFilterIyy1ListScrollType;
  /**
   * Attribute missing flag for: ImpFilterIyy1ListListDirection
   **/
  public char ImpFilterIyy1ListListDirection_AS;
  /**
   * Attribute for: ImpFilterIyy1ListListDirection
   * Domain: Text
   * Length: 1
   * Varying Length: N
   **/
  public String ImpFilterIyy1ListListDirection;
  /**
   * Attribute missing flag for: ImpFilterIyy1ListScrollAmount
   **/
  public char ImpFilterIyy1ListScrollAmount_AS;
  /**
   * Attribute for: ImpFilterIyy1ListScrollAmount
   * Domain: Number
   * Length: 5
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public int ImpFilterIyy1ListScrollAmount;
  /**
   * Attribute missing flag for: ImpFilterIyy1ListOrderByFieldNum
   **/
  public char ImpFilterIyy1ListOrderByFieldNum_AS;
  /**
   * Attribute for: ImpFilterIyy1ListOrderByFieldNum
   * Domain: Number
   * Length: 1
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public short ImpFilterIyy1ListOrderByFieldNum;
  // Entity View: IMP_FROM
  //        Type: TYPE
  /**
   * Attribute missing flag for: ImpFromTypeTinstanceId
   **/
  public char ImpFromTypeTinstanceId_AS;
  /**
   * Attribute for: ImpFromTypeTinstanceId
   * Domain: Timestamp
   * Length: 20
   **/
  public String ImpFromTypeTinstanceId;
  /**
   * Attribute missing flag for: ImpFromTypeTkeyAttrText
   **/
  public char ImpFromTypeTkeyAttrText_AS;
  /**
   * Attribute for: ImpFromTypeTkeyAttrText
   * Domain: Text
   * Length: 4
   * Varying Length: N
   **/
  public String ImpFromTypeTkeyAttrText;
  /**
   * Attribute missing flag for: ImpFromTypeTsearchAttrText
   **/
  public char ImpFromTypeTsearchAttrText_AS;
  /**
   * Attribute for: ImpFromTypeTsearchAttrText
   * Domain: Text
   * Length: 20
   * Varying Length: N
   **/
  public String ImpFromTypeTsearchAttrText;
  // Entity View: IMP_FILTER_START
  //        Type: TYPE
  /**
   * Attribute missing flag for: ImpFilterStartTypeTkeyAttrText
   **/
  public char ImpFilterStartTypeTkeyAttrText_AS;
  /**
   * Attribute for: ImpFilterStartTypeTkeyAttrText
   * Domain: Text
   * Length: 4
   * Varying Length: N
   **/
  public String ImpFilterStartTypeTkeyAttrText;
  // Entity View: IMP_FILTER_STOP
  //        Type: TYPE
  /**
   * Attribute missing flag for: ImpFilterStopTypeTkeyAttrText
   **/
  public char ImpFilterStopTypeTkeyAttrText_AS;
  /**
   * Attribute for: ImpFilterStopTypeTkeyAttrText
   * Domain: Text
   * Length: 4
   * Varying Length: N
   **/
  public String ImpFilterStopTypeTkeyAttrText;
  // Entity View: IMP_FILTER
  //        Type: TYPE
  /**
   * Attribute missing flag for: ImpFilterTypeTsearchAttrText
   **/
  public char ImpFilterTypeTsearchAttrText_AS;
  /**
   * Attribute for: ImpFilterTypeTsearchAttrText
   * Domain: Text
   * Length: 20
   * Varying Length: N
   **/
  public String ImpFilterTypeTsearchAttrText;
  /**
   * Attribute missing flag for: ImpFilterTypeTotherAttrText
   **/
  public char ImpFilterTypeTotherAttrText_AS;
  /**
   * Attribute for: ImpFilterTypeTotherAttrText
   * Domain: Text
   * Length: 2
   * Varying Length: N
   **/
  public String ImpFilterTypeTotherAttrText;
  /**
   * Default Constructor
   **/
  
  public CYYY0351_IA()
  {
    reset();
  }
  /**
   * Copy Constructor
   **/
  
  public CYYY0351_IA(CYYY0351_IA orig)
  {
    copyFrom(orig);
  }
  /**
   * Static instance creator function
   **/
  
  public static CYYY0351_IA getInstance()
  {
    return new CYYY0351_IA();
  }
  /**
   * Static free instance method
   **/
  
  public void freeInstance()
  {
  }
  /**
   * clone constructor
   **/
  
  @Override public Object clone()
  	throws CloneNotSupportedException
  {
    return(new CYYY0351_IA(this));
  }
  /**
   * Resets all properties to the defaults.
   **/
  
  public void reset()
  {
    ImpFilterIyy1ListSortOption_AS = ' ';
    ImpFilterIyy1ListSortOption = "   ";
    ImpFilterIyy1ListScrollType_AS = ' ';
    ImpFilterIyy1ListScrollType = " ";
    ImpFilterIyy1ListListDirection_AS = ' ';
    ImpFilterIyy1ListListDirection = " ";
    ImpFilterIyy1ListScrollAmount_AS = ' ';
    ImpFilterIyy1ListScrollAmount = 0;
    ImpFilterIyy1ListOrderByFieldNum_AS = ' ';
    ImpFilterIyy1ListOrderByFieldNum = 0;
    ImpFromTypeTinstanceId_AS = ' ';
    ImpFromTypeTinstanceId = "00000000000000000000";
    ImpFromTypeTkeyAttrText_AS = ' ';
    ImpFromTypeTkeyAttrText = "    ";
    ImpFromTypeTsearchAttrText_AS = ' ';
    ImpFromTypeTsearchAttrText = "                    ";
    ImpFilterStartTypeTkeyAttrText_AS = ' ';
    ImpFilterStartTypeTkeyAttrText = "    ";
    ImpFilterStopTypeTkeyAttrText_AS = ' ';
    ImpFilterStopTypeTkeyAttrText = "    ";
    ImpFilterTypeTsearchAttrText_AS = ' ';
    ImpFilterTypeTsearchAttrText = "                    ";
    ImpFilterTypeTotherAttrText_AS = ' ';
    ImpFilterTypeTotherAttrText = "  ";
  }
  /**
   * Gets the VDF version of the current state of the instance.
   **/
  public VDF getVDF()
  {
    throw new RuntimeException("can only execute getVDF for a Procedure Step.");
  }
  
  /**
   * Sets the current state of the instance to the VDF version.
   **/
  public void setFromVDF(VDF vdf)
  {
    throw new RuntimeException("can only execute setFromVDF for a Procedure Step.");
  }
  
  /**
   * Sets the current instance based on the passed view.
   **/
  public void copyFrom(IImportView orig)
  {
    this.copyFrom((CYYY0351_IA) orig);
  }
  
  /**
   * Sets the current instance based on the passed view.
   **/
  public void copyFrom(CYYY0351_IA orig)
  {
    ImpFilterIyy1ListSortOption_AS = orig.ImpFilterIyy1ListSortOption_AS;
    ImpFilterIyy1ListSortOption = orig.ImpFilterIyy1ListSortOption;
    ImpFilterIyy1ListScrollType_AS = orig.ImpFilterIyy1ListScrollType_AS;
    ImpFilterIyy1ListScrollType = orig.ImpFilterIyy1ListScrollType;
    ImpFilterIyy1ListListDirection_AS = orig.ImpFilterIyy1ListListDirection_AS;
    ImpFilterIyy1ListListDirection = orig.ImpFilterIyy1ListListDirection;
    ImpFilterIyy1ListScrollAmount_AS = orig.ImpFilterIyy1ListScrollAmount_AS;
    ImpFilterIyy1ListScrollAmount = orig.ImpFilterIyy1ListScrollAmount;
    ImpFilterIyy1ListOrderByFieldNum_AS = orig.ImpFilterIyy1ListOrderByFieldNum_AS;
    ImpFilterIyy1ListOrderByFieldNum = orig.ImpFilterIyy1ListOrderByFieldNum;
    ImpFromTypeTinstanceId_AS = orig.ImpFromTypeTinstanceId_AS;
    ImpFromTypeTinstanceId = orig.ImpFromTypeTinstanceId;
    ImpFromTypeTkeyAttrText_AS = orig.ImpFromTypeTkeyAttrText_AS;
    ImpFromTypeTkeyAttrText = orig.ImpFromTypeTkeyAttrText;
    ImpFromTypeTsearchAttrText_AS = orig.ImpFromTypeTsearchAttrText_AS;
    ImpFromTypeTsearchAttrText = orig.ImpFromTypeTsearchAttrText;
    ImpFilterStartTypeTkeyAttrText_AS = orig.ImpFilterStartTypeTkeyAttrText_AS;
    ImpFilterStartTypeTkeyAttrText = orig.ImpFilterStartTypeTkeyAttrText;
    ImpFilterStopTypeTkeyAttrText_AS = orig.ImpFilterStopTypeTkeyAttrText_AS;
    ImpFilterStopTypeTkeyAttrText = orig.ImpFilterStopTypeTkeyAttrText;
    ImpFilterTypeTsearchAttrText_AS = orig.ImpFilterTypeTsearchAttrText_AS;
    ImpFilterTypeTsearchAttrText = orig.ImpFilterTypeTsearchAttrText;
    ImpFilterTypeTotherAttrText_AS = orig.ImpFilterTypeTotherAttrText_AS;
    ImpFilterTypeTotherAttrText = orig.ImpFilterTypeTotherAttrText;
  }
}

package gen.ort.yyy;
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
//
//                    Source Code Generated by
//                           CA Gen 8.6
//
//    Copyright (c) 2023 CA Technologies. All rights reserved.
//
//    Name: CYYY0351_LA                      Date: 2023/07/05
//    User: HakanBal                         Time: 15:09:32
//
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// Import Statements
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
import java.lang.*;
import java.io.*;
import java.util.*;
import java.math.*;
import java.sql.*;
import com.ca.gen.vwrt.*;
import com.ca.gen.vwrt.types.*;
import com.ca.gen.vwrt.vdf.*;
import com.ca.gen.csu.exception.*;

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// START OF LOCAL VIEW
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
/**
 * Internal data view storage for: CYYY0351_LA
 **/
public class CYYY0351_LA extends ViewBase implements ILocalView, Serializable
{
  // Entity View: LOC_FILTER
  //        Type: IYY1_LIST
  /**
   * Attribute missing flag for: LocFilterIyy1ListSortOption
   **/
  public char LocFilterIyy1ListSortOption_AS;
  /**
   * Attribute for: LocFilterIyy1ListSortOption
   * Domain: Text
   * Length: 3
   * Varying Length: N
   **/
  public String LocFilterIyy1ListSortOption;
  /**
   * Attribute missing flag for: LocFilterIyy1ListScrollType
   **/
  public char LocFilterIyy1ListScrollType_AS;
  /**
   * Attribute for: LocFilterIyy1ListScrollType
   * Domain: Text
   * Length: 1
   * Varying Length: N
   **/
  public String LocFilterIyy1ListScrollType;
  /**
   * Attribute missing flag for: LocFilterIyy1ListListDirection
   **/
  public char LocFilterIyy1ListListDirection_AS;
  /**
   * Attribute for: LocFilterIyy1ListListDirection
   * Domain: Text
   * Length: 1
   * Varying Length: N
   **/
  public String LocFilterIyy1ListListDirection;
  /**
   * Attribute missing flag for: LocFilterIyy1ListScrollAmount
   **/
  public char LocFilterIyy1ListScrollAmount_AS;
  /**
   * Attribute for: LocFilterIyy1ListScrollAmount
   * Domain: Number
   * Length: 5
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public int LocFilterIyy1ListScrollAmount;
  /**
   * Attribute missing flag for: LocFilterIyy1ListOrderByFieldNum
   **/
  public char LocFilterIyy1ListOrderByFieldNum_AS;
  /**
   * Attribute for: LocFilterIyy1ListOrderByFieldNum
   * Domain: Number
   * Length: 1
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public short LocFilterIyy1ListOrderByFieldNum;
  // Entity View: LOC_FROM
  //        Type: TYPE
  /**
   * Attribute missing flag for: LocFromTypeTinstanceId
   **/
  public char LocFromTypeTinstanceId_AS;
  /**
   * Attribute for: LocFromTypeTinstanceId
   * Domain: Timestamp
   * Length: 20
   **/
  public String LocFromTypeTinstanceId;
  /**
   * Attribute missing flag for: LocFromTypeTkeyAttrText
   **/
  public char LocFromTypeTkeyAttrText_AS;
  /**
   * Attribute for: LocFromTypeTkeyAttrText
   * Domain: Text
   * Length: 4
   * Varying Length: N
   **/
  public String LocFromTypeTkeyAttrText;
  /**
   * Attribute missing flag for: LocFromTypeTsearchAttrText
   **/
  public char LocFromTypeTsearchAttrText_AS;
  /**
   * Attribute for: LocFromTypeTsearchAttrText
   * Domain: Text
   * Length: 20
   * Varying Length: N
   **/
  public String LocFromTypeTsearchAttrText;
  // Entity View: LOC_FILTER_START
  //        Type: TYPE
  /**
   * Attribute missing flag for: LocFilterStartTypeTkeyAttrText
   **/
  public char LocFilterStartTypeTkeyAttrText_AS;
  /**
   * Attribute for: LocFilterStartTypeTkeyAttrText
   * Domain: Text
   * Length: 4
   * Varying Length: N
   **/
  public String LocFilterStartTypeTkeyAttrText;
  // Entity View: LOC_FILTER_STOP
  //        Type: TYPE
  /**
   * Attribute missing flag for: LocFilterStopTypeTkeyAttrText
   **/
  public char LocFilterStopTypeTkeyAttrText_AS;
  /**
   * Attribute for: LocFilterStopTypeTkeyAttrText
   * Domain: Text
   * Length: 4
   * Varying Length: N
   **/
  public String LocFilterStopTypeTkeyAttrText;
  // Entity View: LOC_FILTER
  //        Type: TYPE
  /**
   * Attribute missing flag for: LocFilterTypeTsearchAttrText
   **/
  public char LocFilterTypeTsearchAttrText_AS;
  /**
   * Attribute for: LocFilterTypeTsearchAttrText
   * Domain: Text
   * Length: 20
   * Varying Length: N
   **/
  public String LocFilterTypeTsearchAttrText;
  /**
   * Attribute missing flag for: LocFilterTypeTotherAttrText
   **/
  public char LocFilterTypeTotherAttrText_AS;
  /**
   * Attribute for: LocFilterTypeTotherAttrText
   * Domain: Text
   * Length: 2
   * Varying Length: N
   **/
  public String LocFilterTypeTotherAttrText;
  // Repeating GV:  LOC_GROUP_LIST
  //     Repeats: 48 times
  /**
   * Repeating group view count
   **/
  public int LocGroupList_MA;
  /**
   * Repeating group view occurrance array
   **/
  public char LocGroupList_AC[] = new char[48];
  // Entity View: LOC_G_LIST
  //        Type: TYPE
  /**
   * Attribute missing flag for: LocGListTypeTinstanceId
   **/
  public char LocGListTypeTinstanceId_AS[] = new char[48];
  /**
   * Attribute for: LocGListTypeTinstanceId
   * Domain: Timestamp
   * Length: 20
   **/
  public String LocGListTypeTinstanceId[] = new String[48];
  /**
   * Attribute missing flag for: LocGListTypeTreferenceId
   **/
  public char LocGListTypeTreferenceId_AS[] = new char[48];
  /**
   * Attribute for: LocGListTypeTreferenceId
   * Domain: Timestamp
   * Length: 20
   **/
  public String LocGListTypeTreferenceId[] = new String[48];
  /**
   * Attribute missing flag for: LocGListTypeTcreateUserId
   **/
  public char LocGListTypeTcreateUserId_AS[] = new char[48];
  /**
   * Attribute for: LocGListTypeTcreateUserId
   * Domain: Text
   * Length: 8
   * Varying Length: N
   **/
  public String LocGListTypeTcreateUserId[] = new String[48];
  /**
   * Attribute missing flag for: LocGListTypeTupdateUserId
   **/
  public char LocGListTypeTupdateUserId_AS[] = new char[48];
  /**
   * Attribute for: LocGListTypeTupdateUserId
   * Domain: Text
   * Length: 8
   * Varying Length: N
   **/
  public String LocGListTypeTupdateUserId[] = new String[48];
  /**
   * Attribute missing flag for: LocGListTypeTkeyAttrText
   **/
  public char LocGListTypeTkeyAttrText_AS[] = new char[48];
  /**
   * Attribute for: LocGListTypeTkeyAttrText
   * Domain: Text
   * Length: 4
   * Varying Length: N
   **/
  public String LocGListTypeTkeyAttrText[] = new String[48];
  /**
   * Attribute missing flag for: LocGListTypeTsearchAttrText
   **/
  public char LocGListTypeTsearchAttrText_AS[] = new char[48];
  /**
   * Attribute for: LocGListTypeTsearchAttrText
   * Domain: Text
   * Length: 20
   * Varying Length: N
   **/
  public String LocGListTypeTsearchAttrText[] = new String[48];
  /**
   * Attribute missing flag for: LocGListTypeTotherAttrText
   **/
  public char LocGListTypeTotherAttrText_AS[] = new char[48];
  /**
   * Attribute for: LocGListTypeTotherAttrText
   * Domain: Text
   * Length: 2
   * Varying Length: N
   **/
  public String LocGListTypeTotherAttrText[] = new String[48];
  /**
   * Attribute missing flag for: LocGListTypeTotherAttrDate
   **/
  public char LocGListTypeTotherAttrDate_AS[] = new char[48];
  /**
   * Attribute for: LocGListTypeTotherAttrDate
   * Domain: Date
   * Length: 8
   **/
  public int LocGListTypeTotherAttrDate[] = new int[48];
  /**
   * Attribute missing flag for: LocGListTypeTotherAttrTime
   **/
  public char LocGListTypeTotherAttrTime_AS[] = new char[48];
  /**
   * Attribute for: LocGListTypeTotherAttrTime
   * Domain: Time
   * Length: 6
   **/
  public int LocGListTypeTotherAttrTime[] = new int[48];
  /**
   * Attribute missing flag for: LocGListTypeTotherAttrAmount
   **/
  public char LocGListTypeTotherAttrAmount_AS[] = new char[48];
  /**
   * Attribute for: LocGListTypeTotherAttrAmount
   * Domain: Number
   * Length: 17
   * Decimal Places: 2
   * Decimal Precision: Y
   **/
  public BigDecimal LocGListTypeTotherAttrAmount[] = new BigDecimal[48];
  // Entity View: LOC_EMPTY
  //        Type: TYPE
  /**
   * Attribute missing flag for: LocEmptyTypeTinstanceId
   **/
  public char LocEmptyTypeTinstanceId_AS;
  /**
   * Attribute for: LocEmptyTypeTinstanceId
   * Domain: Timestamp
   * Length: 20
   **/
  public String LocEmptyTypeTinstanceId;
  /**
   * Attribute missing flag for: LocEmptyTypeTkeyAttrText
   **/
  public char LocEmptyTypeTkeyAttrText_AS;
  /**
   * Attribute for: LocEmptyTypeTkeyAttrText
   * Domain: Text
   * Length: 4
   * Varying Length: N
   **/
  public String LocEmptyTypeTkeyAttrText;
  /**
   * Attribute missing flag for: LocEmptyTypeTsearchAttrText
   **/
  public char LocEmptyTypeTsearchAttrText_AS;
  /**
   * Attribute for: LocEmptyTypeTsearchAttrText
   * Domain: Text
   * Length: 20
   * Varying Length: N
   **/
  public String LocEmptyTypeTsearchAttrText;
  // Entity View: LOC_MAX
  //        Type: TYPE
  /**
   * Attribute missing flag for: LocMaxTypeTkeyAttrText
   **/
  public char LocMaxTypeTkeyAttrText_AS;
  /**
   * Attribute for: LocMaxTypeTkeyAttrText
   * Domain: Text
   * Length: 4
   * Varying Length: N
   **/
  public String LocMaxTypeTkeyAttrText;
  /**
   * Attribute missing flag for: LocMaxTypeTsearchAttrText
   **/
  public char LocMaxTypeTsearchAttrText_AS;
  /**
   * Attribute for: LocMaxTypeTsearchAttrText
   * Domain: Text
   * Length: 20
   * Varying Length: N
   **/
  public String LocMaxTypeTsearchAttrText;
  // Entity View: LOC_READ_LB
  //        Type: IYY1_SUPPLIED
  /**
   * Attribute missing flag for: LocReadLbIyy1SuppliedTotalInteger
   **/
  public char LocReadLbIyy1SuppliedTotalInteger_AS;
  /**
   * Attribute for: LocReadLbIyy1SuppliedTotalInteger
   * Domain: Number
   * Length: 15
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public double LocReadLbIyy1SuppliedTotalInteger;
  // Entity View: LOC_ERROR
  //        Type: IYY1_COMPONENT
  /**
   * Attribute missing flag for: LocErrorIyy1ComponentSeverityCode
   **/
  public char LocErrorIyy1ComponentSeverityCode_AS;
  /**
   * Attribute for: LocErrorIyy1ComponentSeverityCode
   * Domain: Text
   * Length: 1
   * Varying Length: N
   **/
  public String LocErrorIyy1ComponentSeverityCode;
  /**
   * Attribute missing flag for: LocErrorIyy1ComponentRollbackIndicator
   **/
  public char LocErrorIyy1ComponentRollbackIndicator_AS;
  /**
   * Attribute for: LocErrorIyy1ComponentRollbackIndicator
   * Domain: Text
   * Length: 1
   * Varying Length: N
   **/
  public String LocErrorIyy1ComponentRollbackIndicator;
  /**
   * Attribute missing flag for: LocErrorIyy1ComponentOriginServid
   **/
  public char LocErrorIyy1ComponentOriginServid_AS;
  /**
   * Attribute for: LocErrorIyy1ComponentOriginServid
   * Domain: Number
   * Length: 15
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public double LocErrorIyy1ComponentOriginServid;
  /**
   * Attribute missing flag for: LocErrorIyy1ComponentContextString
   **/
  public char LocErrorIyy1ComponentContextString_AS;
  /**
   * Attribute for: LocErrorIyy1ComponentContextString
   * Domain: Text
   * Length: 512
   * Varying Length: Y
   **/
  public String LocErrorIyy1ComponentContextString;
  /**
   * Attribute missing flag for: LocErrorIyy1ComponentReturnCode
   **/
  public char LocErrorIyy1ComponentReturnCode_AS;
  /**
   * Attribute for: LocErrorIyy1ComponentReturnCode
   * Domain: Number
   * Length: 5
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public int LocErrorIyy1ComponentReturnCode;
  /**
   * Attribute missing flag for: LocErrorIyy1ComponentReasonCode
   **/
  public char LocErrorIyy1ComponentReasonCode_AS;
  /**
   * Attribute for: LocErrorIyy1ComponentReasonCode
   * Domain: Number
   * Length: 5
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public int LocErrorIyy1ComponentReasonCode;
  /**
   * Attribute missing flag for: LocErrorIyy1ComponentChecksum
   **/
  public char LocErrorIyy1ComponentChecksum_AS;
  /**
   * Attribute for: LocErrorIyy1ComponentChecksum
   * Domain: Text
   * Length: 15
   * Varying Length: N
   **/
  public String LocErrorIyy1ComponentChecksum;
  // Repeating GV:  LOC_GROUP_CONTEXT
  //     Repeats: 9 times
  /**
   * Repeating group view count
   **/
  public int LocGroupContext_MA;
  /**
   * Repeating group view occurrance array
   **/
  public char LocGroupContext_AC[] = new char[9];
  // Entity View: LOC_G_CONTEXT
  //        Type: DONT_CHANGE_TEXT
  /**
   * Attribute missing flag for: LocGContextDontChangeTextText150
   **/
  public char LocGContextDontChangeTextText150_AS[] = new char[9];
  /**
   * Attribute for: LocGContextDontChangeTextText150
   * Domain: Text
   * Length: 150
   * Varying Length: N
   **/
  public String LocGContextDontChangeTextText150[] = new String[9];
  // Entity View: LOC
  //        Type: DONT_CHANGE_RETURN_CODES
  /**
   * Attribute missing flag for: LocDontChangeReturnCodesQ1Ok
   **/
  public char LocDontChangeReturnCodesQ1Ok_AS;
  /**
   * Attribute for: LocDontChangeReturnCodesQ1Ok
   * Domain: Number
   * Length: 5
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public int LocDontChangeReturnCodesQ1Ok;
  // Entity View: LOC
  //        Type: DONT_CHANGE_REASON_CODES
  /**
   * Attribute missing flag for: LocDontChangeReasonCodesQ1Default
   **/
  public char LocDontChangeReasonCodesQ1Default_AS;
  /**
   * Attribute for: LocDontChangeReasonCodesQ1Default
   * Domain: Number
   * Length: 5
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public int LocDontChangeReasonCodesQ1Default;
  // Entity View: LOC_MVS_STRING_HIGH_VALUE
  //        Type: IYY1_SUPPLIED
  /**
   * Attribute missing flag for: LocMvsStringHighValueIyy1SuppliedFlag
   **/
  public char LocMvsStringHighValueIyy1SuppliedFlag_AS;
  /**
   * Attribute for: LocMvsStringHighValueIyy1SuppliedFlag
   * Domain: Text
   * Length: 1
   * Varying Length: N
   **/
  public String LocMvsStringHighValueIyy1SuppliedFlag;
  // Entity View: LOC_PC_STRING_HIGH_VALUE
  //        Type: IYY1_SUPPLIED
  /**
   * Attribute missing flag for: LocPcStringHighValueIyy1SuppliedFlag
   **/
  public char LocPcStringHighValueIyy1SuppliedFlag_AS;
  /**
   * Attribute for: LocPcStringHighValueIyy1SuppliedFlag
   * Domain: Text
   * Length: 1
   * Varying Length: N
   **/
  public String LocPcStringHighValueIyy1SuppliedFlag;
  /**
   * Default Constructor
   **/
  
  public CYYY0351_LA()
  {
    reset();
  }
  /**
   * Copy Constructor
   **/
  
  public CYYY0351_LA(CYYY0351_LA orig)
  {
    LocFilterIyy1ListSortOption_AS = orig.LocFilterIyy1ListSortOption_AS;
    LocFilterIyy1ListSortOption = orig.LocFilterIyy1ListSortOption;
    LocFilterIyy1ListScrollType_AS = orig.LocFilterIyy1ListScrollType_AS;
    LocFilterIyy1ListScrollType = orig.LocFilterIyy1ListScrollType;
    LocFilterIyy1ListListDirection_AS = orig.LocFilterIyy1ListListDirection_AS;
    LocFilterIyy1ListListDirection = orig.LocFilterIyy1ListListDirection;
    LocFilterIyy1ListScrollAmount_AS = orig.LocFilterIyy1ListScrollAmount_AS;
    LocFilterIyy1ListScrollAmount = orig.LocFilterIyy1ListScrollAmount;
    LocFilterIyy1ListOrderByFieldNum_AS = orig.LocFilterIyy1ListOrderByFieldNum_AS;
    LocFilterIyy1ListOrderByFieldNum = orig.LocFilterIyy1ListOrderByFieldNum;
    LocFromTypeTinstanceId_AS = orig.LocFromTypeTinstanceId_AS;
    LocFromTypeTinstanceId = orig.LocFromTypeTinstanceId;
    LocFromTypeTkeyAttrText_AS = orig.LocFromTypeTkeyAttrText_AS;
    LocFromTypeTkeyAttrText = orig.LocFromTypeTkeyAttrText;
    LocFromTypeTsearchAttrText_AS = orig.LocFromTypeTsearchAttrText_AS;
    LocFromTypeTsearchAttrText = orig.LocFromTypeTsearchAttrText;
    LocFilterStartTypeTkeyAttrText_AS = orig.LocFilterStartTypeTkeyAttrText_AS;
    LocFilterStartTypeTkeyAttrText = orig.LocFilterStartTypeTkeyAttrText;
    LocFilterStopTypeTkeyAttrText_AS = orig.LocFilterStopTypeTkeyAttrText_AS;
    LocFilterStopTypeTkeyAttrText = orig.LocFilterStopTypeTkeyAttrText;
    LocFilterTypeTsearchAttrText_AS = orig.LocFilterTypeTsearchAttrText_AS;
    LocFilterTypeTsearchAttrText = orig.LocFilterTypeTsearchAttrText;
    LocFilterTypeTotherAttrText_AS = orig.LocFilterTypeTotherAttrText_AS;
    LocFilterTypeTotherAttrText = orig.LocFilterTypeTotherAttrText;
    LocGroupList_MA = orig.LocGroupList_MA;
    System.arraycopy(orig.LocGroupList_AC, 0, LocGroupList_AC, 0, LocGroupList_AC.length);
    System.arraycopy(orig.LocGListTypeTinstanceId_AS, 0, LocGListTypeTinstanceId_AS, 0, LocGListTypeTinstanceId_AS.length);
    System.arraycopy(orig.LocGListTypeTinstanceId, 0, LocGListTypeTinstanceId, 0, LocGListTypeTinstanceId.length);
    System.arraycopy(orig.LocGListTypeTreferenceId_AS, 0, LocGListTypeTreferenceId_AS, 0, LocGListTypeTreferenceId_AS.length);
    System.arraycopy(orig.LocGListTypeTreferenceId, 0, LocGListTypeTreferenceId, 0, LocGListTypeTreferenceId.length);
    System.arraycopy(orig.LocGListTypeTcreateUserId_AS, 0, LocGListTypeTcreateUserId_AS, 0, LocGListTypeTcreateUserId_AS.length);
    System.arraycopy(orig.LocGListTypeTcreateUserId, 0, LocGListTypeTcreateUserId, 0, LocGListTypeTcreateUserId.length);
    System.arraycopy(orig.LocGListTypeTupdateUserId_AS, 0, LocGListTypeTupdateUserId_AS, 0, LocGListTypeTupdateUserId_AS.length);
    System.arraycopy(orig.LocGListTypeTupdateUserId, 0, LocGListTypeTupdateUserId, 0, LocGListTypeTupdateUserId.length);
    System.arraycopy(orig.LocGListTypeTkeyAttrText_AS, 0, LocGListTypeTkeyAttrText_AS, 0, LocGListTypeTkeyAttrText_AS.length);
    System.arraycopy(orig.LocGListTypeTkeyAttrText, 0, LocGListTypeTkeyAttrText, 0, LocGListTypeTkeyAttrText.length);
    System.arraycopy(orig.LocGListTypeTsearchAttrText_AS, 0, LocGListTypeTsearchAttrText_AS, 0, 
      LocGListTypeTsearchAttrText_AS.length);
    System.arraycopy(orig.LocGListTypeTsearchAttrText, 0, LocGListTypeTsearchAttrText, 0, LocGListTypeTsearchAttrText.length);
    System.arraycopy(orig.LocGListTypeTotherAttrText_AS, 0, LocGListTypeTotherAttrText_AS, 0, LocGListTypeTotherAttrText_AS.length);
    System.arraycopy(orig.LocGListTypeTotherAttrText, 0, LocGListTypeTotherAttrText, 0, LocGListTypeTotherAttrText.length);
    System.arraycopy(orig.LocGListTypeTotherAttrDate_AS, 0, LocGListTypeTotherAttrDate_AS, 0, LocGListTypeTotherAttrDate_AS.length);
    System.arraycopy(orig.LocGListTypeTotherAttrDate, 0, LocGListTypeTotherAttrDate, 0, LocGListTypeTotherAttrDate.length);
    System.arraycopy(orig.LocGListTypeTotherAttrTime_AS, 0, LocGListTypeTotherAttrTime_AS, 0, LocGListTypeTotherAttrTime_AS.length);
    System.arraycopy(orig.LocGListTypeTotherAttrTime, 0, LocGListTypeTotherAttrTime, 0, LocGListTypeTotherAttrTime.length);
    System.arraycopy(orig.LocGListTypeTotherAttrAmount_AS, 0, LocGListTypeTotherAttrAmount_AS, 0, 
      LocGListTypeTotherAttrAmount_AS.length);
    System.arraycopy(orig.LocGListTypeTotherAttrAmount, 0, LocGListTypeTotherAttrAmount, 0, LocGListTypeTotherAttrAmount.length);
    LocEmptyTypeTinstanceId_AS = orig.LocEmptyTypeTinstanceId_AS;
    LocEmptyTypeTinstanceId = orig.LocEmptyTypeTinstanceId;
    LocEmptyTypeTkeyAttrText_AS = orig.LocEmptyTypeTkeyAttrText_AS;
    LocEmptyTypeTkeyAttrText = orig.LocEmptyTypeTkeyAttrText;
    LocEmptyTypeTsearchAttrText_AS = orig.LocEmptyTypeTsearchAttrText_AS;
    LocEmptyTypeTsearchAttrText = orig.LocEmptyTypeTsearchAttrText;
    LocMaxTypeTkeyAttrText_AS = orig.LocMaxTypeTkeyAttrText_AS;
    LocMaxTypeTkeyAttrText = orig.LocMaxTypeTkeyAttrText;
    LocMaxTypeTsearchAttrText_AS = orig.LocMaxTypeTsearchAttrText_AS;
    LocMaxTypeTsearchAttrText = orig.LocMaxTypeTsearchAttrText;
    LocReadLbIyy1SuppliedTotalInteger_AS = orig.LocReadLbIyy1SuppliedTotalInteger_AS;
    LocReadLbIyy1SuppliedTotalInteger = orig.LocReadLbIyy1SuppliedTotalInteger;
    LocErrorIyy1ComponentSeverityCode_AS = orig.LocErrorIyy1ComponentSeverityCode_AS;
    LocErrorIyy1ComponentSeverityCode = orig.LocErrorIyy1ComponentSeverityCode;
    LocErrorIyy1ComponentRollbackIndicator_AS = orig.LocErrorIyy1ComponentRollbackIndicator_AS;
    LocErrorIyy1ComponentRollbackIndicator = orig.LocErrorIyy1ComponentRollbackIndicator;
    LocErrorIyy1ComponentOriginServid_AS = orig.LocErrorIyy1ComponentOriginServid_AS;
    LocErrorIyy1ComponentOriginServid = orig.LocErrorIyy1ComponentOriginServid;
    LocErrorIyy1ComponentContextString_AS = orig.LocErrorIyy1ComponentContextString_AS;
    LocErrorIyy1ComponentContextString = orig.LocErrorIyy1ComponentContextString;
    LocErrorIyy1ComponentReturnCode_AS = orig.LocErrorIyy1ComponentReturnCode_AS;
    LocErrorIyy1ComponentReturnCode = orig.LocErrorIyy1ComponentReturnCode;
    LocErrorIyy1ComponentReasonCode_AS = orig.LocErrorIyy1ComponentReasonCode_AS;
    LocErrorIyy1ComponentReasonCode = orig.LocErrorIyy1ComponentReasonCode;
    LocErrorIyy1ComponentChecksum_AS = orig.LocErrorIyy1ComponentChecksum_AS;
    LocErrorIyy1ComponentChecksum = orig.LocErrorIyy1ComponentChecksum;
    LocGroupContext_MA = orig.LocGroupContext_MA;
    System.arraycopy(orig.LocGroupContext_AC, 0, LocGroupContext_AC, 0, LocGroupContext_AC.length);
    System.arraycopy(orig.LocGContextDontChangeTextText150_AS, 0, LocGContextDontChangeTextText150_AS, 0, 
      LocGContextDontChangeTextText150_AS.length);
    System.arraycopy(orig.LocGContextDontChangeTextText150, 0, LocGContextDontChangeTextText150, 0, 
      LocGContextDontChangeTextText150.length);
    LocDontChangeReturnCodesQ1Ok_AS = orig.LocDontChangeReturnCodesQ1Ok_AS;
    LocDontChangeReturnCodesQ1Ok = orig.LocDontChangeReturnCodesQ1Ok;
    LocDontChangeReasonCodesQ1Default_AS = orig.LocDontChangeReasonCodesQ1Default_AS;
    LocDontChangeReasonCodesQ1Default = orig.LocDontChangeReasonCodesQ1Default;
    LocMvsStringHighValueIyy1SuppliedFlag_AS = orig.LocMvsStringHighValueIyy1SuppliedFlag_AS;
    LocMvsStringHighValueIyy1SuppliedFlag = orig.LocMvsStringHighValueIyy1SuppliedFlag;
    LocPcStringHighValueIyy1SuppliedFlag_AS = orig.LocPcStringHighValueIyy1SuppliedFlag_AS;
    LocPcStringHighValueIyy1SuppliedFlag = orig.LocPcStringHighValueIyy1SuppliedFlag;
  }
  /**
   * Static instance creator function
   **/
  
  public static CYYY0351_LA getInstance()
  {
    return new CYYY0351_LA();
  }
  /**
   * Static free instance method
   **/
  
  public void freeInstance()
  {
  }
  /**
   * clone constructor
   **/
  
  @Override public Object clone()
  	throws CloneNotSupportedException
  {
    return(new CYYY0351_LA(this));
  }
  /**
   * Resets all properties to the defaults.
   **/
  
  public void reset()
  {
    LocFilterIyy1ListSortOption_AS = ' ';
    LocFilterIyy1ListSortOption = "   ";
    LocFilterIyy1ListScrollType_AS = ' ';
    LocFilterIyy1ListScrollType = " ";
    LocFilterIyy1ListListDirection_AS = ' ';
    LocFilterIyy1ListListDirection = " ";
    LocFilterIyy1ListScrollAmount_AS = ' ';
    LocFilterIyy1ListScrollAmount = 0;
    LocFilterIyy1ListOrderByFieldNum_AS = ' ';
    LocFilterIyy1ListOrderByFieldNum = 0;
    LocFromTypeTinstanceId_AS = ' ';
    LocFromTypeTinstanceId = "00000000000000000000";
    LocFromTypeTkeyAttrText_AS = ' ';
    LocFromTypeTkeyAttrText = "    ";
    LocFromTypeTsearchAttrText_AS = ' ';
    LocFromTypeTsearchAttrText = "                    ";
    LocFilterStartTypeTkeyAttrText_AS = ' ';
    LocFilterStartTypeTkeyAttrText = "    ";
    LocFilterStopTypeTkeyAttrText_AS = ' ';
    LocFilterStopTypeTkeyAttrText = "    ";
    LocFilterTypeTsearchAttrText_AS = ' ';
    LocFilterTypeTsearchAttrText = "                    ";
    LocFilterTypeTotherAttrText_AS = ' ';
    LocFilterTypeTotherAttrText = "  ";
    LocGroupList_MA = 0;
    for(int a = 0; a < 48; a++)
    {
      LocGroupList_AC[a] = ' ';
      LocGListTypeTinstanceId_AS[a] = ' ';
      LocGListTypeTinstanceId[a] = "00000000000000000000";
      LocGListTypeTreferenceId_AS[a] = ' ';
      LocGListTypeTreferenceId[a] = "00000000000000000000";
      LocGListTypeTcreateUserId_AS[a] = ' ';
      LocGListTypeTcreateUserId[a] = "        ";
      LocGListTypeTupdateUserId_AS[a] = ' ';
      LocGListTypeTupdateUserId[a] = "        ";
      LocGListTypeTkeyAttrText_AS[a] = ' ';
      LocGListTypeTkeyAttrText[a] = "    ";
      LocGListTypeTsearchAttrText_AS[a] = ' ';
      LocGListTypeTsearchAttrText[a] = "                    ";
      LocGListTypeTotherAttrText_AS[a] = ' ';
      LocGListTypeTotherAttrText[a] = "  ";
      LocGListTypeTotherAttrDate_AS[a] = ' ';
      LocGListTypeTotherAttrDate[a] = 00000000;
      LocGListTypeTotherAttrTime_AS[a] = ' ';
      LocGListTypeTotherAttrTime[a] = 00000000;
      LocGListTypeTotherAttrAmount_AS[a] = ' ';
      LocGListTypeTotherAttrAmount[a] = BigDecimalAttr.getDefaultValue();
    }
    LocEmptyTypeTinstanceId_AS = ' ';
    LocEmptyTypeTinstanceId = "00000000000000000000";
    LocEmptyTypeTkeyAttrText_AS = ' ';
    LocEmptyTypeTkeyAttrText = "    ";
    LocEmptyTypeTsearchAttrText_AS = ' ';
    LocEmptyTypeTsearchAttrText = "                    ";
    LocMaxTypeTkeyAttrText_AS = ' ';
    LocMaxTypeTkeyAttrText = "    ";
    LocMaxTypeTsearchAttrText_AS = ' ';
    LocMaxTypeTsearchAttrText = "                    ";
    LocReadLbIyy1SuppliedTotalInteger_AS = ' ';
    LocReadLbIyy1SuppliedTotalInteger = 0.0;
    LocErrorIyy1ComponentSeverityCode_AS = ' ';
    LocErrorIyy1ComponentSeverityCode = " ";
    LocErrorIyy1ComponentRollbackIndicator_AS = ' ';
    LocErrorIyy1ComponentRollbackIndicator = " ";
    LocErrorIyy1ComponentOriginServid_AS = ' ';
    LocErrorIyy1ComponentOriginServid = 0.0;
    LocErrorIyy1ComponentContextString_AS = ' ';
    LocErrorIyy1ComponentContextString = "";
    LocErrorIyy1ComponentReturnCode_AS = ' ';
    LocErrorIyy1ComponentReturnCode = 0;
    LocErrorIyy1ComponentReasonCode_AS = ' ';
    LocErrorIyy1ComponentReasonCode = 0;
    LocErrorIyy1ComponentChecksum_AS = ' ';
    LocErrorIyy1ComponentChecksum = "               ";
    LocGroupContext_MA = 0;
    for(int a = 0; a < 9; a++)
    {
      LocGroupContext_AC[a] = ' ';
      LocGContextDontChangeTextText150_AS[a] = ' ';
      LocGContextDontChangeTextText150[a] = 
"                                                                                                                                                      "
        ;
    }
    LocDontChangeReturnCodesQ1Ok_AS = ' ';
    LocDontChangeReturnCodesQ1Ok = 0;
    LocDontChangeReasonCodesQ1Default_AS = ' ';
    LocDontChangeReasonCodesQ1Default = 0;
    LocMvsStringHighValueIyy1SuppliedFlag_AS = ' ';
    LocMvsStringHighValueIyy1SuppliedFlag = " ";
    LocPcStringHighValueIyy1SuppliedFlag_AS = ' ';
    LocPcStringHighValueIyy1SuppliedFlag = " ";
  }
}

package gen.ort.yyy;
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
//
//                    Source Code Generated by
//                           CA Gen 8.6
//
//    Copyright (c) 2023 CA Technologies. All rights reserved.
//
//    Name: CYYY0351_OA                      Date: 2023/07/05
//    User: HakanBal                         Time: 15:10:15
//
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// Import Statements
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
import java.lang.*;
import java.io.*;
import java.util.*;
import java.math.*;
import java.sql.*;
import com.ca.gen.vwrt.*;
import com.ca.gen.vwrt.types.*;
import com.ca.gen.vwrt.vdf.*;
import com.ca.gen.csu.exception.*;

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// START OF EXPORT VIEW
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
/**
 * Internal data view storage for: CYYY0351_OA
 **/
public class CYYY0351_OA extends ViewBase implements IExportView, Serializable
{
  // Repeating GV:  EXP_GROUP_LIST
  //     Repeats: 48 times
  /**
   * Repeating group view count
   **/
  public int ExpGroupList_MA;
  /**
   * Repeating group view occurrance array
   **/
  public char ExpGroupList_AC[] = new char[48];
  // Entity View: EXP_G_LIST
  //        Type: TYPE
  /**
   * Attribute missing flag for: ExpGListTypeTinstanceId
   **/
  public char ExpGListTypeTinstanceId_AS[] = new char[48];
  /**
   * Attribute for: ExpGListTypeTinstanceId
   * Domain: Timestamp
   * Length: 20
   **/
  public String ExpGListTypeTinstanceId[] = new String[48];
  /**
   * Attribute missing flag for: ExpGListTypeTreferenceId
   **/
  public char ExpGListTypeTreferenceId_AS[] = new char[48];
  /**
   * Attribute for: ExpGListTypeTreferenceId
   * Domain: Timestamp
   * Length: 20
   **/
  public String ExpGListTypeTreferenceId[] = new String[48];
  /**
   * Attribute missing flag for: ExpGListTypeTcreateUserId
   **/
  public char ExpGListTypeTcreateUserId_AS[] = new char[48];
  /**
   * Attribute for: ExpGListTypeTcreateUserId
   * Domain: Text
   * Length: 8
   * Varying Length: N
   **/
  public String ExpGListTypeTcreateUserId[] = new String[48];
  /**
   * Attribute missing flag for: ExpGListTypeTupdateUserId
   **/
  public char ExpGListTypeTupdateUserId_AS[] = new char[48];
  /**
   * Attribute for: ExpGListTypeTupdateUserId
   * Domain: Text
   * Length: 8
   * Varying Length: N
   **/
  public String ExpGListTypeTupdateUserId[] = new String[48];
  /**
   * Attribute missing flag for: ExpGListTypeTkeyAttrText
   **/
  public char ExpGListTypeTkeyAttrText_AS[] = new char[48];
  /**
   * Attribute for: ExpGListTypeTkeyAttrText
   * Domain: Text
   * Length: 4
   * Varying Length: N
   **/
  public String ExpGListTypeTkeyAttrText[] = new String[48];
  /**
   * Attribute missing flag for: ExpGListTypeTsearchAttrText
   **/
  public char ExpGListTypeTsearchAttrText_AS[] = new char[48];
  /**
   * Attribute for: ExpGListTypeTsearchAttrText
   * Domain: Text
   * Length: 20
   * Varying Length: N
   **/
  public String ExpGListTypeTsearchAttrText[] = new String[48];
  /**
   * Attribute missing flag for: ExpGListTypeTotherAttrText
   **/
  public char ExpGListTypeTotherAttrText_AS[] = new char[48];
  /**
   * Attribute for: ExpGListTypeTotherAttrText
   * Domain: Text
   * Length: 2
   * Varying Length: N
   **/
  public String ExpGListTypeTotherAttrText[] = new String[48];
  /**
   * Attribute missing flag for: ExpGListTypeTotherAttrDate
   **/
  public char ExpGListTypeTotherAttrDate_AS[] = new char[48];
  /**
   * Attribute for: ExpGListTypeTotherAttrDate
   * Domain: Date
   * Length: 8
   **/
  public int ExpGListTypeTotherAttrDate[] = new int[48];
  /**
   * Attribute missing flag for: ExpGListTypeTotherAttrTime
   **/
  public char ExpGListTypeTotherAttrTime_AS[] = new char[48];
  /**
   * Attribute for: ExpGListTypeTotherAttrTime
   * Domain: Time
   * Length: 6
   **/
  public int ExpGListTypeTotherAttrTime[] = new int[48];
  /**
   * Attribute missing flag for: ExpGListTypeTotherAttrAmount
   **/
  public char ExpGListTypeTotherAttrAmount_AS[] = new char[48];
  /**
   * Attribute for: ExpGListTypeTotherAttrAmount
   * Domain: Number
   * Length: 17
   * Decimal Places: 2
   * Decimal Precision: Y
   **/
  public BigDecimal ExpGListTypeTotherAttrAmount[] = new BigDecimal[48];
  // Entity View: EXP_ERROR
  //        Type: IYY1_COMPONENT
  /**
   * Attribute missing flag for: ExpErrorIyy1ComponentSeverityCode
   **/
  public char ExpErrorIyy1ComponentSeverityCode_AS;
  /**
   * Attribute for: ExpErrorIyy1ComponentSeverityCode
   * Domain: Text
   * Length: 1
   * Varying Length: N
   **/
  public String ExpErrorIyy1ComponentSeverityCode;
  /**
   * Attribute missing flag for: ExpErrorIyy1ComponentRollbackIndicator
   **/
  public char ExpErrorIyy1ComponentRollbackIndicator_AS;
  /**
   * Attribute for: ExpErrorIyy1ComponentRollbackIndicator
   * Domain: Text
   * Length: 1
   * Varying Length: N
   **/
  public String ExpErrorIyy1ComponentRollbackIndicator;
  /**
   * Attribute missing flag for: ExpErrorIyy1ComponentOriginServid
   **/
  public char ExpErrorIyy1ComponentOriginServid_AS;
  /**
   * Attribute for: ExpErrorIyy1ComponentOriginServid
   * Domain: Number
   * Length: 15
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public double ExpErrorIyy1ComponentOriginServid;
  /**
   * Attribute missing flag for: ExpErrorIyy1ComponentContextString
   **/
  public char ExpErrorIyy1ComponentContextString_AS;
  /**
   * Attribute for: ExpErrorIyy1ComponentContextString
   * Domain: Text
   * Length: 512
   * Varying Length: Y
   **/
  public String ExpErrorIyy1ComponentContextString;
  /**
   * Attribute missing flag for: ExpErrorIyy1ComponentReturnCode
   **/
  public char ExpErrorIyy1ComponentReturnCode_AS;
  /**
   * Attribute for: ExpErrorIyy1ComponentReturnCode
   * Domain: Number
   * Length: 5
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public int ExpErrorIyy1ComponentReturnCode;
  /**
   * Attribute missing flag for: ExpErrorIyy1ComponentReasonCode
   **/
  public char ExpErrorIyy1ComponentReasonCode_AS;
  /**
   * Attribute for: ExpErrorIyy1ComponentReasonCode
   * Domain: Number
   * Length: 5
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public int ExpErrorIyy1ComponentReasonCode;
  /**
   * Attribute missing flag for: ExpErrorIyy1ComponentChecksum
   **/
  public char ExpErrorIyy1ComponentChecksum_AS;
  /**
   * Attribute for: ExpErrorIyy1ComponentChecksum
   * Domain: Text
   * Length: 15
   * Varying Length: N
   **/
  public String ExpErrorIyy1ComponentChecksum;
  /**
   * Default Constructor
   **/
  
  public CYYY0351_OA()
  {
    reset();
  }
  /**
   * Copy Constructor
   **/
  
  public CYYY0351_OA(CYYY0351_OA orig)
  {
    copyFrom(orig);
  }
  /**
   * Static instance creator function
   **/
  
  public static CYYY0351_OA getInstance()
  {
    return new CYYY0351_OA();
  }
  /**
   * Static free instance method
   **/
  
  public void freeInstance()
  {
  }
  /**
   * clone constructor
   **/
  
  @Override public Object clone()
  	throws CloneNotSupportedException
  {
    return(new CYYY0351_OA(this));
  }
  /**
   * Resets all properties to the defaults.
   **/
  
  public void reset()
  {
    ExpGroupList_MA = 0;
    for(int a = 0; a < 48; a++)
    {
      ExpGroupList_AC[a] = ' ';
      ExpGListTypeTinstanceId_AS[a] = ' ';
      ExpGListTypeTinstanceId[a] = "00000000000000000000";
      ExpGListTypeTreferenceId_AS[a] = ' ';
      ExpGListTypeTreferenceId[a] = "00000000000000000000";
      ExpGListTypeTcreateUserId_AS[a] = ' ';
      ExpGListTypeTcreateUserId[a] = "        ";
      ExpGListTypeTupdateUserId_AS[a] = ' ';
      ExpGListTypeTupdateUserId[a] = "        ";
      ExpGListTypeTkeyAttrText_AS[a] = ' ';
      ExpGListTypeTkeyAttrText[a] = "    ";
      ExpGListTypeTsearchAttrText_AS[a] = ' ';
      ExpGListTypeTsearchAttrText[a] = "                    ";
      ExpGListTypeTotherAttrText_AS[a] = ' ';
      ExpGListTypeTotherAttrText[a] = "  ";
      ExpGListTypeTotherAttrDate_AS[a] = ' ';
      ExpGListTypeTotherAttrDate[a] = 00000000;
      ExpGListTypeTotherAttrTime_AS[a] = ' ';
      ExpGListTypeTotherAttrTime[a] = 00000000;
      ExpGListTypeTotherAttrAmount_AS[a] = ' ';
      ExpGListTypeTotherAttrAmount[a] = BigDecimalAttr.getDefaultValue();
    }
    ExpErrorIyy1ComponentSeverityCode_AS = ' ';
    ExpErrorIyy1ComponentSeverityCode = " ";
    ExpErrorIyy1ComponentRollbackIndicator_AS = ' ';
    ExpErrorIyy1ComponentRollbackIndicator = " ";
    ExpErrorIyy1ComponentOriginServid_AS = ' ';
    ExpErrorIyy1ComponentOriginServid = 0.0;
    ExpErrorIyy1ComponentContextString_AS = ' ';
    ExpErrorIyy1ComponentContextString = "";
    ExpErrorIyy1ComponentReturnCode_AS = ' ';
    ExpErrorIyy1ComponentReturnCode = 0;
    ExpErrorIyy1ComponentReasonCode_AS = ' ';
    ExpErrorIyy1ComponentReasonCode = 0;
    ExpErrorIyy1ComponentChecksum_AS = ' ';
    ExpErrorIyy1ComponentChecksum = "               ";
  }
  /**
   * Sets the current state of the instance to the VDF version.
   **/
  public void setFromVDF(VDF vdf)
  {
    throw new RuntimeException("can only execute setFromVDF for a Procedure Step.");
  }
  
  /**
   * Gets the VDF version of the current state of the instance.
   **/
  public VDF getVDF()
  {
    throw new RuntimeException("can only execute getVDF for a Procedure Step.");
  }
  
  /**
   * Sets the current instance based on the passed view.
   **/
  public void copyFrom(IExportView orig)
  {
    this.copyFrom((CYYY0351_OA) orig);
  }
  
  /**
   * Sets the current instance based on the passed view.
   **/
  public void copyFrom(CYYY0351_OA orig)
  {
    ExpGroupList_MA = orig.ExpGroupList_MA;
    for(int a = 0; a < 48; a++)
    {
      ExpGroupList_AC[a] = orig.ExpGroupList_AC[a];
      ExpGListTypeTinstanceId_AS[a] = orig.ExpGListTypeTinstanceId_AS[a];
      ExpGListTypeTinstanceId[a] = orig.ExpGListTypeTinstanceId[a];
      ExpGListTypeTreferenceId_AS[a] = orig.ExpGListTypeTreferenceId_AS[a];
      ExpGListTypeTreferenceId[a] = orig.ExpGListTypeTreferenceId[a];
      ExpGListTypeTcreateUserId_AS[a] = orig.ExpGListTypeTcreateUserId_AS[a];
      ExpGListTypeTcreateUserId[a] = orig.ExpGListTypeTcreateUserId[a];
      ExpGListTypeTupdateUserId_AS[a] = orig.ExpGListTypeTupdateUserId_AS[a];
      ExpGListTypeTupdateUserId[a] = orig.ExpGListTypeTupdateUserId[a];
      ExpGListTypeTkeyAttrText_AS[a] = orig.ExpGListTypeTkeyAttrText_AS[a];
      ExpGListTypeTkeyAttrText[a] = orig.ExpGListTypeTkeyAttrText[a];
      ExpGListTypeTsearchAttrText_AS[a] = orig.ExpGListTypeTsearchAttrText_AS[a];
      ExpGListTypeTsearchAttrText[a] = orig.ExpGListTypeTsearchAttrText[a];
      ExpGListTypeTotherAttrText_AS[a] = orig.ExpGListTypeTotherAttrText_AS[a];
      ExpGListTypeTotherAttrText[a] = orig.ExpGListTypeTotherAttrText[a];
      ExpGListTypeTotherAttrDate_AS[a] = orig.ExpGListTypeTotherAttrDate_AS[a];
      ExpGListTypeTotherAttrDate[a] = orig.ExpGListTypeTotherAttrDate[a];
      ExpGListTypeTotherAttrTime_AS[a] = orig.ExpGListTypeTotherAttrTime_AS[a];
      ExpGListTypeTotherAttrTime[a] = orig.ExpGListTypeTotherAttrTime[a];
      ExpGListTypeTotherAttrAmount_AS[a] = orig.ExpGListTypeTotherAttrAmount_AS[a];
      ExpGListTypeTotherAttrAmount[a] = orig.ExpGListTypeTotherAttrAmount[a];
    }
    ExpErrorIyy1ComponentSeverityCode_AS = orig.ExpErrorIyy1ComponentSeverityCode_AS;
    ExpErrorIyy1ComponentSeverityCode = orig.ExpErrorIyy1ComponentSeverityCode;
    ExpErrorIyy1ComponentRollbackIndicator_AS = orig.ExpErrorIyy1ComponentRollbackIndicator_AS;
    ExpErrorIyy1ComponentRollbackIndicator = orig.ExpErrorIyy1ComponentRollbackIndicator;
    ExpErrorIyy1ComponentOriginServid_AS = orig.ExpErrorIyy1ComponentOriginServid_AS;
    ExpErrorIyy1ComponentOriginServid = orig.ExpErrorIyy1ComponentOriginServid;
    ExpErrorIyy1ComponentContextString_AS = orig.ExpErrorIyy1ComponentContextString_AS;
    ExpErrorIyy1ComponentContextString = orig.ExpErrorIyy1ComponentContextString;
    ExpErrorIyy1ComponentReturnCode_AS = orig.ExpErrorIyy1ComponentReturnCode_AS;
    ExpErrorIyy1ComponentReturnCode = orig.ExpErrorIyy1ComponentReturnCode;
    ExpErrorIyy1ComponentReasonCode_AS = orig.ExpErrorIyy1ComponentReasonCode_AS;
    ExpErrorIyy1ComponentReasonCode = orig.ExpErrorIyy1ComponentReasonCode;
    ExpErrorIyy1ComponentChecksum_AS = orig.ExpErrorIyy1ComponentChecksum_AS;
    ExpErrorIyy1ComponentChecksum = orig.ExpErrorIyy1ComponentChecksum;
  }
}
