
package gen.ort.yyy;

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
//
//                    Source Code Generated by
//                           CA Gen 8.6
//
//    Copyright (c) 2023 CA Technologies. All rights reserved.
//
//    Name: DYYY0351_TYPE_LIST               Date: 2023/07/05
//    Target OS:   JVM                       Time: 15:09:34
//    Target DBMS: JDBC                      User: HakanBal
//    Access Method: JDBC           
//
//    Generation options:
//    Debug trace option selected
//    Data modeling constraint enforcement not selected
//    Optimized import view initialization not selected
//    Enforce default values with DBMS not selected
//    Init unspecified optional fields to NULL not selected
//
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// Import Statements
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
import java.lang.*;
import java.io.*;
import java.util.*;
import java.math.*;
import java.sql.*;
import com.ca.gen.vwrt.*;
import com.ca.gen.vwrt.types.*;
import com.ca.gen.vwrt.vdf.*;

import com.ca.gen.abrt.*;
import com.ca.gen.abrt.functions.*;
import com.ca.gen.abrt.cascade.*;
import com.ca.gen.abrt.trace.*;
import com.ca.gen.exits.common.*;
import com.ca.gen.odc.*;

public class DYYY0351 extends ABBase
{
  // * * * * * * * * * * * * * * * * * * *
  // ENTITY ACTION STATEMENT STATUS FLAGS 
  // ENTITY VIEW STATUS FLAGS AND         
  // LAST COMMAND FOR EACH ENTITY VIEW    
  // * * * * * * * * * * * * * * * * * * *
  String sl_29360142 = ErrorData.NONE_FL_LS;
  String sl_29360130 = ErrorData.NONE_FL_LS;
  String sl_29360150 = ErrorData.NONE_FL_LS;
  String sl_29360134 = ErrorData.NONE_FL_LS;
  String Type_es;
  String Type_001cd;
  String Type_lk;
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // IMPORT VIEW CLASS VARIABLE
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  DYYY0351_IA w_ia;
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // EXPORT VIEW CLASS VARIABLE
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  DYYY0351_OA w_oa;
  
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // START OF ENTITY ACTION VIEW
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  /**
   * Internal data view storage for: DYYY0351_EA
   **/
  public class DYYY0351_EA extends ViewBase implements IEntityActionView, Serializable
  {
    // Entity View: 
    //        Type: TYPE
    /**
     * Attribute missing flag for: TypeTinstanceId
     **/
    public char TypeTinstanceId_AS;
    /**
     * Attribute for: TypeTinstanceId
     * Domain: Timestamp
     * Length: 20
     **/
    public String TypeTinstanceId;
    /**
     * Attribute missing flag for: TypeTreferenceId
     **/
    public char TypeTreferenceId_AS;
    /**
     * Attribute for: TypeTreferenceId
     * Domain: Timestamp
     * Length: 20
     **/
    public String TypeTreferenceId;
    /**
     * Attribute missing flag for: TypeTcreateUserId
     **/
    public char TypeTcreateUserId_AS;
    /**
     * Attribute for: TypeTcreateUserId
     * Domain: Text
     * Length: 8
     * Varying Length: N
     **/
    public String TypeTcreateUserId;
    /**
     * Attribute missing flag for: TypeTupdateUserId
     **/
    public char TypeTupdateUserId_AS;
    /**
     * Attribute for: TypeTupdateUserId
     * Domain: Text
     * Length: 8
     * Varying Length: N
     **/
    public String TypeTupdateUserId;
    /**
     * Attribute missing flag for: TypeTkeyAttrText
     **/
    public char TypeTkeyAttrText_AS;
    /**
     * Attribute for: TypeTkeyAttrText
     * Domain: Text
     * Length: 4
     * Varying Length: N
     **/
    public String TypeTkeyAttrText;
    /**
     * Attribute missing flag for: TypeTsearchAttrText
     **/
    public char TypeTsearchAttrText_AS;
    /**
     * Attribute for: TypeTsearchAttrText
     * Domain: Text
     * Length: 20
     * Varying Length: N
     **/
    public String TypeTsearchAttrText;
    /**
     * Attribute missing flag for: TypeTotherAttrText
     **/
    public char TypeTotherAttrText_AS;
    /**
     * Attribute for: TypeTotherAttrText
     * Domain: Text
     * Length: 2
     * Varying Length: N
     **/
    public String TypeTotherAttrText;
    /**
     * Attribute missing flag for: TypeTotherAttrDate
     **/
    public char TypeTotherAttrDate_AS;
    /**
     * Attribute for: TypeTotherAttrDate
     * Domain: Date
     * Length: 8
     **/
    public int TypeTotherAttrDate;
    /**
     * Attribute missing flag for: TypeTotherAttrTime
     **/
    public char TypeTotherAttrTime_AS;
    /**
     * Attribute for: TypeTotherAttrTime
     * Domain: Time
     * Length: 6
     **/
    public int TypeTotherAttrTime;
    /**
     * Attribute missing flag for: TypeTotherAttrAmount
     **/
    public char TypeTotherAttrAmount_AS;
    /**
     * Attribute for: TypeTotherAttrAmount
     * Domain: Number
     * Length: 17
     * Decimal Places: 2
     * Decimal Precision: Y
     **/
    public BigDecimal TypeTotherAttrAmount;
    /**
     * Default Constructor
     **/
    
    public DYYY0351_EA()
    {
      reset();
    }
    /**
     * Copy Constructor
     **/
    
    public DYYY0351_EA(DYYY0351_EA orig)
    {
      TypeTinstanceId_AS = orig.TypeTinstanceId_AS;
      TypeTinstanceId = orig.TypeTinstanceId;
      TypeTreferenceId_AS = orig.TypeTreferenceId_AS;
      TypeTreferenceId = orig.TypeTreferenceId;
      TypeTcreateUserId_AS = orig.TypeTcreateUserId_AS;
      TypeTcreateUserId = orig.TypeTcreateUserId;
      TypeTupdateUserId_AS = orig.TypeTupdateUserId_AS;
      TypeTupdateUserId = orig.TypeTupdateUserId;
      TypeTkeyAttrText_AS = orig.TypeTkeyAttrText_AS;
      TypeTkeyAttrText = orig.TypeTkeyAttrText;
      TypeTsearchAttrText_AS = orig.TypeTsearchAttrText_AS;
      TypeTsearchAttrText = orig.TypeTsearchAttrText;
      TypeTotherAttrText_AS = orig.TypeTotherAttrText_AS;
      TypeTotherAttrText = orig.TypeTotherAttrText;
      TypeTotherAttrDate_AS = orig.TypeTotherAttrDate_AS;
      TypeTotherAttrDate = orig.TypeTotherAttrDate;
      TypeTotherAttrTime_AS = orig.TypeTotherAttrTime_AS;
      TypeTotherAttrTime = orig.TypeTotherAttrTime;
      TypeTotherAttrAmount_AS = orig.TypeTotherAttrAmount_AS;
      TypeTotherAttrAmount = orig.TypeTotherAttrAmount;
    }
    /**
     * clone constructor
     **/
    
    @Override public Object clone()
    	throws CloneNotSupportedException
    {
      return(new DYYY0351_EA(this));
    }
    /**
     * Resets all properties to the defaults.
     **/
    
    public void reset()
    {
      TypeTinstanceId_AS = ' ';
      TypeTinstanceId = "00000000000000000000";
      TypeTreferenceId_AS = ' ';
      TypeTreferenceId = "00000000000000000000";
      TypeTcreateUserId_AS = ' ';
      TypeTcreateUserId = "        ";
      TypeTupdateUserId_AS = ' ';
      TypeTupdateUserId = "        ";
      TypeTkeyAttrText_AS = ' ';
      TypeTkeyAttrText = "    ";
      TypeTsearchAttrText_AS = ' ';
      TypeTsearchAttrText = "                    ";
      TypeTotherAttrText_AS = ' ';
      TypeTotherAttrText = "  ";
      TypeTotherAttrDate_AS = ' ';
      TypeTotherAttrDate = 00000000;
      TypeTotherAttrTime_AS = ' ';
      TypeTotherAttrTime = 00000000;
      TypeTotherAttrAmount_AS = ' ';
      TypeTotherAttrAmount = BigDecimalAttr.getDefaultValue();
    }
  }
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // ENTITY ACTION VIEW CLASS VARIABLE
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  DYYY0351_EA w_ea = new DYYY0351_EA();
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // LOCAL VIEW CLASS VARIABLE
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  DYYY0351_LA w_la;
  
  
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // HOST VARIABLES FOR TABLE: VDVYYYT
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  String tkey_attr_001EF;
  String tkey_attr_002EN;
  String tsearch_attr_003EF;
  String tsearch_attr_004EN;
  String tother_attr_005EF;
  String tother_attr_006EN;
  String tcreate_userid_007EF;
  String tcreate_userid_008EN;
  String tupdate_userid_009EF;
  String tupdate_userid_010EN;
  java.sql.Timestamp tinstance_id_011EF;
  java.sql.Timestamp tinstance_id_012EN;
  java.sql.Timestamp treference_id_013EF;
  java.sql.Timestamp treference_id_014EN;
  java.sql.Date tother_date_015EF;
  java.sql.Date tother_date_016EN;
  java.sql.Time tother_time_017EF;
  java.sql.Time tother_time_018EN;
  BigDecimal tother_amount_019EF;
  BigDecimal tother_amount_020EN;
  
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // TEMPORARY HOST VARIABLES 
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  String TkeyAttrText_002TP;
  String TsearchAttrText_001TP;
  String TkeyAttrText_003TP;
  String TkeyAttrText_004TP;
  String TsearchAttrText_005TP;
  String TotherAttrText_006TP;
  
  
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // REPEATING GROUP VIEW STATUS FIELDS 
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  boolean ExpGroupList_FL_001;
  int ExpGroupList_PS_001;
  boolean ExpGroupList_RF_001;
  public final static int ExpGroupList_MM_001 = 48;
  
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // MISC DECLARATIONS AND PROTOTYPES 
  //    FOLLOW AS NEEDED:             
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  boolean func_0022020279_esc_flag;
  boolean func_0020972278_esc_flag;
  boolean func_0020972285_esc_flag;
  boolean func_0020972684_esc_flag;
  boolean read_each_0068157707_esc_flag;
  PreparedStatement hstmt_0037988323_1;
  ResultSet hstmt_0037988323_1_rs;
  int hstmt_0037988323_1_cnt;
  boolean func_0020972688_esc_flag;
  boolean read_each_0068157453_esc_flag;
  PreparedStatement hstmt_0037920443_1;
  ResultSet hstmt_0037920443_1_rs;
  int hstmt_0037920443_1_cnt;
  boolean func_0020971901_esc_flag;
  boolean read_each_0068157861_esc_flag;
  PreparedStatement hstmt_0037990974_1;
  ResultSet hstmt_0037990974_1_rs;
  int hstmt_0037990974_1_cnt;
  boolean func_0020971910_esc_flag;
  boolean read_each_0068158093_esc_flag;
  PreparedStatement hstmt_0037921956_1;
  ResultSet hstmt_0037921956_1_rs;
  int hstmt_0037921956_1_cnt;
  boolean func_0020971920_esc_flag;
  boolean func_0020971640_esc_flag;
  boolean func_0020972149_esc_flag;
  boolean func_0020972594_esc_flag;
  boolean func_0020972058_esc_flag;
  boolean func_0020972146_esc_flag;
  boolean func_0020971554_esc_flag;
  boolean func_0020971729_esc_flag;
  boolean func_0020972153_esc_flag;
  boolean func_0020972229_esc_flag;
  boolean func_0020971693_esc_flag;
  boolean func_0020972747_esc_flag;
  PadView padview[] = new PadView [81];
  int trace_ret_code;
  PadText padtext[] = initPadText();
  public PadText [] initPadText()
  {
    PadText [] result = new PadText [PADTEXT_SIZE];
    result[0] = PadText.getInstance(   0,"+->   DYYY0351_TYPE_LIST                07/05/2023  15:09");
    result[1] = PadText.getInstance(   0,"!       IMPORTS:");
    result[2] = PadText.getInstance(   0,"!         Work View imp_error iyy1_component (Transient, Mandatory, Import only)");
    result[3] = PadText.getInstance(   0,"!           severity_code");
    result[4] = PadText.getInstance(   0,"!           rollback_indicator");
    result[5] = PadText.getInstance(   0,"!           origin_servid");
    result[6] = PadText.getInstance(   0,"!           context_string");
    result[7] = PadText.getInstance(   0,"!           return_code");
    result[8] = PadText.getInstance(   0,"!           reason_code");
    result[9] = PadText.getInstance(   0,"!           checksum");
    result[10] = PadText.getInstance(   0,"!         Work View imp_filter iyy1_list (Transient, Mandatory, Import only)");
    result[11] = PadText.getInstance(   0,"!           sort_option");
    result[12] = PadText.getInstance(   0,"!           scroll_type");
    result[13] = PadText.getInstance(   0,"!           list_direction");
    result[14] = PadText.getInstance(   0,"!           scroll_amount");
    result[15] = PadText.getInstance(   0,"!           order_by_field_num");
    result[16] = PadText.getInstance(   0,"!         Entity View imp_from type (Transient, Mandatory, Import only)");
    result[17] = PadText.getInstance(   0,"!           tinstance_id");
    result[18] = PadText.getInstance(   0,"!           tkey_attr_text");
    result[19] = PadText.getInstance(   0,"!           tsearch_attr_text");
    result[20] = PadText.getInstance(   0,"!         Entity View imp_filter_start type (Transient, Mandatory, Import only)");
    result[21] = PadText.getInstance(   0,"!           tkey_attr_text");
    result[22] = PadText.getInstance(   0,"!         Entity View imp_filter_stop type (Transient, Mandatory, Import only)");
    result[23] = PadText.getInstance(   0,"!           tkey_attr_text");
    result[24] = PadText.getInstance(   0,"!         Entity View imp_filter type (Transient, Mandatory, Import only)");
    result[25] = PadText.getInstance(   0,"!           tsearch_attr_text");
    result[26] = PadText.getInstance(   0,"!           tother_attr_text");
    result[27] = PadText.getInstance(   0,"!       EXPORTS:");
    result[28] = PadText.getInstance(   0,"!         Group View (48) exp_group_list");
    result[29] = PadText.getInstance(   0,"!           Entity View exp_g_list type (Transient, Export only)");
    result[30] = PadText.getInstance(   0,"!             tinstance_id");
    result[31] = PadText.getInstance(   0,"!             treference_id");
    result[32] = PadText.getInstance(   0,"!             tcreate_user_id");
    result[33] = PadText.getInstance(   0,"!             tupdate_user_id");
    result[34] = PadText.getInstance(   0,"!             tkey_attr_text");
    result[35] = PadText.getInstance(   0,"!             tsearch_attr_text");
    result[36] = PadText.getInstance(   0,"!             tother_attr_text");
    result[37] = PadText.getInstance(   0,"!             tother_attr_date");
    result[38] = PadText.getInstance(   0,"!             tother_attr_time");
    result[39] = PadText.getInstance(   0,"!             tother_attr_amount");
    result[40] = PadText.getInstance(   0,"!         Work View exp_error iyy1_component (Transient, Export only)");
    result[41] = PadText.getInstance(   0,"!           severity_code");
    result[42] = PadText.getInstance(   0,"!           rollback_indicator");
    result[43] = PadText.getInstance(   0,"!           origin_servid");
    result[44] = PadText.getInstance(   0,"!           context_string");
    result[45] = PadText.getInstance(   0,"!           return_code");
    result[46] = PadText.getInstance(   0,"!           reason_code");
    result[47] = PadText.getInstance(   0,"!           checksum");
    result[48] = PadText.getInstance(   0,"!       ENTITY ACTIONS:");
    result[49] = PadText.getInstance(   0,"!         Entity View type");
    result[50] = PadText.getInstance(   0,"!           tinstance_id");
    result[51] = PadText.getInstance(   0,"!           treference_id");
    result[52] = PadText.getInstance(   0,"!           tcreate_user_id");
    result[53] = PadText.getInstance(   0,"!           tupdate_user_id");
    result[54] = PadText.getInstance(   0,"!           tkey_attr_text");
    result[55] = PadText.getInstance(   0,"!           tsearch_attr_text");
    result[56] = PadText.getInstance(   0,"!           tother_attr_text");
    result[57] = PadText.getInstance(   0,"!           tother_attr_date");
    result[58] = PadText.getInstance(   0,"!           tother_attr_time");
    result[59] = PadText.getInstance(   0,"!           tother_attr_amount");
    result[60] = PadText.getInstance(   0,"!       LOCALS:");
    result[61] = PadText.getInstance(   0,"!         Work View loc_filter iyy1_list");
    result[62] = PadText.getInstance(   0,"!           scroll_type");
    result[63] = PadText.getInstance(   0,"!         Work View loc dont_change_return_codes");
    result[64] = PadText.getInstance(   0,"!           1_ok");
    result[65] = PadText.getInstance(   0,"!         Work View loc dont_change_reason_codes");
    result[66] = PadText.getInstance(   0,"!           1_default");
    result[67] = PadText.getInstance(   0,"!           11_list_full");
    result[68] = PadText.getInstance(   0,"!           12_list_empty");
    result[69] = PadText.getInstance(   0,"!");
    result[70] = PadText.getInstance(   0,"!     PROCEDURE STATEMENTS");
    result[71] = PadText.getInstance(   0,"!");
    result[72] = PadText.getInstance(   1,"!  NOTE: ");
    result[73] = PadText.getInstance(   1,"!  Please review explanation for purpose.");
    result[74] = PadText.getInstance(   1,"!  ");
    result[75] = PadText.getInstance(   2,"!  NOTE: ");
    result[76] = PadText.getInstance(   2,"!  RELEASE HISTORY");
    result[77] = PadText.getInstance(   2,"!  01_00 23-02-1998 New release");
    result[78] = PadText.getInstance(   2,"!  ");
    result[79] = PadText.getInstance(   3,"!  MOVE imp_error iyy1_component TO exp_error iyy1_component");
    result[80] = PadText.getInstance(   4,"!   ");
    result[81] = PadText.getInstance(   5,"!  NOTE: ");
    result[82] = PadText.getInstance(   5,"!  ****************************************************************");
    result[83] = PadText.getInstance(   5,"!  Values of the ReturnCode/ReasonCode used.");
    result[84] = PadText.getInstance(   5,"!  ");
    result[85] = PadText.getInstance(   6,"!  NOTE: ");
    result[86] = PadText.getInstance(   6,"!  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
    result[87] = PadText.getInstance(   6,"!  Please set the return ve reason code values below.");
    result[88] = PadText.getInstance(   6,"!  ");
    result[89] = PadText.getInstance(   7,"!  SET loc dont_change_return_codes 1_ok TO 1 ");
    result[90] = PadText.getInstance(   8,"!   ");
    result[91] = PadText.getInstance(   9,"!  SET loc dont_change_reason_codes 1_default TO 1 ");
    result[92] = PadText.getInstance(  10,"!  SET loc dont_change_reason_codes 11_list_full TO 11 ");
    result[93] = PadText.getInstance(  11,"!  SET loc dont_change_reason_codes 12_list_empty TO 12 ");
    result[94] = PadText.getInstance(  12,"!   ");
    result[95] = PadText.getInstance(  13,"!  NOTE: ");
    result[96] = PadText.getInstance(  13,"!  ****************************************************************");
    result[97] = PadText.getInstance(  13,"!  ");
    result[98] = PadText.getInstance(  14,"!  SET SUBSCRIPT OF exp_group_list TO 0 ");
    result[99] = PadText.getInstance(  15,"!  SET loc_filter iyy1_list scroll_type TO imp_filter iyy1_list scroll_type ");
    result[100] = PadText.getInstance(  16,"!   ");
    result[101] = PadText.getInstance(  17,"!   ");
    result[102] = PadText.getInstance(  18,"!  +->CASE OF imp_filter iyy1_list sort_option");
    result[103] = PadText.getInstance(  18, 1, "!  +> CASE \"ASC\"");
    result[104] = PadText.getInstance(  19,"!  !  NOTE: ");
    result[105] = PadText.getInstance(  19,
      "!  !  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
    result[106] = PadText.getInstance(  19,
      "!  !  Set \"General->Select Clause Isolation Level\" property to \"Uncomitted / Browse\" ");
    result[107] = PadText.getInstance(  19,"!  !  and \"DB2 MVS (XDB)->Optimize for N rows\" property to \"Use the value: 1\".");
    result[108] = PadText.getInstance(  19,"!  !  ");
    result[109] = PadText.getInstance(  20,"!  !  +->CASE OF imp_filter iyy1_list order_by_field_num");
    result[110] = PadText.getInstance(  20, 1, "!  !  +> CASE 2");
    result[111] = PadText.getInstance(  21,"!  !  !  +=>READ EACH (Isolation UR) type");
    result[112] = PadText.getInstance(  21,"!  !  !  !        SORTED BY ASCENDING type tsearch_attr_text");
    result[113] = PadText.getInstance(  21,"!  !  !  !        ");
    result[114] = PadText.getInstance(  21,"!  !  !  !              AND SORTED BY ASCENDING type tkey_attr_text");
    result[115] = PadText.getInstance(  21,
      "!  !  !  !        WHERE (DESIRED type tsearch_attr_text > imp_from type tsearch_attr_text  ");
    result[116] = PadText.getInstance(  21,
      "!  !  !  !              OR  (DESIRED type tsearch_attr_text = imp_from type tsearch_attr_text  ");
    result[117] = PadText.getInstance(  21,
      "!  !  !  !              AND  (DESIRED type tkey_attr_text >= imp_from type tkey_attr_text)))  ");
    result[118] = PadText.getInstance(  21,
      "!  !  !  !              AND  DESIRED type tkey_attr_text >= imp_filter_start type tkey_attr_text  ");
    result[119] = PadText.getInstance(  21,
      "!  !  !  !              AND  DESIRED type tkey_attr_text <= imp_filter_stop type tkey_attr_text  ");
    result[120] = PadText.getInstance(  21,
      "!  !  !  !              AND  DESIRED type tsearch_attr_text IS LIKE imp_filter type tsearch_attr_text  ");
    result[121] = PadText.getInstance(  21,
      "!  !  !  !              AND  DESIRED type tother_attr_text IS LIKE imp_filter type tother_attr_text");
    result[122] = PadText.getInstance(  22,"!  !  !  !  +->IF SUBSCRIPT OF exp_group_list < imp_filter iyy1_list scroll_amount");
    result[123] = PadText.getInstance(  23,"!  !  !  !  !  +->IF loc_filter iyy1_list scroll_type = \"S\"");
    result[124] = PadText.getInstance(  24,"!  !  !  !  !  !  SET loc_filter iyy1_list scroll_type TO SPACES ");
    result[125] = PadText.getInstance(  23, 1, "!  !  !  !  !  +> ELSE");
    result[126] = PadText.getInstance(  25,"!  !  !  !  !  !  SET SUBSCRIPT OF exp_group_list TO SUBSCRIPT OF exp_group_list + 1 ");
    result[127] = PadText.getInstance(  26,"!  !  !  !  !  !  MOVE  type TO exp_g_list type");
    result[128] = PadText.getInstance(  23,"!  !  !  !  !  +--");
    result[129] = PadText.getInstance(  22, 1, "!  !  !  !  +> ELSE");
    result[130] = PadText.getInstance(  27,
      "!  !  !  !  !  SET exp_error iyy1_component reason_code TO loc dont_change_reason_codes 11_list_full ");
    result[131] = PadText.getInstance(  28,"!  !  ! <------ESCAPE");
    result[132] = PadText.getInstance(  22,"!  !  !  !  +--");
    result[133] = PadText.getInstance(  21,"!  !  !  +--");
    result[134] = PadText.getInstance(  20, 2, "!  !  +> OTHERWISE");
    result[135] = PadText.getInstance(  29,"!  !  !  NOTE: ");
    result[136] = PadText.getInstance(  29,
      "!  !  !  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
    result[137] = PadText.getInstance(  29,
      "!  !  !  Set \"General->Select Clause Isolation Level\" property to \"Uncomitted / Browse\" ");
    result[138] = PadText.getInstance(  29,"!  !  !  and \"DB2 MVS (XDB)->Optimize for N rows\" property to \"Use the value: 1\".");
    result[139] = PadText.getInstance(  29,"!  !  !  ");
    result[140] = PadText.getInstance(  30,"!  !  !  +=>READ EACH (Optimize 1, Isolation UR) type");
    result[141] = PadText.getInstance(  30,"!  !  !  !        SORTED BY ASCENDING type tkey_attr_text");
    result[142] = PadText.getInstance(  30,"!  !  !  !        WHERE DESIRED type tkey_attr_text >= imp_from type tkey_attr_text  ");
    result[143] = PadText.getInstance(  30,
      "!  !  !  !              AND  DESIRED type tkey_attr_text >= imp_filter_start type tkey_attr_text  ");
    result[144] = PadText.getInstance(  30,
      "!  !  !  !              AND  DESIRED type tkey_attr_text <= imp_filter_stop type tkey_attr_text  ");
    result[145] = PadText.getInstance(  30,
      "!  !  !  !              AND  DESIRED type tsearch_attr_text IS LIKE imp_filter type tsearch_attr_text  ");
    result[146] = PadText.getInstance(  30,
      "!  !  !  !              AND  DESIRED type tother_attr_text IS LIKE imp_filter type tother_attr_text");
    result[147] = PadText.getInstance(  31,"!  !  !  !  +->IF SUBSCRIPT OF exp_group_list < imp_filter iyy1_list scroll_amount");
    result[148] = PadText.getInstance(  32,"!  !  !  !  !  +->IF loc_filter iyy1_list scroll_type = \"S\"");
    result[149] = PadText.getInstance(  33,"!  !  !  !  !  !  SET loc_filter iyy1_list scroll_type TO SPACES ");
    result[150] = PadText.getInstance(  32, 1, "!  !  !  !  !  +> ELSE");
    result[151] = PadText.getInstance(  34,"!  !  !  !  !  !  SET SUBSCRIPT OF exp_group_list TO SUBSCRIPT OF exp_group_list + 1 ");
    result[152] = PadText.getInstance(  35,"!  !  !  !  !  !  MOVE  type TO exp_g_list type");
    result[153] = PadText.getInstance(  32,"!  !  !  !  !  +--");
    result[154] = PadText.getInstance(  31, 1, "!  !  !  !  +> ELSE");
    result[155] = PadText.getInstance(  36,
      "!  !  !  !  !  SET exp_error iyy1_component reason_code TO loc dont_change_reason_codes 11_list_full ");
    result[156] = PadText.getInstance(  37,"!  !  ! <------ESCAPE");
    result[157] = PadText.getInstance(  31,"!  !  !  !  +--");
    result[158] = PadText.getInstance(  30,"!  !  !  +--");
    result[159] = PadText.getInstance(  20,"!  !  +--");
    result[160] = PadText.getInstance(  18, 2, "!  +> CASE \"DES\"");
    result[161] = PadText.getInstance(  38,"!  !  +->CASE OF imp_filter iyy1_list order_by_field_num");
    result[162] = PadText.getInstance(  38, 1, "!  !  +> CASE 2");
    result[163] = PadText.getInstance(  39,"!  !  !  NOTE: ");
    result[164] = PadText.getInstance(  39,
      "!  !  !  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
    result[165] = PadText.getInstance(  39,
      "!  !  !  Set \"General->Select Clause Isolation Level\" property to \"Uncomitted / Browse\" ");
    result[166] = PadText.getInstance(  39,"!  !  !  and \"DB2 MVS (XDB)->Optimize for N rows\" property to \"Use the value: 1\". ")
      ;
    result[167] = PadText.getInstance(  39,"!  !  !  ");
    result[168] = PadText.getInstance(  40,"!  !  !  +=>READ EACH (Isolation UR) type");
    result[169] = PadText.getInstance(  40,"!  !  !  !        SORTED BY DESCENDING type tsearch_attr_text");
    result[170] = PadText.getInstance(  40,"!  !  !  !        ");
    result[171] = PadText.getInstance(  40,"!  !  !  !              AND SORTED BY DESCENDING type tkey_attr_text");
    result[172] = PadText.getInstance(  40,
      "!  !  !  !        WHERE (DESIRED type tsearch_attr_text < imp_from type tsearch_attr_text  ");
    result[173] = PadText.getInstance(  40,
      "!  !  !  !              OR  (DESIRED type tsearch_attr_text = imp_from type tsearch_attr_text  ");
    result[174] = PadText.getInstance(  40,
      "!  !  !  !              AND  (DESIRED type tkey_attr_text <= imp_from type tkey_attr_text)))  ");
    result[175] = PadText.getInstance(  40,
      "!  !  !  !              AND  DESIRED type tkey_attr_text >= imp_filter_start type tkey_attr_text  ");
    result[176] = PadText.getInstance(  40,
      "!  !  !  !              AND  DESIRED type tkey_attr_text <= imp_filter_stop type tkey_attr_text  ");
    result[177] = PadText.getInstance(  40,
      "!  !  !  !              AND  DESIRED type tsearch_attr_text IS LIKE imp_filter type tsearch_attr_text  ");
    result[178] = PadText.getInstance(  40,
      "!  !  !  !              AND  DESIRED type tother_attr_text IS LIKE imp_filter type tother_attr_text");
    result[179] = PadText.getInstance(  41,"!  !  !  !  +->IF SUBSCRIPT OF exp_group_list < imp_filter iyy1_list scroll_amount");
    result[180] = PadText.getInstance(  42,"!  !  !  !  !  +->IF loc_filter iyy1_list scroll_type = \"S\"");
    result[181] = PadText.getInstance(  43,"!  !  !  !  !  !  SET loc_filter iyy1_list scroll_type TO SPACES ");
    result[182] = PadText.getInstance(  42, 1, "!  !  !  !  !  +> ELSE");
    result[183] = PadText.getInstance(  44,"!  !  !  !  !  !  SET SUBSCRIPT OF exp_group_list TO SUBSCRIPT OF exp_group_list + 1 ");
    result[184] = PadText.getInstance(  45,"!  !  !  !  !  !  MOVE  type TO exp_g_list type");
    result[185] = PadText.getInstance(  42,"!  !  !  !  !  +--");
    result[186] = PadText.getInstance(  41, 1, "!  !  !  !  +> ELSE");
    result[187] = PadText.getInstance(  46,
      "!  !  !  !  !  SET exp_error iyy1_component reason_code TO loc dont_change_reason_codes 11_list_full ");
    result[188] = PadText.getInstance(  47,"!  !  ! <------ESCAPE");
    result[189] = PadText.getInstance(  41,"!  !  !  !  +--");
    result[190] = PadText.getInstance(  40,"!  !  !  +--");
    result[191] = PadText.getInstance(  38, 2, "!  !  +> OTHERWISE");
    result[192] = PadText.getInstance(  48,"!  !  !  NOTE: ");
    result[193] = PadText.getInstance(  48,
      "!  !  !  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
    result[194] = PadText.getInstance(  48,
      "!  !  !  Set \"General->Select Clause Isolation Level\" property to \"Uncomitted / Browse\" ");
    result[195] = PadText.getInstance(  48,"!  !  !  and \"DB2 MVS (XDB)->Optimize for N rows\" property to \"Use the value: 1\". ")
      ;
    result[196] = PadText.getInstance(  48,"!  !  !  ");
    result[197] = PadText.getInstance(  49,"!  !  !  +=>READ EACH (Optimize 1, Isolation UR) type");
    result[198] = PadText.getInstance(  49,"!  !  !  !        SORTED BY DESCENDING type tkey_attr_text");
    result[199] = PadText.getInstance(  49,"!  !  !  !        WHERE DESIRED type tkey_attr_text <= imp_from type tkey_attr_text  ");
    result[200] = PadText.getInstance(  49,
      "!  !  !  !              AND  DESIRED type tkey_attr_text >= imp_filter_start type tkey_attr_text  ");
    result[201] = PadText.getInstance(  49,
      "!  !  !  !              AND  DESIRED type tkey_attr_text <= imp_filter_stop type tkey_attr_text  ");
    result[202] = PadText.getInstance(  49,
      "!  !  !  !              AND  DESIRED type tsearch_attr_text IS LIKE imp_filter type tsearch_attr_text  ");
    result[203] = PadText.getInstance(  49,
      "!  !  !  !              AND  DESIRED type tother_attr_text IS LIKE imp_filter type tother_attr_text");
    result[204] = PadText.getInstance(  50,"!  !  !  !  +->IF SUBSCRIPT OF exp_group_list < imp_filter iyy1_list scroll_amount");
    result[205] = PadText.getInstance(  51,"!  !  !  !  !  +->IF loc_filter iyy1_list scroll_type = \"S\"");
    result[206] = PadText.getInstance(  52,"!  !  !  !  !  !  SET loc_filter iyy1_list scroll_type TO SPACES ");
    result[207] = PadText.getInstance(  51, 1, "!  !  !  !  !  +> ELSE");
    result[208] = PadText.getInstance(  53,"!  !  !  !  !  !  SET SUBSCRIPT OF exp_group_list TO SUBSCRIPT OF exp_group_list + 1 ");
    result[209] = PadText.getInstance(  54,"!  !  !  !  !  !  MOVE  type TO exp_g_list type");
    result[210] = PadText.getInstance(  51,"!  !  !  !  !  +--");
    result[211] = PadText.getInstance(  50, 1, "!  !  !  !  +> ELSE");
    result[212] = PadText.getInstance(  55,
      "!  !  !  !  !  SET exp_error iyy1_component reason_code TO loc dont_change_reason_codes 11_list_full ");
    result[213] = PadText.getInstance(  56,"!  !  ! <------ESCAPE");
    result[214] = PadText.getInstance(  50,"!  !  !  !  +--");
    result[215] = PadText.getInstance(  49,"!  !  !  +--");
    result[216] = PadText.getInstance(  38,"!  !  +--");
    result[217] = PadText.getInstance(  18, 3, "!  +> OTHERWISE");
    result[218] = PadText.getInstance(  18,"!  +--");
    result[219] = PadText.getInstance(  57,"!  +->IF LAST OF exp_group_list <= 0");
    result[220] = PadText.getInstance(  58,
      "!  !  SET exp_error iyy1_component reason_code TO loc dont_change_reason_codes 12_list_empty ");
    result[221] = PadText.getInstance(  57,"!  +--");
    result[222] = PadText.getInstance(   0,"+---");
    result[223] = PadText.getInstance(PadText.LASTLINE,"************************* BOTTOM OF DATA *************************");
    return result;
  }
  final static int PADTEXT_SIZE = 224;
  //       +->   DYYY0351_TYPE_LIST                07/05/2023  15:09
  //       !       IMPORTS:
  //       !         Work View imp_error iyy1_component (Transient, Mandatory, Import only)
  //       !           severity_code
  //       !           rollback_indicator
  //       !           origin_servid
  //       !           context_string
  //       !           return_code
  //       !           reason_code
  //       !           checksum
  //       !         Work View imp_filter iyy1_list (Transient, Mandatory, Import only)
  //       !           sort_option
  //       !           scroll_type
  //       !           list_direction
  //       !           scroll_amount
  //       !           order_by_field_num
  //       !         Entity View imp_from type (Transient, Mandatory, Import only)
  //       !           tinstance_id
  //       !           tkey_attr_text
  //       !           tsearch_attr_text
  //       !         Entity View imp_filter_start type (Transient, Mandatory, Import only)
  //       !           tkey_attr_text
  //       !         Entity View imp_filter_stop type (Transient, Mandatory, Import only)
  //       !           tkey_attr_text
  //       !         Entity View imp_filter type (Transient, Mandatory, Import only)
  //       !           tsearch_attr_text
  //       !           tother_attr_text
  //       !       EXPORTS:
  //       !         Group View (48) exp_group_list
  //       !           Entity View exp_g_list type (Transient, Export only)
  //       !             tinstance_id
  //       !             treference_id
  //       !             tcreate_user_id
  //       !             tupdate_user_id
  //       !             tkey_attr_text
  //       !             tsearch_attr_text
  //       !             tother_attr_text
  //       !             tother_attr_date
  //       !             tother_attr_time
  //       !             tother_attr_amount
  //       !         Work View exp_error iyy1_component (Transient, Export only)
  //       !           severity_code
  //       !           rollback_indicator
  //       !           origin_servid
  //       !           context_string
  //       !           return_code
  //       !           reason_code
  //       !           checksum
  //       !       ENTITY ACTIONS:
  //       !         Entity View type
  //       !           tinstance_id
  //       !           treference_id
  //       !           tcreate_user_id
  //       !           tupdate_user_id
  //       !           tkey_attr_text
  //       !           tsearch_attr_text
  //       !           tother_attr_text
  //       !           tother_attr_date
  //       !           tother_attr_time
  //       !           tother_attr_amount
  //       !       LOCALS:
  //       !         Work View loc_filter iyy1_list
  //       !           scroll_type
  //       !         Work View loc dont_change_return_codes
  //       !           1_ok
  //       !         Work View loc dont_change_reason_codes
  //       !           1_default
  //       !           11_list_full
  //       !           12_list_empty
  //       !
  //       !     PROCEDURE STATEMENTS
  //       !
  //     1 !  NOTE: 
  //     1 !  Please review explanation for purpose.
  //     1 !  
  //     2 !  NOTE: 
  //     2 !  RELEASE HISTORY
  //     2 !  01_00 23-02-1998 New release
  //     2 !  
  //     3 !  MOVE imp_error iyy1_component TO exp_error iyy1_component
  //     4 !   
  //     5 !  NOTE: 
  //     5 !  ****************************************************************
  //     5 !  Values of the ReturnCode/ReasonCode used.
  //     5 !  
  //     6 !  NOTE: 
  //     6 !  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  //     6 !  Please set the return ve reason code values below.
  //     6 !  
  //     7 !  SET loc dont_change_return_codes 1_ok TO 1 
  //     8 !   
  //     9 !  SET loc dont_change_reason_codes 1_default TO 1 
  //    10 !  SET loc dont_change_reason_codes 11_list_full TO 11 
  //    11 !  SET loc dont_change_reason_codes 12_list_empty TO 12 
  //    12 !   
  //    13 !  NOTE: 
  //    13 !  ****************************************************************
  //    13 !  
  //    14 !  SET SUBSCRIPT OF exp_group_list TO 0 
  //    15 !  SET loc_filter iyy1_list scroll_type TO imp_filter iyy1_list scroll_type 
  //    16 !   
  //    17 !   
  //    18 !  +->CASE OF imp_filter iyy1_list sort_option
  //    18 !  +> CASE "ASC"
  //    19 !  !  NOTE: 
  //    19 !  !  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  //    19 !  !  Set "General->Select Clause Isolation Level" property to "Uncomitted / Browse" 
  //    19 !  !  and "DB2 MVS (XDB)->Optimize for N rows" property to "Use the value: 1".
  //    19 !  !  
  //    20 !  !  +->CASE OF imp_filter iyy1_list order_by_field_num
  //    20 !  !  +> CASE 2
  //    21 !  !  !  +=>READ EACH (Isolation UR) type
  //    21 !  !  !  !        SORTED BY ASCENDING type tsearch_attr_text
  //    21 !  !  !  !        
  //    21 !  !  !  !              AND SORTED BY ASCENDING type tkey_attr_text
  //    21 !  !  !  !        WHERE (DESIRED type tsearch_attr_text > imp_from type tsearch_attr_text  
  //    21 !  !  !  !              OR  (DESIRED type tsearch_attr_text = imp_from type tsearch_attr_text  
  //    21 !  !  !  !              AND  (DESIRED type tkey_attr_text >= imp_from type tkey_attr_text)))  
  //    21 !  !  !  !              AND  DESIRED type tkey_attr_text >= imp_filter_start type tkey_attr_text  
  //    21 !  !  !  !              AND  DESIRED type tkey_attr_text <= imp_filter_stop type tkey_attr_text  
  //    21 !  !  !  !              AND  DESIRED type tsearch_attr_text IS LIKE imp_filter type tsearch_attr_text  
  //    21 !  !  !  !              AND  DESIRED type tother_attr_text IS LIKE imp_filter type tother_attr_text
  //    22 !  !  !  !  +->IF SUBSCRIPT OF exp_group_list < imp_filter iyy1_list scroll_amount
  //    23 !  !  !  !  !  +->IF loc_filter iyy1_list scroll_type = "S"
  //    24 !  !  !  !  !  !  SET loc_filter iyy1_list scroll_type TO SPACES 
  //    23 !  !  !  !  !  +> ELSE
  //    25 !  !  !  !  !  !  SET SUBSCRIPT OF exp_group_list TO SUBSCRIPT OF exp_group_list + 1 
  //    26 !  !  !  !  !  !  MOVE  type TO exp_g_list type
  //    23 !  !  !  !  !  +--
  //    22 !  !  !  !  +> ELSE
  //    27 !  !  !  !  !  SET exp_error iyy1_component reason_code TO loc dont_change_reason_codes 11_list_full 
  //    28 !  !  ! <------ESCAPE
  //    22 !  !  !  !  +--
  //    21 !  !  !  +--
  //    20 !  !  +> OTHERWISE
  //    29 !  !  !  NOTE: 
  //    29 !  !  !  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  //    29 !  !  !  Set "General->Select Clause Isolation Level" property to "Uncomitted / Browse" 
  //    29 !  !  !  and "DB2 MVS (XDB)->Optimize for N rows" property to "Use the value: 1".
  //    29 !  !  !  
  //    30 !  !  !  +=>READ EACH (Optimize 1, Isolation UR) type
  //    30 !  !  !  !        SORTED BY ASCENDING type tkey_attr_text
  //    30 !  !  !  !        WHERE DESIRED type tkey_attr_text >= imp_from type tkey_attr_text  
  //    30 !  !  !  !              AND  DESIRED type tkey_attr_text >= imp_filter_start type tkey_attr_text  
  //    30 !  !  !  !              AND  DESIRED type tkey_attr_text <= imp_filter_stop type tkey_attr_text  
  //    30 !  !  !  !              AND  DESIRED type tsearch_attr_text IS LIKE imp_filter type tsearch_attr_text  
  //    30 !  !  !  !              AND  DESIRED type tother_attr_text IS LIKE imp_filter type tother_attr_text
  //    31 !  !  !  !  +->IF SUBSCRIPT OF exp_group_list < imp_filter iyy1_list scroll_amount
  //    32 !  !  !  !  !  +->IF loc_filter iyy1_list scroll_type = "S"
  //    33 !  !  !  !  !  !  SET loc_filter iyy1_list scroll_type TO SPACES 
  //    32 !  !  !  !  !  +> ELSE
  //    34 !  !  !  !  !  !  SET SUBSCRIPT OF exp_group_list TO SUBSCRIPT OF exp_group_list + 1 
  //    35 !  !  !  !  !  !  MOVE  type TO exp_g_list type
  //    32 !  !  !  !  !  +--
  //    31 !  !  !  !  +> ELSE
  //    36 !  !  !  !  !  SET exp_error iyy1_component reason_code TO loc dont_change_reason_codes 11_list_full 
  //    37 !  !  ! <------ESCAPE
  //    31 !  !  !  !  +--
  //    30 !  !  !  +--
  //    20 !  !  +--
  //    18 !  +> CASE "DES"
  //    38 !  !  +->CASE OF imp_filter iyy1_list order_by_field_num
  //    38 !  !  +> CASE 2
  //    39 !  !  !  NOTE: 
  //    39 !  !  !  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  //    39 !  !  !  Set "General->Select Clause Isolation Level" property to "Uncomitted / Browse" 
  //    39 !  !  !  and "DB2 MVS (XDB)->Optimize for N rows" property to "Use the value: 1". 
  //    39 !  !  !  
  //    40 !  !  !  +=>READ EACH (Isolation UR) type
  //    40 !  !  !  !        SORTED BY DESCENDING type tsearch_attr_text
  //    40 !  !  !  !        
  //    40 !  !  !  !              AND SORTED BY DESCENDING type tkey_attr_text
  //    40 !  !  !  !        WHERE (DESIRED type tsearch_attr_text < imp_from type tsearch_attr_text  
  //    40 !  !  !  !              OR  (DESIRED type tsearch_attr_text = imp_from type tsearch_attr_text  
  //    40 !  !  !  !              AND  (DESIRED type tkey_attr_text <= imp_from type tkey_attr_text)))  
  //    40 !  !  !  !              AND  DESIRED type tkey_attr_text >= imp_filter_start type tkey_attr_text  
  //    40 !  !  !  !              AND  DESIRED type tkey_attr_text <= imp_filter_stop type tkey_attr_text  
  //    40 !  !  !  !              AND  DESIRED type tsearch_attr_text IS LIKE imp_filter type tsearch_attr_text  
  //    40 !  !  !  !              AND  DESIRED type tother_attr_text IS LIKE imp_filter type tother_attr_text
  //    41 !  !  !  !  +->IF SUBSCRIPT OF exp_group_list < imp_filter iyy1_list scroll_amount
  //    42 !  !  !  !  !  +->IF loc_filter iyy1_list scroll_type = "S"
  //    43 !  !  !  !  !  !  SET loc_filter iyy1_list scroll_type TO SPACES 
  //    42 !  !  !  !  !  +> ELSE
  //    44 !  !  !  !  !  !  SET SUBSCRIPT OF exp_group_list TO SUBSCRIPT OF exp_group_list + 1 
  //    45 !  !  !  !  !  !  MOVE  type TO exp_g_list type
  //    42 !  !  !  !  !  +--
  //    41 !  !  !  !  +> ELSE
  //    46 !  !  !  !  !  SET exp_error iyy1_component reason_code TO loc dont_change_reason_codes 11_list_full 
  //    47 !  !  ! <------ESCAPE
  //    41 !  !  !  !  +--
  //    40 !  !  !  +--
  //    38 !  !  +> OTHERWISE
  //    48 !  !  !  NOTE: 
  //    48 !  !  !  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  //    48 !  !  !  Set "General->Select Clause Isolation Level" property to "Uncomitted / Browse" 
  //    48 !  !  !  and "DB2 MVS (XDB)->Optimize for N rows" property to "Use the value: 1". 
  //    48 !  !  !  
  //    49 !  !  !  +=>READ EACH (Optimize 1, Isolation UR) type
  //    49 !  !  !  !        SORTED BY DESCENDING type tkey_attr_text
  //    49 !  !  !  !        WHERE DESIRED type tkey_attr_text <= imp_from type tkey_attr_text  
  //    49 !  !  !  !              AND  DESIRED type tkey_attr_text >= imp_filter_start type tkey_attr_text  
  //    49 !  !  !  !              AND  DESIRED type tkey_attr_text <= imp_filter_stop type tkey_attr_text  
  //    49 !  !  !  !              AND  DESIRED type tsearch_attr_text IS LIKE imp_filter type tsearch_attr_text  
  //    49 !  !  !  !              AND  DESIRED type tother_attr_text IS LIKE imp_filter type tother_attr_text
  //    50 !  !  !  !  +->IF SUBSCRIPT OF exp_group_list < imp_filter iyy1_list scroll_amount
  //    51 !  !  !  !  !  +->IF loc_filter iyy1_list scroll_type = "S"
  //    52 !  !  !  !  !  !  SET loc_filter iyy1_list scroll_type TO SPACES 
  //    51 !  !  !  !  !  +> ELSE
  //    53 !  !  !  !  !  !  SET SUBSCRIPT OF exp_group_list TO SUBSCRIPT OF exp_group_list + 1 
  //    54 !  !  !  !  !  !  MOVE  type TO exp_g_list type
  //    51 !  !  !  !  !  +--
  //    50 !  !  !  !  +> ELSE
  //    55 !  !  !  !  !  SET exp_error iyy1_component reason_code TO loc dont_change_reason_codes 11_list_full 
  //    56 !  !  ! <------ESCAPE
  //    50 !  !  !  !  +--
  //    49 !  !  !  +--
  //    38 !  !  +--
  //    18 !  +> OTHERWISE
  //    18 !  +--
  //    57 !  +->IF LAST OF exp_group_list <= 0
  //    58 !  !  SET exp_error iyy1_component reason_code TO loc dont_change_reason_codes 12_list_empty 
  //    57 !  +--
  //       +---
  
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  //  CONSTRUCTOR FOR THE CLASS       
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  public DYYY0351()
  {
    iefCGenRlse = "CA Gen 8.6";
    ssCopyright = "Copyright (c) 2023 CA Technologies. All rights reserved.";
    iefCGenDate = "2023/07/05";
    iefCGenTime = "15:09:34";
    iefCGenEncy = "9.2.A6";
    iefCGenUserId = "HakanBal";
    iefCGenModel = "N8I_ORT_YYY_0112_TEMPLATE";
    iefCGenSubset = "ALL";
    iefCGenName = "DYYY0351_TYPE_LIST";
    nestingLevel = 0;
    valChkDeadlockTimeout = false;
    valChkDBError = false;
  }
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // ACTION BLOCK FUNCTION DECLARATIONS 
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  
  public void DYYY0351( Object in_runtime_parm1, 
  	IRuntimePStepContext in_runtime_parm2, 
  	GlobData in_globdata, 
  	DYYY0351_IA import_view, 
  	DYYY0351_OA export_view )
  {
    iefRuntimeParm1 = in_runtime_parm1;
    iefRuntimeParm2 = in_runtime_parm2;
    globdata = in_globdata;
    w_ia = import_view;
    w_oa = export_view;
    _DYYY0351();
  }
  
  private void _DYYY0351()
  {
    
    f_22020279_localAlloc("DYYY0351_TYPE_LIST");
    if ( globdata.getErrorData().getLastStatus() == ErrorData.IEF_ALLOCATION_ERROR_FL_LS )
    	return;
    
    ++(nestingLevel);
    try {
      f_22020279_init();
      f_22020279();
    } catch( ABException e ) {
    } finally {
      --(nestingLevel);
    }
    String last_stmt_num_saved = globdata.getStateData().getLastStatementNumber();
    globdata.getStateData().setLastStatementNumber( "9999999999" );
    try {
      f_0_trace();
    } catch( ABException e ) {
    }
    globdata.getStateData().setLastStatementNumber( last_stmt_num_saved );
  }
  public void f_22020279()
  	throws ABException
  {
    func_0022020279_esc_flag = false;
    globdata.getStateData().setCurrentABId( "0022020279" );
    globdata.getStateData().setCurrentABName( "DYYY0351_TYPE_LIST" );
    padview_init();
    globdata.getStateData().setLastStatementNumber( "0000000000" );
    f_0_trace();
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    //    Please review explanation for purpose.                          
    //                                                                    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    //    RELEASE HISTORY                                                 
    //    01_00 23-02-1998 New release                                    
    //                                                                    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    globdata.getStateData().setLastStatementNumber( "0000000003" );
    f_0_trace();
    if ( trace_ret_code != 8 )
    {
      w_oa.ExpErrorIyy1ComponentSeverityCode = FixedStringAttr.valueOf(w_ia.ImpErrorIyy1ComponentSeverityCode, (short)1);
      w_oa.ExpErrorIyy1ComponentRollbackIndicator = FixedStringAttr.valueOf(w_ia.ImpErrorIyy1ComponentRollbackIndicator, (short)1);
      w_oa.ExpErrorIyy1ComponentOriginServid = DoubleAttr.valueOf(w_ia.ImpErrorIyy1ComponentOriginServid);
      w_oa.ExpErrorIyy1ComponentContextString = StringAttr.valueOf(w_ia.ImpErrorIyy1ComponentContextString, (short)512);
      w_oa.ExpErrorIyy1ComponentReturnCode = IntAttr.valueOf(w_ia.ImpErrorIyy1ComponentReturnCode);
      w_oa.ExpErrorIyy1ComponentReasonCode = IntAttr.valueOf(w_ia.ImpErrorIyy1ComponentReasonCode);
      w_oa.ExpErrorIyy1ComponentChecksum = FixedStringAttr.valueOf(w_ia.ImpErrorIyy1ComponentChecksum, (short)15);
    }
    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    //    **************************************************************  
    //    **                                                              
    //    Values of the ReturnCode/ReasonCode used.                       
    //                                                                    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    //    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  
    //    !!                                                              
    //    Please set the return ve reason code values below.              
    //                                                                    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    globdata.getStateData().setLastStatementNumber( "0000000007" );
    f_0_trace();
    if ( trace_ret_code != 8 )
    {
      w_la.LocDontChangeReturnCodesQ1Ok = IntAttr.valueOf((int)TIRD2DEC.TIRD2DC1(1, 0, TIRD2DEC.ROUND_NONE, 5));
    }
    
    globdata.getStateData().setLastStatementNumber( "0000000009" );
    f_0_trace();
    if ( trace_ret_code != 8 )
    {
      w_la.LocDontChangeReasonCodesQ1Default = IntAttr.valueOf((int)TIRD2DEC.TIRD2DC1(1, 0, TIRD2DEC.ROUND_NONE, 5));
    }
    globdata.getStateData().setLastStatementNumber( "0000000010" );
    f_0_trace();
    if ( trace_ret_code != 8 )
    {
      w_la.LocDontChangeReasonCodesQ11ListFull = IntAttr.valueOf((int)TIRD2DEC.TIRD2DC1(11, 0, TIRD2DEC.ROUND_NONE, 5));
    }
    globdata.getStateData().setLastStatementNumber( "0000000011" );
    f_0_trace();
    if ( trace_ret_code != 8 )
    {
      w_la.LocDontChangeReasonCodesQ12ListEmpty = IntAttr.valueOf((int)TIRD2DEC.TIRD2DC1(12, 0, TIRD2DEC.ROUND_NONE, 5));
    }
    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    //    **************************************************************  
    //    **                                                              
    //                                                                    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    globdata.getStateData().setLastStatementNumber( "0000000014" );
    f_0_trace();
    if ( trace_ret_code != 8 )
    {
      ExpGroupList_PS_001 = (int)TIRD2DEC.TIRD2DC1(0, 0, TIRD2DEC.ROUND_NONE, 0);
      if ( (ExpGroupList_PS_001 > w_oa.ExpGroupList_MA) && (ExpGroupList_PS_001 <= 48) )
      w_oa.ExpGroupList_MA = IntAttr.valueOf(ExpGroupList_PS_001);
    }
    globdata.getStateData().setLastStatementNumber( "0000000015" );
    f_0_trace();
    if ( trace_ret_code != 8 )
    {
      w_la.LocFilterIyy1ListScrollType = FixedStringAttr.valueOf(w_ia.ImpFilterIyy1ListScrollType, (short)1);
    }
    
    
    globdata.getStateData().setLastStatementNumber( "0000000018" );
    f_0_trace();
    if ( trace_ret_code != 8 )
    {
      if ( CompareExit.compareTo(w_ia.ImpFilterIyy1ListSortOption, "ASC") == 0 )
      {
        globdata.getStateData().setLastSubStatementNumber( "1" );
        f_0_trace();
        {
          f_20972278();
        }
      }
      else if ( CompareExit.compareTo(w_ia.ImpFilterIyy1ListSortOption, "DES") == 0 )
      {
        globdata.getStateData().setLastSubStatementNumber( "2" );
        f_0_trace();
        {
          f_20972285();
        }
      }
      else {
        globdata.getStateData().setLastSubStatementNumber( "3" );
        f_0_trace();
        {
          // Empty statement here.
          ;
        }
      }
    }
    globdata.getStateData().setLastStatementNumber( "0000000057" );
    f_0_trace();
    if ( trace_ret_code != 8 )
    {
      if ( ((double)w_oa.ExpGroupList_MA <= 0) )
      {
        globdata.getStateData().setLastStatementNumber( "0000000058" );
        f_0_trace();
        if ( trace_ret_code != 8 )
        {
          w_oa.ExpErrorIyy1ComponentReasonCode = IntAttr.valueOf((int)TIRD2DEC.TIRD2DC1((double) 
            w_la.LocDontChangeReasonCodesQ12ListEmpty, 0, TIRD2DEC.ROUND_NONE, 5));
        }
      }
      
    }
  }
  
  
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // SUBORDINATE FUNCTIONS
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  
  
  public void f_20972278()
  	throws ABException
  {
    func_0020972278_esc_flag = false;
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    //    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  
    //    !!!!!!!!!!!!!!!!!!!!!                                           
    //    Set "General->Select Clause Isolation Level" property to        
    //    "Uncomitted / Browse"                                           
    //    and "DB2 MVS (XDB)->Optimize for N rows" property to            
    //    "Use the value: 1".                                             
    //                                                                    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    globdata.getStateData().setLastStatementNumber( "0000000020" );
    f_0_trace();
    if ( trace_ret_code != 8 )
    {
      if ( (double) w_ia.ImpFilterIyy1ListOrderByFieldNum == 2 )
      {
        globdata.getStateData().setLastSubStatementNumber( "1" );
        f_0_trace();
        {
          f_20972684();
        }
      }
      else {
        globdata.getStateData().setLastSubStatementNumber( "2" );
        f_0_trace();
        {
          f_20972688();
        }
      }
    }
  }
  
  public void f_20972285()
  	throws ABException
  {
    func_0020972285_esc_flag = false;
    globdata.getStateData().setLastStatementNumber( "0000000038" );
    f_0_trace();
    if ( trace_ret_code != 8 )
    {
      if ( (double) w_ia.ImpFilterIyy1ListOrderByFieldNum == 2 )
      {
        globdata.getStateData().setLastSubStatementNumber( "1" );
        f_0_trace();
        {
          f_20971901();
        }
      }
      else {
        globdata.getStateData().setLastSubStatementNumber( "2" );
        f_0_trace();
        {
          f_20971910();
        }
      }
    }
  }
  
  public void f_20972684()
  	throws ABException
  {
    func_0020972684_esc_flag = false;
    f_0020972684_esctag: 
    {
      sl_29360142 = ErrorData.NOT_FOUND_FL_LS;
      globdata.getStateData().setLastStatementNumber( "0000000021" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        read_each_0068157707_esc_flag = false;
        f_29360142_open();
        if ( sl_29360142.equals( ErrorData.SUCCEEDS_FL_LS ) )
        {
          f_29360142_fetch();
          while ((sl_29360142.equals( ErrorData.SUCCEEDS_FL_LS ) == true) && (read_each_0068157707_esc_flag != true))
          {
            {
              f_20971920();
            }
            globdata.getStateData().setLastStatementNumber( "0000000021" );
            if ( read_each_0068157707_esc_flag != true )
            f_29360142_fetch();
          }
          if ( read_each_0068157707_esc_flag != true )
          {
            if ( !((sl_29360142.equals( ErrorData.SUCCEEDS_FL_LS ) == false) && (sl_29360142.equals( ErrorData.NOT_FOUND_FL_LS ) == 
              false)) )
            {
              f_29360142_esc_close();
            }
            f_29360142_close();
          }
        }
        if ( (sl_29360142.equals( ErrorData.SUCCEEDS_FL_LS ) == false) && (sl_29360142.equals( ErrorData.NOT_FOUND_FL_LS ) == false) 
          )
        {
          globdata.getErrorData().setStatus( ErrorData.FATAL_ERROR_FL_LS );
          globdata.getErrorData().setLastStatus( sl_29360142 );
          globdata.getErrorData().setErrorEncounteredSW( ErrorData.ERROR_FOUND_SW );
          throw new ABException();
        }
      }
    }
  }
  
  public void f_20972688()
  	throws ABException
  {
    func_0020972688_esc_flag = false;
    f_0020972688_esctag: 
    {
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  
      //    !!!!!!!!!!!!!!!!!!!!!                                           
      //    Set "General->Select Clause Isolation Level" property to        
      //    "Uncomitted / Browse"                                           
      //    and "DB2 MVS (XDB)->Optimize for N rows" property to            
      //    "Use the value: 1".                                             
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      sl_29360130 = ErrorData.NOT_FOUND_FL_LS;
      globdata.getStateData().setLastStatementNumber( "0000000030" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        read_each_0068157453_esc_flag = false;
        f_29360130_open();
        if ( sl_29360130.equals( ErrorData.SUCCEEDS_FL_LS ) )
        {
          f_29360130_fetch();
          while ((sl_29360130.equals( ErrorData.SUCCEEDS_FL_LS ) == true) && (read_each_0068157453_esc_flag != true))
          {
            {
              f_20971640();
            }
            globdata.getStateData().setLastStatementNumber( "0000000030" );
            if ( read_each_0068157453_esc_flag != true )
            f_29360130_fetch();
          }
          if ( read_each_0068157453_esc_flag != true )
          {
            if ( !((sl_29360130.equals( ErrorData.SUCCEEDS_FL_LS ) == false) && (sl_29360130.equals( ErrorData.NOT_FOUND_FL_LS ) == 
              false)) )
            {
              f_29360130_esc_close();
            }
            f_29360130_close();
          }
        }
        if ( (sl_29360130.equals( ErrorData.SUCCEEDS_FL_LS ) == false) && (sl_29360130.equals( ErrorData.NOT_FOUND_FL_LS ) == false) 
          )
        {
          globdata.getErrorData().setStatus( ErrorData.FATAL_ERROR_FL_LS );
          globdata.getErrorData().setLastStatus( sl_29360130 );
          globdata.getErrorData().setErrorEncounteredSW( ErrorData.ERROR_FOUND_SW );
          throw new ABException();
        }
      }
    }
  }
  
  public void f_20971901()
  	throws ABException
  {
    func_0020971901_esc_flag = false;
    f_0020971901_esctag: 
    {
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  
      //    !!!!!!!!!!!!!!!!!!!!!                                           
      //    Set "General->Select Clause Isolation Level" property to        
      //    "Uncomitted / Browse"                                           
      //    and "DB2 MVS (XDB)->Optimize for N rows" property to            
      //    "Use the value: 1".                                             
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      sl_29360150 = ErrorData.NOT_FOUND_FL_LS;
      globdata.getStateData().setLastStatementNumber( "0000000040" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        read_each_0068157861_esc_flag = false;
        f_29360150_open();
        if ( sl_29360150.equals( ErrorData.SUCCEEDS_FL_LS ) )
        {
          f_29360150_fetch();
          while ((sl_29360150.equals( ErrorData.SUCCEEDS_FL_LS ) == true) && (read_each_0068157861_esc_flag != true))
          {
            {
              f_20972149();
            }
            globdata.getStateData().setLastStatementNumber( "0000000040" );
            if ( read_each_0068157861_esc_flag != true )
            f_29360150_fetch();
          }
          if ( read_each_0068157861_esc_flag != true )
          {
            if ( !((sl_29360150.equals( ErrorData.SUCCEEDS_FL_LS ) == false) && (sl_29360150.equals( ErrorData.NOT_FOUND_FL_LS ) == 
              false)) )
            {
              f_29360150_esc_close();
            }
            f_29360150_close();
          }
        }
        if ( (sl_29360150.equals( ErrorData.SUCCEEDS_FL_LS ) == false) && (sl_29360150.equals( ErrorData.NOT_FOUND_FL_LS ) == false) 
          )
        {
          globdata.getErrorData().setStatus( ErrorData.FATAL_ERROR_FL_LS );
          globdata.getErrorData().setLastStatus( sl_29360150 );
          globdata.getErrorData().setErrorEncounteredSW( ErrorData.ERROR_FOUND_SW );
          throw new ABException();
        }
      }
    }
  }
  
  public void f_20971910()
  	throws ABException
  {
    func_0020971910_esc_flag = false;
    f_0020971910_esctag: 
    {
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  
      //    !!!!!!!!!!!!!!!!!!!!!                                           
      //    Set "General->Select Clause Isolation Level" property to        
      //    "Uncomitted / Browse"                                           
      //    and "DB2 MVS (XDB)->Optimize for N rows" property to            
      //    "Use the value: 1".                                             
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      sl_29360134 = ErrorData.NOT_FOUND_FL_LS;
      globdata.getStateData().setLastStatementNumber( "0000000049" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        read_each_0068158093_esc_flag = false;
        f_29360134_open();
        if ( sl_29360134.equals( ErrorData.SUCCEEDS_FL_LS ) )
        {
          f_29360134_fetch();
          while ((sl_29360134.equals( ErrorData.SUCCEEDS_FL_LS ) == true) && (read_each_0068158093_esc_flag != true))
          {
            {
              f_20972594();
            }
            globdata.getStateData().setLastStatementNumber( "0000000049" );
            if ( read_each_0068158093_esc_flag != true )
            f_29360134_fetch();
          }
          if ( read_each_0068158093_esc_flag != true )
          {
            if ( !((sl_29360134.equals( ErrorData.SUCCEEDS_FL_LS ) == false) && (sl_29360134.equals( ErrorData.NOT_FOUND_FL_LS ) == 
              false)) )
            {
              f_29360134_esc_close();
            }
            f_29360134_close();
          }
        }
        if ( (sl_29360134.equals( ErrorData.SUCCEEDS_FL_LS ) == false) && (sl_29360134.equals( ErrorData.NOT_FOUND_FL_LS ) == false) 
          )
        {
          globdata.getErrorData().setStatus( ErrorData.FATAL_ERROR_FL_LS );
          globdata.getErrorData().setLastStatus( sl_29360134 );
          globdata.getErrorData().setErrorEncounteredSW( ErrorData.ERROR_FOUND_SW );
          throw new ABException();
        }
      }
    }
  }
  
  public void f_20971920()
  	throws ABException
  {
    func_0020971920_esc_flag = false;
    f_0020971920_esctag: 
    {
      globdata.getStateData().setLastStatementNumber( "0000000022" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        if ( (ExpGroupList_PS_001 < (double) w_ia.ImpFilterIyy1ListScrollAmount) )
        {
          f_20972058();
        }
        else 
        {
          globdata.getStateData().setLastSubStatementNumber( "1" );
          f_0_trace();
          {
            f_20972146();
          }
        }
        
      }
    }
  }
  
  public void f_20971640()
  	throws ABException
  {
    func_0020971640_esc_flag = false;
    f_0020971640_esctag: 
    {
      globdata.getStateData().setLastStatementNumber( "0000000031" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        if ( (ExpGroupList_PS_001 < (double) w_ia.ImpFilterIyy1ListScrollAmount) )
        {
          f_20971554();
        }
        else 
        {
          globdata.getStateData().setLastSubStatementNumber( "1" );
          f_0_trace();
          {
            f_20971729();
          }
        }
        
      }
    }
  }
  
  public void f_20972149()
  	throws ABException
  {
    func_0020972149_esc_flag = false;
    f_0020972149_esctag: 
    {
      globdata.getStateData().setLastStatementNumber( "0000000041" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        if ( (ExpGroupList_PS_001 < (double) w_ia.ImpFilterIyy1ListScrollAmount) )
        {
          f_20972153();
        }
        else 
        {
          globdata.getStateData().setLastSubStatementNumber( "1" );
          f_0_trace();
          {
            f_20972229();
          }
        }
        
      }
    }
  }
  
  public void f_20972594()
  	throws ABException
  {
    func_0020972594_esc_flag = false;
    f_0020972594_esctag: 
    {
      globdata.getStateData().setLastStatementNumber( "0000000050" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        if ( (ExpGroupList_PS_001 < (double) w_ia.ImpFilterIyy1ListScrollAmount) )
        {
          f_20971693();
        }
        else 
        {
          globdata.getStateData().setLastSubStatementNumber( "1" );
          f_0_trace();
          {
            f_20972747();
          }
        }
        
      }
    }
  }
  
  public void f_20972058()
  	throws ABException
  {
    func_0020972058_esc_flag = false;
    globdata.getStateData().setLastStatementNumber( "0000000023" );
    f_0_trace();
    if ( trace_ret_code != 8 )
    {
      if ( CompareExit.compareTo(w_la.LocFilterIyy1ListScrollType, "S") == 0 )
      {
        globdata.getStateData().setLastStatementNumber( "0000000024" );
        f_0_trace();
        if ( trace_ret_code != 8 )
        {
          w_la.LocFilterIyy1ListScrollType = FixedStringAttr.valueOf(SPACES, (short)1);
        }
      }
      else 
      {
        globdata.getStateData().setLastSubStatementNumber( "1" );
        f_0_trace();
        {
          globdata.getStateData().setLastStatementNumber( "0000000025" );
          f_0_trace();
          if ( trace_ret_code != 8 )
          {
            ExpGroupList_PS_001 = (int)TIRD2DEC.TIRD2DC1(((double)ExpGroupList_PS_001 + 1), 0, TIRD2DEC.ROUND_NONE, 0);
            if ( (ExpGroupList_PS_001 > w_oa.ExpGroupList_MA) && (ExpGroupList_PS_001 <= 48) )
            w_oa.ExpGroupList_MA = IntAttr.valueOf(ExpGroupList_PS_001);
          }
          globdata.getStateData().setLastStatementNumber( "0000000026" );
          f_0_trace();
          if ( trace_ret_code != 8 )
          {
            f_173015097_rgvc();
            w_oa.ExpGListTypeTinstanceId[ExpGroupList_PS_001-1] = TimestampAttr.valueOf(w_ea.TypeTinstanceId);
            w_oa.ExpGListTypeTreferenceId[ExpGroupList_PS_001-1] = TimestampAttr.valueOf(w_ea.TypeTreferenceId);
            w_oa.ExpGListTypeTcreateUserId[ExpGroupList_PS_001-1] = FixedStringAttr.valueOf(w_ea.TypeTcreateUserId, (short)8);
            w_oa.ExpGListTypeTupdateUserId[ExpGroupList_PS_001-1] = FixedStringAttr.valueOf(w_ea.TypeTupdateUserId, (short)8);
            w_oa.ExpGListTypeTkeyAttrText[ExpGroupList_PS_001-1] = FixedStringAttr.valueOf(w_ea.TypeTkeyAttrText, (short)4);
            w_oa.ExpGListTypeTsearchAttrText[ExpGroupList_PS_001-1] = FixedStringAttr.valueOf(w_ea.TypeTsearchAttrText, (short)20);
            w_oa.ExpGListTypeTotherAttrText[ExpGroupList_PS_001-1] = FixedStringAttr.valueOf(w_ea.TypeTotherAttrText, (short)2);
            w_oa.ExpGListTypeTotherAttrDate[ExpGroupList_PS_001-1] = DateAttr.valueOf(w_ea.TypeTotherAttrDate);
            w_oa.ExpGListTypeTotherAttrTime[ExpGroupList_PS_001-1] = TimeAttr.valueOf(w_ea.TypeTotherAttrTime);
            w_oa.ExpGListTypeTotherAttrAmount[ExpGroupList_PS_001-1] = BigDecimalAttr.valueOf(TIRBDTRU.truncateToBigDecimal(
              w_ea.TypeTotherAttrAmount, 2));
          }
        }
      }
      
    }
  }
  
  public void f_20972146()
  	throws ABException
  {
    func_0020972146_esc_flag = false;
    f_0020972146_esctag: 
    {
      globdata.getStateData().setLastStatementNumber( "0000000027" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        w_oa.ExpErrorIyy1ComponentReasonCode = IntAttr.valueOf((int)TIRD2DEC.TIRD2DC1((double) 
          w_la.LocDontChangeReasonCodesQ11ListFull, 0, TIRD2DEC.ROUND_NONE, 5));
      }
      globdata.getStateData().setLastStatementNumber( "0000000028" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        func_0020972146_esc_flag = true;
        func_0020971920_esc_flag = true;
        f_29360142_esc_close();
        read_each_0068157707_esc_flag = true;
      }
    }
  }
  
  public void f_20971554()
  	throws ABException
  {
    func_0020971554_esc_flag = false;
    globdata.getStateData().setLastStatementNumber( "0000000032" );
    f_0_trace();
    if ( trace_ret_code != 8 )
    {
      if ( CompareExit.compareTo(w_la.LocFilterIyy1ListScrollType, "S") == 0 )
      {
        globdata.getStateData().setLastStatementNumber( "0000000033" );
        f_0_trace();
        if ( trace_ret_code != 8 )
        {
          w_la.LocFilterIyy1ListScrollType = FixedStringAttr.valueOf(SPACES, (short)1);
        }
      }
      else 
      {
        globdata.getStateData().setLastSubStatementNumber( "1" );
        f_0_trace();
        {
          globdata.getStateData().setLastStatementNumber( "0000000034" );
          f_0_trace();
          if ( trace_ret_code != 8 )
          {
            ExpGroupList_PS_001 = (int)TIRD2DEC.TIRD2DC1(((double)ExpGroupList_PS_001 + 1), 0, TIRD2DEC.ROUND_NONE, 0);
            if ( (ExpGroupList_PS_001 > w_oa.ExpGroupList_MA) && (ExpGroupList_PS_001 <= 48) )
            w_oa.ExpGroupList_MA = IntAttr.valueOf(ExpGroupList_PS_001);
          }
          globdata.getStateData().setLastStatementNumber( "0000000035" );
          f_0_trace();
          if ( trace_ret_code != 8 )
          {
            f_173015097_rgvc();
            w_oa.ExpGListTypeTinstanceId[ExpGroupList_PS_001-1] = TimestampAttr.valueOf(w_ea.TypeTinstanceId);
            w_oa.ExpGListTypeTreferenceId[ExpGroupList_PS_001-1] = TimestampAttr.valueOf(w_ea.TypeTreferenceId);
            w_oa.ExpGListTypeTcreateUserId[ExpGroupList_PS_001-1] = FixedStringAttr.valueOf(w_ea.TypeTcreateUserId, (short)8);
            w_oa.ExpGListTypeTupdateUserId[ExpGroupList_PS_001-1] = FixedStringAttr.valueOf(w_ea.TypeTupdateUserId, (short)8);
            w_oa.ExpGListTypeTkeyAttrText[ExpGroupList_PS_001-1] = FixedStringAttr.valueOf(w_ea.TypeTkeyAttrText, (short)4);
            w_oa.ExpGListTypeTsearchAttrText[ExpGroupList_PS_001-1] = FixedStringAttr.valueOf(w_ea.TypeTsearchAttrText, (short)20);
            w_oa.ExpGListTypeTotherAttrText[ExpGroupList_PS_001-1] = FixedStringAttr.valueOf(w_ea.TypeTotherAttrText, (short)2);
            w_oa.ExpGListTypeTotherAttrDate[ExpGroupList_PS_001-1] = DateAttr.valueOf(w_ea.TypeTotherAttrDate);
            w_oa.ExpGListTypeTotherAttrTime[ExpGroupList_PS_001-1] = TimeAttr.valueOf(w_ea.TypeTotherAttrTime);
            w_oa.ExpGListTypeTotherAttrAmount[ExpGroupList_PS_001-1] = BigDecimalAttr.valueOf(TIRBDTRU.truncateToBigDecimal(
              w_ea.TypeTotherAttrAmount, 2));
          }
        }
      }
      
    }
  }
  
  public void f_20971729()
  	throws ABException
  {
    func_0020971729_esc_flag = false;
    f_0020971729_esctag: 
    {
      globdata.getStateData().setLastStatementNumber( "0000000036" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        w_oa.ExpErrorIyy1ComponentReasonCode = IntAttr.valueOf((int)TIRD2DEC.TIRD2DC1((double) 
          w_la.LocDontChangeReasonCodesQ11ListFull, 0, TIRD2DEC.ROUND_NONE, 5));
      }
      globdata.getStateData().setLastStatementNumber( "0000000037" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        func_0020971729_esc_flag = true;
        func_0020971640_esc_flag = true;
        f_29360130_esc_close();
        read_each_0068157453_esc_flag = true;
      }
    }
  }
  
  public void f_20972153()
  	throws ABException
  {
    func_0020972153_esc_flag = false;
    globdata.getStateData().setLastStatementNumber( "0000000042" );
    f_0_trace();
    if ( trace_ret_code != 8 )
    {
      if ( CompareExit.compareTo(w_la.LocFilterIyy1ListScrollType, "S") == 0 )
      {
        globdata.getStateData().setLastStatementNumber( "0000000043" );
        f_0_trace();
        if ( trace_ret_code != 8 )
        {
          w_la.LocFilterIyy1ListScrollType = FixedStringAttr.valueOf(SPACES, (short)1);
        }
      }
      else 
      {
        globdata.getStateData().setLastSubStatementNumber( "1" );
        f_0_trace();
        {
          globdata.getStateData().setLastStatementNumber( "0000000044" );
          f_0_trace();
          if ( trace_ret_code != 8 )
          {
            ExpGroupList_PS_001 = (int)TIRD2DEC.TIRD2DC1(((double)ExpGroupList_PS_001 + 1), 0, TIRD2DEC.ROUND_NONE, 0);
            if ( (ExpGroupList_PS_001 > w_oa.ExpGroupList_MA) && (ExpGroupList_PS_001 <= 48) )
            w_oa.ExpGroupList_MA = IntAttr.valueOf(ExpGroupList_PS_001);
          }
          globdata.getStateData().setLastStatementNumber( "0000000045" );
          f_0_trace();
          if ( trace_ret_code != 8 )
          {
            f_173015097_rgvc();
            w_oa.ExpGListTypeTinstanceId[ExpGroupList_PS_001-1] = TimestampAttr.valueOf(w_ea.TypeTinstanceId);
            w_oa.ExpGListTypeTreferenceId[ExpGroupList_PS_001-1] = TimestampAttr.valueOf(w_ea.TypeTreferenceId);
            w_oa.ExpGListTypeTcreateUserId[ExpGroupList_PS_001-1] = FixedStringAttr.valueOf(w_ea.TypeTcreateUserId, (short)8);
            w_oa.ExpGListTypeTupdateUserId[ExpGroupList_PS_001-1] = FixedStringAttr.valueOf(w_ea.TypeTupdateUserId, (short)8);
            w_oa.ExpGListTypeTkeyAttrText[ExpGroupList_PS_001-1] = FixedStringAttr.valueOf(w_ea.TypeTkeyAttrText, (short)4);
            w_oa.ExpGListTypeTsearchAttrText[ExpGroupList_PS_001-1] = FixedStringAttr.valueOf(w_ea.TypeTsearchAttrText, (short)20);
            w_oa.ExpGListTypeTotherAttrText[ExpGroupList_PS_001-1] = FixedStringAttr.valueOf(w_ea.TypeTotherAttrText, (short)2);
            w_oa.ExpGListTypeTotherAttrDate[ExpGroupList_PS_001-1] = DateAttr.valueOf(w_ea.TypeTotherAttrDate);
            w_oa.ExpGListTypeTotherAttrTime[ExpGroupList_PS_001-1] = TimeAttr.valueOf(w_ea.TypeTotherAttrTime);
            w_oa.ExpGListTypeTotherAttrAmount[ExpGroupList_PS_001-1] = BigDecimalAttr.valueOf(TIRBDTRU.truncateToBigDecimal(
              w_ea.TypeTotherAttrAmount, 2));
          }
        }
      }
      
    }
  }
  
  public void f_20972229()
  	throws ABException
  {
    func_0020972229_esc_flag = false;
    f_0020972229_esctag: 
    {
      globdata.getStateData().setLastStatementNumber( "0000000046" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        w_oa.ExpErrorIyy1ComponentReasonCode = IntAttr.valueOf((int)TIRD2DEC.TIRD2DC1((double) 
          w_la.LocDontChangeReasonCodesQ11ListFull, 0, TIRD2DEC.ROUND_NONE, 5));
      }
      globdata.getStateData().setLastStatementNumber( "0000000047" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        func_0020972229_esc_flag = true;
        func_0020972149_esc_flag = true;
        f_29360150_esc_close();
        read_each_0068157861_esc_flag = true;
      }
    }
  }
  
  public void f_20971693()
  	throws ABException
  {
    func_0020971693_esc_flag = false;
    globdata.getStateData().setLastStatementNumber( "0000000051" );
    f_0_trace();
    if ( trace_ret_code != 8 )
    {
      if ( CompareExit.compareTo(w_la.LocFilterIyy1ListScrollType, "S") == 0 )
      {
        globdata.getStateData().setLastStatementNumber( "0000000052" );
        f_0_trace();
        if ( trace_ret_code != 8 )
        {
          w_la.LocFilterIyy1ListScrollType = FixedStringAttr.valueOf(SPACES, (short)1);
        }
      }
      else 
      {
        globdata.getStateData().setLastSubStatementNumber( "1" );
        f_0_trace();
        {
          globdata.getStateData().setLastStatementNumber( "0000000053" );
          f_0_trace();
          if ( trace_ret_code != 8 )
          {
            ExpGroupList_PS_001 = (int)TIRD2DEC.TIRD2DC1(((double)ExpGroupList_PS_001 + 1), 0, TIRD2DEC.ROUND_NONE, 0);
            if ( (ExpGroupList_PS_001 > w_oa.ExpGroupList_MA) && (ExpGroupList_PS_001 <= 48) )
            w_oa.ExpGroupList_MA = IntAttr.valueOf(ExpGroupList_PS_001);
          }
          globdata.getStateData().setLastStatementNumber( "0000000054" );
          f_0_trace();
          if ( trace_ret_code != 8 )
          {
            f_173015097_rgvc();
            w_oa.ExpGListTypeTinstanceId[ExpGroupList_PS_001-1] = TimestampAttr.valueOf(w_ea.TypeTinstanceId);
            w_oa.ExpGListTypeTreferenceId[ExpGroupList_PS_001-1] = TimestampAttr.valueOf(w_ea.TypeTreferenceId);
            w_oa.ExpGListTypeTcreateUserId[ExpGroupList_PS_001-1] = FixedStringAttr.valueOf(w_ea.TypeTcreateUserId, (short)8);
            w_oa.ExpGListTypeTupdateUserId[ExpGroupList_PS_001-1] = FixedStringAttr.valueOf(w_ea.TypeTupdateUserId, (short)8);
            w_oa.ExpGListTypeTkeyAttrText[ExpGroupList_PS_001-1] = FixedStringAttr.valueOf(w_ea.TypeTkeyAttrText, (short)4);
            w_oa.ExpGListTypeTsearchAttrText[ExpGroupList_PS_001-1] = FixedStringAttr.valueOf(w_ea.TypeTsearchAttrText, (short)20);
            w_oa.ExpGListTypeTotherAttrText[ExpGroupList_PS_001-1] = FixedStringAttr.valueOf(w_ea.TypeTotherAttrText, (short)2);
            w_oa.ExpGListTypeTotherAttrDate[ExpGroupList_PS_001-1] = DateAttr.valueOf(w_ea.TypeTotherAttrDate);
            w_oa.ExpGListTypeTotherAttrTime[ExpGroupList_PS_001-1] = TimeAttr.valueOf(w_ea.TypeTotherAttrTime);
            w_oa.ExpGListTypeTotherAttrAmount[ExpGroupList_PS_001-1] = BigDecimalAttr.valueOf(TIRBDTRU.truncateToBigDecimal(
              w_ea.TypeTotherAttrAmount, 2));
          }
        }
      }
      
    }
  }
  
  public void f_20972747()
  	throws ABException
  {
    func_0020972747_esc_flag = false;
    f_0020972747_esctag: 
    {
      globdata.getStateData().setLastStatementNumber( "0000000055" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        w_oa.ExpErrorIyy1ComponentReasonCode = IntAttr.valueOf((int)TIRD2DEC.TIRD2DC1((double) 
          w_la.LocDontChangeReasonCodesQ11ListFull, 0, TIRD2DEC.ROUND_NONE, 5));
      }
      globdata.getStateData().setLastStatementNumber( "0000000056" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        func_0020972747_esc_flag = true;
        func_0020972594_esc_flag = true;
        f_29360134_esc_close();
        read_each_0068158093_esc_flag = true;
      }
    }
  }
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // INITIALIZATION UTILITY FUNCTIONS 
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  
  public void f_22020279_localAlloc(String abname)
  {
    // Request localview allocation 
    w_la = (gen.ort.yyy.DYYY0351_LA)(iefRuntimeParm2.getInstance("gen.ort.yyy.DYYY0351_LA"));
    if ( w_la == null )
    {
      globdata.getStateData().setCurrentABId( "0022020279" );
      globdata.getStateData().setCurrentABName( abname );
      globdata.getErrorData().setErrorEncounteredSW( ErrorData.ERROR_FOUND_SW );
      globdata.getErrorData().setLastStatus( ErrorData.IEF_ALLOCATION_ERROR_FL_LS );
    }
  }
  
  public void f_22020279_init()
  	throws ABException
  {
    
    tkey_attr_001EF = SPACES;
    tkey_attr_002EN = SPACES;
    tsearch_attr_003EF = SPACES;
    tsearch_attr_004EN = SPACES;
    tother_attr_005EF = SPACES;
    tother_attr_006EN = SPACES;
    tcreate_userid_007EF = SPACES;
    tcreate_userid_008EN = SPACES;
    tupdate_userid_009EF = SPACES;
    tupdate_userid_010EN = SPACES;
    tinstance_id_011EF = TIRVW2S.TIRVW2S(globdata, "IEFDB", "00010101000000000000");
    tinstance_id_012EN = TIRVW2S.TIRVW2S(globdata, "IEFDB", "00010101000000000000");
    treference_id_013EF = TIRVW2S.TIRVW2S(globdata, "IEFDB", "00010101000000000000");
    treference_id_014EN = TIRVW2S.TIRVW2S(globdata, "IEFDB", "00010101000000000000");
    tother_date_015EF = TIRVW2D.TIRVW2D(globdata, "IEFDB", 0);
    tother_date_016EN = TIRVW2D.TIRVW2D(globdata, "IEFDB", 0);
    tother_time_017EF = TIRVW2T.TIRVW2T(globdata, "IEFDB", 0);
    tother_time_018EN = TIRVW2T.TIRVW2T(globdata, "IEFDB", 0);
    tother_amount_019EF = new BigDecimal("0.0");
    tother_amount_020EN = new BigDecimal("0.0");
    if ( nestingLevel < 2 )
    {
      w_la.reset();
    }
    w_ea.reset();
    w_oa.ExpGroupList_MA = 0;
    for(ExpGroupList_PS_001 = 1; ExpGroupList_PS_001 <= 48; ++(ExpGroupList_PS_001))
    {
      w_oa.ExpGListTypeTinstanceId[ExpGroupList_PS_001-1] = "00000000000000000000";
      w_oa.ExpGListTypeTreferenceId[ExpGroupList_PS_001-1] = "00000000000000000000";
      w_oa.ExpGListTypeTcreateUserId[ExpGroupList_PS_001-1] = "        ";
      w_oa.ExpGListTypeTupdateUserId[ExpGroupList_PS_001-1] = "        ";
      w_oa.ExpGListTypeTkeyAttrText[ExpGroupList_PS_001-1] = "    ";
      w_oa.ExpGListTypeTsearchAttrText[ExpGroupList_PS_001-1] = "                    ";
      w_oa.ExpGListTypeTotherAttrText[ExpGroupList_PS_001-1] = "  ";
      w_oa.ExpGListTypeTotherAttrDate[ExpGroupList_PS_001-1] = 00000000;
      w_oa.ExpGListTypeTotherAttrTime[ExpGroupList_PS_001-1] = 00000000;
      w_oa.ExpGListTypeTotherAttrAmount[ExpGroupList_PS_001-1] = BigDecimalAttr.getDefaultValue();
    }
    w_oa.ExpErrorIyy1ComponentSeverityCode = " ";
    w_oa.ExpErrorIyy1ComponentRollbackIndicator = " ";
    w_oa.ExpErrorIyy1ComponentOriginServid = 0.0;
    w_oa.ExpErrorIyy1ComponentContextString = "";
    w_oa.ExpErrorIyy1ComponentReturnCode = 0;
    w_oa.ExpErrorIyy1ComponentReasonCode = 0;
    w_oa.ExpErrorIyy1ComponentChecksum = "               ";
    Type_es = ABBase.EV_UNUSABLE;
    Type_lk = ABBase.EVW_UNLOCKED;
    w_ea.TypeTinstanceId = "00000000000000000000";
    w_ea.TypeTreferenceId = "00000000000000000000";
    ExpGroupList_PS_001 = 1;
  }
  
  public void f_0_trace()
  	throws ABException
  {
    trace_ret_code = TIRTRCE.TIRTRCE(iefRuntimeParm1, iefRuntimeParm2, globdata, padtext, padview);
    if ( trace_ret_code == 20 )
    {
      throw new ABException();
    }
  }
  
  public void padview_init()
  {
padview[0] = PadView.getInstance("IMPORT                          ", 0, 0, 0, (short)1, PadView.VT_BASE, PadView.DT_NONE, w_ia, 
      "w_ia");
    padview[1] = PadView.getInstance("IMP_ERROR                       ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_ia, 
      null);
    padview[2] = PadView.getInstance("IYY1_COMPONENT                  ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, w_ia,
       null);
    padview[3] = PadView.getInstance("SEVERITY_CODE                   ", 1, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_ia, "ImpErrorIyy1ComponentSeverityCode");
    padview[4] = PadView.getInstance("ROLLBACK_INDICATOR              ", 1, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_ia, "ImpErrorIyy1ComponentRollbackIndicator");
    padview[5] = PadView.getInstance("ORIGIN_SERVID                   ", 15, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_ia, "ImpErrorIyy1ComponentOriginServid");
    padview[6] = PadView.getInstance("CONTEXT_STRING                  ", 512, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_VARCHAR, w_ia, "ImpErrorIyy1ComponentContextString");
    padview[7] = PadView.getInstance("RETURN_CODE                     ", 5, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_NUMERIC,
       w_ia, "ImpErrorIyy1ComponentReturnCode");
    padview[8] = PadView.getInstance("REASON_CODE                     ", 5, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_NUMERIC,
       w_ia, "ImpErrorIyy1ComponentReasonCode");
    padview[9] = PadView.getInstance("CHECKSUM                        ", 15, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_ia, "ImpErrorIyy1ComponentChecksum");
    padview[10] = PadView.getInstance("IMP_FILTER                      ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_ia, 
      null);
    padview[11] = PadView.getInstance("IYY1_LIST                       ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_ia, null);
    padview[12] = PadView.getInstance("SORT_OPTION                     ", 3, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_ia, "ImpFilterIyy1ListSortOption");
    padview[13] = PadView.getInstance("SCROLL_TYPE                     ", 1, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_ia, "ImpFilterIyy1ListScrollType");
    padview[14] = PadView.getInstance("LIST_DIRECTION                  ", 1, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_ia, "ImpFilterIyy1ListListDirection");
    padview[15] = PadView.getInstance("SCROLL_AMOUNT                   ", 5, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_ia, "ImpFilterIyy1ListScrollAmount");
    padview[16] = PadView.getInstance("ORDER_BY_FIELD_NUM              ", 1, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_ia, "ImpFilterIyy1ListOrderByFieldNum");
    padview[17] = PadView.getInstance("IMP_FROM                        ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_ia, 
      null);
    padview[18] = PadView.getInstance("TYPE                            ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_ia, null);
    padview[19] = PadView.getInstance("TINSTANCE_ID                    ", 20, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_TIMESTAMP, w_ia, "ImpFromTypeTinstanceId");
    padview[20] = PadView.getInstance("TKEY_ATTR_TEXT                  ", 4, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_ia, "ImpFromTypeTkeyAttrText");
    padview[21] = PadView.getInstance("TSEARCH_ATTR_TEXT               ", 20, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_ia, "ImpFromTypeTsearchAttrText");
    padview[22] = PadView.getInstance("IMP_FILTER_START                ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_ia, 
      null);
    padview[23] = PadView.getInstance("TYPE                            ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_ia, null);
    padview[24] = PadView.getInstance("TKEY_ATTR_TEXT                  ", 4, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_ia, "ImpFilterStartTypeTkeyAttrText");
    padview[25] = PadView.getInstance("IMP_FILTER_STOP                 ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_ia, 
      null);
    padview[26] = PadView.getInstance("TYPE                            ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_ia, null);
    padview[27] = PadView.getInstance("TKEY_ATTR_TEXT                  ", 4, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_ia, "ImpFilterStopTypeTkeyAttrText");
    padview[28] = PadView.getInstance("IMP_FILTER                      ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_ia, 
      null);
    padview[29] = PadView.getInstance("TYPE                            ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_ia, null);
    padview[30] = PadView.getInstance("TSEARCH_ATTR_TEXT               ", 20, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_ia, "ImpFilterTypeTsearchAttrText");
    padview[31] = PadView.getInstance("TOTHER_ATTR_TEXT                ", 2, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_ia, "ImpFilterTypeTotherAttrText");
    padview[32] = PadView.getInstance("EXPORT                          ", 0, 0, 0, (short)1, PadView.VT_BASE, PadView.DT_NONE, w_oa, 
      "w_oa");
    padview[33] = PadView.getInstance("EXP_GROUP_LIST                  ", 0, 0, 48, (short)2, PadView.VT_GROUP, PadView.DT_NONE, 
      w_oa, "ExpGroupList_MA");
    padview[34] = PadView.getInstance("EXP_G_LIST                      ", 0, 0, 0, (short)3, PadView.VT_VIEW, PadView.DT_NONE, w_oa, 
      null);
    padview[35] = PadView.getInstance("TYPE                            ", 0, 0, 0, (short)4, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_oa, null);
    padview[36] = PadView.getInstance("TINSTANCE_ID                    ", 20, 0, 0, (short)4, PadView.VT_PREDICATE, 
      PadView.DT_TIMESTAMP, w_oa, "ExpGListTypeTinstanceId");
    padview[37] = PadView.getInstance("TREFERENCE_ID                   ", 20, 0, 0, (short)4, PadView.VT_PREDICATE, 
      PadView.DT_TIMESTAMP, w_oa, "ExpGListTypeTreferenceId");
    padview[38] = PadView.getInstance("TCREATE_USER_ID                 ", 8, 0, 0, (short)4, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_oa, "ExpGListTypeTcreateUserId");
    padview[39] = PadView.getInstance("TUPDATE_USER_ID                 ", 8, 0, 0, (short)4, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_oa, "ExpGListTypeTupdateUserId");
    padview[40] = PadView.getInstance("TKEY_ATTR_TEXT                  ", 4, 0, 0, (short)4, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_oa, "ExpGListTypeTkeyAttrText");
    padview[41] = PadView.getInstance("TSEARCH_ATTR_TEXT               ", 20, 0, 0, (short)4, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_oa, "ExpGListTypeTsearchAttrText");
    padview[42] = PadView.getInstance("TOTHER_ATTR_TEXT                ", 2, 0, 0, (short)4, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_oa, "ExpGListTypeTotherAttrText");
    padview[43] = PadView.getInstance("TOTHER_ATTR_DATE                ", 8, 0, 0, (short)4, PadView.VT_PREDICATE, PadView.DT_DATE, 
      w_oa, "ExpGListTypeTotherAttrDate");
    padview[44] = PadView.getInstance("TOTHER_ATTR_TIME                ", 6, 0, 0, (short)4, PadView.VT_PREDICATE, PadView.DT_TIME, 
      w_oa, "ExpGListTypeTotherAttrTime");
    padview[45] = PadView.getInstance("TOTHER_ATTR_AMOUNT              ", 17, 2, 0, (short)4, PadView.VT_PREDICATE, PadView.DT_FIXED,
       w_oa, "ExpGListTypeTotherAttrAmount");
    padview[46] = PadView.getInstance("EXP_ERROR                       ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_oa, 
      null);
    padview[47] = PadView.getInstance("IYY1_COMPONENT                  ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_oa, null);
    padview[48] = PadView.getInstance("SEVERITY_CODE                   ", 1, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_oa, "ExpErrorIyy1ComponentSeverityCode");
    padview[49] = PadView.getInstance("ROLLBACK_INDICATOR              ", 1, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_oa, "ExpErrorIyy1ComponentRollbackIndicator");
    padview[50] = PadView.getInstance("ORIGIN_SERVID                   ", 15, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_oa, "ExpErrorIyy1ComponentOriginServid");
    padview[51] = PadView.getInstance("CONTEXT_STRING                  ", 512, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_VARCHAR, w_oa, "ExpErrorIyy1ComponentContextString");
    padview[52] = PadView.getInstance("RETURN_CODE                     ", 5, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_oa, "ExpErrorIyy1ComponentReturnCode");
    padview[53] = PadView.getInstance("REASON_CODE                     ", 5, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_oa, "ExpErrorIyy1ComponentReasonCode");
    padview[54] = PadView.getInstance("CHECKSUM                        ", 15, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_oa, "ExpErrorIyy1ComponentChecksum");
    padview[55] = PadView.getInstance("ENTITY                          ", 0, 0, 0, (short)1, PadView.VT_BASE, PadView.DT_NONE, w_ea, 
      "w_ea");
    padview[56] = PadView.getInstance("                                ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_ea, 
      null);
    padview[57] = PadView.getInstance("TYPE                            ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_ea, null);
    padview[58] = PadView.getInstance("TINSTANCE_ID                    ", 20, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_TIMESTAMP, w_ea, "TypeTinstanceId");
    padview[59] = PadView.getInstance("TREFERENCE_ID                   ", 20, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_TIMESTAMP, w_ea, "TypeTreferenceId");
    padview[60] = PadView.getInstance("TCREATE_USER_ID                 ", 8, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_ea, "TypeTcreateUserId");
    padview[61] = PadView.getInstance("TUPDATE_USER_ID                 ", 8, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_ea, "TypeTupdateUserId");
    padview[62] = PadView.getInstance("TKEY_ATTR_TEXT                  ", 4, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_ea, "TypeTkeyAttrText");
    padview[63] = PadView.getInstance("TSEARCH_ATTR_TEXT               ", 20, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_ea, "TypeTsearchAttrText");
    padview[64] = PadView.getInstance("TOTHER_ATTR_TEXT                ", 2, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_ea, "TypeTotherAttrText");
    padview[65] = PadView.getInstance("TOTHER_ATTR_DATE                ", 8, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_DATE, 
      w_ea, "TypeTotherAttrDate");
    padview[66] = PadView.getInstance("TOTHER_ATTR_TIME                ", 6, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TIME, 
      w_ea, "TypeTotherAttrTime");
    padview[67] = PadView.getInstance("TOTHER_ATTR_AMOUNT              ", 17, 2, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_FIXED,
       w_ea, "TypeTotherAttrAmount");
    padview[68] = PadView.getInstance("LOCAL                           ", 0, 0, 0, (short)1, PadView.VT_BASE, PadView.DT_NONE, w_la, 
      "w_la");
    padview[69] = PadView.getInstance("LOC_FILTER                      ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_la, 
      null);
    padview[70] = PadView.getInstance("IYY1_LIST                       ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_la, null);
    padview[71] = PadView.getInstance("SCROLL_TYPE                     ", 1, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_la, "LocFilterIyy1ListScrollType");
    padview[72] = PadView.getInstance("LOC                             ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_la, 
      null);
    padview[73] = PadView.getInstance("DONT_CHANGE_RETURN_CODES        ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_la, null);
    padview[74] = PadView.getInstance("1_OK                            ", 5, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_la, "LocDontChangeReturnCodesQ1Ok");
    padview[75] = PadView.getInstance("LOC                             ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_la, 
      null);
    padview[76] = PadView.getInstance("DONT_CHANGE_REASON_CODES        ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_la, null);
    padview[77] = PadView.getInstance("1_DEFAULT                       ", 5, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_la, "LocDontChangeReasonCodesQ1Default");
    padview[78] = PadView.getInstance("11_LIST_FULL                    ", 5, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_la, "LocDontChangeReasonCodesQ11ListFull");
    padview[79] = PadView.getInstance("12_LIST_EMPTY                   ", 5, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_la, "LocDontChangeReasonCodesQ12ListEmpty");
    padview[80] = PadView.getInstance("******** BOTTOM OF DATA ********", 0, 0, 0, (short)0, PadView.VT_END, PadView.DT_NONE, w_la, 
      null);
  }
  public void f_29360142_open()
  	throws ABException
  {
    sl_29360142 = ErrorData.SUCCEEDS_FL_LS;
    Type_001cd = ABBase.PV_SELECT;
    Type_lk = ABBase.EVW_UNLOCKED;
    f_29360142_moveb();
    
    if ( sl_29360142.equals( ErrorData.SUCCEEDS_FL_LS ) == true )
    {
      valChkDeadlockTimeout = false;
      valChkDBError = false;
      Type_es = ABBase.EV_USABLE;
      sqlException = null;
      try {
        SQLStatement.setLength(0);
        SQLStatement.append("SELECT ");
        SQLStatement.append("VDVYYYT01.`TINSTANCE_ID`,");
        SQLStatement.append("VDVYYYT01.`TREFERENCE_ID`,");
        SQLStatement.append("VDVYYYT01.`TCREATE_USERID`,");
        SQLStatement.append("VDVYYYT01.`TUPDATE_USERID`,");
        SQLStatement.append("VDVYYYT01.`TKEY_ATTR`,");
        SQLStatement.append("VDVYYYT01.`TSEARCH_ATTR`,");
        SQLStatement.append("VDVYYYT01.`TOTHER_ATTR`,");
        SQLStatement.append("VDVYYYT01.`TOTHER_DATE`,");
        SQLStatement.append("VDVYYYT01.`TOTHER_TIME`,");
        SQLStatement.append("VDVYYYT01.`TOTHER_AMOUNT`");
        SQLStatement.append(" FROM ");
        SQLStatement.append("`VDVYYYT` VDVYYYT01");
        SQLStatement.append(" WHERE ");
        SQLStatement.append("(");
        SQLStatement.append(
          "(VDVYYYT01.`TSEARCH_ATTR` > ? OR (VDVYYYT01.`TSEARCH_ATTR` = ? AND (VDVYYYT01.`TKEY_ATTR` >= ?))) AND VDVYYYT01.`TKEY_AT")
          ;
        SQLStatement.append(
          "TR` >= ? AND VDVYYYT01.`TKEY_ATTR` <= ? AND VDVYYYT01.`TSEARCH_ATTR` LIKE ? AND VDVYYYT01.`TOTHER_ATTR` LIKE ?");
        SQLStatement.append(")");
        SQLStatement.append("  ORDER BY 6 ASC ,");
        SQLStatement.append(" 5 ASC ");
        if ( globdata.getDBMSData().getDBMSManager().isDBMS("IEFDB", "DB2") )
        {
          SQLStatement.append(" WITH UR ");
        }
        hstmt_0037988323_1 = globdata.getDBMSData().getDBMSManager().getStatement(globdata, iefRuntimeParm2, "IEFDB", 
          SQLStatement.toString());
        globdata.getDBMSData().getDBMSManager().bindParameterString("IEFDB", hstmt_0037988323_1, 1, TsearchAttrText_001TP);
        globdata.getDBMSData().getDBMSManager().bindParameterString("IEFDB", hstmt_0037988323_1, 2, TsearchAttrText_001TP);
        globdata.getDBMSData().getDBMSManager().bindParameterString("IEFDB", hstmt_0037988323_1, 3, TkeyAttrText_002TP);
        globdata.getDBMSData().getDBMSManager().bindParameterString("IEFDB", hstmt_0037988323_1, 4, TkeyAttrText_003TP);
        globdata.getDBMSData().getDBMSManager().bindParameterString("IEFDB", hstmt_0037988323_1, 5, TkeyAttrText_004TP);
        globdata.getDBMSData().getDBMSManager().bindParameterString("IEFDB", hstmt_0037988323_1, 6, TsearchAttrText_005TP);
        globdata.getDBMSData().getDBMSManager().bindParameterString("IEFDB", hstmt_0037988323_1, 7, TotherAttrText_006TP);
        hstmt_0037988323_1.execute();
        hstmt_0037988323_1_rs = hstmt_0037988323_1.getResultSet();
      } catch( SQLException e ) {
        sqlException = e;
      }
      if ( !((globdata.getDBMSData().getDBMSManager().wasSuccessful(sqlException))) )
      {
          f_29360142_jdbc_dberror();
      }
    }
  }
  
  public void f_29360142_fetch()
  	throws ABException
  {
    sqlException = null;
    try {
      if ( hstmt_0037988323_1_rs.next() == false )
      {
        throw new SQLException("No data found");
      }
      tinstance_id_011EF = hstmt_0037988323_1_rs.getTimestamp(1);
      treference_id_013EF = hstmt_0037988323_1_rs.getTimestamp(2);
      tcreate_userid_007EF = globdata.getDBMSData().getDBMSManager().getStringFromResultSet("IEFDB", hstmt_0037988323_1_rs, 3);
      tupdate_userid_009EF = globdata.getDBMSData().getDBMSManager().getStringFromResultSet("IEFDB", hstmt_0037988323_1_rs, 4);
      tkey_attr_001EF = globdata.getDBMSData().getDBMSManager().getStringFromResultSet("IEFDB", hstmt_0037988323_1_rs, 5);
      tsearch_attr_003EF = globdata.getDBMSData().getDBMSManager().getStringFromResultSet("IEFDB", hstmt_0037988323_1_rs, 6);
      tother_attr_005EF = globdata.getDBMSData().getDBMSManager().getStringFromResultSet("IEFDB", hstmt_0037988323_1_rs, 7);
      tother_date_015EF = hstmt_0037988323_1_rs.getDate(8);
      tother_time_017EF = globdata.getDBMSData().getDBMSManager().getTimeFromResultSet(globdata, iefRuntimeParm2, "IEFDB", 
        hstmt_0037988323_1_rs, 9);
      tother_amount_019EF = globdata.getDBMSData().getDBMSManager().getBigDecimalFromResultSet("IEFDB", hstmt_0037988323_1_rs, 10);
    } catch( SQLException e ) {
      sqlException = e;
    }
    
    if ( globdata.getDBMSData().getDBMSManager().wasSuccessful(sqlException) )
    {
      f_29360142_movea();
      if ( sl_29360142.equals( ErrorData.SUCCEEDS_FL_LS ) )
      {
        Type_es = ABBase.EV_USABLE;
      }
      else {
        Type_es = ABBase.EV_UNUSABLE;
      }
    }
    else if ( globdata.getDBMSData().getDBMSManager().wasNoDataFound(sqlException) )
    {
      sl_29360142 = ErrorData.NOT_FOUND_FL_LS;
      Type_es = ABBase.EV_UNUSABLE;
    }
    else {
      f_29360142_jdbc_dberror();
    }
  }
  
  public void f_29360142_esc_close()
  	throws ABException
  {
    try {
      if ( hstmt_0037988323_1_rs != null )
      {
        hstmt_0037988323_1_rs.close();
        hstmt_0037988323_1_rs = null;
      }
      if ( hstmt_0037988323_1 != null )
      {
        hstmt_0037988323_1.close();
        hstmt_0037988323_1 = null;
      }
    } catch( SQLException e ) {
      if ( globdata.getDBMSData().getDBMSManager().wasSuccessful(e) == false )
      {
        sqlException = e;
        f_29360142_jdbc_dberror();
      }
    }
  }
  public void f_29360142_close()
  	throws ABException
  {
    Type_es = ABBase.EV_UNUSABLE;
  }
  
  public void f_29360142_jdbc_dberror()
  	throws ABException
  {
    globdata.getErrorData().setStatus( ErrorData.FATAL_ERROR_FL_LS );
    globdata.getDBMSData().setActionId( 21 );
    globdata.getErrorData().setLastStatus( ErrorData.DB_ERROR_FL_LS );
    if ( sqlException != null )
    {
      globdata.getErrorData().setErrorMessage(sqlException);
      if ( globdata.getDBMSData().getDBMSManager().wasDeadlockOrTimeout("IEFDB", sqlException) )
      {
        globdata.getErrorData().setLastStatus( ErrorData.DB_DEADLOCK_TIMEOUT_FL_LS );
      }
    }
    sl_29360142 = globdata.getErrorData().getLastStatus();
    throw new ABException();
  }
  
  public void f_29360142_moveb()
  	throws ABException
  {
    TsearchAttrText_001TP = w_ia.ImpFromTypeTsearchAttrText;
    TkeyAttrText_002TP = w_ia.ImpFromTypeTkeyAttrText;
    TkeyAttrText_003TP = w_ia.ImpFilterStartTypeTkeyAttrText;
    TkeyAttrText_004TP = w_ia.ImpFilterStopTypeTkeyAttrText;
    TsearchAttrText_005TP = w_ia.ImpFilterTypeTsearchAttrText;
    TotherAttrText_006TP = w_ia.ImpFilterTypeTotherAttrText;
  }
  
  public void f_29360142_movea()
  	throws ABException
  {
    w_ea.TypeTinstanceId = TimestampAttr.valueOf(TIRS2VW.TIRS2VW(globdata, "IEFDB", tinstance_id_011EF));
    w_ea.TypeTreferenceId = TimestampAttr.valueOf(TIRS2VW.TIRS2VW(globdata, "IEFDB", treference_id_013EF));
    w_ea.TypeTcreateUserId = FixedStringAttr.valueOf(tcreate_userid_007EF, (short)8);
    w_ea.TypeTupdateUserId = FixedStringAttr.valueOf(tupdate_userid_009EF, (short)8);
    w_ea.TypeTkeyAttrText = FixedStringAttr.valueOf(tkey_attr_001EF, (short)4);
    w_ea.TypeTsearchAttrText = FixedStringAttr.valueOf(tsearch_attr_003EF, (short)20);
    w_ea.TypeTotherAttrText = FixedStringAttr.valueOf(tother_attr_005EF, (short)2);
    w_ea.TypeTotherAttrDate = DateAttr.valueOf(TIRD2VW.TIRD2VW(globdata, "IEFDB", tother_date_015EF));
    w_ea.TypeTotherAttrTime = TimeAttr.valueOf(TIRT2VW.TIRT2VW(globdata, "IEFDB", tother_time_017EF));
    w_ea.TypeTotherAttrAmount = BigDecimalAttr.valueOf(TIRBDRND.roundToBigDecimal(tother_amount_019EF, 2));
  }
  public void f_29360130_open()
  	throws ABException
  {
    sl_29360130 = ErrorData.SUCCEEDS_FL_LS;
    Type_001cd = ABBase.PV_SELECT;
    Type_lk = ABBase.EVW_UNLOCKED;
    f_29360130_moveb();
    
    if ( sl_29360130.equals( ErrorData.SUCCEEDS_FL_LS ) == true )
    {
      valChkDeadlockTimeout = false;
      valChkDBError = false;
      Type_es = ABBase.EV_USABLE;
      sqlException = null;
      try {
        SQLStatement.setLength(0);
        SQLStatement.append("SELECT ");
        SQLStatement.append("VDVYYYT01.`TINSTANCE_ID`,");
        SQLStatement.append("VDVYYYT01.`TREFERENCE_ID`,");
        SQLStatement.append("VDVYYYT01.`TCREATE_USERID`,");
        SQLStatement.append("VDVYYYT01.`TUPDATE_USERID`,");
        SQLStatement.append("VDVYYYT01.`TKEY_ATTR`,");
        SQLStatement.append("VDVYYYT01.`TSEARCH_ATTR`,");
        SQLStatement.append("VDVYYYT01.`TOTHER_ATTR`,");
        SQLStatement.append("VDVYYYT01.`TOTHER_DATE`,");
        SQLStatement.append("VDVYYYT01.`TOTHER_TIME`,");
        SQLStatement.append("VDVYYYT01.`TOTHER_AMOUNT`");
        SQLStatement.append(" FROM ");
        SQLStatement.append("`VDVYYYT` VDVYYYT01");
        SQLStatement.append(" WHERE ");
        SQLStatement.append("(");
        SQLStatement.append(
          "VDVYYYT01.`TKEY_ATTR` >= ? AND VDVYYYT01.`TKEY_ATTR` >= ? AND VDVYYYT01.`TKEY_ATTR` <= ? AND VDVYYYT01.`TSEARCH_ATTR` LI")
          ;
        SQLStatement.append("KE ? AND VDVYYYT01.`TOTHER_ATTR` LIKE ?");
        SQLStatement.append(")");
        SQLStatement.append("  ORDER BY 5 ASC ");
        if ( globdata.getDBMSData().getDBMSManager().isDBMS("IEFDB", "DB2") )
        {
          SQLStatement.append(" WITH UR ");
        }
        hstmt_0037920443_1 = globdata.getDBMSData().getDBMSManager().getStatement(globdata, iefRuntimeParm2, "IEFDB", 
          SQLStatement.toString());
        globdata.getDBMSData().getDBMSManager().bindParameterString("IEFDB", hstmt_0037920443_1, 1, TkeyAttrText_002TP);
        globdata.getDBMSData().getDBMSManager().bindParameterString("IEFDB", hstmt_0037920443_1, 2, TkeyAttrText_003TP);
        globdata.getDBMSData().getDBMSManager().bindParameterString("IEFDB", hstmt_0037920443_1, 3, TkeyAttrText_004TP);
        globdata.getDBMSData().getDBMSManager().bindParameterString("IEFDB", hstmt_0037920443_1, 4, TsearchAttrText_005TP);
        globdata.getDBMSData().getDBMSManager().bindParameterString("IEFDB", hstmt_0037920443_1, 5, TotherAttrText_006TP);
        hstmt_0037920443_1.execute();
        hstmt_0037920443_1_rs = hstmt_0037920443_1.getResultSet();
      } catch( SQLException e ) {
        sqlException = e;
      }
      if ( !((globdata.getDBMSData().getDBMSManager().wasSuccessful(sqlException))) )
      {
          f_29360130_jdbc_dberror();
      }
    }
  }
  
  public void f_29360130_fetch()
  	throws ABException
  {
    sqlException = null;
    try {
      if ( hstmt_0037920443_1_rs.next() == false )
      {
        throw new SQLException("No data found");
      }
      tinstance_id_011EF = hstmt_0037920443_1_rs.getTimestamp(1);
      treference_id_013EF = hstmt_0037920443_1_rs.getTimestamp(2);
      tcreate_userid_007EF = globdata.getDBMSData().getDBMSManager().getStringFromResultSet("IEFDB", hstmt_0037920443_1_rs, 3);
      tupdate_userid_009EF = globdata.getDBMSData().getDBMSManager().getStringFromResultSet("IEFDB", hstmt_0037920443_1_rs, 4);
      tkey_attr_001EF = globdata.getDBMSData().getDBMSManager().getStringFromResultSet("IEFDB", hstmt_0037920443_1_rs, 5);
      tsearch_attr_003EF = globdata.getDBMSData().getDBMSManager().getStringFromResultSet("IEFDB", hstmt_0037920443_1_rs, 6);
      tother_attr_005EF = globdata.getDBMSData().getDBMSManager().getStringFromResultSet("IEFDB", hstmt_0037920443_1_rs, 7);
      tother_date_015EF = hstmt_0037920443_1_rs.getDate(8);
      tother_time_017EF = globdata.getDBMSData().getDBMSManager().getTimeFromResultSet(globdata, iefRuntimeParm2, "IEFDB", 
        hstmt_0037920443_1_rs, 9);
      tother_amount_019EF = globdata.getDBMSData().getDBMSManager().getBigDecimalFromResultSet("IEFDB", hstmt_0037920443_1_rs, 10);
    } catch( SQLException e ) {
      sqlException = e;
    }
    
    if ( globdata.getDBMSData().getDBMSManager().wasSuccessful(sqlException) )
    {
      f_29360130_movea();
      if ( sl_29360130.equals( ErrorData.SUCCEEDS_FL_LS ) )
      {
        Type_es = ABBase.EV_USABLE;
      }
      else {
        Type_es = ABBase.EV_UNUSABLE;
      }
    }
    else if ( globdata.getDBMSData().getDBMSManager().wasNoDataFound(sqlException) )
    {
      sl_29360130 = ErrorData.NOT_FOUND_FL_LS;
      Type_es = ABBase.EV_UNUSABLE;
    }
    else {
      f_29360130_jdbc_dberror();
    }
  }
  
  public void f_29360130_esc_close()
  	throws ABException
  {
    try {
      if ( hstmt_0037920443_1_rs != null )
      {
        hstmt_0037920443_1_rs.close();
        hstmt_0037920443_1_rs = null;
      }
      if ( hstmt_0037920443_1 != null )
      {
        hstmt_0037920443_1.close();
        hstmt_0037920443_1 = null;
      }
    } catch( SQLException e ) {
      if ( globdata.getDBMSData().getDBMSManager().wasSuccessful(e) == false )
      {
        sqlException = e;
        f_29360130_jdbc_dberror();
      }
    }
  }
  public void f_29360130_close()
  	throws ABException
  {
    Type_es = ABBase.EV_UNUSABLE;
  }
  
  public void f_29360130_jdbc_dberror()
  	throws ABException
  {
    globdata.getErrorData().setStatus( ErrorData.FATAL_ERROR_FL_LS );
    globdata.getDBMSData().setActionId( 30 );
    globdata.getErrorData().setLastStatus( ErrorData.DB_ERROR_FL_LS );
    if ( sqlException != null )
    {
      globdata.getErrorData().setErrorMessage(sqlException);
      if ( globdata.getDBMSData().getDBMSManager().wasDeadlockOrTimeout("IEFDB", sqlException) )
      {
        globdata.getErrorData().setLastStatus( ErrorData.DB_DEADLOCK_TIMEOUT_FL_LS );
      }
    }
    sl_29360130 = globdata.getErrorData().getLastStatus();
    throw new ABException();
  }
  
  public void f_29360130_moveb()
  	throws ABException
  {
    TkeyAttrText_002TP = w_ia.ImpFromTypeTkeyAttrText;
    TkeyAttrText_003TP = w_ia.ImpFilterStartTypeTkeyAttrText;
    TkeyAttrText_004TP = w_ia.ImpFilterStopTypeTkeyAttrText;
    TsearchAttrText_005TP = w_ia.ImpFilterTypeTsearchAttrText;
    TotherAttrText_006TP = w_ia.ImpFilterTypeTotherAttrText;
  }
  
  public void f_29360130_movea()
  	throws ABException
  {
    w_ea.TypeTinstanceId = TimestampAttr.valueOf(TIRS2VW.TIRS2VW(globdata, "IEFDB", tinstance_id_011EF));
    w_ea.TypeTreferenceId = TimestampAttr.valueOf(TIRS2VW.TIRS2VW(globdata, "IEFDB", treference_id_013EF));
    w_ea.TypeTcreateUserId = FixedStringAttr.valueOf(tcreate_userid_007EF, (short)8);
    w_ea.TypeTupdateUserId = FixedStringAttr.valueOf(tupdate_userid_009EF, (short)8);
    w_ea.TypeTkeyAttrText = FixedStringAttr.valueOf(tkey_attr_001EF, (short)4);
    w_ea.TypeTsearchAttrText = FixedStringAttr.valueOf(tsearch_attr_003EF, (short)20);
    w_ea.TypeTotherAttrText = FixedStringAttr.valueOf(tother_attr_005EF, (short)2);
    w_ea.TypeTotherAttrDate = DateAttr.valueOf(TIRD2VW.TIRD2VW(globdata, "IEFDB", tother_date_015EF));
    w_ea.TypeTotherAttrTime = TimeAttr.valueOf(TIRT2VW.TIRT2VW(globdata, "IEFDB", tother_time_017EF));
    w_ea.TypeTotherAttrAmount = BigDecimalAttr.valueOf(TIRBDRND.roundToBigDecimal(tother_amount_019EF, 2));
  }
  public void f_29360150_open()
  	throws ABException
  {
    sl_29360150 = ErrorData.SUCCEEDS_FL_LS;
    Type_001cd = ABBase.PV_SELECT;
    Type_lk = ABBase.EVW_UNLOCKED;
    f_29360150_moveb();
    
    if ( sl_29360150.equals( ErrorData.SUCCEEDS_FL_LS ) == true )
    {
      valChkDeadlockTimeout = false;
      valChkDBError = false;
      Type_es = ABBase.EV_USABLE;
      sqlException = null;
      try {
        SQLStatement.setLength(0);
        SQLStatement.append("SELECT ");
        SQLStatement.append("VDVYYYT01.`TINSTANCE_ID`,");
        SQLStatement.append("VDVYYYT01.`TREFERENCE_ID`,");
        SQLStatement.append("VDVYYYT01.`TCREATE_USERID`,");
        SQLStatement.append("VDVYYYT01.`TUPDATE_USERID`,");
        SQLStatement.append("VDVYYYT01.`TKEY_ATTR`,");
        SQLStatement.append("VDVYYYT01.`TSEARCH_ATTR`,");
        SQLStatement.append("VDVYYYT01.`TOTHER_ATTR`,");
        SQLStatement.append("VDVYYYT01.`TOTHER_DATE`,");
        SQLStatement.append("VDVYYYT01.`TOTHER_TIME`,");
        SQLStatement.append("VDVYYYT01.`TOTHER_AMOUNT`");
        SQLStatement.append(" FROM ");
        SQLStatement.append("`VDVYYYT` VDVYYYT01");
        SQLStatement.append(" WHERE ");
        SQLStatement.append("(");
        SQLStatement.append(
          "(VDVYYYT01.`TSEARCH_ATTR` < ? OR (VDVYYYT01.`TSEARCH_ATTR` = ? AND (VDVYYYT01.`TKEY_ATTR` <= ?))) AND VDVYYYT01.`TKEY_AT")
          ;
        SQLStatement.append(
          "TR` >= ? AND VDVYYYT01.`TKEY_ATTR` <= ? AND VDVYYYT01.`TSEARCH_ATTR` LIKE ? AND VDVYYYT01.`TOTHER_ATTR` LIKE ?");
        SQLStatement.append(")");
        SQLStatement.append("  ORDER BY 6 DESC ,");
        SQLStatement.append(" 5 DESC ");
        if ( globdata.getDBMSData().getDBMSManager().isDBMS("IEFDB", "DB2") )
        {
          SQLStatement.append(" WITH UR ");
        }
        hstmt_0037990974_1 = globdata.getDBMSData().getDBMSManager().getStatement(globdata, iefRuntimeParm2, "IEFDB", 
          SQLStatement.toString());
        globdata.getDBMSData().getDBMSManager().bindParameterString("IEFDB", hstmt_0037990974_1, 1, TsearchAttrText_001TP);
        globdata.getDBMSData().getDBMSManager().bindParameterString("IEFDB", hstmt_0037990974_1, 2, TsearchAttrText_001TP);
        globdata.getDBMSData().getDBMSManager().bindParameterString("IEFDB", hstmt_0037990974_1, 3, TkeyAttrText_002TP);
        globdata.getDBMSData().getDBMSManager().bindParameterString("IEFDB", hstmt_0037990974_1, 4, TkeyAttrText_003TP);
        globdata.getDBMSData().getDBMSManager().bindParameterString("IEFDB", hstmt_0037990974_1, 5, TkeyAttrText_004TP);
        globdata.getDBMSData().getDBMSManager().bindParameterString("IEFDB", hstmt_0037990974_1, 6, TsearchAttrText_005TP);
        globdata.getDBMSData().getDBMSManager().bindParameterString("IEFDB", hstmt_0037990974_1, 7, TotherAttrText_006TP);
        hstmt_0037990974_1.execute();
        hstmt_0037990974_1_rs = hstmt_0037990974_1.getResultSet();
      } catch( SQLException e ) {
        sqlException = e;
      }
      if ( !((globdata.getDBMSData().getDBMSManager().wasSuccessful(sqlException))) )
      {
          f_29360150_jdbc_dberror();
      }
    }
  }
  
  public void f_29360150_fetch()
  	throws ABException
  {
    sqlException = null;
    try {
      if ( hstmt_0037990974_1_rs.next() == false )
      {
        throw new SQLException("No data found");
      }
      tinstance_id_011EF = hstmt_0037990974_1_rs.getTimestamp(1);
      treference_id_013EF = hstmt_0037990974_1_rs.getTimestamp(2);
      tcreate_userid_007EF = globdata.getDBMSData().getDBMSManager().getStringFromResultSet("IEFDB", hstmt_0037990974_1_rs, 3);
      tupdate_userid_009EF = globdata.getDBMSData().getDBMSManager().getStringFromResultSet("IEFDB", hstmt_0037990974_1_rs, 4);
      tkey_attr_001EF = globdata.getDBMSData().getDBMSManager().getStringFromResultSet("IEFDB", hstmt_0037990974_1_rs, 5);
      tsearch_attr_003EF = globdata.getDBMSData().getDBMSManager().getStringFromResultSet("IEFDB", hstmt_0037990974_1_rs, 6);
      tother_attr_005EF = globdata.getDBMSData().getDBMSManager().getStringFromResultSet("IEFDB", hstmt_0037990974_1_rs, 7);
      tother_date_015EF = hstmt_0037990974_1_rs.getDate(8);
      tother_time_017EF = globdata.getDBMSData().getDBMSManager().getTimeFromResultSet(globdata, iefRuntimeParm2, "IEFDB", 
        hstmt_0037990974_1_rs, 9);
      tother_amount_019EF = globdata.getDBMSData().getDBMSManager().getBigDecimalFromResultSet("IEFDB", hstmt_0037990974_1_rs, 10);
    } catch( SQLException e ) {
      sqlException = e;
    }
    
    if ( globdata.getDBMSData().getDBMSManager().wasSuccessful(sqlException) )
    {
      f_29360150_movea();
      if ( sl_29360150.equals( ErrorData.SUCCEEDS_FL_LS ) )
      {
        Type_es = ABBase.EV_USABLE;
      }
      else {
        Type_es = ABBase.EV_UNUSABLE;
      }
    }
    else if ( globdata.getDBMSData().getDBMSManager().wasNoDataFound(sqlException) )
    {
      sl_29360150 = ErrorData.NOT_FOUND_FL_LS;
      Type_es = ABBase.EV_UNUSABLE;
    }
    else {
      f_29360150_jdbc_dberror();
    }
  }
  
  public void f_29360150_esc_close()
  	throws ABException
  {
    try {
      if ( hstmt_0037990974_1_rs != null )
      {
        hstmt_0037990974_1_rs.close();
        hstmt_0037990974_1_rs = null;
      }
      if ( hstmt_0037990974_1 != null )
      {
        hstmt_0037990974_1.close();
        hstmt_0037990974_1 = null;
      }
    } catch( SQLException e ) {
      if ( globdata.getDBMSData().getDBMSManager().wasSuccessful(e) == false )
      {
        sqlException = e;
        f_29360150_jdbc_dberror();
      }
    }
  }
  public void f_29360150_close()
  	throws ABException
  {
    Type_es = ABBase.EV_UNUSABLE;
  }
  
  public void f_29360150_jdbc_dberror()
  	throws ABException
  {
    globdata.getErrorData().setStatus( ErrorData.FATAL_ERROR_FL_LS );
    globdata.getDBMSData().setActionId( 40 );
    globdata.getErrorData().setLastStatus( ErrorData.DB_ERROR_FL_LS );
    if ( sqlException != null )
    {
      globdata.getErrorData().setErrorMessage(sqlException);
      if ( globdata.getDBMSData().getDBMSManager().wasDeadlockOrTimeout("IEFDB", sqlException) )
      {
        globdata.getErrorData().setLastStatus( ErrorData.DB_DEADLOCK_TIMEOUT_FL_LS );
      }
    }
    sl_29360150 = globdata.getErrorData().getLastStatus();
    throw new ABException();
  }
  
  public void f_29360150_moveb()
  	throws ABException
  {
    TsearchAttrText_001TP = w_ia.ImpFromTypeTsearchAttrText;
    TkeyAttrText_002TP = w_ia.ImpFromTypeTkeyAttrText;
    TkeyAttrText_003TP = w_ia.ImpFilterStartTypeTkeyAttrText;
    TkeyAttrText_004TP = w_ia.ImpFilterStopTypeTkeyAttrText;
    TsearchAttrText_005TP = w_ia.ImpFilterTypeTsearchAttrText;
    TotherAttrText_006TP = w_ia.ImpFilterTypeTotherAttrText;
  }
  
  public void f_29360150_movea()
  	throws ABException
  {
    w_ea.TypeTinstanceId = TimestampAttr.valueOf(TIRS2VW.TIRS2VW(globdata, "IEFDB", tinstance_id_011EF));
    w_ea.TypeTreferenceId = TimestampAttr.valueOf(TIRS2VW.TIRS2VW(globdata, "IEFDB", treference_id_013EF));
    w_ea.TypeTcreateUserId = FixedStringAttr.valueOf(tcreate_userid_007EF, (short)8);
    w_ea.TypeTupdateUserId = FixedStringAttr.valueOf(tupdate_userid_009EF, (short)8);
    w_ea.TypeTkeyAttrText = FixedStringAttr.valueOf(tkey_attr_001EF, (short)4);
    w_ea.TypeTsearchAttrText = FixedStringAttr.valueOf(tsearch_attr_003EF, (short)20);
    w_ea.TypeTotherAttrText = FixedStringAttr.valueOf(tother_attr_005EF, (short)2);
    w_ea.TypeTotherAttrDate = DateAttr.valueOf(TIRD2VW.TIRD2VW(globdata, "IEFDB", tother_date_015EF));
    w_ea.TypeTotherAttrTime = TimeAttr.valueOf(TIRT2VW.TIRT2VW(globdata, "IEFDB", tother_time_017EF));
    w_ea.TypeTotherAttrAmount = BigDecimalAttr.valueOf(TIRBDRND.roundToBigDecimal(tother_amount_019EF, 2));
  }
  public void f_29360134_open()
  	throws ABException
  {
    sl_29360134 = ErrorData.SUCCEEDS_FL_LS;
    Type_001cd = ABBase.PV_SELECT;
    Type_lk = ABBase.EVW_UNLOCKED;
    f_29360134_moveb();
    
    if ( sl_29360134.equals( ErrorData.SUCCEEDS_FL_LS ) == true )
    {
      valChkDeadlockTimeout = false;
      valChkDBError = false;
      Type_es = ABBase.EV_USABLE;
      sqlException = null;
      try {
        SQLStatement.setLength(0);
        SQLStatement.append("SELECT ");
        SQLStatement.append("VDVYYYT01.`TINSTANCE_ID`,");
        SQLStatement.append("VDVYYYT01.`TREFERENCE_ID`,");
        SQLStatement.append("VDVYYYT01.`TCREATE_USERID`,");
        SQLStatement.append("VDVYYYT01.`TUPDATE_USERID`,");
        SQLStatement.append("VDVYYYT01.`TKEY_ATTR`,");
        SQLStatement.append("VDVYYYT01.`TSEARCH_ATTR`,");
        SQLStatement.append("VDVYYYT01.`TOTHER_ATTR`,");
        SQLStatement.append("VDVYYYT01.`TOTHER_DATE`,");
        SQLStatement.append("VDVYYYT01.`TOTHER_TIME`,");
        SQLStatement.append("VDVYYYT01.`TOTHER_AMOUNT`");
        SQLStatement.append(" FROM ");
        SQLStatement.append("`VDVYYYT` VDVYYYT01");
        SQLStatement.append(" WHERE ");
        SQLStatement.append("(");
        SQLStatement.append(
          "VDVYYYT01.`TKEY_ATTR` <= ? AND VDVYYYT01.`TKEY_ATTR` >= ? AND VDVYYYT01.`TKEY_ATTR` <= ? AND VDVYYYT01.`TSEARCH_ATTR` LI")
          ;
        SQLStatement.append("KE ? AND VDVYYYT01.`TOTHER_ATTR` LIKE ?");
        SQLStatement.append(")");
        SQLStatement.append("  ORDER BY 5 DESC ");
        if ( globdata.getDBMSData().getDBMSManager().isDBMS("IEFDB", "DB2") )
        {
          SQLStatement.append(" WITH UR ");
        }
        hstmt_0037921956_1 = globdata.getDBMSData().getDBMSManager().getStatement(globdata, iefRuntimeParm2, "IEFDB", 
          SQLStatement.toString());
        globdata.getDBMSData().getDBMSManager().bindParameterString("IEFDB", hstmt_0037921956_1, 1, TkeyAttrText_002TP);
        globdata.getDBMSData().getDBMSManager().bindParameterString("IEFDB", hstmt_0037921956_1, 2, TkeyAttrText_003TP);
        globdata.getDBMSData().getDBMSManager().bindParameterString("IEFDB", hstmt_0037921956_1, 3, TkeyAttrText_004TP);
        globdata.getDBMSData().getDBMSManager().bindParameterString("IEFDB", hstmt_0037921956_1, 4, TsearchAttrText_005TP);
        globdata.getDBMSData().getDBMSManager().bindParameterString("IEFDB", hstmt_0037921956_1, 5, TotherAttrText_006TP);
        hstmt_0037921956_1.execute();
        hstmt_0037921956_1_rs = hstmt_0037921956_1.getResultSet();
      } catch( SQLException e ) {
        sqlException = e;
      }
      if ( !((globdata.getDBMSData().getDBMSManager().wasSuccessful(sqlException))) )
      {
          f_29360134_jdbc_dberror();
      }
    }
  }
  
  public void f_29360134_fetch()
  	throws ABException
  {
    sqlException = null;
    try {
      if ( hstmt_0037921956_1_rs.next() == false )
      {
        throw new SQLException("No data found");
      }
      tinstance_id_011EF = hstmt_0037921956_1_rs.getTimestamp(1);
      treference_id_013EF = hstmt_0037921956_1_rs.getTimestamp(2);
      tcreate_userid_007EF = globdata.getDBMSData().getDBMSManager().getStringFromResultSet("IEFDB", hstmt_0037921956_1_rs, 3);
      tupdate_userid_009EF = globdata.getDBMSData().getDBMSManager().getStringFromResultSet("IEFDB", hstmt_0037921956_1_rs, 4);
      tkey_attr_001EF = globdata.getDBMSData().getDBMSManager().getStringFromResultSet("IEFDB", hstmt_0037921956_1_rs, 5);
      tsearch_attr_003EF = globdata.getDBMSData().getDBMSManager().getStringFromResultSet("IEFDB", hstmt_0037921956_1_rs, 6);
      tother_attr_005EF = globdata.getDBMSData().getDBMSManager().getStringFromResultSet("IEFDB", hstmt_0037921956_1_rs, 7);
      tother_date_015EF = hstmt_0037921956_1_rs.getDate(8);
      tother_time_017EF = globdata.getDBMSData().getDBMSManager().getTimeFromResultSet(globdata, iefRuntimeParm2, "IEFDB", 
        hstmt_0037921956_1_rs, 9);
      tother_amount_019EF = globdata.getDBMSData().getDBMSManager().getBigDecimalFromResultSet("IEFDB", hstmt_0037921956_1_rs, 10);
    } catch( SQLException e ) {
      sqlException = e;
    }
    
    if ( globdata.getDBMSData().getDBMSManager().wasSuccessful(sqlException) )
    {
      f_29360134_movea();
      if ( sl_29360134.equals( ErrorData.SUCCEEDS_FL_LS ) )
      {
        Type_es = ABBase.EV_USABLE;
      }
      else {
        Type_es = ABBase.EV_UNUSABLE;
      }
    }
    else if ( globdata.getDBMSData().getDBMSManager().wasNoDataFound(sqlException) )
    {
      sl_29360134 = ErrorData.NOT_FOUND_FL_LS;
      Type_es = ABBase.EV_UNUSABLE;
    }
    else {
      f_29360134_jdbc_dberror();
    }
  }
  
  public void f_29360134_esc_close()
  	throws ABException
  {
    try {
      if ( hstmt_0037921956_1_rs != null )
      {
        hstmt_0037921956_1_rs.close();
        hstmt_0037921956_1_rs = null;
      }
      if ( hstmt_0037921956_1 != null )
      {
        hstmt_0037921956_1.close();
        hstmt_0037921956_1 = null;
      }
    } catch( SQLException e ) {
      if ( globdata.getDBMSData().getDBMSManager().wasSuccessful(e) == false )
      {
        sqlException = e;
        f_29360134_jdbc_dberror();
      }
    }
  }
  public void f_29360134_close()
  	throws ABException
  {
    Type_es = ABBase.EV_UNUSABLE;
  }
  
  public void f_29360134_jdbc_dberror()
  	throws ABException
  {
    globdata.getErrorData().setStatus( ErrorData.FATAL_ERROR_FL_LS );
    globdata.getDBMSData().setActionId( 49 );
    globdata.getErrorData().setLastStatus( ErrorData.DB_ERROR_FL_LS );
    if ( sqlException != null )
    {
      globdata.getErrorData().setErrorMessage(sqlException);
      if ( globdata.getDBMSData().getDBMSManager().wasDeadlockOrTimeout("IEFDB", sqlException) )
      {
        globdata.getErrorData().setLastStatus( ErrorData.DB_DEADLOCK_TIMEOUT_FL_LS );
      }
    }
    sl_29360134 = globdata.getErrorData().getLastStatus();
    throw new ABException();
  }
  
  public void f_29360134_moveb()
  	throws ABException
  {
    TkeyAttrText_002TP = w_ia.ImpFromTypeTkeyAttrText;
    TkeyAttrText_003TP = w_ia.ImpFilterStartTypeTkeyAttrText;
    TkeyAttrText_004TP = w_ia.ImpFilterStopTypeTkeyAttrText;
    TsearchAttrText_005TP = w_ia.ImpFilterTypeTsearchAttrText;
    TotherAttrText_006TP = w_ia.ImpFilterTypeTotherAttrText;
  }
  
  public void f_29360134_movea()
  	throws ABException
  {
    w_ea.TypeTinstanceId = TimestampAttr.valueOf(TIRS2VW.TIRS2VW(globdata, "IEFDB", tinstance_id_011EF));
    w_ea.TypeTreferenceId = TimestampAttr.valueOf(TIRS2VW.TIRS2VW(globdata, "IEFDB", treference_id_013EF));
    w_ea.TypeTcreateUserId = FixedStringAttr.valueOf(tcreate_userid_007EF, (short)8);
    w_ea.TypeTupdateUserId = FixedStringAttr.valueOf(tupdate_userid_009EF, (short)8);
    w_ea.TypeTkeyAttrText = FixedStringAttr.valueOf(tkey_attr_001EF, (short)4);
    w_ea.TypeTsearchAttrText = FixedStringAttr.valueOf(tsearch_attr_003EF, (short)20);
    w_ea.TypeTotherAttrText = FixedStringAttr.valueOf(tother_attr_005EF, (short)2);
    w_ea.TypeTotherAttrDate = DateAttr.valueOf(TIRD2VW.TIRD2VW(globdata, "IEFDB", tother_date_015EF));
    w_ea.TypeTotherAttrTime = TimeAttr.valueOf(TIRT2VW.TIRT2VW(globdata, "IEFDB", tother_time_017EF));
    w_ea.TypeTotherAttrAmount = BigDecimalAttr.valueOf(TIRBDRND.roundToBigDecimal(tother_amount_019EF, 2));
  }
  public void f_173015097_rgvc()
  	throws ABException
  {
    if ( (ExpGroupList_PS_001 > 48) || (ExpGroupList_PS_001 < 1) )
    {
      globdata.getErrorData().setViewOverflowSW( ErrorData.ERROR_FOUND_SW );
      {
        throw new ABException();
      }
    }
  }
}// end class


package gen.ort.yyy;
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
//
//                    Source Code Generated by
//                           CA Gen 8.6
//
//    Copyright (c) 2023 CA Technologies. All rights reserved.
//
//    Name: DYYY0351_IA                      Date: 2023/07/05
//    User: HakanBal                         Time: 15:09:34
//
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// Import Statements
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
import java.lang.*;
import java.io.*;
import java.util.*;
import java.math.*;
import java.sql.*;
import com.ca.gen.vwrt.*;
import com.ca.gen.vwrt.types.*;
import com.ca.gen.vwrt.vdf.*;
import com.ca.gen.csu.exception.*;

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// START OF IMPORT VIEW
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
/**
 * Internal data view storage for: DYYY0351_IA
 **/
public class DYYY0351_IA extends ViewBase implements IImportView, Serializable
{
  // Entity View: IMP_ERROR
  //        Type: IYY1_COMPONENT
  /**
   * Attribute missing flag for: ImpErrorIyy1ComponentSeverityCode
   **/
  public char ImpErrorIyy1ComponentSeverityCode_AS;
  /**
   * Attribute for: ImpErrorIyy1ComponentSeverityCode
   * Domain: Text
   * Length: 1
   * Varying Length: N
   **/
  public String ImpErrorIyy1ComponentSeverityCode;
  /**
   * Attribute missing flag for: ImpErrorIyy1ComponentRollbackIndicator
   **/
  public char ImpErrorIyy1ComponentRollbackIndicator_AS;
  /**
   * Attribute for: ImpErrorIyy1ComponentRollbackIndicator
   * Domain: Text
   * Length: 1
   * Varying Length: N
   **/
  public String ImpErrorIyy1ComponentRollbackIndicator;
  /**
   * Attribute missing flag for: ImpErrorIyy1ComponentOriginServid
   **/
  public char ImpErrorIyy1ComponentOriginServid_AS;
  /**
   * Attribute for: ImpErrorIyy1ComponentOriginServid
   * Domain: Number
   * Length: 15
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public double ImpErrorIyy1ComponentOriginServid;
  /**
   * Attribute missing flag for: ImpErrorIyy1ComponentContextString
   **/
  public char ImpErrorIyy1ComponentContextString_AS;
  /**
   * Attribute for: ImpErrorIyy1ComponentContextString
   * Domain: Text
   * Length: 512
   * Varying Length: Y
   **/
  public String ImpErrorIyy1ComponentContextString;
  /**
   * Attribute missing flag for: ImpErrorIyy1ComponentReturnCode
   **/
  public char ImpErrorIyy1ComponentReturnCode_AS;
  /**
   * Attribute for: ImpErrorIyy1ComponentReturnCode
   * Domain: Number
   * Length: 5
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public int ImpErrorIyy1ComponentReturnCode;
  /**
   * Attribute missing flag for: ImpErrorIyy1ComponentReasonCode
   **/
  public char ImpErrorIyy1ComponentReasonCode_AS;
  /**
   * Attribute for: ImpErrorIyy1ComponentReasonCode
   * Domain: Number
   * Length: 5
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public int ImpErrorIyy1ComponentReasonCode;
  /**
   * Attribute missing flag for: ImpErrorIyy1ComponentChecksum
   **/
  public char ImpErrorIyy1ComponentChecksum_AS;
  /**
   * Attribute for: ImpErrorIyy1ComponentChecksum
   * Domain: Text
   * Length: 15
   * Varying Length: N
   **/
  public String ImpErrorIyy1ComponentChecksum;
  // Entity View: IMP_FILTER
  //        Type: IYY1_LIST
  /**
   * Attribute missing flag for: ImpFilterIyy1ListSortOption
   **/
  public char ImpFilterIyy1ListSortOption_AS;
  /**
   * Attribute for: ImpFilterIyy1ListSortOption
   * Domain: Text
   * Length: 3
   * Varying Length: N
   **/
  public String ImpFilterIyy1ListSortOption;
  /**
   * Attribute missing flag for: ImpFilterIyy1ListScrollType
   **/
  public char ImpFilterIyy1ListScrollType_AS;
  /**
   * Attribute for: ImpFilterIyy1ListScrollType
   * Domain: Text
   * Length: 1
   * Varying Length: N
   **/
  public String ImpFilterIyy1ListScrollType;
  /**
   * Attribute missing flag for: ImpFilterIyy1ListListDirection
   **/
  public char ImpFilterIyy1ListListDirection_AS;
  /**
   * Attribute for: ImpFilterIyy1ListListDirection
   * Domain: Text
   * Length: 1
   * Varying Length: N
   **/
  public String ImpFilterIyy1ListListDirection;
  /**
   * Attribute missing flag for: ImpFilterIyy1ListScrollAmount
   **/
  public char ImpFilterIyy1ListScrollAmount_AS;
  /**
   * Attribute for: ImpFilterIyy1ListScrollAmount
   * Domain: Number
   * Length: 5
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public int ImpFilterIyy1ListScrollAmount;
  /**
   * Attribute missing flag for: ImpFilterIyy1ListOrderByFieldNum
   **/
  public char ImpFilterIyy1ListOrderByFieldNum_AS;
  /**
   * Attribute for: ImpFilterIyy1ListOrderByFieldNum
   * Domain: Number
   * Length: 1
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public short ImpFilterIyy1ListOrderByFieldNum;
  // Entity View: IMP_FROM
  //        Type: TYPE
  /**
   * Attribute missing flag for: ImpFromTypeTinstanceId
   **/
  public char ImpFromTypeTinstanceId_AS;
  /**
   * Attribute for: ImpFromTypeTinstanceId
   * Domain: Timestamp
   * Length: 20
   **/
  public String ImpFromTypeTinstanceId;
  /**
   * Attribute missing flag for: ImpFromTypeTkeyAttrText
   **/
  public char ImpFromTypeTkeyAttrText_AS;
  /**
   * Attribute for: ImpFromTypeTkeyAttrText
   * Domain: Text
   * Length: 4
   * Varying Length: N
   **/
  public String ImpFromTypeTkeyAttrText;
  /**
   * Attribute missing flag for: ImpFromTypeTsearchAttrText
   **/
  public char ImpFromTypeTsearchAttrText_AS;
  /**
   * Attribute for: ImpFromTypeTsearchAttrText
   * Domain: Text
   * Length: 20
   * Varying Length: N
   **/
  public String ImpFromTypeTsearchAttrText;
  // Entity View: IMP_FILTER_START
  //        Type: TYPE
  /**
   * Attribute missing flag for: ImpFilterStartTypeTkeyAttrText
   **/
  public char ImpFilterStartTypeTkeyAttrText_AS;
  /**
   * Attribute for: ImpFilterStartTypeTkeyAttrText
   * Domain: Text
   * Length: 4
   * Varying Length: N
   **/
  public String ImpFilterStartTypeTkeyAttrText;
  // Entity View: IMP_FILTER_STOP
  //        Type: TYPE
  /**
   * Attribute missing flag for: ImpFilterStopTypeTkeyAttrText
   **/
  public char ImpFilterStopTypeTkeyAttrText_AS;
  /**
   * Attribute for: ImpFilterStopTypeTkeyAttrText
   * Domain: Text
   * Length: 4
   * Varying Length: N
   **/
  public String ImpFilterStopTypeTkeyAttrText;
  // Entity View: IMP_FILTER
  //        Type: TYPE
  /**
   * Attribute missing flag for: ImpFilterTypeTsearchAttrText
   **/
  public char ImpFilterTypeTsearchAttrText_AS;
  /**
   * Attribute for: ImpFilterTypeTsearchAttrText
   * Domain: Text
   * Length: 20
   * Varying Length: N
   **/
  public String ImpFilterTypeTsearchAttrText;
  /**
   * Attribute missing flag for: ImpFilterTypeTotherAttrText
   **/
  public char ImpFilterTypeTotherAttrText_AS;
  /**
   * Attribute for: ImpFilterTypeTotherAttrText
   * Domain: Text
   * Length: 2
   * Varying Length: N
   **/
  public String ImpFilterTypeTotherAttrText;
  /**
   * Default Constructor
   **/
  
  public DYYY0351_IA()
  {
    reset();
  }
  /**
   * Copy Constructor
   **/
  
  public DYYY0351_IA(DYYY0351_IA orig)
  {
    copyFrom(orig);
  }
  /**
   * Static instance creator function
   **/
  
  public static DYYY0351_IA getInstance()
  {
    return new DYYY0351_IA();
  }
  /**
   * Static free instance method
   **/
  
  public void freeInstance()
  {
  }
  /**
   * clone constructor
   **/
  
  @Override public Object clone()
  	throws CloneNotSupportedException
  {
    return(new DYYY0351_IA(this));
  }
  /**
   * Resets all properties to the defaults.
   **/
  
  public void reset()
  {
    ImpErrorIyy1ComponentSeverityCode_AS = ' ';
    ImpErrorIyy1ComponentSeverityCode = " ";
    ImpErrorIyy1ComponentRollbackIndicator_AS = ' ';
    ImpErrorIyy1ComponentRollbackIndicator = " ";
    ImpErrorIyy1ComponentOriginServid_AS = ' ';
    ImpErrorIyy1ComponentOriginServid = 0.0;
    ImpErrorIyy1ComponentContextString_AS = ' ';
    ImpErrorIyy1ComponentContextString = "";
    ImpErrorIyy1ComponentReturnCode_AS = ' ';
    ImpErrorIyy1ComponentReturnCode = 0;
    ImpErrorIyy1ComponentReasonCode_AS = ' ';
    ImpErrorIyy1ComponentReasonCode = 0;
    ImpErrorIyy1ComponentChecksum_AS = ' ';
    ImpErrorIyy1ComponentChecksum = "               ";
    ImpFilterIyy1ListSortOption_AS = ' ';
    ImpFilterIyy1ListSortOption = "   ";
    ImpFilterIyy1ListScrollType_AS = ' ';
    ImpFilterIyy1ListScrollType = " ";
    ImpFilterIyy1ListListDirection_AS = ' ';
    ImpFilterIyy1ListListDirection = " ";
    ImpFilterIyy1ListScrollAmount_AS = ' ';
    ImpFilterIyy1ListScrollAmount = 0;
    ImpFilterIyy1ListOrderByFieldNum_AS = ' ';
    ImpFilterIyy1ListOrderByFieldNum = 0;
    ImpFromTypeTinstanceId_AS = ' ';
    ImpFromTypeTinstanceId = "00000000000000000000";
    ImpFromTypeTkeyAttrText_AS = ' ';
    ImpFromTypeTkeyAttrText = "    ";
    ImpFromTypeTsearchAttrText_AS = ' ';
    ImpFromTypeTsearchAttrText = "                    ";
    ImpFilterStartTypeTkeyAttrText_AS = ' ';
    ImpFilterStartTypeTkeyAttrText = "    ";
    ImpFilterStopTypeTkeyAttrText_AS = ' ';
    ImpFilterStopTypeTkeyAttrText = "    ";
    ImpFilterTypeTsearchAttrText_AS = ' ';
    ImpFilterTypeTsearchAttrText = "                    ";
    ImpFilterTypeTotherAttrText_AS = ' ';
    ImpFilterTypeTotherAttrText = "  ";
  }
  /**
   * Gets the VDF version of the current state of the instance.
   **/
  public VDF getVDF()
  {
    throw new RuntimeException("can only execute getVDF for a Procedure Step.");
  }
  
  /**
   * Sets the current state of the instance to the VDF version.
   **/
  public void setFromVDF(VDF vdf)
  {
    throw new RuntimeException("can only execute setFromVDF for a Procedure Step.");
  }
  
  /**
   * Sets the current instance based on the passed view.
   **/
  public void copyFrom(IImportView orig)
  {
    this.copyFrom((DYYY0351_IA) orig);
  }
  
  /**
   * Sets the current instance based on the passed view.
   **/
  public void copyFrom(DYYY0351_IA orig)
  {
    ImpErrorIyy1ComponentSeverityCode_AS = orig.ImpErrorIyy1ComponentSeverityCode_AS;
    ImpErrorIyy1ComponentSeverityCode = orig.ImpErrorIyy1ComponentSeverityCode;
    ImpErrorIyy1ComponentRollbackIndicator_AS = orig.ImpErrorIyy1ComponentRollbackIndicator_AS;
    ImpErrorIyy1ComponentRollbackIndicator = orig.ImpErrorIyy1ComponentRollbackIndicator;
    ImpErrorIyy1ComponentOriginServid_AS = orig.ImpErrorIyy1ComponentOriginServid_AS;
    ImpErrorIyy1ComponentOriginServid = orig.ImpErrorIyy1ComponentOriginServid;
    ImpErrorIyy1ComponentContextString_AS = orig.ImpErrorIyy1ComponentContextString_AS;
    ImpErrorIyy1ComponentContextString = orig.ImpErrorIyy1ComponentContextString;
    ImpErrorIyy1ComponentReturnCode_AS = orig.ImpErrorIyy1ComponentReturnCode_AS;
    ImpErrorIyy1ComponentReturnCode = orig.ImpErrorIyy1ComponentReturnCode;
    ImpErrorIyy1ComponentReasonCode_AS = orig.ImpErrorIyy1ComponentReasonCode_AS;
    ImpErrorIyy1ComponentReasonCode = orig.ImpErrorIyy1ComponentReasonCode;
    ImpErrorIyy1ComponentChecksum_AS = orig.ImpErrorIyy1ComponentChecksum_AS;
    ImpErrorIyy1ComponentChecksum = orig.ImpErrorIyy1ComponentChecksum;
    ImpFilterIyy1ListSortOption_AS = orig.ImpFilterIyy1ListSortOption_AS;
    ImpFilterIyy1ListSortOption = orig.ImpFilterIyy1ListSortOption;
    ImpFilterIyy1ListScrollType_AS = orig.ImpFilterIyy1ListScrollType_AS;
    ImpFilterIyy1ListScrollType = orig.ImpFilterIyy1ListScrollType;
    ImpFilterIyy1ListListDirection_AS = orig.ImpFilterIyy1ListListDirection_AS;
    ImpFilterIyy1ListListDirection = orig.ImpFilterIyy1ListListDirection;
    ImpFilterIyy1ListScrollAmount_AS = orig.ImpFilterIyy1ListScrollAmount_AS;
    ImpFilterIyy1ListScrollAmount = orig.ImpFilterIyy1ListScrollAmount;
    ImpFilterIyy1ListOrderByFieldNum_AS = orig.ImpFilterIyy1ListOrderByFieldNum_AS;
    ImpFilterIyy1ListOrderByFieldNum = orig.ImpFilterIyy1ListOrderByFieldNum;
    ImpFromTypeTinstanceId_AS = orig.ImpFromTypeTinstanceId_AS;
    ImpFromTypeTinstanceId = orig.ImpFromTypeTinstanceId;
    ImpFromTypeTkeyAttrText_AS = orig.ImpFromTypeTkeyAttrText_AS;
    ImpFromTypeTkeyAttrText = orig.ImpFromTypeTkeyAttrText;
    ImpFromTypeTsearchAttrText_AS = orig.ImpFromTypeTsearchAttrText_AS;
    ImpFromTypeTsearchAttrText = orig.ImpFromTypeTsearchAttrText;
    ImpFilterStartTypeTkeyAttrText_AS = orig.ImpFilterStartTypeTkeyAttrText_AS;
    ImpFilterStartTypeTkeyAttrText = orig.ImpFilterStartTypeTkeyAttrText;
    ImpFilterStopTypeTkeyAttrText_AS = orig.ImpFilterStopTypeTkeyAttrText_AS;
    ImpFilterStopTypeTkeyAttrText = orig.ImpFilterStopTypeTkeyAttrText;
    ImpFilterTypeTsearchAttrText_AS = orig.ImpFilterTypeTsearchAttrText_AS;
    ImpFilterTypeTsearchAttrText = orig.ImpFilterTypeTsearchAttrText;
    ImpFilterTypeTotherAttrText_AS = orig.ImpFilterTypeTotherAttrText_AS;
    ImpFilterTypeTotherAttrText = orig.ImpFilterTypeTotherAttrText;
  }
}

package gen.ort.yyy;
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
//
//                    Source Code Generated by
//                           CA Gen 8.6
//
//    Copyright (c) 2023 CA Technologies. All rights reserved.
//
//    Name: DYYY0351_LA                      Date: 2023/07/05
//    User: HakanBal                         Time: 15:09:34
//
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// Import Statements
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
import java.lang.*;
import java.io.*;
import java.util.*;
import java.math.*;
import java.sql.*;
import com.ca.gen.vwrt.*;
import com.ca.gen.vwrt.types.*;
import com.ca.gen.vwrt.vdf.*;
import com.ca.gen.csu.exception.*;

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// START OF LOCAL VIEW
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
/**
 * Internal data view storage for: DYYY0351_LA
 **/
public class DYYY0351_LA extends ViewBase implements ILocalView, Serializable
{
  // Entity View: LOC_FILTER
  //        Type: IYY1_LIST
  /**
   * Attribute missing flag for: LocFilterIyy1ListScrollType
   **/
  public char LocFilterIyy1ListScrollType_AS;
  /**
   * Attribute for: LocFilterIyy1ListScrollType
   * Domain: Text
   * Length: 1
   * Varying Length: N
   **/
  public String LocFilterIyy1ListScrollType;
  // Entity View: LOC
  //        Type: DONT_CHANGE_RETURN_CODES
  /**
   * Attribute missing flag for: LocDontChangeReturnCodesQ1Ok
   **/
  public char LocDontChangeReturnCodesQ1Ok_AS;
  /**
   * Attribute for: LocDontChangeReturnCodesQ1Ok
   * Domain: Number
   * Length: 5
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public int LocDontChangeReturnCodesQ1Ok;
  // Entity View: LOC
  //        Type: DONT_CHANGE_REASON_CODES
  /**
   * Attribute missing flag for: LocDontChangeReasonCodesQ1Default
   **/
  public char LocDontChangeReasonCodesQ1Default_AS;
  /**
   * Attribute for: LocDontChangeReasonCodesQ1Default
   * Domain: Number
   * Length: 5
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public int LocDontChangeReasonCodesQ1Default;
  /**
   * Attribute missing flag for: LocDontChangeReasonCodesQ11ListFull
   **/
  public char LocDontChangeReasonCodesQ11ListFull_AS;
  /**
   * Attribute for: LocDontChangeReasonCodesQ11ListFull
   * Domain: Number
   * Length: 5
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public int LocDontChangeReasonCodesQ11ListFull;
  /**
   * Attribute missing flag for: LocDontChangeReasonCodesQ12ListEmpty
   **/
  public char LocDontChangeReasonCodesQ12ListEmpty_AS;
  /**
   * Attribute for: LocDontChangeReasonCodesQ12ListEmpty
   * Domain: Number
   * Length: 5
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public int LocDontChangeReasonCodesQ12ListEmpty;
  /**
   * Default Constructor
   **/
  
  public DYYY0351_LA()
  {
    reset();
  }
  /**
   * Copy Constructor
   **/
  
  public DYYY0351_LA(DYYY0351_LA orig)
  {
    LocFilterIyy1ListScrollType_AS = orig.LocFilterIyy1ListScrollType_AS;
    LocFilterIyy1ListScrollType = orig.LocFilterIyy1ListScrollType;
    LocDontChangeReturnCodesQ1Ok_AS = orig.LocDontChangeReturnCodesQ1Ok_AS;
    LocDontChangeReturnCodesQ1Ok = orig.LocDontChangeReturnCodesQ1Ok;
    LocDontChangeReasonCodesQ1Default_AS = orig.LocDontChangeReasonCodesQ1Default_AS;
    LocDontChangeReasonCodesQ1Default = orig.LocDontChangeReasonCodesQ1Default;
    LocDontChangeReasonCodesQ11ListFull_AS = orig.LocDontChangeReasonCodesQ11ListFull_AS;
    LocDontChangeReasonCodesQ11ListFull = orig.LocDontChangeReasonCodesQ11ListFull;
    LocDontChangeReasonCodesQ12ListEmpty_AS = orig.LocDontChangeReasonCodesQ12ListEmpty_AS;
    LocDontChangeReasonCodesQ12ListEmpty = orig.LocDontChangeReasonCodesQ12ListEmpty;
  }
  /**
   * Static instance creator function
   **/
  
  public static DYYY0351_LA getInstance()
  {
    return new DYYY0351_LA();
  }
  /**
   * Static free instance method
   **/
  
  public void freeInstance()
  {
  }
  /**
   * clone constructor
   **/
  
  @Override public Object clone()
  	throws CloneNotSupportedException
  {
    return(new DYYY0351_LA(this));
  }
  /**
   * Resets all properties to the defaults.
   **/
  
  public void reset()
  {
    LocFilterIyy1ListScrollType_AS = ' ';
    LocFilterIyy1ListScrollType = " ";
    LocDontChangeReturnCodesQ1Ok_AS = ' ';
    LocDontChangeReturnCodesQ1Ok = 0;
    LocDontChangeReasonCodesQ1Default_AS = ' ';
    LocDontChangeReasonCodesQ1Default = 0;
    LocDontChangeReasonCodesQ11ListFull_AS = ' ';
    LocDontChangeReasonCodesQ11ListFull = 0;
    LocDontChangeReasonCodesQ12ListEmpty_AS = ' ';
    LocDontChangeReasonCodesQ12ListEmpty = 0;
  }
}

package gen.ort.yyy;
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
//
//                    Source Code Generated by
//                           CA Gen 8.6
//
//    Copyright (c) 2023 CA Technologies. All rights reserved.
//
//    Name: DYYY0351_OA                      Date: 2023/07/05
//    User: HakanBal                         Time: 15:09:34
//
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// Import Statements
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
import java.lang.*;
import java.io.*;
import java.util.*;
import java.math.*;
import java.sql.*;
import com.ca.gen.vwrt.*;
import com.ca.gen.vwrt.types.*;
import com.ca.gen.vwrt.vdf.*;
import com.ca.gen.csu.exception.*;

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// START OF EXPORT VIEW
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
/**
 * Internal data view storage for: DYYY0351_OA
 **/
public class DYYY0351_OA extends ViewBase implements IExportView, Serializable
{
  // Repeating GV:  EXP_GROUP_LIST
  //     Repeats: 48 times
  /**
   * Repeating group view count
   **/
  public int ExpGroupList_MA;
  /**
   * Repeating group view occurrance array
   **/
  public char ExpGroupList_AC[] = new char[48];
  // Entity View: EXP_G_LIST
  //        Type: TYPE
  /**
   * Attribute missing flag for: ExpGListTypeTinstanceId
   **/
  public char ExpGListTypeTinstanceId_AS[] = new char[48];
  /**
   * Attribute for: ExpGListTypeTinstanceId
   * Domain: Timestamp
   * Length: 20
   **/
  public String ExpGListTypeTinstanceId[] = new String[48];
  /**
   * Attribute missing flag for: ExpGListTypeTreferenceId
   **/
  public char ExpGListTypeTreferenceId_AS[] = new char[48];
  /**
   * Attribute for: ExpGListTypeTreferenceId
   * Domain: Timestamp
   * Length: 20
   **/
  public String ExpGListTypeTreferenceId[] = new String[48];
  /**
   * Attribute missing flag for: ExpGListTypeTcreateUserId
   **/
  public char ExpGListTypeTcreateUserId_AS[] = new char[48];
  /**
   * Attribute for: ExpGListTypeTcreateUserId
   * Domain: Text
   * Length: 8
   * Varying Length: N
   **/
  public String ExpGListTypeTcreateUserId[] = new String[48];
  /**
   * Attribute missing flag for: ExpGListTypeTupdateUserId
   **/
  public char ExpGListTypeTupdateUserId_AS[] = new char[48];
  /**
   * Attribute for: ExpGListTypeTupdateUserId
   * Domain: Text
   * Length: 8
   * Varying Length: N
   **/
  public String ExpGListTypeTupdateUserId[] = new String[48];
  /**
   * Attribute missing flag for: ExpGListTypeTkeyAttrText
   **/
  public char ExpGListTypeTkeyAttrText_AS[] = new char[48];
  /**
   * Attribute for: ExpGListTypeTkeyAttrText
   * Domain: Text
   * Length: 4
   * Varying Length: N
   **/
  public String ExpGListTypeTkeyAttrText[] = new String[48];
  /**
   * Attribute missing flag for: ExpGListTypeTsearchAttrText
   **/
  public char ExpGListTypeTsearchAttrText_AS[] = new char[48];
  /**
   * Attribute for: ExpGListTypeTsearchAttrText
   * Domain: Text
   * Length: 20
   * Varying Length: N
   **/
  public String ExpGListTypeTsearchAttrText[] = new String[48];
  /**
   * Attribute missing flag for: ExpGListTypeTotherAttrText
   **/
  public char ExpGListTypeTotherAttrText_AS[] = new char[48];
  /**
   * Attribute for: ExpGListTypeTotherAttrText
   * Domain: Text
   * Length: 2
   * Varying Length: N
   **/
  public String ExpGListTypeTotherAttrText[] = new String[48];
  /**
   * Attribute missing flag for: ExpGListTypeTotherAttrDate
   **/
  public char ExpGListTypeTotherAttrDate_AS[] = new char[48];
  /**
   * Attribute for: ExpGListTypeTotherAttrDate
   * Domain: Date
   * Length: 8
   **/
  public int ExpGListTypeTotherAttrDate[] = new int[48];
  /**
   * Attribute missing flag for: ExpGListTypeTotherAttrTime
   **/
  public char ExpGListTypeTotherAttrTime_AS[] = new char[48];
  /**
   * Attribute for: ExpGListTypeTotherAttrTime
   * Domain: Time
   * Length: 6
   **/
  public int ExpGListTypeTotherAttrTime[] = new int[48];
  /**
   * Attribute missing flag for: ExpGListTypeTotherAttrAmount
   **/
  public char ExpGListTypeTotherAttrAmount_AS[] = new char[48];
  /**
   * Attribute for: ExpGListTypeTotherAttrAmount
   * Domain: Number
   * Length: 17
   * Decimal Places: 2
   * Decimal Precision: Y
   **/
  public BigDecimal ExpGListTypeTotherAttrAmount[] = new BigDecimal[48];
  // Entity View: EXP_ERROR
  //        Type: IYY1_COMPONENT
  /**
   * Attribute missing flag for: ExpErrorIyy1ComponentSeverityCode
   **/
  public char ExpErrorIyy1ComponentSeverityCode_AS;
  /**
   * Attribute for: ExpErrorIyy1ComponentSeverityCode
   * Domain: Text
   * Length: 1
   * Varying Length: N
   **/
  public String ExpErrorIyy1ComponentSeverityCode;
  /**
   * Attribute missing flag for: ExpErrorIyy1ComponentRollbackIndicator
   **/
  public char ExpErrorIyy1ComponentRollbackIndicator_AS;
  /**
   * Attribute for: ExpErrorIyy1ComponentRollbackIndicator
   * Domain: Text
   * Length: 1
   * Varying Length: N
   **/
  public String ExpErrorIyy1ComponentRollbackIndicator;
  /**
   * Attribute missing flag for: ExpErrorIyy1ComponentOriginServid
   **/
  public char ExpErrorIyy1ComponentOriginServid_AS;
  /**
   * Attribute for: ExpErrorIyy1ComponentOriginServid
   * Domain: Number
   * Length: 15
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public double ExpErrorIyy1ComponentOriginServid;
  /**
   * Attribute missing flag for: ExpErrorIyy1ComponentContextString
   **/
  public char ExpErrorIyy1ComponentContextString_AS;
  /**
   * Attribute for: ExpErrorIyy1ComponentContextString
   * Domain: Text
   * Length: 512
   * Varying Length: Y
   **/
  public String ExpErrorIyy1ComponentContextString;
  /**
   * Attribute missing flag for: ExpErrorIyy1ComponentReturnCode
   **/
  public char ExpErrorIyy1ComponentReturnCode_AS;
  /**
   * Attribute for: ExpErrorIyy1ComponentReturnCode
   * Domain: Number
   * Length: 5
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public int ExpErrorIyy1ComponentReturnCode;
  /**
   * Attribute missing flag for: ExpErrorIyy1ComponentReasonCode
   **/
  public char ExpErrorIyy1ComponentReasonCode_AS;
  /**
   * Attribute for: ExpErrorIyy1ComponentReasonCode
   * Domain: Number
   * Length: 5
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public int ExpErrorIyy1ComponentReasonCode;
  /**
   * Attribute missing flag for: ExpErrorIyy1ComponentChecksum
   **/
  public char ExpErrorIyy1ComponentChecksum_AS;
  /**
   * Attribute for: ExpErrorIyy1ComponentChecksum
   * Domain: Text
   * Length: 15
   * Varying Length: N
   **/
  public String ExpErrorIyy1ComponentChecksum;
  /**
   * Default Constructor
   **/
  
  public DYYY0351_OA()
  {
    reset();
  }
  /**
   * Copy Constructor
   **/
  
  public DYYY0351_OA(DYYY0351_OA orig)
  {
    copyFrom(orig);
  }
  /**
   * Static instance creator function
   **/
  
  public static DYYY0351_OA getInstance()
  {
    return new DYYY0351_OA();
  }
  /**
   * Static free instance method
   **/
  
  public void freeInstance()
  {
  }
  /**
   * clone constructor
   **/
  
  @Override public Object clone()
  	throws CloneNotSupportedException
  {
    return(new DYYY0351_OA(this));
  }
  /**
   * Resets all properties to the defaults.
   **/
  
  public void reset()
  {
    ExpGroupList_MA = 0;
    for(int a = 0; a < 48; a++)
    {
      ExpGroupList_AC[a] = ' ';
      ExpGListTypeTinstanceId_AS[a] = ' ';
      ExpGListTypeTinstanceId[a] = "00000000000000000000";
      ExpGListTypeTreferenceId_AS[a] = ' ';
      ExpGListTypeTreferenceId[a] = "00000000000000000000";
      ExpGListTypeTcreateUserId_AS[a] = ' ';
      ExpGListTypeTcreateUserId[a] = "        ";
      ExpGListTypeTupdateUserId_AS[a] = ' ';
      ExpGListTypeTupdateUserId[a] = "        ";
      ExpGListTypeTkeyAttrText_AS[a] = ' ';
      ExpGListTypeTkeyAttrText[a] = "    ";
      ExpGListTypeTsearchAttrText_AS[a] = ' ';
      ExpGListTypeTsearchAttrText[a] = "                    ";
      ExpGListTypeTotherAttrText_AS[a] = ' ';
      ExpGListTypeTotherAttrText[a] = "  ";
      ExpGListTypeTotherAttrDate_AS[a] = ' ';
      ExpGListTypeTotherAttrDate[a] = 00000000;
      ExpGListTypeTotherAttrTime_AS[a] = ' ';
      ExpGListTypeTotherAttrTime[a] = 00000000;
      ExpGListTypeTotherAttrAmount_AS[a] = ' ';
      ExpGListTypeTotherAttrAmount[a] = BigDecimalAttr.getDefaultValue();
    }
    ExpErrorIyy1ComponentSeverityCode_AS = ' ';
    ExpErrorIyy1ComponentSeverityCode = " ";
    ExpErrorIyy1ComponentRollbackIndicator_AS = ' ';
    ExpErrorIyy1ComponentRollbackIndicator = " ";
    ExpErrorIyy1ComponentOriginServid_AS = ' ';
    ExpErrorIyy1ComponentOriginServid = 0.0;
    ExpErrorIyy1ComponentContextString_AS = ' ';
    ExpErrorIyy1ComponentContextString = "";
    ExpErrorIyy1ComponentReturnCode_AS = ' ';
    ExpErrorIyy1ComponentReturnCode = 0;
    ExpErrorIyy1ComponentReasonCode_AS = ' ';
    ExpErrorIyy1ComponentReasonCode = 0;
    ExpErrorIyy1ComponentChecksum_AS = ' ';
    ExpErrorIyy1ComponentChecksum = "               ";
  }
  /**
   * Sets the current state of the instance to the VDF version.
   **/
  public void setFromVDF(VDF vdf)
  {
    throw new RuntimeException("can only execute setFromVDF for a Procedure Step.");
  }
  
  /**
   * Gets the VDF version of the current state of the instance.
   **/
  public VDF getVDF()
  {
    throw new RuntimeException("can only execute getVDF for a Procedure Step.");
  }
  
  /**
   * Sets the current instance based on the passed view.
   **/
  public void copyFrom(IExportView orig)
  {
    this.copyFrom((DYYY0351_OA) orig);
  }
  
  /**
   * Sets the current instance based on the passed view.
   **/
  public void copyFrom(DYYY0351_OA orig)
  {
    ExpGroupList_MA = orig.ExpGroupList_MA;
    for(int a = 0; a < 48; a++)
    {
      ExpGroupList_AC[a] = orig.ExpGroupList_AC[a];
      ExpGListTypeTinstanceId_AS[a] = orig.ExpGListTypeTinstanceId_AS[a];
      ExpGListTypeTinstanceId[a] = orig.ExpGListTypeTinstanceId[a];
      ExpGListTypeTreferenceId_AS[a] = orig.ExpGListTypeTreferenceId_AS[a];
      ExpGListTypeTreferenceId[a] = orig.ExpGListTypeTreferenceId[a];
      ExpGListTypeTcreateUserId_AS[a] = orig.ExpGListTypeTcreateUserId_AS[a];
      ExpGListTypeTcreateUserId[a] = orig.ExpGListTypeTcreateUserId[a];
      ExpGListTypeTupdateUserId_AS[a] = orig.ExpGListTypeTupdateUserId_AS[a];
      ExpGListTypeTupdateUserId[a] = orig.ExpGListTypeTupdateUserId[a];
      ExpGListTypeTkeyAttrText_AS[a] = orig.ExpGListTypeTkeyAttrText_AS[a];
      ExpGListTypeTkeyAttrText[a] = orig.ExpGListTypeTkeyAttrText[a];
      ExpGListTypeTsearchAttrText_AS[a] = orig.ExpGListTypeTsearchAttrText_AS[a];
      ExpGListTypeTsearchAttrText[a] = orig.ExpGListTypeTsearchAttrText[a];
      ExpGListTypeTotherAttrText_AS[a] = orig.ExpGListTypeTotherAttrText_AS[a];
      ExpGListTypeTotherAttrText[a] = orig.ExpGListTypeTotherAttrText[a];
      ExpGListTypeTotherAttrDate_AS[a] = orig.ExpGListTypeTotherAttrDate_AS[a];
      ExpGListTypeTotherAttrDate[a] = orig.ExpGListTypeTotherAttrDate[a];
      ExpGListTypeTotherAttrTime_AS[a] = orig.ExpGListTypeTotherAttrTime_AS[a];
      ExpGListTypeTotherAttrTime[a] = orig.ExpGListTypeTotherAttrTime[a];
      ExpGListTypeTotherAttrAmount_AS[a] = orig.ExpGListTypeTotherAttrAmount_AS[a];
      ExpGListTypeTotherAttrAmount[a] = orig.ExpGListTypeTotherAttrAmount[a];
    }
    ExpErrorIyy1ComponentSeverityCode_AS = orig.ExpErrorIyy1ComponentSeverityCode_AS;
    ExpErrorIyy1ComponentSeverityCode = orig.ExpErrorIyy1ComponentSeverityCode;
    ExpErrorIyy1ComponentRollbackIndicator_AS = orig.ExpErrorIyy1ComponentRollbackIndicator_AS;
    ExpErrorIyy1ComponentRollbackIndicator = orig.ExpErrorIyy1ComponentRollbackIndicator;
    ExpErrorIyy1ComponentOriginServid_AS = orig.ExpErrorIyy1ComponentOriginServid_AS;
    ExpErrorIyy1ComponentOriginServid = orig.ExpErrorIyy1ComponentOriginServid;
    ExpErrorIyy1ComponentContextString_AS = orig.ExpErrorIyy1ComponentContextString_AS;
    ExpErrorIyy1ComponentContextString = orig.ExpErrorIyy1ComponentContextString;
    ExpErrorIyy1ComponentReturnCode_AS = orig.ExpErrorIyy1ComponentReturnCode_AS;
    ExpErrorIyy1ComponentReturnCode = orig.ExpErrorIyy1ComponentReturnCode;
    ExpErrorIyy1ComponentReasonCode_AS = orig.ExpErrorIyy1ComponentReasonCode_AS;
    ExpErrorIyy1ComponentReasonCode = orig.ExpErrorIyy1ComponentReasonCode;
    ExpErrorIyy1ComponentChecksum_AS = orig.ExpErrorIyy1ComponentChecksum_AS;
    ExpErrorIyy1ComponentChecksum = orig.ExpErrorIyy1ComponentChecksum;
  }
}
