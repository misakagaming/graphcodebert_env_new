
package gen.ort.yyy;

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
//
//                    Source Code Generated by
//                           CA Gen 8.6
//
//    Copyright (c) 2023 CA Technologies. All rights reserved.
//
//    Name: DYYY0241_CHILD_DELETE            Date: 2023/07/05
//    Target OS:   JVM                       Time: 15:08:54
//    Target DBMS: JDBC                      User: HakanBal
//    Access Method: JDBC           
//
//    Generation options:
//    Debug trace option selected
//    Data modeling constraint enforcement not selected
//    Optimized import view initialization not selected
//    Enforce default values with DBMS not selected
//    Init unspecified optional fields to NULL not selected
//
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// Import Statements
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
import java.lang.*;
import java.io.*;
import java.util.*;
import java.math.*;
import java.sql.*;
import com.ca.gen.vwrt.*;
import com.ca.gen.vwrt.types.*;
import com.ca.gen.vwrt.vdf.*;

import com.ca.gen.abrt.*;
import com.ca.gen.abrt.functions.*;
import com.ca.gen.abrt.cascade.*;
import com.ca.gen.abrt.trace.*;
import com.ca.gen.exits.common.*;
import com.ca.gen.odc.*;

public class DYYY0241 extends ABBase
{
  // * * * * * * * * * * * * * * * * * * *
  // ENTITY ACTION STATEMENT STATUS FLAGS 
  // ENTITY VIEW STATUS FLAGS AND         
  // LAST COMMAND FOR EACH ENTITY VIEW    
  // * * * * * * * * * * * * * * * * * * *
  String sl_29360192 = ErrorData.NONE_FL_LS;
  String dl_28311557 = ErrorData.NONE_FL_LS;
  String Child_es;
  String Child_001cd;
  String Child_lk;
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // IMPORT VIEW CLASS VARIABLE
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  DYYY0241_IA w_ia;
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // EXPORT VIEW CLASS VARIABLE
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  DYYY0241_OA w_oa;
  
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // START OF ENTITY ACTION VIEW
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  /**
   * Internal data view storage for: DYYY0241_EA
   **/
  public class DYYY0241_EA extends ViewBase implements IEntityActionView, Serializable
  {
    // Entity View: 
    //        Type: CHILD
    /**
     * Attribute missing flag for: ChildCinstanceId
     **/
    public char ChildCinstanceId_AS;
    /**
     * Attribute for: ChildCinstanceId
     * Domain: Timestamp
     * Length: 20
     **/
    public String ChildCinstanceId;
    /**
     * Attribute missing flag for: ChildCreferenceId
     **/
    public char ChildCreferenceId_AS;
    /**
     * Attribute for: ChildCreferenceId
     * Domain: Timestamp
     * Length: 20
     **/
    public String ChildCreferenceId;
    /**
     * Attribute missing flag for: ChildCparentPkeyAttrText
     **/
    public char ChildCparentPkeyAttrText_AS;
    /**
     * Attribute for: ChildCparentPkeyAttrText
     * Domain: Text
     * Length: 5
     * Varying Length: N
     **/
    public String ChildCparentPkeyAttrText;
    /**
     * Attribute missing flag for: ChildCkeyAttrNum
     **/
    public char ChildCkeyAttrNum_AS;
    /**
     * Attribute for: ChildCkeyAttrNum
     * Domain: Number
     * Length: 6
     * Decimal Places: 0
     * Decimal Precision: N
     **/
    public int ChildCkeyAttrNum;
    /**
     * Attribute missing flag for: ChildCupdateUserId
     **/
    public char ChildCupdateUserId_AS;
    /**
     * Attribute for: ChildCupdateUserId
     * Domain: Text
     * Length: 8
     * Varying Length: N
     **/
    public String ChildCupdateUserId;
    /**
     * Default Constructor
     **/
    
    public DYYY0241_EA()
    {
      reset();
    }
    /**
     * Copy Constructor
     **/
    
    public DYYY0241_EA(DYYY0241_EA orig)
    {
      ChildCinstanceId_AS = orig.ChildCinstanceId_AS;
      ChildCinstanceId = orig.ChildCinstanceId;
      ChildCreferenceId_AS = orig.ChildCreferenceId_AS;
      ChildCreferenceId = orig.ChildCreferenceId;
      ChildCparentPkeyAttrText_AS = orig.ChildCparentPkeyAttrText_AS;
      ChildCparentPkeyAttrText = orig.ChildCparentPkeyAttrText;
      ChildCkeyAttrNum_AS = orig.ChildCkeyAttrNum_AS;
      ChildCkeyAttrNum = orig.ChildCkeyAttrNum;
      ChildCupdateUserId_AS = orig.ChildCupdateUserId_AS;
      ChildCupdateUserId = orig.ChildCupdateUserId;
    }
    /**
     * clone constructor
     **/
    
    @Override public Object clone()
    	throws CloneNotSupportedException
    {
      return(new DYYY0241_EA(this));
    }
    /**
     * Resets all properties to the defaults.
     **/
    
    public void reset()
    {
      ChildCinstanceId_AS = ' ';
      ChildCinstanceId = "00000000000000000000";
      ChildCreferenceId_AS = ' ';
      ChildCreferenceId = "00000000000000000000";
      ChildCparentPkeyAttrText_AS = ' ';
      ChildCparentPkeyAttrText = "     ";
      ChildCkeyAttrNum_AS = ' ';
      ChildCkeyAttrNum = 0;
      ChildCupdateUserId_AS = ' ';
      ChildCupdateUserId = "        ";
    }
  }
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // ENTITY ACTION VIEW CLASS VARIABLE
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  DYYY0241_EA w_ea = new DYYY0241_EA();
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // LOCAL VIEW CLASS VARIABLE
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  DYYY0241_LA w_la;
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // CURSOR OPEN FLAGS
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  boolean curs_open_0029360192 = false;
  
  
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // HOST VARIABLES FOR TABLE: VDVYYYC
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  int ckey_attr_003EF;
  int ckey_attr_002EN;
  String cupdate_userid_005EF;
  String cupdate_userid_004EN;
  java.sql.Timestamp cinstance_id_007EF;
  java.sql.Timestamp cinstance_id_006EN;
  java.sql.Timestamp creference_id_009EF;
  java.sql.Timestamp creference_id_008EN;
  String cparent_pkey_attr_011EF;
  String cparent_pkey_attr_010EN;
  
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // TEMPORARY HOST VARIABLES 
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  String CparentPkeyAttrText_001TP;
  int CkeyAttrNum_002TP;
  
  
  
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // MISC DECLARATIONS AND PROTOTYPES 
  //    FOLLOW AS NEEDED:             
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  boolean func_0022020317_esc_flag;
  PreparedStatement hstmt_0037935666_1;
  ResultSet hstmt_0037935666_1_rs;
  int hstmt_0037935666_1_cnt;
  boolean func_0020972310_esc_flag;
  boolean func_0020973074_esc_flag;
  PadView padview[] = new PadView [50];
  int trace_ret_code;
  PadText padtext[] = initPadText();
  public PadText [] initPadText()
  {
    PadText [] result = new PadText [PADTEXT_SIZE];
    result[0] = PadText.getInstance(   0,"+->   DYYY0241_CHILD_DELETE             07/05/2023  15:08");
    result[1] = PadText.getInstance(   0,"!       IMPORTS:");
    result[2] = PadText.getInstance(   0,"!         Work View imp_error iyy1_component (Transient, Mandatory, Import only)");
    result[3] = PadText.getInstance(   0,"!           severity_code");
    result[4] = PadText.getInstance(   0,"!           rollback_indicator");
    result[5] = PadText.getInstance(   0,"!           origin_servid");
    result[6] = PadText.getInstance(   0,"!           context_string");
    result[7] = PadText.getInstance(   0,"!           return_code");
    result[8] = PadText.getInstance(   0,"!           reason_code");
    result[9] = PadText.getInstance(   0,"!           checksum");
    result[10] = PadText.getInstance(   0,"!         Work View imp_reference iyy1_server_data (Transient, Mandatory, Import only)");
    result[11] = PadText.getInstance(   0,"!           userid");
    result[12] = PadText.getInstance(   0,"!           reference_id");
    result[13] = PadText.getInstance(   0,"!         Entity View imp child (Transient, Mandatory, Import only)");
    result[14] = PadText.getInstance(   0,"!           cinstance_id");
    result[15] = PadText.getInstance(   0,"!           creference_id");
    result[16] = PadText.getInstance(   0,"!           cparent_pkey_attr_text");
    result[17] = PadText.getInstance(   0,"!           ckey_attr_num");
    result[18] = PadText.getInstance(   0,"!       EXPORTS:");
    result[19] = PadText.getInstance(   0,"!         Work View exp_error iyy1_component (Transient, Export only)");
    result[20] = PadText.getInstance(   0,"!           severity_code");
    result[21] = PadText.getInstance(   0,"!           rollback_indicator");
    result[22] = PadText.getInstance(   0,"!           origin_servid");
    result[23] = PadText.getInstance(   0,"!           context_string");
    result[24] = PadText.getInstance(   0,"!           return_code");
    result[25] = PadText.getInstance(   0,"!           reason_code");
    result[26] = PadText.getInstance(   0,"!           checksum");
    result[27] = PadText.getInstance(   0,"!       ENTITY ACTIONS:");
    result[28] = PadText.getInstance(   0,"!         Entity View child");
    result[29] = PadText.getInstance(   0,"!           cinstance_id");
    result[30] = PadText.getInstance(   0,"!           creference_id");
    result[31] = PadText.getInstance(   0,"!           cparent_pkey_attr_text");
    result[32] = PadText.getInstance(   0,"!           ckey_attr_num");
    result[33] = PadText.getInstance(   0,"!           cupdate_user_id");
    result[34] = PadText.getInstance(   0,"!       LOCALS:");
    result[35] = PadText.getInstance(   0,"!         Work View loc dont_change_return_codes");
    result[36] = PadText.getInstance(   0,"!           1_ok");
    result[37] = PadText.getInstance(   0,"!           n10_obj_not_found");
    result[38] = PadText.getInstance(   0,"!           n43_obj_not_deleted");
    result[39] = PadText.getInstance(   0,"!         Work View loc dont_change_reason_codes");
    result[40] = PadText.getInstance(   0,"!           1_default");
    result[41] = PadText.getInstance(   0,"!           121_child_not_found");
    result[42] = PadText.getInstance(   0,"!           132_child_concurrency_error");
    result[43] = PadText.getInstance(   0,"!");
    result[44] = PadText.getInstance(   0,"!     PROCEDURE STATEMENTS");
    result[45] = PadText.getInstance(   0,"!");
    result[46] = PadText.getInstance(   1,"!  NOTE: ");
    result[47] = PadText.getInstance(   1,"!  See the description for the purpose");
    result[48] = PadText.getInstance(   1,"!  ");
    result[49] = PadText.getInstance(   2,"!  NOTE: ");
    result[50] = PadText.getInstance(   2,"!  RELEASE HISTORY");
    result[51] = PadText.getInstance(   2,"!  01_00 23-02-1998 New release");
    result[52] = PadText.getInstance(   2,"!  ");
    result[53] = PadText.getInstance(   3,"!  MOVE imp_error iyy1_component TO exp_error iyy1_component");
    result[54] = PadText.getInstance(   4,"!   ");
    result[55] = PadText.getInstance(   5,"!  NOTE: ");
    result[56] = PadText.getInstance(   5,"!  ****************************************************************");
    result[57] = PadText.getInstance(   5,"!  The used ReturnCode/ReasonCode values");
    result[58] = PadText.getInstance(   5,"!  ");
    result[59] = PadText.getInstance(   6,"!  NOTE: ");
    result[60] = PadText.getInstance(   6,"!  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
    result[61] = PadText.getInstance(   6,"!  Set the return and reason codes below");
    result[62] = PadText.getInstance(   6,"!  ");
    result[63] = PadText.getInstance(   7,"!  SET loc dont_change_return_codes 1_ok TO 1 ");
    result[64] = PadText.getInstance(   8,"!  SET loc dont_change_return_codes n10_obj_not_found TO -10 ");
    result[65] = PadText.getInstance(   9,"!  SET loc dont_change_return_codes n43_obj_not_deleted TO -43 ");
    result[66] = PadText.getInstance(  10,"!   ");
    result[67] = PadText.getInstance(  11,"!  SET loc dont_change_reason_codes 1_default TO 1 ");
    result[68] = PadText.getInstance(  12,"!  SET loc dont_change_reason_codes 121_child_not_found TO 121 ");
    result[69] = PadText.getInstance(  13,"!  SET loc dont_change_reason_codes 132_child_concurrency_error TO 132 ");
    result[70] = PadText.getInstance(  14,"!   ");
    result[71] = PadText.getInstance(  15,"!  NOTE: ");
    result[72] = PadText.getInstance(  15,"!  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
    result[73] = PadText.getInstance(  15,
      "!  If Instance_id is being used, reading must be operated according to this section, instead of ");
    result[74] = PadText.getInstance(  15,"!  business_key(s).");
    result[75] = PadText.getInstance(  15,"!  ");
    result[76] = PadText.getInstance(  16,"!  NOTE: ");
    result[77] = PadText.getInstance(  16,"!  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
    result[78] = PadText.getInstance(  16,"!  Choose Control of Cursor Generation property as \"Select only\". ");
    result[79] = PadText.getInstance(  16,"!  ");
    result[80] = PadText.getInstance(  17,"!  +=>READ (Select Only) child");
    result[81] = PadText.getInstance(  17,
      "!  !        WHERE DESIRED child cparent_pkey_attr_text = imp child cparent_pkey_attr_text  ");
    result[82] = PadText.getInstance(  17,"!  !              AND  DESIRED child ckey_attr_num = imp child ckey_attr_num");
    result[83] = PadText.getInstance(  17, 1, "!  +> WHEN successful");
    result[84] = PadText.getInstance(  18,"!  !  +->IF child creference_id ^= imp child creference_id");
    result[85] = PadText.getInstance(  19,
      "!  !  !  SET exp_error iyy1_component return_code TO loc dont_change_return_codes n43_obj_not_deleted ");
    result[86] = PadText.getInstance(  20,
      "!  !  !  SET exp_error iyy1_component reason_code TO loc dont_change_reason_codes 132_child_concurrency_error ");
    result[87] = PadText.getInstance(  21,"! <------ESCAPE");
    result[88] = PadText.getInstance(  18,"!  !  +--");
    result[89] = PadText.getInstance(  22,"!  !  DELETE child");
    result[90] = PadText.getInstance(  17, 2, "!  +> WHEN not found");
    result[91] = PadText.getInstance(  23,
      "!  !  SET exp_error iyy1_component return_code TO loc dont_change_return_codes n10_obj_not_found ");
    result[92] = PadText.getInstance(  24,
      "!  !  SET exp_error iyy1_component reason_code TO loc dont_change_reason_codes 121_child_not_found ");
    result[93] = PadText.getInstance(  17,"!  +--");
    result[94] = PadText.getInstance(   0,"+---");
    result[95] = PadText.getInstance(PadText.LASTLINE,"************************* BOTTOM OF DATA *************************");
    return result;
  }
  final static int PADTEXT_SIZE = 96;
  //       +->   DYYY0241_CHILD_DELETE             07/05/2023  15:08
  //       !       IMPORTS:
  //       !         Work View imp_error iyy1_component (Transient, Mandatory, Import only)
  //       !           severity_code
  //       !           rollback_indicator
  //       !           origin_servid
  //       !           context_string
  //       !           return_code
  //       !           reason_code
  //       !           checksum
  //       !         Work View imp_reference iyy1_server_data (Transient, Mandatory, Import only)
  //       !           userid
  //       !           reference_id
  //       !         Entity View imp child (Transient, Mandatory, Import only)
  //       !           cinstance_id
  //       !           creference_id
  //       !           cparent_pkey_attr_text
  //       !           ckey_attr_num
  //       !       EXPORTS:
  //       !         Work View exp_error iyy1_component (Transient, Export only)
  //       !           severity_code
  //       !           rollback_indicator
  //       !           origin_servid
  //       !           context_string
  //       !           return_code
  //       !           reason_code
  //       !           checksum
  //       !       ENTITY ACTIONS:
  //       !         Entity View child
  //       !           cinstance_id
  //       !           creference_id
  //       !           cparent_pkey_attr_text
  //       !           ckey_attr_num
  //       !           cupdate_user_id
  //       !       LOCALS:
  //       !         Work View loc dont_change_return_codes
  //       !           1_ok
  //       !           n10_obj_not_found
  //       !           n43_obj_not_deleted
  //       !         Work View loc dont_change_reason_codes
  //       !           1_default
  //       !           121_child_not_found
  //       !           132_child_concurrency_error
  //       !
  //       !     PROCEDURE STATEMENTS
  //       !
  //     1 !  NOTE: 
  //     1 !  See the description for the purpose
  //     1 !  
  //     2 !  NOTE: 
  //     2 !  RELEASE HISTORY
  //     2 !  01_00 23-02-1998 New release
  //     2 !  
  //     3 !  MOVE imp_error iyy1_component TO exp_error iyy1_component
  //     4 !   
  //     5 !  NOTE: 
  //     5 !  ****************************************************************
  //     5 !  The used ReturnCode/ReasonCode values
  //     5 !  
  //     6 !  NOTE: 
  //     6 !  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  //     6 !  Set the return and reason codes below
  //     6 !  
  //     7 !  SET loc dont_change_return_codes 1_ok TO 1 
  //     8 !  SET loc dont_change_return_codes n10_obj_not_found TO -10 
  //     9 !  SET loc dont_change_return_codes n43_obj_not_deleted TO -43 
  //    10 !   
  //    11 !  SET loc dont_change_reason_codes 1_default TO 1 
  //    12 !  SET loc dont_change_reason_codes 121_child_not_found TO 121 
  //    13 !  SET loc dont_change_reason_codes 132_child_concurrency_error TO 132 
  //    14 !   
  //    15 !  NOTE: 
  //    15 !  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  //    15 !  If Instance_id is being used, reading must be operated according to this section, instead of 
  //    15 !  business_key(s).
  //    15 !  
  //    16 !  NOTE: 
  //    16 !  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  //    16 !  Choose Control of Cursor Generation property as "Select only". 
  //    16 !  
  //    17 !  +=>READ (Select Only) child
  //    17 !  !        WHERE DESIRED child cparent_pkey_attr_text = imp child cparent_pkey_attr_text  
  //    17 !  !              AND  DESIRED child ckey_attr_num = imp child ckey_attr_num
  //    17 !  +> WHEN successful
  //    18 !  !  +->IF child creference_id ^= imp child creference_id
  //    19 !  !  !  SET exp_error iyy1_component return_code TO loc dont_change_return_codes n43_obj_not_deleted 
  //    20 !  !  !  SET exp_error iyy1_component reason_code TO loc dont_change_reason_codes 132_child_concurrency_error 
  //    21 ! <------ESCAPE
  //    18 !  !  +--
  //    22 !  !  DELETE child
  //    17 !  +> WHEN not found
  //    23 !  !  SET exp_error iyy1_component return_code TO loc dont_change_return_codes n10_obj_not_found 
  //    24 !  !  SET exp_error iyy1_component reason_code TO loc dont_change_reason_codes 121_child_not_found 
  //    17 !  +--
  //       +---
  
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  //  CONSTRUCTOR FOR THE CLASS       
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  public DYYY0241()
  {
    iefCGenRlse = "CA Gen 8.6";
    ssCopyright = "Copyright (c) 2023 CA Technologies. All rights reserved.";
    iefCGenDate = "2023/07/05";
    iefCGenTime = "15:08:54";
    iefCGenEncy = "9.2.A6";
    iefCGenUserId = "HakanBal";
    iefCGenModel = "N8I_ORT_YYY_0112_TEMPLATE";
    iefCGenSubset = "ALL";
    iefCGenName = "DYYY0241_CHILD_DELETE";
    nestingLevel = 0;
    valChkDeadlockTimeout = false;
    valChkDBError = false;
  }
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // ACTION BLOCK FUNCTION DECLARATIONS 
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  
  public void DYYY0241( Object in_runtime_parm1, 
  	IRuntimePStepContext in_runtime_parm2, 
  	GlobData in_globdata, 
  	DYYY0241_IA import_view, 
  	DYYY0241_OA export_view )
  {
    iefRuntimeParm1 = in_runtime_parm1;
    iefRuntimeParm2 = in_runtime_parm2;
    globdata = in_globdata;
    w_ia = import_view;
    w_oa = export_view;
    _DYYY0241();
  }
  
  private void _DYYY0241()
  {
    
    f_22020317_localAlloc("DYYY0241_CHILD_DELETE");
    if ( globdata.getErrorData().getLastStatus() == ErrorData.IEF_ALLOCATION_ERROR_FL_LS )
    	return;
    
    ++(nestingLevel);
    try {
      f_22020317_init();
      f_22020317();
    } catch( ABException e ) {
    } finally {
      --(nestingLevel);
    }
    String last_stmt_num_saved = globdata.getStateData().getLastStatementNumber();
    globdata.getStateData().setLastStatementNumber( "9999999999" );
    try {
      f_0_trace();
    } catch( ABException e ) {
    }
    globdata.getStateData().setLastStatementNumber( last_stmt_num_saved );
  }
  public void f_22020317()
  	throws ABException
  {
    func_0022020317_esc_flag = false;
    globdata.getStateData().setCurrentABId( "0022020317" );
    globdata.getStateData().setCurrentABName( "DYYY0241_CHILD_DELETE" );
    padview_init();
    globdata.getStateData().setLastStatementNumber( "0000000000" );
    f_0_trace();
    f_0022020317_esctag: 
    {
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    See the description for the purpose                             
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    RELEASE HISTORY                                                 
      //    01_00 23-02-1998 New release                                    
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      globdata.getStateData().setLastStatementNumber( "0000000003" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        w_oa.ExpErrorIyy1ComponentSeverityCode = FixedStringAttr.valueOf(w_ia.ImpErrorIyy1ComponentSeverityCode, (short)1);
        w_oa.ExpErrorIyy1ComponentRollbackIndicator = FixedStringAttr.valueOf(w_ia.ImpErrorIyy1ComponentRollbackIndicator, (short)1)
          ;
        w_oa.ExpErrorIyy1ComponentOriginServid = DoubleAttr.valueOf(w_ia.ImpErrorIyy1ComponentOriginServid);
        w_oa.ExpErrorIyy1ComponentContextString = StringAttr.valueOf(w_ia.ImpErrorIyy1ComponentContextString, (short)512);
        w_oa.ExpErrorIyy1ComponentReturnCode = IntAttr.valueOf(w_ia.ImpErrorIyy1ComponentReturnCode);
        w_oa.ExpErrorIyy1ComponentReasonCode = IntAttr.valueOf(w_ia.ImpErrorIyy1ComponentReasonCode);
        w_oa.ExpErrorIyy1ComponentChecksum = FixedStringAttr.valueOf(w_ia.ImpErrorIyy1ComponentChecksum, (short)15);
      }
      
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    **************************************************************  
      //    **                                                              
      //    The used ReturnCode/ReasonCode values                           
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  
      //    !!                                                              
      //    Set the return and reason codes below                           
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      globdata.getStateData().setLastStatementNumber( "0000000007" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        w_la.LocDontChangeReturnCodesQ1Ok = IntAttr.valueOf((int)TIRD2DEC.TIRD2DC1(1, 0, TIRD2DEC.ROUND_NONE, 5));
      }
      globdata.getStateData().setLastStatementNumber( "0000000008" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        w_la.LocDontChangeReturnCodesN10ObjNotFound = IntAttr.valueOf((int)TIRD2DEC.TIRD2DC1(-10, 0, TIRD2DEC.ROUND_NONE, 5));
      }
      globdata.getStateData().setLastStatementNumber( "0000000009" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        w_la.LocDontChangeReturnCodesN43ObjNotDeleted = IntAttr.valueOf((int)TIRD2DEC.TIRD2DC1(-43, 0, TIRD2DEC.ROUND_NONE, 5));
      }
      
      globdata.getStateData().setLastStatementNumber( "0000000011" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        w_la.LocDontChangeReasonCodesQ1Default = IntAttr.valueOf((int)TIRD2DEC.TIRD2DC1(1, 0, TIRD2DEC.ROUND_NONE, 5));
      }
      globdata.getStateData().setLastStatementNumber( "0000000012" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        w_la.LocDontChangeReasonCodesQ121ChildNotFound = IntAttr.valueOf((int)TIRD2DEC.TIRD2DC1(121, 0, TIRD2DEC.ROUND_NONE, 5));
      }
      globdata.getStateData().setLastStatementNumber( "0000000013" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        w_la.LocDontChangeReasonCodesQ132ChildConcurrencyError = IntAttr.valueOf((int)TIRD2DEC.TIRD2DC1(132, 0, TIRD2DEC.ROUND_NONE, 
          5));
      }
      
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  
      //    !!!!!!!!!!!!!!!!!!!!!                                           
      //    If Instance_id is being used,                                   
      //    reading must be operated according to this section,             
      //    instead of                                                      
      //    business_key(s).                                                
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  
      //    !!!!!!!!!!!!!!!!!!!!!                                           
      //    Choose Control of Cursor Generation property as                 
      //    "Select only".                                                  
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      globdata.getStateData().setLastStatementNumber( "0000000017" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        f_29360192();
        if ( sl_29360192.equals( ErrorData.SUCCEEDS_FL_LS ) == true )
        {
          globdata.getStateData().setLastSubStatementNumber( "1" );
          f_0_trace();
          {
            f_20972310();
          }
        }
        else if ( sl_29360192.equals( ErrorData.NOT_FOUND_FL_LS ) == true )
        {
          globdata.getStateData().setLastSubStatementNumber( "2" );
          f_0_trace();
          {
            globdata.getStateData().setLastStatementNumber( "0000000023" );
            f_0_trace();
            if ( trace_ret_code != 8 )
            {
              w_oa.ExpErrorIyy1ComponentReturnCode = IntAttr.valueOf((int)TIRD2DEC.TIRD2DC1((double) 
                w_la.LocDontChangeReturnCodesN10ObjNotFound, 0, TIRD2DEC.ROUND_NONE, 5));
            }
            globdata.getStateData().setLastStatementNumber( "0000000024" );
            f_0_trace();
            if ( trace_ret_code != 8 )
            {
              w_oa.ExpErrorIyy1ComponentReasonCode = IntAttr.valueOf((int)TIRD2DEC.TIRD2DC1((double) 
                w_la.LocDontChangeReasonCodesQ121ChildNotFound, 0, TIRD2DEC.ROUND_NONE, 5));
            }
          }
        }
        else {
          globdata.getErrorData().setStatus( ErrorData.FATAL_ERROR_FL_LS );
          globdata.getErrorData().setLastStatus( sl_29360192 );
          globdata.getErrorData().setErrorEncounteredSW( ErrorData.ERROR_FOUND_SW );
          throw new ABException();
        }
      }
    }
  }
  
  
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // SUBORDINATE FUNCTIONS
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  
  
  public void f_20972310()
  	throws ABException
  {
    func_0020972310_esc_flag = false;
    f_0020972310_esctag: 
    {
      globdata.getStateData().setLastStatementNumber( "0000000018" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        if ( CompareExit.compareTo(w_ea.ChildCreferenceId, w_ia.ImpChildCreferenceId) != 0 )
        {
          f_20973074();
        }
        
      }
      if ( func_0020972310_esc_flag )
      {
        break f_0020972310_esctag;
      }
      globdata.getStateData().setLastStatementNumber( "0000000022" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        valChkDeadlockTimeout = false;
        valChkDBError = false;
        f_28311557();
        if ( dl_28311557.equals( ErrorData.SUCCEEDS_FL_LS ) == true )
        {
        }
        else if ( dl_28311557.equals( ErrorData.NOT_FOUND_FL_LS ) == true )
        {
          globdata.getErrorData().setStatus( ErrorData.FATAL_ERROR_FL_LS );
          globdata.getDBMSData().setActionId( 22 );
          globdata.getErrorData().setLastStatus( ErrorData.NOT_FOUND_FL_LS );
          throw new ABException();
        }
        else {
          globdata.getErrorData().setStatus( ErrorData.DB_ERROR_FL_LS );
          globdata.getErrorData().setErrorEncounteredSW( ErrorData.ERROR_FOUND_SW );
          throw new ABException();
        }
      }
    }
  }
  
  public void f_20973074()
  	throws ABException
  {
    func_0020973074_esc_flag = false;
    f_0020973074_esctag: 
    {
      globdata.getStateData().setLastStatementNumber( "0000000019" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        w_oa.ExpErrorIyy1ComponentReturnCode = IntAttr.valueOf((int)TIRD2DEC.TIRD2DC1((double) 
          w_la.LocDontChangeReturnCodesN43ObjNotDeleted, 0, TIRD2DEC.ROUND_NONE, 5));
      }
      globdata.getStateData().setLastStatementNumber( "0000000020" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        w_oa.ExpErrorIyy1ComponentReasonCode = IntAttr.valueOf((int)TIRD2DEC.TIRD2DC1((double) 
          w_la.LocDontChangeReasonCodesQ132ChildConcurrencyError, 0, TIRD2DEC.ROUND_NONE, 5));
      }
      globdata.getStateData().setLastStatementNumber( "0000000021" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        func_0020973074_esc_flag = true;
        func_0020972310_esc_flag = true;
      }
    }
  }
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // INITIALIZATION UTILITY FUNCTIONS 
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  
  public void f_22020317_localAlloc(String abname)
  {
    // Request localview allocation 
    w_la = (gen.ort.yyy.DYYY0241_LA)(iefRuntimeParm2.getInstance("gen.ort.yyy.DYYY0241_LA"));
    if ( w_la == null )
    {
      globdata.getStateData().setCurrentABId( "0022020317" );
      globdata.getStateData().setCurrentABName( abname );
      globdata.getErrorData().setErrorEncounteredSW( ErrorData.ERROR_FOUND_SW );
      globdata.getErrorData().setLastStatus( ErrorData.IEF_ALLOCATION_ERROR_FL_LS );
    }
  }
  
  public void f_22020317_init()
  	throws ABException
  {
    
    ckey_attr_003EF = 0;
    ckey_attr_002EN = 0;
    cupdate_userid_005EF = SPACES;
    cupdate_userid_004EN = SPACES;
    cinstance_id_007EF = TIRVW2S.TIRVW2S(globdata, "IEFDB", "00010101000000000000");
    cinstance_id_006EN = TIRVW2S.TIRVW2S(globdata, "IEFDB", "00010101000000000000");
    creference_id_009EF = TIRVW2S.TIRVW2S(globdata, "IEFDB", "00010101000000000000");
    creference_id_008EN = TIRVW2S.TIRVW2S(globdata, "IEFDB", "00010101000000000000");
    cparent_pkey_attr_011EF = SPACES;
    cparent_pkey_attr_010EN = SPACES;
    if ( nestingLevel < 2 )
    {
      w_la.reset();
    }
    w_ea.reset();
    w_oa.ExpErrorIyy1ComponentSeverityCode = " ";
    w_oa.ExpErrorIyy1ComponentRollbackIndicator = " ";
    w_oa.ExpErrorIyy1ComponentOriginServid = 0.0;
    w_oa.ExpErrorIyy1ComponentContextString = "";
    w_oa.ExpErrorIyy1ComponentReturnCode = 0;
    w_oa.ExpErrorIyy1ComponentReasonCode = 0;
    w_oa.ExpErrorIyy1ComponentChecksum = "               ";
    Child_es = ABBase.EV_UNUSABLE;
    Child_lk = ABBase.EVW_UNLOCKED;
    w_ea.ChildCinstanceId = "00000000000000000000";
    w_ea.ChildCreferenceId = "00000000000000000000";
  }
  
  public void f_0_trace()
  	throws ABException
  {
    trace_ret_code = TIRTRCE.TIRTRCE(iefRuntimeParm1, iefRuntimeParm2, globdata, padtext, padview);
    if ( trace_ret_code == 20 )
    {
      throw new ABException();
    }
  }
  public void f_22020317_procq()
  {
  }
  
  public void padview_init()
  {
padview[0] = PadView.getInstance("IMPORT                          ", 0, 0, 0, (short)1, PadView.VT_BASE, PadView.DT_NONE, w_ia, 
      "w_ia");
    padview[1] = PadView.getInstance("IMP_ERROR                       ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_ia, 
      null);
    padview[2] = PadView.getInstance("IYY1_COMPONENT                  ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, w_ia,
       null);
    padview[3] = PadView.getInstance("SEVERITY_CODE                   ", 1, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_ia, "ImpErrorIyy1ComponentSeverityCode");
    padview[4] = PadView.getInstance("ROLLBACK_INDICATOR              ", 1, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_ia, "ImpErrorIyy1ComponentRollbackIndicator");
    padview[5] = PadView.getInstance("ORIGIN_SERVID                   ", 15, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_ia, "ImpErrorIyy1ComponentOriginServid");
    padview[6] = PadView.getInstance("CONTEXT_STRING                  ", 512, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_VARCHAR, w_ia, "ImpErrorIyy1ComponentContextString");
    padview[7] = PadView.getInstance("RETURN_CODE                     ", 5, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_NUMERIC,
       w_ia, "ImpErrorIyy1ComponentReturnCode");
    padview[8] = PadView.getInstance("REASON_CODE                     ", 5, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_NUMERIC,
       w_ia, "ImpErrorIyy1ComponentReasonCode");
    padview[9] = PadView.getInstance("CHECKSUM                        ", 15, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_ia, "ImpErrorIyy1ComponentChecksum");
    padview[10] = PadView.getInstance("IMP_REFERENCE                   ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_ia, 
      null);
    padview[11] = PadView.getInstance("IYY1_SERVER_DATA                ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_ia, null);
    padview[12] = PadView.getInstance("USERID                          ", 8, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_ia, "ImpReferenceIyy1ServerDataUserid");
    padview[13] = PadView.getInstance("REFERENCE_ID                    ", 20, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_TIMESTAMP, w_ia, "ImpReferenceIyy1ServerDataReferenceId");
    padview[14] = PadView.getInstance("IMP                             ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_ia, 
      null);
    padview[15] = PadView.getInstance("CHILD                           ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_ia, null);
    padview[16] = PadView.getInstance("CINSTANCE_ID                    ", 20, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_TIMESTAMP, w_ia, "ImpChildCinstanceId");
    padview[17] = PadView.getInstance("CREFERENCE_ID                   ", 20, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_TIMESTAMP, w_ia, "ImpChildCreferenceId");
    padview[18] = PadView.getInstance("CPARENT_PKEY_ATTR_TEXT          ", 5, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_ia, "ImpChildCparentPkeyAttrText");
    padview[19] = PadView.getInstance("CKEY_ATTR_NUM                   ", 6, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_ia, "ImpChildCkeyAttrNum");
    padview[20] = PadView.getInstance("EXPORT                          ", 0, 0, 0, (short)1, PadView.VT_BASE, PadView.DT_NONE, w_oa, 
      "w_oa");
    padview[21] = PadView.getInstance("EXP_ERROR                       ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_oa, 
      null);
    padview[22] = PadView.getInstance("IYY1_COMPONENT                  ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_oa, null);
    padview[23] = PadView.getInstance("SEVERITY_CODE                   ", 1, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_oa, "ExpErrorIyy1ComponentSeverityCode");
    padview[24] = PadView.getInstance("ROLLBACK_INDICATOR              ", 1, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_oa, "ExpErrorIyy1ComponentRollbackIndicator");
    padview[25] = PadView.getInstance("ORIGIN_SERVID                   ", 15, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_oa, "ExpErrorIyy1ComponentOriginServid");
    padview[26] = PadView.getInstance("CONTEXT_STRING                  ", 512, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_VARCHAR, w_oa, "ExpErrorIyy1ComponentContextString");
    padview[27] = PadView.getInstance("RETURN_CODE                     ", 5, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_oa, "ExpErrorIyy1ComponentReturnCode");
    padview[28] = PadView.getInstance("REASON_CODE                     ", 5, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_oa, "ExpErrorIyy1ComponentReasonCode");
    padview[29] = PadView.getInstance("CHECKSUM                        ", 15, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_oa, "ExpErrorIyy1ComponentChecksum");
    padview[30] = PadView.getInstance("ENTITY                          ", 0, 0, 0, (short)1, PadView.VT_BASE, PadView.DT_NONE, w_ea, 
      "w_ea");
    padview[31] = PadView.getInstance("                                ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_ea, 
      null);
    padview[32] = PadView.getInstance("CHILD                           ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_ea, null);
    padview[33] = PadView.getInstance("CINSTANCE_ID                    ", 20, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_TIMESTAMP, w_ea, "ChildCinstanceId");
    padview[34] = PadView.getInstance("CREFERENCE_ID                   ", 20, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_TIMESTAMP, w_ea, "ChildCreferenceId");
    padview[35] = PadView.getInstance("CPARENT_PKEY_ATTR_TEXT          ", 5, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_ea, "ChildCparentPkeyAttrText");
    padview[36] = PadView.getInstance("CKEY_ATTR_NUM                   ", 6, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_ea, "ChildCkeyAttrNum");
    padview[37] = PadView.getInstance("CUPDATE_USER_ID                 ", 8, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_ea, "ChildCupdateUserId");
    padview[38] = PadView.getInstance("LOCAL                           ", 0, 0, 0, (short)1, PadView.VT_BASE, PadView.DT_NONE, w_la, 
      "w_la");
    padview[39] = PadView.getInstance("LOC                             ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_la, 
      null);
    padview[40] = PadView.getInstance("DONT_CHANGE_RETURN_CODES        ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_la, null);
    padview[41] = PadView.getInstance("1_OK                            ", 5, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_la, "LocDontChangeReturnCodesQ1Ok");
    padview[42] = PadView.getInstance("N10_OBJ_NOT_FOUND               ", 5, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_la, "LocDontChangeReturnCodesN10ObjNotFound");
    padview[43] = PadView.getInstance("N43_OBJ_NOT_DELETED             ", 5, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_la, "LocDontChangeReturnCodesN43ObjNotDeleted");
    padview[44] = PadView.getInstance("LOC                             ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_la, 
      null);
    padview[45] = PadView.getInstance("DONT_CHANGE_REASON_CODES        ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_la, null);
    padview[46] = PadView.getInstance("1_DEFAULT                       ", 5, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_la, "LocDontChangeReasonCodesQ1Default");
    padview[47] = PadView.getInstance("121_CHILD_NOT_FOUND             ", 5, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_la, "LocDontChangeReasonCodesQ121ChildNotFound");
    padview[48] = PadView.getInstance("132_CHILD_CONCURRENCY_ERROR     ", 5, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_la, "LocDontChangeReasonCodesQ132ChildConcurrencyError");
    padview[49] = PadView.getInstance("******** BOTTOM OF DATA ********", 0, 0, 0, (short)0, PadView.VT_END, PadView.DT_NONE, w_la, 
      null);
  }
  public void f_29360192()
  	throws ABException
  {
    sl_29360192 = ErrorData.SUCCEEDS_FL_LS;
    Child_001cd = ABBase.PV_SELECT;
    Child_lk = ABBase.EVW_UNLOCKED;
    f_29360192_moveb();
    
    if ( sl_29360192.equals( ErrorData.SUCCEEDS_FL_LS ) == true )
    {
      valChkDeadlockTimeout = false;
      valChkDBError = false;
      Child_es = ABBase.EV_USABLE;
      sqlException = null;
      try {
        SQLStatement.setLength(0);
        SQLStatement.append("SELECT ");
        SQLStatement.append("VDVYYYC01.`CINSTANCE_ID`,");
        SQLStatement.append("VDVYYYC01.`CREFERENCE_ID`,");
        SQLStatement.append("VDVYYYC01.`CPARENT_PKEY_ATTR`,");
        SQLStatement.append("VDVYYYC01.`CKEY_ATTR`,");
        SQLStatement.append("VDVYYYC01.`CUPDATE_USERID`");
        SQLStatement.append(" FROM ");
        SQLStatement.append("`VDVYYYC` VDVYYYC01");
        SQLStatement.append(" WHERE ");
        SQLStatement.append("(");
        SQLStatement.append("VDVYYYC01.`CPARENT_PKEY_ATTR` = ? AND VDVYYYC01.`CKEY_ATTR` = ?");
        SQLStatement.append(")");
        hstmt_0037935666_1 = globdata.getDBMSData().getDBMSManager().getStatement(globdata, iefRuntimeParm2, "IEFDB", 
          SQLStatement.toString());
        globdata.getDBMSData().getDBMSManager().bindParameterString("IEFDB", hstmt_0037935666_1, 1, CparentPkeyAttrText_001TP);
        hstmt_0037935666_1.setInt(2, CkeyAttrNum_002TP);
        hstmt_0037935666_1.execute();
        hstmt_0037935666_1_rs = hstmt_0037935666_1.getResultSet();
        if ( hstmt_0037935666_1_rs.next() == false )
        {
          throw new SQLException("No data found");
        }
        cinstance_id_007EF = hstmt_0037935666_1_rs.getTimestamp(1);
        creference_id_009EF = hstmt_0037935666_1_rs.getTimestamp(2);
        cparent_pkey_attr_011EF = globdata.getDBMSData().getDBMSManager().getStringFromResultSet("IEFDB", hstmt_0037935666_1_rs, 3);
        ckey_attr_003EF = hstmt_0037935666_1_rs.getInt(4);
        cupdate_userid_005EF = globdata.getDBMSData().getDBMSManager().getStringFromResultSet("IEFDB", hstmt_0037935666_1_rs, 5);
        if ( hstmt_0037935666_1_rs.next() == true )
        {
          throw new SQLException("READ statement with SELECT ONLY property returned more than 1 row");
        }
      } catch( SQLException e ) {
        sqlException = e;
      }
      if ( globdata.getDBMSData().getDBMSManager().wasSuccessful(sqlException) )
      {
        f_29360192_movea();
        if ( sl_29360192.equals( ErrorData.SUCCEEDS_FL_LS ) )
        {
          Child_es = ABBase.EV_USABLE;
        }
        else {
          Child_es = ABBase.EV_UNUSABLE;
        }
        try {
          if ( hstmt_0037935666_1_rs != null )
          {
            hstmt_0037935666_1_rs.close();
            hstmt_0037935666_1_rs = null;
          }
          if ( hstmt_0037935666_1 != null )
          {
            hstmt_0037935666_1.close();
            hstmt_0037935666_1 = null;
          }
        } catch( SQLException e ) {
          if ( globdata.getDBMSData().getDBMSManager().wasSuccessful(e) == false )
          {
            sqlException = e;
            f_29360192_jdbc_dberror();
          }
        }
      }
      else if ( globdata.getDBMSData().getDBMSManager().wasNoDataFound(sqlException) )
      {
        sl_29360192 = ErrorData.NOT_FOUND_FL_LS;
        Child_es = ABBase.EV_UNUSABLE;
        try {
          if ( hstmt_0037935666_1_rs != null )
          {
            hstmt_0037935666_1_rs.close();
            hstmt_0037935666_1_rs = null;
          }
          if ( hstmt_0037935666_1 != null )
          {
            hstmt_0037935666_1.close();
            hstmt_0037935666_1 = null;
          }
        } catch( SQLException e ) {
          if ( globdata.getDBMSData().getDBMSManager().wasSuccessful(e) == false )
          {
            sqlException = e;
            f_29360192_jdbc_dberror();
          }
        }
      }
      else {
        f_29360192_jdbc_dberror();
      }
    }
  }
  
  public void f_29360192_jdbc_dberror()
  	throws ABException
  {
    globdata.getErrorData().setStatus( ErrorData.FATAL_ERROR_FL_LS );
    globdata.getDBMSData().setActionId( 17 );
    globdata.getErrorData().setLastStatus( ErrorData.DB_ERROR_FL_LS );
    if ( sqlException != null )
    {
      globdata.getErrorData().setErrorMessage(sqlException);
      if ( globdata.getDBMSData().getDBMSManager().wasDeadlockOrTimeout("IEFDB", sqlException) )
      {
        globdata.getErrorData().setLastStatus( ErrorData.DB_DEADLOCK_TIMEOUT_FL_LS );
      }
    }
    sl_29360192 = globdata.getErrorData().getLastStatus();
    throw new ABException();
  }
  
  public void f_29360192_moveb()
  	throws ABException
  {
    CparentPkeyAttrText_001TP = w_ia.ImpChildCparentPkeyAttrText;
    CkeyAttrNum_002TP = w_ia.ImpChildCkeyAttrNum;
  }
  
  public void f_29360192_movea()
  	throws ABException
  {
    w_ea.ChildCinstanceId = TimestampAttr.valueOf(TIRS2VW.TIRS2VW(globdata, "IEFDB", cinstance_id_007EF));
    w_ea.ChildCreferenceId = TimestampAttr.valueOf(TIRS2VW.TIRS2VW(globdata, "IEFDB", creference_id_009EF));
    w_ea.ChildCupdateUserId = FixedStringAttr.valueOf(cupdate_userid_005EF, (short)8);
    w_ea.ChildCparentPkeyAttrText = FixedStringAttr.valueOf(cparent_pkey_attr_011EF, (short)5);
    w_ea.ChildCkeyAttrNum = IntAttr.valueOf(ckey_attr_003EF);
  }
  
  
  public void f_28311557()
  	throws ABException
  {
    if ( Child_es.equals( ABBase.EV_UNUSABLE ) == true )
    {
      dl_28311557 = ABBase.EV_UNUSABLE;
      globdata.getErrorData().setStatus( ErrorData.FATAL_ERROR_FL_LS );
      globdata.getDBMSData().setActionId( 22 );
      globdata.getErrorData().setLastStatus( dl_28311557 );
      throw new ABException();
    }
    else {
      dl_28311557 = ErrorData.SUCCEEDS_FL_LS;
      Child_001cd = ABBase.PV_DELETE;
      globdata.getErrorData().setStatus( ErrorData.NONE_SF );
      Child_es = ABBase.EV_UNUSABLE;
      Child_lk = ABBase.EVW_UNLOCKED;
      globdata.getDBMSData().setProcessQueue( true );
      if ( pdaQueueCMCB == null )
      {
        pdaQueueCMCB = DAQueue.getInstance();
      }
      pdaQueueCMCB.reset();
      gen.ort.yyy.YYZCHLD1.YYZCHLD1(iefRuntimeParm1, iefRuntimeParm2, globdata, pdaQueueCMCB, 0, ckey_attr_003EF, 
        cparent_pkey_attr_011EF);
      if ( globdata.getErrorData().getStatus().equals( ErrorData.NONE_SF ) == true )
      {
        f_22020317_procq();
        globdata.getStateData().setCurrentABId( "0022020317" );
        globdata.getStateData().setCurrentABName( "DYYY0241_CHILD_DELETE" );
      }
      if ( globdata.getErrorData().getStatus().equals( ErrorData.NONE_SF ) == false )
      {
        
        // Restore the SQLException saved by the RI trigger in GLOBDATA
        sqlException = globdata.getDBMSData().getSaveSQLException();
        if ( globdata.getDBMSData().getDBMSManager().wasDeadlockOrTimeout("IEFDB", sqlException) )
        {
          dl_28311557 = ErrorData.DB_DEADLOCK_TIMEOUT_FL_LS;
          globdata.getErrorData().setStatus( ErrorData.NONE_SF );
          globdata.getErrorData().setLastStatus( ErrorData.DB_DEADLOCK_TIMEOUT_FL_LS );
        }
        else {
          dl_28311557 = ErrorData.FATAL_ERROR_FL_LS;
        }
        throw new ABException();
      }
    }
  }
}// end class


package gen.ort.yyy;
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
//
//                    Source Code Generated by
//                           CA Gen 8.6
//
//    Copyright (c) 2023 CA Technologies. All rights reserved.
//
//    Name: DYYY0241_IA                      Date: 2023/07/05
//    User: HakanBal                         Time: 15:08:54
//
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// Import Statements
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
import java.lang.*;
import java.io.*;
import java.util.*;
import java.math.*;
import java.sql.*;
import com.ca.gen.vwrt.*;
import com.ca.gen.vwrt.types.*;
import com.ca.gen.vwrt.vdf.*;
import com.ca.gen.csu.exception.*;

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// START OF IMPORT VIEW
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
/**
 * Internal data view storage for: DYYY0241_IA
 **/
public class DYYY0241_IA extends ViewBase implements IImportView, Serializable
{
  // Entity View: IMP_ERROR
  //        Type: IYY1_COMPONENT
  /**
   * Attribute missing flag for: ImpErrorIyy1ComponentSeverityCode
   **/
  public char ImpErrorIyy1ComponentSeverityCode_AS;
  /**
   * Attribute for: ImpErrorIyy1ComponentSeverityCode
   * Domain: Text
   * Length: 1
   * Varying Length: N
   **/
  public String ImpErrorIyy1ComponentSeverityCode;
  /**
   * Attribute missing flag for: ImpErrorIyy1ComponentRollbackIndicator
   **/
  public char ImpErrorIyy1ComponentRollbackIndicator_AS;
  /**
   * Attribute for: ImpErrorIyy1ComponentRollbackIndicator
   * Domain: Text
   * Length: 1
   * Varying Length: N
   **/
  public String ImpErrorIyy1ComponentRollbackIndicator;
  /**
   * Attribute missing flag for: ImpErrorIyy1ComponentOriginServid
   **/
  public char ImpErrorIyy1ComponentOriginServid_AS;
  /**
   * Attribute for: ImpErrorIyy1ComponentOriginServid
   * Domain: Number
   * Length: 15
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public double ImpErrorIyy1ComponentOriginServid;
  /**
   * Attribute missing flag for: ImpErrorIyy1ComponentContextString
   **/
  public char ImpErrorIyy1ComponentContextString_AS;
  /**
   * Attribute for: ImpErrorIyy1ComponentContextString
   * Domain: Text
   * Length: 512
   * Varying Length: Y
   **/
  public String ImpErrorIyy1ComponentContextString;
  /**
   * Attribute missing flag for: ImpErrorIyy1ComponentReturnCode
   **/
  public char ImpErrorIyy1ComponentReturnCode_AS;
  /**
   * Attribute for: ImpErrorIyy1ComponentReturnCode
   * Domain: Number
   * Length: 5
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public int ImpErrorIyy1ComponentReturnCode;
  /**
   * Attribute missing flag for: ImpErrorIyy1ComponentReasonCode
   **/
  public char ImpErrorIyy1ComponentReasonCode_AS;
  /**
   * Attribute for: ImpErrorIyy1ComponentReasonCode
   * Domain: Number
   * Length: 5
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public int ImpErrorIyy1ComponentReasonCode;
  /**
   * Attribute missing flag for: ImpErrorIyy1ComponentChecksum
   **/
  public char ImpErrorIyy1ComponentChecksum_AS;
  /**
   * Attribute for: ImpErrorIyy1ComponentChecksum
   * Domain: Text
   * Length: 15
   * Varying Length: N
   **/
  public String ImpErrorIyy1ComponentChecksum;
  // Entity View: IMP_REFERENCE
  //        Type: IYY1_SERVER_DATA
  /**
   * Attribute missing flag for: ImpReferenceIyy1ServerDataUserid
   **/
  public char ImpReferenceIyy1ServerDataUserid_AS;
  /**
   * Attribute for: ImpReferenceIyy1ServerDataUserid
   * Domain: Text
   * Length: 8
   * Varying Length: N
   **/
  public String ImpReferenceIyy1ServerDataUserid;
  /**
   * Attribute missing flag for: ImpReferenceIyy1ServerDataReferenceId
   **/
  public char ImpReferenceIyy1ServerDataReferenceId_AS;
  /**
   * Attribute for: ImpReferenceIyy1ServerDataReferenceId
   * Domain: Timestamp
   * Length: 20
   **/
  public String ImpReferenceIyy1ServerDataReferenceId;
  // Entity View: IMP
  //        Type: CHILD
  /**
   * Attribute missing flag for: ImpChildCinstanceId
   **/
  public char ImpChildCinstanceId_AS;
  /**
   * Attribute for: ImpChildCinstanceId
   * Domain: Timestamp
   * Length: 20
   **/
  public String ImpChildCinstanceId;
  /**
   * Attribute missing flag for: ImpChildCreferenceId
   **/
  public char ImpChildCreferenceId_AS;
  /**
   * Attribute for: ImpChildCreferenceId
   * Domain: Timestamp
   * Length: 20
   **/
  public String ImpChildCreferenceId;
  /**
   * Attribute missing flag for: ImpChildCparentPkeyAttrText
   **/
  public char ImpChildCparentPkeyAttrText_AS;
  /**
   * Attribute for: ImpChildCparentPkeyAttrText
   * Domain: Text
   * Length: 5
   * Varying Length: N
   **/
  public String ImpChildCparentPkeyAttrText;
  /**
   * Attribute missing flag for: ImpChildCkeyAttrNum
   **/
  public char ImpChildCkeyAttrNum_AS;
  /**
   * Attribute for: ImpChildCkeyAttrNum
   * Domain: Number
   * Length: 6
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public int ImpChildCkeyAttrNum;
  /**
   * Default Constructor
   **/
  
  public DYYY0241_IA()
  {
    reset();
  }
  /**
   * Copy Constructor
   **/
  
  public DYYY0241_IA(DYYY0241_IA orig)
  {
    copyFrom(orig);
  }
  /**
   * Static instance creator function
   **/
  
  public static DYYY0241_IA getInstance()
  {
    return new DYYY0241_IA();
  }
  /**
   * Static free instance method
   **/
  
  public void freeInstance()
  {
  }
  /**
   * clone constructor
   **/
  
  @Override public Object clone()
  	throws CloneNotSupportedException
  {
    return(new DYYY0241_IA(this));
  }
  /**
   * Resets all properties to the defaults.
   **/
  
  public void reset()
  {
    ImpErrorIyy1ComponentSeverityCode_AS = ' ';
    ImpErrorIyy1ComponentSeverityCode = " ";
    ImpErrorIyy1ComponentRollbackIndicator_AS = ' ';
    ImpErrorIyy1ComponentRollbackIndicator = " ";
    ImpErrorIyy1ComponentOriginServid_AS = ' ';
    ImpErrorIyy1ComponentOriginServid = 0.0;
    ImpErrorIyy1ComponentContextString_AS = ' ';
    ImpErrorIyy1ComponentContextString = "";
    ImpErrorIyy1ComponentReturnCode_AS = ' ';
    ImpErrorIyy1ComponentReturnCode = 0;
    ImpErrorIyy1ComponentReasonCode_AS = ' ';
    ImpErrorIyy1ComponentReasonCode = 0;
    ImpErrorIyy1ComponentChecksum_AS = ' ';
    ImpErrorIyy1ComponentChecksum = "               ";
    ImpReferenceIyy1ServerDataUserid_AS = ' ';
    ImpReferenceIyy1ServerDataUserid = "        ";
    ImpReferenceIyy1ServerDataReferenceId_AS = ' ';
    ImpReferenceIyy1ServerDataReferenceId = "00000000000000000000";
    ImpChildCinstanceId_AS = ' ';
    ImpChildCinstanceId = "00000000000000000000";
    ImpChildCreferenceId_AS = ' ';
    ImpChildCreferenceId = "00000000000000000000";
    ImpChildCparentPkeyAttrText_AS = ' ';
    ImpChildCparentPkeyAttrText = "     ";
    ImpChildCkeyAttrNum_AS = ' ';
    ImpChildCkeyAttrNum = 0;
  }
  /**
   * Gets the VDF version of the current state of the instance.
   **/
  public VDF getVDF()
  {
    throw new RuntimeException("can only execute getVDF for a Procedure Step.");
  }
  
  /**
   * Sets the current state of the instance to the VDF version.
   **/
  public void setFromVDF(VDF vdf)
  {
    throw new RuntimeException("can only execute setFromVDF for a Procedure Step.");
  }
  
  /**
   * Sets the current instance based on the passed view.
   **/
  public void copyFrom(IImportView orig)
  {
    this.copyFrom((DYYY0241_IA) orig);
  }
  
  /**
   * Sets the current instance based on the passed view.
   **/
  public void copyFrom(DYYY0241_IA orig)
  {
    ImpErrorIyy1ComponentSeverityCode_AS = orig.ImpErrorIyy1ComponentSeverityCode_AS;
    ImpErrorIyy1ComponentSeverityCode = orig.ImpErrorIyy1ComponentSeverityCode;
    ImpErrorIyy1ComponentRollbackIndicator_AS = orig.ImpErrorIyy1ComponentRollbackIndicator_AS;
    ImpErrorIyy1ComponentRollbackIndicator = orig.ImpErrorIyy1ComponentRollbackIndicator;
    ImpErrorIyy1ComponentOriginServid_AS = orig.ImpErrorIyy1ComponentOriginServid_AS;
    ImpErrorIyy1ComponentOriginServid = orig.ImpErrorIyy1ComponentOriginServid;
    ImpErrorIyy1ComponentContextString_AS = orig.ImpErrorIyy1ComponentContextString_AS;
    ImpErrorIyy1ComponentContextString = orig.ImpErrorIyy1ComponentContextString;
    ImpErrorIyy1ComponentReturnCode_AS = orig.ImpErrorIyy1ComponentReturnCode_AS;
    ImpErrorIyy1ComponentReturnCode = orig.ImpErrorIyy1ComponentReturnCode;
    ImpErrorIyy1ComponentReasonCode_AS = orig.ImpErrorIyy1ComponentReasonCode_AS;
    ImpErrorIyy1ComponentReasonCode = orig.ImpErrorIyy1ComponentReasonCode;
    ImpErrorIyy1ComponentChecksum_AS = orig.ImpErrorIyy1ComponentChecksum_AS;
    ImpErrorIyy1ComponentChecksum = orig.ImpErrorIyy1ComponentChecksum;
    ImpReferenceIyy1ServerDataUserid_AS = orig.ImpReferenceIyy1ServerDataUserid_AS;
    ImpReferenceIyy1ServerDataUserid = orig.ImpReferenceIyy1ServerDataUserid;
    ImpReferenceIyy1ServerDataReferenceId_AS = orig.ImpReferenceIyy1ServerDataReferenceId_AS;
    ImpReferenceIyy1ServerDataReferenceId = orig.ImpReferenceIyy1ServerDataReferenceId;
    ImpChildCinstanceId_AS = orig.ImpChildCinstanceId_AS;
    ImpChildCinstanceId = orig.ImpChildCinstanceId;
    ImpChildCreferenceId_AS = orig.ImpChildCreferenceId_AS;
    ImpChildCreferenceId = orig.ImpChildCreferenceId;
    ImpChildCparentPkeyAttrText_AS = orig.ImpChildCparentPkeyAttrText_AS;
    ImpChildCparentPkeyAttrText = orig.ImpChildCparentPkeyAttrText;
    ImpChildCkeyAttrNum_AS = orig.ImpChildCkeyAttrNum_AS;
    ImpChildCkeyAttrNum = orig.ImpChildCkeyAttrNum;
  }
}

package gen.ort.yyy;
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
//
//                    Source Code Generated by
//                           CA Gen 8.6
//
//    Copyright (c) 2023 CA Technologies. All rights reserved.
//
//    Name: DYYY0241_LA                      Date: 2023/07/05
//    User: HakanBal                         Time: 15:08:54
//
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// Import Statements
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
import java.lang.*;
import java.io.*;
import java.util.*;
import java.math.*;
import java.sql.*;
import com.ca.gen.vwrt.*;
import com.ca.gen.vwrt.types.*;
import com.ca.gen.vwrt.vdf.*;
import com.ca.gen.csu.exception.*;

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// START OF LOCAL VIEW
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
/**
 * Internal data view storage for: DYYY0241_LA
 **/
public class DYYY0241_LA extends ViewBase implements ILocalView, Serializable
{
  // Entity View: LOC
  //        Type: DONT_CHANGE_RETURN_CODES
  /**
   * Attribute missing flag for: LocDontChangeReturnCodesQ1Ok
   **/
  public char LocDontChangeReturnCodesQ1Ok_AS;
  /**
   * Attribute for: LocDontChangeReturnCodesQ1Ok
   * Domain: Number
   * Length: 5
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public int LocDontChangeReturnCodesQ1Ok;
  /**
   * Attribute missing flag for: LocDontChangeReturnCodesN10ObjNotFound
   **/
  public char LocDontChangeReturnCodesN10ObjNotFound_AS;
  /**
   * Attribute for: LocDontChangeReturnCodesN10ObjNotFound
   * Domain: Number
   * Length: 5
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public int LocDontChangeReturnCodesN10ObjNotFound;
  /**
   * Attribute missing flag for: LocDontChangeReturnCodesN43ObjNotDeleted
   **/
  public char LocDontChangeReturnCodesN43ObjNotDeleted_AS;
  /**
   * Attribute for: LocDontChangeReturnCodesN43ObjNotDeleted
   * Domain: Number
   * Length: 5
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public int LocDontChangeReturnCodesN43ObjNotDeleted;
  // Entity View: LOC
  //        Type: DONT_CHANGE_REASON_CODES
  /**
   * Attribute missing flag for: LocDontChangeReasonCodesQ1Default
   **/
  public char LocDontChangeReasonCodesQ1Default_AS;
  /**
   * Attribute for: LocDontChangeReasonCodesQ1Default
   * Domain: Number
   * Length: 5
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public int LocDontChangeReasonCodesQ1Default;
  /**
   * Attribute missing flag for: LocDontChangeReasonCodesQ121ChildNotFound
   **/
  public char LocDontChangeReasonCodesQ121ChildNotFound_AS;
  /**
   * Attribute for: LocDontChangeReasonCodesQ121ChildNotFound
   * Domain: Number
   * Length: 5
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public int LocDontChangeReasonCodesQ121ChildNotFound;
  /**
   * Attribute missing flag for: LocDontChangeReasonCodesQ132ChildConcurrencyError
   **/
  public char LocDontChangeReasonCodesQ132ChildConcurrencyError_AS;
  /**
   * Attribute for: LocDontChangeReasonCodesQ132ChildConcurrencyError
   * Domain: Number
   * Length: 5
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public int LocDontChangeReasonCodesQ132ChildConcurrencyError;
  /**
   * Default Constructor
   **/
  
  public DYYY0241_LA()
  {
    reset();
  }
  /**
   * Copy Constructor
   **/
  
  public DYYY0241_LA(DYYY0241_LA orig)
  {
    LocDontChangeReturnCodesQ1Ok_AS = orig.LocDontChangeReturnCodesQ1Ok_AS;
    LocDontChangeReturnCodesQ1Ok = orig.LocDontChangeReturnCodesQ1Ok;
    LocDontChangeReturnCodesN10ObjNotFound_AS = orig.LocDontChangeReturnCodesN10ObjNotFound_AS;
    LocDontChangeReturnCodesN10ObjNotFound = orig.LocDontChangeReturnCodesN10ObjNotFound;
    LocDontChangeReturnCodesN43ObjNotDeleted_AS = orig.LocDontChangeReturnCodesN43ObjNotDeleted_AS;
    LocDontChangeReturnCodesN43ObjNotDeleted = orig.LocDontChangeReturnCodesN43ObjNotDeleted;
    LocDontChangeReasonCodesQ1Default_AS = orig.LocDontChangeReasonCodesQ1Default_AS;
    LocDontChangeReasonCodesQ1Default = orig.LocDontChangeReasonCodesQ1Default;
    LocDontChangeReasonCodesQ121ChildNotFound_AS = orig.LocDontChangeReasonCodesQ121ChildNotFound_AS;
    LocDontChangeReasonCodesQ121ChildNotFound = orig.LocDontChangeReasonCodesQ121ChildNotFound;
    LocDontChangeReasonCodesQ132ChildConcurrencyError_AS = orig.LocDontChangeReasonCodesQ132ChildConcurrencyError_AS;
    LocDontChangeReasonCodesQ132ChildConcurrencyError = orig.LocDontChangeReasonCodesQ132ChildConcurrencyError;
  }
  /**
   * Static instance creator function
   **/
  
  public static DYYY0241_LA getInstance()
  {
    return new DYYY0241_LA();
  }
  /**
   * Static free instance method
   **/
  
  public void freeInstance()
  {
  }
  /**
   * clone constructor
   **/
  
  @Override public Object clone()
  	throws CloneNotSupportedException
  {
    return(new DYYY0241_LA(this));
  }
  /**
   * Resets all properties to the defaults.
   **/
  
  public void reset()
  {
    LocDontChangeReturnCodesQ1Ok_AS = ' ';
    LocDontChangeReturnCodesQ1Ok = 0;
    LocDontChangeReturnCodesN10ObjNotFound_AS = ' ';
    LocDontChangeReturnCodesN10ObjNotFound = 0;
    LocDontChangeReturnCodesN43ObjNotDeleted_AS = ' ';
    LocDontChangeReturnCodesN43ObjNotDeleted = 0;
    LocDontChangeReasonCodesQ1Default_AS = ' ';
    LocDontChangeReasonCodesQ1Default = 0;
    LocDontChangeReasonCodesQ121ChildNotFound_AS = ' ';
    LocDontChangeReasonCodesQ121ChildNotFound = 0;
    LocDontChangeReasonCodesQ132ChildConcurrencyError_AS = ' ';
    LocDontChangeReasonCodesQ132ChildConcurrencyError = 0;
  }
}

package gen.ort.yyy;
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
//
//                    Source Code Generated by
//                           CA Gen 8.6
//
//    Copyright (c) 2023 CA Technologies. All rights reserved.
//
//    Name: DYYY0241_OA                      Date: 2023/07/05
//    User: HakanBal                         Time: 15:08:54
//
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// Import Statements
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
import java.lang.*;
import java.io.*;
import java.util.*;
import java.math.*;
import java.sql.*;
import com.ca.gen.vwrt.*;
import com.ca.gen.vwrt.types.*;
import com.ca.gen.vwrt.vdf.*;
import com.ca.gen.csu.exception.*;

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// START OF EXPORT VIEW
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
/**
 * Internal data view storage for: DYYY0241_OA
 **/
public class DYYY0241_OA extends ViewBase implements IExportView, Serializable
{
  // Entity View: EXP_ERROR
  //        Type: IYY1_COMPONENT
  /**
   * Attribute missing flag for: ExpErrorIyy1ComponentSeverityCode
   **/
  public char ExpErrorIyy1ComponentSeverityCode_AS;
  /**
   * Attribute for: ExpErrorIyy1ComponentSeverityCode
   * Domain: Text
   * Length: 1
   * Varying Length: N
   **/
  public String ExpErrorIyy1ComponentSeverityCode;
  /**
   * Attribute missing flag for: ExpErrorIyy1ComponentRollbackIndicator
   **/
  public char ExpErrorIyy1ComponentRollbackIndicator_AS;
  /**
   * Attribute for: ExpErrorIyy1ComponentRollbackIndicator
   * Domain: Text
   * Length: 1
   * Varying Length: N
   **/
  public String ExpErrorIyy1ComponentRollbackIndicator;
  /**
   * Attribute missing flag for: ExpErrorIyy1ComponentOriginServid
   **/
  public char ExpErrorIyy1ComponentOriginServid_AS;
  /**
   * Attribute for: ExpErrorIyy1ComponentOriginServid
   * Domain: Number
   * Length: 15
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public double ExpErrorIyy1ComponentOriginServid;
  /**
   * Attribute missing flag for: ExpErrorIyy1ComponentContextString
   **/
  public char ExpErrorIyy1ComponentContextString_AS;
  /**
   * Attribute for: ExpErrorIyy1ComponentContextString
   * Domain: Text
   * Length: 512
   * Varying Length: Y
   **/
  public String ExpErrorIyy1ComponentContextString;
  /**
   * Attribute missing flag for: ExpErrorIyy1ComponentReturnCode
   **/
  public char ExpErrorIyy1ComponentReturnCode_AS;
  /**
   * Attribute for: ExpErrorIyy1ComponentReturnCode
   * Domain: Number
   * Length: 5
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public int ExpErrorIyy1ComponentReturnCode;
  /**
   * Attribute missing flag for: ExpErrorIyy1ComponentReasonCode
   **/
  public char ExpErrorIyy1ComponentReasonCode_AS;
  /**
   * Attribute for: ExpErrorIyy1ComponentReasonCode
   * Domain: Number
   * Length: 5
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public int ExpErrorIyy1ComponentReasonCode;
  /**
   * Attribute missing flag for: ExpErrorIyy1ComponentChecksum
   **/
  public char ExpErrorIyy1ComponentChecksum_AS;
  /**
   * Attribute for: ExpErrorIyy1ComponentChecksum
   * Domain: Text
   * Length: 15
   * Varying Length: N
   **/
  public String ExpErrorIyy1ComponentChecksum;
  /**
   * Default Constructor
   **/
  
  public DYYY0241_OA()
  {
    reset();
  }
  /**
   * Copy Constructor
   **/
  
  public DYYY0241_OA(DYYY0241_OA orig)
  {
    copyFrom(orig);
  }
  /**
   * Static instance creator function
   **/
  
  public static DYYY0241_OA getInstance()
  {
    return new DYYY0241_OA();
  }
  /**
   * Static free instance method
   **/
  
  public void freeInstance()
  {
  }
  /**
   * clone constructor
   **/
  
  @Override public Object clone()
  	throws CloneNotSupportedException
  {
    return(new DYYY0241_OA(this));
  }
  /**
   * Resets all properties to the defaults.
   **/
  
  public void reset()
  {
    ExpErrorIyy1ComponentSeverityCode_AS = ' ';
    ExpErrorIyy1ComponentSeverityCode = " ";
    ExpErrorIyy1ComponentRollbackIndicator_AS = ' ';
    ExpErrorIyy1ComponentRollbackIndicator = " ";
    ExpErrorIyy1ComponentOriginServid_AS = ' ';
    ExpErrorIyy1ComponentOriginServid = 0.0;
    ExpErrorIyy1ComponentContextString_AS = ' ';
    ExpErrorIyy1ComponentContextString = "";
    ExpErrorIyy1ComponentReturnCode_AS = ' ';
    ExpErrorIyy1ComponentReturnCode = 0;
    ExpErrorIyy1ComponentReasonCode_AS = ' ';
    ExpErrorIyy1ComponentReasonCode = 0;
    ExpErrorIyy1ComponentChecksum_AS = ' ';
    ExpErrorIyy1ComponentChecksum = "               ";
  }
  /**
   * Sets the current state of the instance to the VDF version.
   **/
  public void setFromVDF(VDF vdf)
  {
    throw new RuntimeException("can only execute setFromVDF for a Procedure Step.");
  }
  
  /**
   * Gets the VDF version of the current state of the instance.
   **/
  public VDF getVDF()
  {
    throw new RuntimeException("can only execute getVDF for a Procedure Step.");
  }
  
  /**
   * Sets the current instance based on the passed view.
   **/
  public void copyFrom(IExportView orig)
  {
    this.copyFrom((DYYY0241_OA) orig);
  }
  
  /**
   * Sets the current instance based on the passed view.
   **/
  public void copyFrom(DYYY0241_OA orig)
  {
    ExpErrorIyy1ComponentSeverityCode_AS = orig.ExpErrorIyy1ComponentSeverityCode_AS;
    ExpErrorIyy1ComponentSeverityCode = orig.ExpErrorIyy1ComponentSeverityCode;
    ExpErrorIyy1ComponentRollbackIndicator_AS = orig.ExpErrorIyy1ComponentRollbackIndicator_AS;
    ExpErrorIyy1ComponentRollbackIndicator = orig.ExpErrorIyy1ComponentRollbackIndicator;
    ExpErrorIyy1ComponentOriginServid_AS = orig.ExpErrorIyy1ComponentOriginServid_AS;
    ExpErrorIyy1ComponentOriginServid = orig.ExpErrorIyy1ComponentOriginServid;
    ExpErrorIyy1ComponentContextString_AS = orig.ExpErrorIyy1ComponentContextString_AS;
    ExpErrorIyy1ComponentContextString = orig.ExpErrorIyy1ComponentContextString;
    ExpErrorIyy1ComponentReturnCode_AS = orig.ExpErrorIyy1ComponentReturnCode_AS;
    ExpErrorIyy1ComponentReturnCode = orig.ExpErrorIyy1ComponentReturnCode;
    ExpErrorIyy1ComponentReasonCode_AS = orig.ExpErrorIyy1ComponentReasonCode_AS;
    ExpErrorIyy1ComponentReasonCode = orig.ExpErrorIyy1ComponentReasonCode;
    ExpErrorIyy1ComponentChecksum_AS = orig.ExpErrorIyy1ComponentChecksum_AS;
    ExpErrorIyy1ComponentChecksum = orig.ExpErrorIyy1ComponentChecksum;
  }
}
