
package gen.ort.yyy;

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
//
//                    Source Code Generated by
//                           CA Gen 8.6
//
//    Copyright (c) 2023 CA Technologies. All rights reserved.
//
//    Name: DYYY0331_TYPE_UPDATE             Date: 2023/07/05
//    Target OS:   JVM                       Time: 15:09:22
//    Target DBMS: JDBC                      User: HakanBal
//    Access Method: JDBC           
//
//    Generation options:
//    Debug trace option selected
//    Data modeling constraint enforcement not selected
//    Optimized import view initialization not selected
//    Enforce default values with DBMS not selected
//    Init unspecified optional fields to NULL not selected
//
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// Import Statements
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
import java.lang.*;
import java.io.*;
import java.util.*;
import java.math.*;
import java.sql.*;
import com.ca.gen.vwrt.*;
import com.ca.gen.vwrt.types.*;
import com.ca.gen.vwrt.vdf.*;

import com.ca.gen.abrt.*;
import com.ca.gen.abrt.functions.*;
import com.ca.gen.abrt.cascade.*;
import com.ca.gen.abrt.trace.*;
import com.ca.gen.exits.common.*;
import com.ca.gen.odc.*;

public class DYYY0331 extends ABBase
{
  // * * * * * * * * * * * * * * * * * * *
  // ENTITY ACTION STATEMENT STATUS FLAGS 
  // ENTITY VIEW STATUS FLAGS AND         
  // LAST COMMAND FOR EACH ENTITY VIEW    
  // * * * * * * * * * * * * * * * * * * *
  String sl_29360182 = ErrorData.NONE_FL_LS;
  String up_27262987 = ErrorData.NONE_FL_LS;
  String Type_es;
  String Type_001cd;
  String Type_lk;
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // IMPORT VIEW CLASS VARIABLE
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  DYYY0331_IA w_ia;
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // EXPORT VIEW CLASS VARIABLE
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  DYYY0331_OA w_oa;
  
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // START OF ENTITY ACTION VIEW
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  /**
   * Internal data view storage for: DYYY0331_EA
   **/
  public class DYYY0331_EA extends ViewBase implements IEntityActionView, Serializable
  {
    // Entity View: 
    //        Type: TYPE
    /**
     * Attribute missing flag for: TypeTinstanceId
     **/
    public char TypeTinstanceId_AS;
    /**
     * Attribute for: TypeTinstanceId
     * Domain: Timestamp
     * Length: 20
     **/
    public String TypeTinstanceId;
    /**
     * Attribute missing flag for: TypeTreferenceId
     **/
    public char TypeTreferenceId_AS;
    /**
     * Attribute for: TypeTreferenceId
     * Domain: Timestamp
     * Length: 20
     **/
    public String TypeTreferenceId;
    /**
     * Attribute missing flag for: TypeTkeyAttrText
     **/
    public char TypeTkeyAttrText_AS;
    /**
     * Attribute for: TypeTkeyAttrText
     * Domain: Text
     * Length: 4
     * Varying Length: N
     **/
    public String TypeTkeyAttrText;
    /**
     * Attribute missing flag for: TypeTsearchAttrText
     **/
    public char TypeTsearchAttrText_AS;
    /**
     * Attribute for: TypeTsearchAttrText
     * Domain: Text
     * Length: 20
     * Varying Length: N
     **/
    public String TypeTsearchAttrText;
    /**
     * Attribute missing flag for: TypeTotherAttrText
     **/
    public char TypeTotherAttrText_AS;
    /**
     * Attribute for: TypeTotherAttrText
     * Domain: Text
     * Length: 2
     * Varying Length: N
     **/
    public String TypeTotherAttrText;
    /**
     * Attribute missing flag for: TypeTupdateUserId
     **/
    public char TypeTupdateUserId_AS;
    /**
     * Attribute for: TypeTupdateUserId
     * Domain: Text
     * Length: 8
     * Varying Length: N
     **/
    public String TypeTupdateUserId;
    /**
     * Attribute missing flag for: TypeTotherAttrDate
     **/
    public char TypeTotherAttrDate_AS;
    /**
     * Attribute for: TypeTotherAttrDate
     * Domain: Date
     * Length: 8
     **/
    public int TypeTotherAttrDate;
    /**
     * Attribute missing flag for: TypeTotherAttrTime
     **/
    public char TypeTotherAttrTime_AS;
    /**
     * Attribute for: TypeTotherAttrTime
     * Domain: Time
     * Length: 6
     **/
    public int TypeTotherAttrTime;
    /**
     * Attribute missing flag for: TypeTotherAttrAmount
     **/
    public char TypeTotherAttrAmount_AS;
    /**
     * Attribute for: TypeTotherAttrAmount
     * Domain: Number
     * Length: 17
     * Decimal Places: 2
     * Decimal Precision: Y
     **/
    public BigDecimal TypeTotherAttrAmount;
    /**
     * Default Constructor
     **/
    
    public DYYY0331_EA()
    {
      reset();
    }
    /**
     * Copy Constructor
     **/
    
    public DYYY0331_EA(DYYY0331_EA orig)
    {
      TypeTinstanceId_AS = orig.TypeTinstanceId_AS;
      TypeTinstanceId = orig.TypeTinstanceId;
      TypeTreferenceId_AS = orig.TypeTreferenceId_AS;
      TypeTreferenceId = orig.TypeTreferenceId;
      TypeTkeyAttrText_AS = orig.TypeTkeyAttrText_AS;
      TypeTkeyAttrText = orig.TypeTkeyAttrText;
      TypeTsearchAttrText_AS = orig.TypeTsearchAttrText_AS;
      TypeTsearchAttrText = orig.TypeTsearchAttrText;
      TypeTotherAttrText_AS = orig.TypeTotherAttrText_AS;
      TypeTotherAttrText = orig.TypeTotherAttrText;
      TypeTupdateUserId_AS = orig.TypeTupdateUserId_AS;
      TypeTupdateUserId = orig.TypeTupdateUserId;
      TypeTotherAttrDate_AS = orig.TypeTotherAttrDate_AS;
      TypeTotherAttrDate = orig.TypeTotherAttrDate;
      TypeTotherAttrTime_AS = orig.TypeTotherAttrTime_AS;
      TypeTotherAttrTime = orig.TypeTotherAttrTime;
      TypeTotherAttrAmount_AS = orig.TypeTotherAttrAmount_AS;
      TypeTotherAttrAmount = orig.TypeTotherAttrAmount;
    }
    /**
     * clone constructor
     **/
    
    @Override public Object clone()
    	throws CloneNotSupportedException
    {
      return(new DYYY0331_EA(this));
    }
    /**
     * Resets all properties to the defaults.
     **/
    
    public void reset()
    {
      TypeTinstanceId_AS = ' ';
      TypeTinstanceId = "00000000000000000000";
      TypeTreferenceId_AS = ' ';
      TypeTreferenceId = "00000000000000000000";
      TypeTkeyAttrText_AS = ' ';
      TypeTkeyAttrText = "    ";
      TypeTsearchAttrText_AS = ' ';
      TypeTsearchAttrText = "                    ";
      TypeTotherAttrText_AS = ' ';
      TypeTotherAttrText = "  ";
      TypeTupdateUserId_AS = ' ';
      TypeTupdateUserId = "        ";
      TypeTotherAttrDate_AS = ' ';
      TypeTotherAttrDate = 00000000;
      TypeTotherAttrTime_AS = ' ';
      TypeTotherAttrTime = 00000000;
      TypeTotherAttrAmount_AS = ' ';
      TypeTotherAttrAmount = BigDecimalAttr.getDefaultValue();
    }
  }
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // ENTITY ACTION VIEW CLASS VARIABLE
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  DYYY0331_EA w_ea = new DYYY0331_EA();
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // LOCAL VIEW CLASS VARIABLE
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  DYYY0331_LA w_la;
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // CURSOR OPEN FLAGS
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  boolean curs_open_0029360182 = false;
  
  
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // HOST VARIABLES FOR TABLE: VDVYYYT
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  String tkey_attr_001EF;
  String tkey_attr_002EN;
  String tsearch_attr_003EF;
  String tsearch_attr_004EN;
  String tother_attr_005EF;
  String tother_attr_006EN;
  String tupdate_userid_007EF;
  String tupdate_userid_008EN;
  java.sql.Timestamp tinstance_id_009EF;
  java.sql.Timestamp tinstance_id_010EN;
  java.sql.Timestamp treference_id_011EF;
  java.sql.Timestamp treference_id_012EN;
  java.sql.Date tother_date_013EF;
  java.sql.Date tother_date_014EN;
  java.sql.Time tother_time_015EF;
  java.sql.Time tother_time_016EN;
  BigDecimal tother_amount_017EF;
  BigDecimal tother_amount_018EN;
  
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // TEMPORARY HOST VARIABLES 
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  String TkeyAttrText_001TP;
  
  
  
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // MISC DECLARATIONS AND PROTOTYPES 
  //    FOLLOW AS NEEDED:             
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  boolean func_0022020275_esc_flag;
  PreparedStatement hstmt_0037916950_1;
  ResultSet hstmt_0037916950_1_rs;
  int hstmt_0037916950_1_cnt;
  boolean func_0020972967_esc_flag;
  PreparedStatement hstmt_0027262987_1;
  ResultSet hstmt_0027262987_1_rs;
  int hstmt_0027262987_1_cnt;
  boolean func_0020972810_esc_flag;
  PadView padview[] = new PadView [63];
  int trace_ret_code;
  PadText padtext[] = initPadText();
  public PadText [] initPadText()
  {
    PadText [] result = new PadText [PADTEXT_SIZE];
    result[0] = PadText.getInstance(   0,"+->   DYYY0331_TYPE_UPDATE              07/05/2023  15:09");
    result[1] = PadText.getInstance(   0,"!       IMPORTS:");
    result[2] = PadText.getInstance(   0,"!         Work View imp_error iyy1_component (Transient, Mandatory, Import only)");
    result[3] = PadText.getInstance(   0,"!           severity_code");
    result[4] = PadText.getInstance(   0,"!           rollback_indicator");
    result[5] = PadText.getInstance(   0,"!           origin_servid");
    result[6] = PadText.getInstance(   0,"!           context_string");
    result[7] = PadText.getInstance(   0,"!           return_code");
    result[8] = PadText.getInstance(   0,"!           reason_code");
    result[9] = PadText.getInstance(   0,"!           checksum");
    result[10] = PadText.getInstance(   0,"!         Work View imp_reference iyy1_server_data (Transient, Mandatory, Import only)");
    result[11] = PadText.getInstance(   0,"!           userid");
    result[12] = PadText.getInstance(   0,"!           reference_id");
    result[13] = PadText.getInstance(   0,"!         Entity View imp type (Transient, Mandatory, Import only)");
    result[14] = PadText.getInstance(   0,"!           tinstance_id");
    result[15] = PadText.getInstance(   0,"!           treference_id");
    result[16] = PadText.getInstance(   0,"!           tkey_attr_text");
    result[17] = PadText.getInstance(   0,"!           tsearch_attr_text");
    result[18] = PadText.getInstance(   0,"!           tother_attr_text");
    result[19] = PadText.getInstance(   0,"!           tother_attr_date");
    result[20] = PadText.getInstance(   0,"!           tother_attr_time");
    result[21] = PadText.getInstance(   0,"!           tother_attr_amount");
    result[22] = PadText.getInstance(   0,"!       EXPORTS:");
    result[23] = PadText.getInstance(   0,"!         Entity View exp type (Transient, Export only)");
    result[24] = PadText.getInstance(   0,"!           treference_id");
    result[25] = PadText.getInstance(   0,"!         Work View exp_error iyy1_component (Transient, Export only)");
    result[26] = PadText.getInstance(   0,"!           severity_code");
    result[27] = PadText.getInstance(   0,"!           rollback_indicator");
    result[28] = PadText.getInstance(   0,"!           origin_servid");
    result[29] = PadText.getInstance(   0,"!           context_string");
    result[30] = PadText.getInstance(   0,"!           return_code");
    result[31] = PadText.getInstance(   0,"!           reason_code");
    result[32] = PadText.getInstance(   0,"!           checksum");
    result[33] = PadText.getInstance(   0,"!       ENTITY ACTIONS:");
    result[34] = PadText.getInstance(   0,"!         Entity View type");
    result[35] = PadText.getInstance(   0,"!           tinstance_id");
    result[36] = PadText.getInstance(   0,"!           treference_id");
    result[37] = PadText.getInstance(   0,"!           tkey_attr_text");
    result[38] = PadText.getInstance(   0,"!           tsearch_attr_text");
    result[39] = PadText.getInstance(   0,"!           tother_attr_text");
    result[40] = PadText.getInstance(   0,"!           tupdate_user_id");
    result[41] = PadText.getInstance(   0,"!           tother_attr_date");
    result[42] = PadText.getInstance(   0,"!           tother_attr_time");
    result[43] = PadText.getInstance(   0,"!           tother_attr_amount");
    result[44] = PadText.getInstance(   0,"!       LOCALS:");
    result[45] = PadText.getInstance(   0,"!         Work View loc dont_change_return_codes");
    result[46] = PadText.getInstance(   0,"!           1_ok");
    result[47] = PadText.getInstance(   0,"!           n10_obj_not_found");
    result[48] = PadText.getInstance(   0,"!           n41_obj_update_failed");
    result[49] = PadText.getInstance(   0,"!         Work View loc dont_change_reason_codes");
    result[50] = PadText.getInstance(   0,"!           1_default");
    result[51] = PadText.getInstance(   0,"!           141_type_not_found");
    result[52] = PadText.getInstance(   0,"!           142_type_already_exist");
    result[53] = PadText.getInstance(   0,"!           143_type_attr_value_invalid");
    result[54] = PadText.getInstance(   0,"!           152_type_concurrency_error");
    result[55] = PadText.getInstance(   0,"!");
    result[56] = PadText.getInstance(   0,"!     PROCEDURE STATEMENTS");
    result[57] = PadText.getInstance(   0,"!");
    result[58] = PadText.getInstance(   1,"!  NOTE: ");
    result[59] = PadText.getInstance(   1,"!  Please review explanation for purpose.");
    result[60] = PadText.getInstance(   1,"!  ");
    result[61] = PadText.getInstance(   2,"!  NOTE: ");
    result[62] = PadText.getInstance(   2,"!  RELEASE HISTORY");
    result[63] = PadText.getInstance(   2,"!  01_00 23-02-1998 New release");
    result[64] = PadText.getInstance(   2,"!  ");
    result[65] = PadText.getInstance(   3,"!  MOVE imp_error iyy1_component TO exp_error iyy1_component");
    result[66] = PadText.getInstance(   4,"!   ");
    result[67] = PadText.getInstance(   5,"!  NOTE: ");
    result[68] = PadText.getInstance(   5,"!  ****************************************************************");
    result[69] = PadText.getInstance(   5,"!  Values of the ReturnCode/ReasonCode used.");
    result[70] = PadText.getInstance(   5,"!  ");
    result[71] = PadText.getInstance(   6,"!  NOTE: ");
    result[72] = PadText.getInstance(   6,"!  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
    result[73] = PadText.getInstance(   6,"!  Please set the return ve reason code values below.");
    result[74] = PadText.getInstance(   6,"!  ");
    result[75] = PadText.getInstance(   7,"!  SET loc dont_change_return_codes 1_ok TO 1 ");
    result[76] = PadText.getInstance(   8,"!  SET loc dont_change_return_codes n10_obj_not_found TO -10 ");
    result[77] = PadText.getInstance(   9,"!  SET loc dont_change_return_codes n41_obj_update_failed TO -41 ");
    result[78] = PadText.getInstance(  10,"!   ");
    result[79] = PadText.getInstance(  11,"!  SET loc dont_change_reason_codes 1_default TO 1 ");
    result[80] = PadText.getInstance(  12,"!  SET loc dont_change_reason_codes 141_type_not_found TO 141 ");
    result[81] = PadText.getInstance(  13,"!  SET loc dont_change_reason_codes 142_type_already_exist TO 142 ");
    result[82] = PadText.getInstance(  14,"!  SET loc dont_change_reason_codes 143_type_attr_value_invalid TO 143 ");
    result[83] = PadText.getInstance(  15,"!  SET loc dont_change_reason_codes 152_type_concurrency_error TO 152 ");
    result[84] = PadText.getInstance(  16,"!   ");
    result[85] = PadText.getInstance(  17,"!  NOTE: ");
    result[86] = PadText.getInstance(  17,"!  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
    result[87] = PadText.getInstance(  17,
      "!  If Instance_id is used, reading should not be done according to business key(s). This field must be used.");
    result[88] = PadText.getInstance(  17,"!  ");
    result[89] = PadText.getInstance(  18,"!  NOTE: ");
    result[90] = PadText.getInstance(  18,"!  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
    result[91] = PadText.getInstance(  18,
      "!  If operation is dependent to 'parent' data type, preserve the PARENT READ process below, otherwise delete it.");
    result[92] = PadText.getInstance(  18,"!  ");
    result[93] = PadText.getInstance(  19,"!  NOTE: ");
    result[94] = PadText.getInstance(  19,"!  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
    result[95] = PadText.getInstance(  19,
      "!  Please set \"Control of Cursor Generation\" property to \"Cursor only\". (It is read for Update.)");
    result[96] = PadText.getInstance(  19,"!  ");
    result[97] = PadText.getInstance(  20,"!  +=>READ (Cursor Only) type");
    result[98] = PadText.getInstance(  20,"!  !        WHERE DESIRED type tkey_attr_text = imp type tkey_attr_text");
    result[99] = PadText.getInstance(  20, 1, "!  +> WHEN successful");
    result[100] = PadText.getInstance(  21,"!  !  +->IF type treference_id ^= imp type treference_id");
    result[101] = PadText.getInstance(  22,
      "!  !  !  SET exp_error iyy1_component return_code TO loc dont_change_return_codes n41_obj_update_failed ");
    result[102] = PadText.getInstance(  23,
      "!  !  !  SET exp_error iyy1_component reason_code TO loc dont_change_reason_codes 152_type_concurrency_error ");
    result[103] = PadText.getInstance(  24,"! <------ESCAPE");
    result[104] = PadText.getInstance(  21,"!  !  +--");
    result[105] = PadText.getInstance(  25,"!  !  NOTE: ");
    result[106] = PadText.getInstance(  25,
      "!  !  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
    result[107] = PadText.getInstance(  25,
      "!  !  Except the specified fields (Key field(s), Create_ts, Create_userid), all fields must be changed. ");
    result[108] = PadText.getInstance(  25,"!  !  ");
    result[109] = PadText.getInstance(  26,"!  !  +->UPDATE type");
    result[110] = PadText.getInstance(  27,"!  !  !  SET treference_id TO imp_reference iyy1_server_data reference_id ");
    result[111] = PadText.getInstance(  28,"!  !  !  SET tupdate_user_id TO imp_reference iyy1_server_data userid ");
    result[112] = PadText.getInstance(  29,"!  !  !  SET tsearch_attr_text TO imp type tsearch_attr_text ");
    result[113] = PadText.getInstance(  30,"!  !  !  SET tother_attr_text TO imp type tother_attr_text ");
    result[114] = PadText.getInstance(  31,"!  !  !  SET tother_attr_date TO imp type tother_attr_date ");
    result[115] = PadText.getInstance(  32,"!  !  !  SET tother_attr_time TO imp type tother_attr_time ");
    result[116] = PadText.getInstance(  33,"!  !  !  SET tother_attr_amount TO imp type tother_attr_amount ");
    result[117] = PadText.getInstance(  26, 1, "!  !  +> WHEN successful");
    result[118] = PadText.getInstance(  34,"!  !  !  MOVE  type TO exp type");
    result[119] = PadText.getInstance(  26, 2, "!  !  +> WHEN not unique");
    result[120] = PadText.getInstance(  35,
      "!  !  !  SET exp_error iyy1_component return_code TO loc dont_change_return_codes n41_obj_update_failed ");
    result[121] = PadText.getInstance(  36,
      "!  !  !  SET exp_error iyy1_component reason_code TO loc dont_change_reason_codes 142_type_already_exist ");
    result[122] = PadText.getInstance(  26, 3, "!  !  +> WHEN permitted value violation");
    result[123] = PadText.getInstance(  37,
      "!  !  !  SET exp_error iyy1_component return_code TO loc dont_change_return_codes n41_obj_update_failed ");
    result[124] = PadText.getInstance(  38,
      "!  !  !  SET exp_error iyy1_component reason_code TO loc dont_change_reason_codes 143_type_attr_value_invalid ");
    result[125] = PadText.getInstance(  26,"!  !  +--");
    result[126] = PadText.getInstance(  20, 2, "!  +> WHEN not found");
    result[127] = PadText.getInstance(  39,
      "!  !  SET exp_error iyy1_component return_code TO loc dont_change_return_codes n10_obj_not_found ");
    result[128] = PadText.getInstance(  40,
      "!  !  SET exp_error iyy1_component reason_code TO loc dont_change_reason_codes 141_type_not_found ");
    result[129] = PadText.getInstance(  20,"!  +--");
    result[130] = PadText.getInstance(   0,"+---");
    result[131] = PadText.getInstance(PadText.LASTLINE,"************************* BOTTOM OF DATA *************************");
    return result;
  }
  final static int PADTEXT_SIZE = 132;
  //       +->   DYYY0331_TYPE_UPDATE              07/05/2023  15:09
  //       !       IMPORTS:
  //       !         Work View imp_error iyy1_component (Transient, Mandatory, Import only)
  //       !           severity_code
  //       !           rollback_indicator
  //       !           origin_servid
  //       !           context_string
  //       !           return_code
  //       !           reason_code
  //       !           checksum
  //       !         Work View imp_reference iyy1_server_data (Transient, Mandatory, Import only)
  //       !           userid
  //       !           reference_id
  //       !         Entity View imp type (Transient, Mandatory, Import only)
  //       !           tinstance_id
  //       !           treference_id
  //       !           tkey_attr_text
  //       !           tsearch_attr_text
  //       !           tother_attr_text
  //       !           tother_attr_date
  //       !           tother_attr_time
  //       !           tother_attr_amount
  //       !       EXPORTS:
  //       !         Entity View exp type (Transient, Export only)
  //       !           treference_id
  //       !         Work View exp_error iyy1_component (Transient, Export only)
  //       !           severity_code
  //       !           rollback_indicator
  //       !           origin_servid
  //       !           context_string
  //       !           return_code
  //       !           reason_code
  //       !           checksum
  //       !       ENTITY ACTIONS:
  //       !         Entity View type
  //       !           tinstance_id
  //       !           treference_id
  //       !           tkey_attr_text
  //       !           tsearch_attr_text
  //       !           tother_attr_text
  //       !           tupdate_user_id
  //       !           tother_attr_date
  //       !           tother_attr_time
  //       !           tother_attr_amount
  //       !       LOCALS:
  //       !         Work View loc dont_change_return_codes
  //       !           1_ok
  //       !           n10_obj_not_found
  //       !           n41_obj_update_failed
  //       !         Work View loc dont_change_reason_codes
  //       !           1_default
  //       !           141_type_not_found
  //       !           142_type_already_exist
  //       !           143_type_attr_value_invalid
  //       !           152_type_concurrency_error
  //       !
  //       !     PROCEDURE STATEMENTS
  //       !
  //     1 !  NOTE: 
  //     1 !  Please review explanation for purpose.
  //     1 !  
  //     2 !  NOTE: 
  //     2 !  RELEASE HISTORY
  //     2 !  01_00 23-02-1998 New release
  //     2 !  
  //     3 !  MOVE imp_error iyy1_component TO exp_error iyy1_component
  //     4 !   
  //     5 !  NOTE: 
  //     5 !  ****************************************************************
  //     5 !  Values of the ReturnCode/ReasonCode used.
  //     5 !  
  //     6 !  NOTE: 
  //     6 !  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  //     6 !  Please set the return ve reason code values below.
  //     6 !  
  //     7 !  SET loc dont_change_return_codes 1_ok TO 1 
  //     8 !  SET loc dont_change_return_codes n10_obj_not_found TO -10 
  //     9 !  SET loc dont_change_return_codes n41_obj_update_failed TO -41 
  //    10 !   
  //    11 !  SET loc dont_change_reason_codes 1_default TO 1 
  //    12 !  SET loc dont_change_reason_codes 141_type_not_found TO 141 
  //    13 !  SET loc dont_change_reason_codes 142_type_already_exist TO 142 
  //    14 !  SET loc dont_change_reason_codes 143_type_attr_value_invalid TO 143 
  //    15 !  SET loc dont_change_reason_codes 152_type_concurrency_error TO 152 
  //    16 !   
  //    17 !  NOTE: 
  //    17 !  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  //    17 !  If Instance_id is used, reading should not be done according to business key(s). This field must be used.
  //    17 !  
  //    18 !  NOTE: 
  //    18 !  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  //    18 !  If operation is dependent to 'parent' data type, preserve the PARENT READ process below, otherwise delete it.
  //    18 !  
  //    19 !  NOTE: 
  //    19 !  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  //    19 !  Please set "Control of Cursor Generation" property to "Cursor only". (It is read for Update.)
  //    19 !  
  //    20 !  +=>READ (Cursor Only) type
  //    20 !  !        WHERE DESIRED type tkey_attr_text = imp type tkey_attr_text
  //    20 !  +> WHEN successful
  //    21 !  !  +->IF type treference_id ^= imp type treference_id
  //    22 !  !  !  SET exp_error iyy1_component return_code TO loc dont_change_return_codes n41_obj_update_failed 
  //    23 !  !  !  SET exp_error iyy1_component reason_code TO loc dont_change_reason_codes 152_type_concurrency_error 
  //    24 ! <------ESCAPE
  //    21 !  !  +--
  //    25 !  !  NOTE: 
  //    25 !  !  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  //    25 !  !  Except the specified fields (Key field(s), Create_ts, Create_userid), all fields must be changed. 
  //    25 !  !  
  //    26 !  !  +->UPDATE type
  //    27 !  !  !  SET treference_id TO imp_reference iyy1_server_data reference_id 
  //    28 !  !  !  SET tupdate_user_id TO imp_reference iyy1_server_data userid 
  //    29 !  !  !  SET tsearch_attr_text TO imp type tsearch_attr_text 
  //    30 !  !  !  SET tother_attr_text TO imp type tother_attr_text 
  //    31 !  !  !  SET tother_attr_date TO imp type tother_attr_date 
  //    32 !  !  !  SET tother_attr_time TO imp type tother_attr_time 
  //    33 !  !  !  SET tother_attr_amount TO imp type tother_attr_amount 
  //    26 !  !  +> WHEN successful
  //    34 !  !  !  MOVE  type TO exp type
  //    26 !  !  +> WHEN not unique
  //    35 !  !  !  SET exp_error iyy1_component return_code TO loc dont_change_return_codes n41_obj_update_failed 
  //    36 !  !  !  SET exp_error iyy1_component reason_code TO loc dont_change_reason_codes 142_type_already_exist 
  //    26 !  !  +> WHEN permitted value violation
  //    37 !  !  !  SET exp_error iyy1_component return_code TO loc dont_change_return_codes n41_obj_update_failed 
  //    38 !  !  !  SET exp_error iyy1_component reason_code TO loc dont_change_reason_codes 143_type_attr_value_invalid 
  //    26 !  !  +--
  //    20 !  +> WHEN not found
  //    39 !  !  SET exp_error iyy1_component return_code TO loc dont_change_return_codes n10_obj_not_found 
  //    40 !  !  SET exp_error iyy1_component reason_code TO loc dont_change_reason_codes 141_type_not_found 
  //    20 !  +--
  //       +---
  
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  //  CONSTRUCTOR FOR THE CLASS       
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  public DYYY0331()
  {
    iefCGenRlse = "CA Gen 8.6";
    ssCopyright = "Copyright (c) 2023 CA Technologies. All rights reserved.";
    iefCGenDate = "2023/07/05";
    iefCGenTime = "15:09:22";
    iefCGenEncy = "9.2.A6";
    iefCGenUserId = "HakanBal";
    iefCGenModel = "N8I_ORT_YYY_0112_TEMPLATE";
    iefCGenSubset = "ALL";
    iefCGenName = "DYYY0331_TYPE_UPDATE";
    nestingLevel = 0;
    valChkDeadlockTimeout = false;
    valChkDBError = false;
  }
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // ACTION BLOCK FUNCTION DECLARATIONS 
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  
  public void DYYY0331( Object in_runtime_parm1, 
  	IRuntimePStepContext in_runtime_parm2, 
  	GlobData in_globdata, 
  	DYYY0331_IA import_view, 
  	DYYY0331_OA export_view )
  {
    iefRuntimeParm1 = in_runtime_parm1;
    iefRuntimeParm2 = in_runtime_parm2;
    globdata = in_globdata;
    w_ia = import_view;
    w_oa = export_view;
    _DYYY0331();
  }
  
  private void _DYYY0331()
  {
    
    f_22020275_localAlloc("DYYY0331_TYPE_UPDATE");
    if ( globdata.getErrorData().getLastStatus() == ErrorData.IEF_ALLOCATION_ERROR_FL_LS )
    	return;
    
    ++(nestingLevel);
    try {
      f_22020275_init();
      f_22020275();
    } catch( ABException e ) {
    } finally {
      --(nestingLevel);
    }
    String last_stmt_num_saved = globdata.getStateData().getLastStatementNumber();
    globdata.getStateData().setLastStatementNumber( "9999999999" );
    try {
      f_0_trace();
    } catch( ABException e ) {
    }
    globdata.getStateData().setLastStatementNumber( last_stmt_num_saved );
    
    
    f_22020275_term();
  }
  public void f_22020275()
  	throws ABException
  {
    func_0022020275_esc_flag = false;
    globdata.getStateData().setCurrentABId( "0022020275" );
    globdata.getStateData().setCurrentABName( "DYYY0331_TYPE_UPDATE" );
    padview_init();
    globdata.getStateData().setLastStatementNumber( "0000000000" );
    f_0_trace();
    f_0022020275_esctag: 
    {
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    Please review explanation for purpose.                          
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    RELEASE HISTORY                                                 
      //    01_00 23-02-1998 New release                                    
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      globdata.getStateData().setLastStatementNumber( "0000000003" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        w_oa.ExpErrorIyy1ComponentSeverityCode = FixedStringAttr.valueOf(w_ia.ImpErrorIyy1ComponentSeverityCode, (short)1);
        w_oa.ExpErrorIyy1ComponentRollbackIndicator = FixedStringAttr.valueOf(w_ia.ImpErrorIyy1ComponentRollbackIndicator, (short)1)
          ;
        w_oa.ExpErrorIyy1ComponentOriginServid = DoubleAttr.valueOf(w_ia.ImpErrorIyy1ComponentOriginServid);
        w_oa.ExpErrorIyy1ComponentContextString = StringAttr.valueOf(w_ia.ImpErrorIyy1ComponentContextString, (short)512);
        w_oa.ExpErrorIyy1ComponentReturnCode = IntAttr.valueOf(w_ia.ImpErrorIyy1ComponentReturnCode);
        w_oa.ExpErrorIyy1ComponentReasonCode = IntAttr.valueOf(w_ia.ImpErrorIyy1ComponentReasonCode);
        w_oa.ExpErrorIyy1ComponentChecksum = FixedStringAttr.valueOf(w_ia.ImpErrorIyy1ComponentChecksum, (short)15);
      }
      
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    **************************************************************  
      //    **                                                              
      //    Values of the ReturnCode/ReasonCode used.                       
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  
      //    !!                                                              
      //    Please set the return ve reason code values below.              
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      globdata.getStateData().setLastStatementNumber( "0000000007" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        w_la.LocDontChangeReturnCodesQ1Ok = IntAttr.valueOf((int)TIRD2DEC.TIRD2DC1(1, 0, TIRD2DEC.ROUND_NONE, 5));
      }
      globdata.getStateData().setLastStatementNumber( "0000000008" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        w_la.LocDontChangeReturnCodesN10ObjNotFound = IntAttr.valueOf((int)TIRD2DEC.TIRD2DC1(-10, 0, TIRD2DEC.ROUND_NONE, 5));
      }
      globdata.getStateData().setLastStatementNumber( "0000000009" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        w_la.LocDontChangeReturnCodesN41ObjUpdateFailed = IntAttr.valueOf((int)TIRD2DEC.TIRD2DC1(-41, 0, TIRD2DEC.ROUND_NONE, 5));
      }
      
      globdata.getStateData().setLastStatementNumber( "0000000011" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        w_la.LocDontChangeReasonCodesQ1Default = IntAttr.valueOf((int)TIRD2DEC.TIRD2DC1(1, 0, TIRD2DEC.ROUND_NONE, 5));
      }
      globdata.getStateData().setLastStatementNumber( "0000000012" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        w_la.LocDontChangeReasonCodesQ141TypeNotFound = IntAttr.valueOf((int)TIRD2DEC.TIRD2DC1(141, 0, TIRD2DEC.ROUND_NONE, 5));
      }
      globdata.getStateData().setLastStatementNumber( "0000000013" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        w_la.LocDontChangeReasonCodesQ142TypeAlreadyExist = IntAttr.valueOf((int)TIRD2DEC.TIRD2DC1(142, 0, TIRD2DEC.ROUND_NONE, 5));
      }
      globdata.getStateData().setLastStatementNumber( "0000000014" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        w_la.LocDontChangeReasonCodesQ143TypeAttrValueInvalid = IntAttr.valueOf((int)TIRD2DEC.TIRD2DC1(143, 0, TIRD2DEC.ROUND_NONE, 
          5));
      }
      globdata.getStateData().setLastStatementNumber( "0000000015" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        w_la.LocDontChangeReasonCodesQ152TypeConcurrencyError = IntAttr.valueOf((int)TIRD2DEC.TIRD2DC1(152, 0, TIRD2DEC.ROUND_NONE, 
          5));
      }
      
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  
      //    !!!!!!!!!!!!!!!!!!!!!                                           
      //    If Instance_id is used,                                         
      //    reading should not be done according to business key(s).        
      //    This field must be used.                                        
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  
      //    !!!!!!!!!!!!!!                                                  
      //    If operation is dependent to 'parent' data type, preserve the   
      //    PARENT READ process below, otherwise delete it.                 
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  
      //    !!!!!!!!!!!!!!!!!!!!!                                           
      //    Please set "Control of Cursor Generation" property to           
      //    "Cursor only". (It is read for Update.)                         
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      globdata.getStateData().setLastStatementNumber( "0000000020" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        f_29360182();
        if ( sl_29360182.equals( ErrorData.SUCCEEDS_FL_LS ) == true )
        {
          globdata.getStateData().setLastSubStatementNumber( "1" );
          f_0_trace();
          {
            f_20972967();
          }
        }
        else if ( sl_29360182.equals( ErrorData.NOT_FOUND_FL_LS ) == true )
        {
          globdata.getStateData().setLastSubStatementNumber( "2" );
          f_0_trace();
          {
            globdata.getStateData().setLastStatementNumber( "0000000039" );
            f_0_trace();
            if ( trace_ret_code != 8 )
            {
              w_oa.ExpErrorIyy1ComponentReturnCode = IntAttr.valueOf((int)TIRD2DEC.TIRD2DC1((double) 
                w_la.LocDontChangeReturnCodesN10ObjNotFound, 0, TIRD2DEC.ROUND_NONE, 5));
            }
            globdata.getStateData().setLastStatementNumber( "0000000040" );
            f_0_trace();
            if ( trace_ret_code != 8 )
            {
              w_oa.ExpErrorIyy1ComponentReasonCode = IntAttr.valueOf((int)TIRD2DEC.TIRD2DC1((double) 
                w_la.LocDontChangeReasonCodesQ141TypeNotFound, 0, TIRD2DEC.ROUND_NONE, 5));
            }
          }
        }
        else {
          globdata.getErrorData().setStatus( ErrorData.FATAL_ERROR_FL_LS );
          globdata.getErrorData().setLastStatus( sl_29360182 );
          globdata.getErrorData().setErrorEncounteredSW( ErrorData.ERROR_FOUND_SW );
          throw new ABException();
        }
      }
    }
  }
  
  
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // SUBORDINATE FUNCTIONS
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  
  
  public void f_20972967()
  	throws ABException
  {
    func_0020972967_esc_flag = false;
    f_0020972967_esctag: 
    {
      globdata.getStateData().setLastStatementNumber( "0000000021" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        if ( CompareExit.compareTo(w_ea.TypeTreferenceId, w_ia.ImpTypeTreferenceId) != 0 )
        {
          f_20972810();
        }
        
      }
      if ( func_0020972967_esc_flag )
      {
        break f_0020972967_esctag;
      }
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  
      //    !!!!!!!!!!!!!!!!!!!!!                                           
      //    Except the specified fields (Key field(s), Create_ts,           
      //    Create_userid), all fields must be changed.                     
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      globdata.getStateData().setLastStatementNumber( "0000000026" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        w_ea.TypeTreferenceId = TimestampAttr.valueOf(w_ia.ImpReferenceIyy1ServerDataReferenceId);
        w_ea.TypeTupdateUserId = FixedStringAttr.valueOf(w_ia.ImpReferenceIyy1ServerDataUserid, (short)8);
        w_ea.TypeTsearchAttrText = FixedStringAttr.valueOf(w_ia.ImpTypeTsearchAttrText, (short)20);
        w_ea.TypeTotherAttrText = FixedStringAttr.valueOf(w_ia.ImpTypeTotherAttrText, (short)2);
        w_ea.TypeTotherAttrDate = DateAttr.valueOf(w_ia.ImpTypeTotherAttrDate);
        w_ea.TypeTotherAttrTime = TimeAttr.valueOf(w_ia.ImpTypeTotherAttrTime);
        w_ea.TypeTotherAttrAmount = BigDecimalAttr.valueOf(TIRBDTRU.truncateToBigDecimal(w_ia.ImpTypeTotherAttrAmount, 2));
        valChkDeadlockTimeout = false;
        valChkDBError = false;
        f_27262987();
        if ( up_27262987.equals( ErrorData.SUCCEEDS_FL_LS ) == true )
        {
          globdata.getStateData().setLastSubStatementNumber( "1" );
          f_0_trace();
          {
            globdata.getStateData().setLastStatementNumber( "0000000034" );
            f_0_trace();
            if ( trace_ret_code != 8 )
            {
              w_oa.ExpTypeTreferenceId = TimestampAttr.valueOf(w_ea.TypeTreferenceId);
            }
          }
        }
        else if ( up_27262987.equals( ErrorData.DUPLICATE_FOUND_FL_LS ) == true )
        {
          globdata.getStateData().setLastSubStatementNumber( "2" );
          f_0_trace();
          {
            globdata.getStateData().setLastStatementNumber( "0000000035" );
            f_0_trace();
            if ( trace_ret_code != 8 )
            {
              w_oa.ExpErrorIyy1ComponentReturnCode = IntAttr.valueOf((int)TIRD2DEC.TIRD2DC1((double) 
                w_la.LocDontChangeReturnCodesN41ObjUpdateFailed, 0, TIRD2DEC.ROUND_NONE, 5));
            }
            globdata.getStateData().setLastStatementNumber( "0000000036" );
            f_0_trace();
            if ( trace_ret_code != 8 )
            {
              w_oa.ExpErrorIyy1ComponentReasonCode = IntAttr.valueOf((int)TIRD2DEC.TIRD2DC1((double) 
                w_la.LocDontChangeReasonCodesQ142TypeAlreadyExist, 0, TIRD2DEC.ROUND_NONE, 5));
            }
          }
        }
        else if ( up_27262987.equals( ErrorData.INVALID_DATAB_PERM_FL_LS ) == true )
        {
          globdata.getStateData().setLastSubStatementNumber( "3" );
          f_0_trace();
          {
            globdata.getStateData().setLastStatementNumber( "0000000037" );
            f_0_trace();
            if ( trace_ret_code != 8 )
            {
              w_oa.ExpErrorIyy1ComponentReturnCode = IntAttr.valueOf((int)TIRD2DEC.TIRD2DC1((double) 
                w_la.LocDontChangeReturnCodesN41ObjUpdateFailed, 0, TIRD2DEC.ROUND_NONE, 5));
            }
            globdata.getStateData().setLastStatementNumber( "0000000038" );
            f_0_trace();
            if ( trace_ret_code != 8 )
            {
              w_oa.ExpErrorIyy1ComponentReasonCode = IntAttr.valueOf((int)TIRD2DEC.TIRD2DC1((double) 
                w_la.LocDontChangeReasonCodesQ143TypeAttrValueInvalid, 0, TIRD2DEC.ROUND_NONE, 5));
            }
          }
        }
        else {
          globdata.getErrorData().setStatus( ErrorData.DB_ERROR_FL_LS );
          globdata.getErrorData().setErrorEncounteredSW( ErrorData.ERROR_FOUND_SW );
          throw new ABException();
        }
      }
    }
  }
  
  public void f_20972810()
  	throws ABException
  {
    func_0020972810_esc_flag = false;
    f_0020972810_esctag: 
    {
      globdata.getStateData().setLastStatementNumber( "0000000022" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        w_oa.ExpErrorIyy1ComponentReturnCode = IntAttr.valueOf((int)TIRD2DEC.TIRD2DC1((double) 
          w_la.LocDontChangeReturnCodesN41ObjUpdateFailed, 0, TIRD2DEC.ROUND_NONE, 5));
      }
      globdata.getStateData().setLastStatementNumber( "0000000023" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        w_oa.ExpErrorIyy1ComponentReasonCode = IntAttr.valueOf((int)TIRD2DEC.TIRD2DC1((double) 
          w_la.LocDontChangeReasonCodesQ152TypeConcurrencyError, 0, TIRD2DEC.ROUND_NONE, 5));
      }
      globdata.getStateData().setLastStatementNumber( "0000000024" );
      f_0_trace();
      if ( trace_ret_code != 8 )
      {
        func_0020972810_esc_flag = true;
        func_0020972967_esc_flag = true;
      }
    }
  }
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // INITIALIZATION UTILITY FUNCTIONS 
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  
  public void f_22020275_localAlloc(String abname)
  {
    // Request localview allocation 
    w_la = (gen.ort.yyy.DYYY0331_LA)(iefRuntimeParm2.getInstance("gen.ort.yyy.DYYY0331_LA"));
    if ( w_la == null )
    {
      globdata.getStateData().setCurrentABId( "0022020275" );
      globdata.getStateData().setCurrentABName( abname );
      globdata.getErrorData().setErrorEncounteredSW( ErrorData.ERROR_FOUND_SW );
      globdata.getErrorData().setLastStatus( ErrorData.IEF_ALLOCATION_ERROR_FL_LS );
    }
  }
  
  public void f_22020275_init()
  	throws ABException
  {
    
    tkey_attr_001EF = SPACES;
    tkey_attr_002EN = SPACES;
    tsearch_attr_003EF = SPACES;
    tsearch_attr_004EN = SPACES;
    tother_attr_005EF = SPACES;
    tother_attr_006EN = SPACES;
    tupdate_userid_007EF = SPACES;
    tupdate_userid_008EN = SPACES;
    tinstance_id_009EF = TIRVW2S.TIRVW2S(globdata, "IEFDB", "00010101000000000000");
    tinstance_id_010EN = TIRVW2S.TIRVW2S(globdata, "IEFDB", "00010101000000000000");
    treference_id_011EF = TIRVW2S.TIRVW2S(globdata, "IEFDB", "00010101000000000000");
    treference_id_012EN = TIRVW2S.TIRVW2S(globdata, "IEFDB", "00010101000000000000");
    tother_date_013EF = TIRVW2D.TIRVW2D(globdata, "IEFDB", 0);
    tother_date_014EN = TIRVW2D.TIRVW2D(globdata, "IEFDB", 0);
    tother_time_015EF = TIRVW2T.TIRVW2T(globdata, "IEFDB", 0);
    tother_time_016EN = TIRVW2T.TIRVW2T(globdata, "IEFDB", 0);
    tother_amount_017EF = new BigDecimal("0.0");
    tother_amount_018EN = new BigDecimal("0.0");
    if ( nestingLevel < 2 )
    {
      w_la.reset();
    }
    w_ea.reset();
    w_oa.ExpTypeTreferenceId = "00000000000000000000";
    w_oa.ExpErrorIyy1ComponentSeverityCode = " ";
    w_oa.ExpErrorIyy1ComponentRollbackIndicator = " ";
    w_oa.ExpErrorIyy1ComponentOriginServid = 0.0;
    w_oa.ExpErrorIyy1ComponentContextString = "";
    w_oa.ExpErrorIyy1ComponentReturnCode = 0;
    w_oa.ExpErrorIyy1ComponentReasonCode = 0;
    w_oa.ExpErrorIyy1ComponentChecksum = "               ";
    Type_es = ABBase.EV_UNUSABLE;
    Type_lk = ABBase.EVW_UNLOCKED;
    w_ea.TypeTinstanceId = "00000000000000000000";
    w_ea.TypeTreferenceId = "00000000000000000000";
  }
  
  public void f_0_trace()
  	throws ABException
  {
    trace_ret_code = TIRTRCE.TIRTRCE(iefRuntimeParm1, iefRuntimeParm2, globdata, padtext, padview);
    if ( trace_ret_code == 20 )
    {
      throw new ABException();
    }
  }
  
  public void padview_init()
  {
padview[0] = PadView.getInstance("IMPORT                          ", 0, 0, 0, (short)1, PadView.VT_BASE, PadView.DT_NONE, w_ia, 
      "w_ia");
    padview[1] = PadView.getInstance("IMP_ERROR                       ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_ia, 
      null);
    padview[2] = PadView.getInstance("IYY1_COMPONENT                  ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, w_ia,
       null);
    padview[3] = PadView.getInstance("SEVERITY_CODE                   ", 1, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_ia, "ImpErrorIyy1ComponentSeverityCode");
    padview[4] = PadView.getInstance("ROLLBACK_INDICATOR              ", 1, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_ia, "ImpErrorIyy1ComponentRollbackIndicator");
    padview[5] = PadView.getInstance("ORIGIN_SERVID                   ", 15, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_ia, "ImpErrorIyy1ComponentOriginServid");
    padview[6] = PadView.getInstance("CONTEXT_STRING                  ", 512, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_VARCHAR, w_ia, "ImpErrorIyy1ComponentContextString");
    padview[7] = PadView.getInstance("RETURN_CODE                     ", 5, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_NUMERIC,
       w_ia, "ImpErrorIyy1ComponentReturnCode");
    padview[8] = PadView.getInstance("REASON_CODE                     ", 5, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_NUMERIC,
       w_ia, "ImpErrorIyy1ComponentReasonCode");
    padview[9] = PadView.getInstance("CHECKSUM                        ", 15, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_ia, "ImpErrorIyy1ComponentChecksum");
    padview[10] = PadView.getInstance("IMP_REFERENCE                   ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_ia, 
      null);
    padview[11] = PadView.getInstance("IYY1_SERVER_DATA                ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_ia, null);
    padview[12] = PadView.getInstance("USERID                          ", 8, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_ia, "ImpReferenceIyy1ServerDataUserid");
    padview[13] = PadView.getInstance("REFERENCE_ID                    ", 20, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_TIMESTAMP, w_ia, "ImpReferenceIyy1ServerDataReferenceId");
    padview[14] = PadView.getInstance("IMP                             ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_ia, 
      null);
    padview[15] = PadView.getInstance("TYPE                            ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_ia, null);
    padview[16] = PadView.getInstance("TINSTANCE_ID                    ", 20, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_TIMESTAMP, w_ia, "ImpTypeTinstanceId");
    padview[17] = PadView.getInstance("TREFERENCE_ID                   ", 20, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_TIMESTAMP, w_ia, "ImpTypeTreferenceId");
    padview[18] = PadView.getInstance("TKEY_ATTR_TEXT                  ", 4, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_ia, "ImpTypeTkeyAttrText");
    padview[19] = PadView.getInstance("TSEARCH_ATTR_TEXT               ", 20, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_ia, "ImpTypeTsearchAttrText");
    padview[20] = PadView.getInstance("TOTHER_ATTR_TEXT                ", 2, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_ia, "ImpTypeTotherAttrText");
    padview[21] = PadView.getInstance("TOTHER_ATTR_DATE                ", 8, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_DATE, 
      w_ia, "ImpTypeTotherAttrDate");
    padview[22] = PadView.getInstance("TOTHER_ATTR_TIME                ", 6, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TIME, 
      w_ia, "ImpTypeTotherAttrTime");
    padview[23] = PadView.getInstance("TOTHER_ATTR_AMOUNT              ", 17, 2, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_FIXED,
       w_ia, "ImpTypeTotherAttrAmount");
    padview[24] = PadView.getInstance("EXPORT                          ", 0, 0, 0, (short)1, PadView.VT_BASE, PadView.DT_NONE, w_oa, 
      "w_oa");
    padview[25] = PadView.getInstance("EXP                             ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_oa, 
      null);
    padview[26] = PadView.getInstance("TYPE                            ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_oa, null);
    padview[27] = PadView.getInstance("TREFERENCE_ID                   ", 20, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_TIMESTAMP, w_oa, "ExpTypeTreferenceId");
    padview[28] = PadView.getInstance("EXP_ERROR                       ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_oa, 
      null);
    padview[29] = PadView.getInstance("IYY1_COMPONENT                  ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_oa, null);
    padview[30] = PadView.getInstance("SEVERITY_CODE                   ", 1, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_oa, "ExpErrorIyy1ComponentSeverityCode");
    padview[31] = PadView.getInstance("ROLLBACK_INDICATOR              ", 1, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_oa, "ExpErrorIyy1ComponentRollbackIndicator");
    padview[32] = PadView.getInstance("ORIGIN_SERVID                   ", 15, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_oa, "ExpErrorIyy1ComponentOriginServid");
    padview[33] = PadView.getInstance("CONTEXT_STRING                  ", 512, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_VARCHAR, w_oa, "ExpErrorIyy1ComponentContextString");
    padview[34] = PadView.getInstance("RETURN_CODE                     ", 5, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_oa, "ExpErrorIyy1ComponentReturnCode");
    padview[35] = PadView.getInstance("REASON_CODE                     ", 5, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_oa, "ExpErrorIyy1ComponentReasonCode");
    padview[36] = PadView.getInstance("CHECKSUM                        ", 15, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_oa, "ExpErrorIyy1ComponentChecksum");
    padview[37] = PadView.getInstance("ENTITY                          ", 0, 0, 0, (short)1, PadView.VT_BASE, PadView.DT_NONE, w_ea, 
      "w_ea");
    padview[38] = PadView.getInstance("                                ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_ea, 
      null);
    padview[39] = PadView.getInstance("TYPE                            ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_ea, null);
    padview[40] = PadView.getInstance("TINSTANCE_ID                    ", 20, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_TIMESTAMP, w_ea, "TypeTinstanceId");
    padview[41] = PadView.getInstance("TREFERENCE_ID                   ", 20, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_TIMESTAMP, w_ea, "TypeTreferenceId");
    padview[42] = PadView.getInstance("TKEY_ATTR_TEXT                  ", 4, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_ea, "TypeTkeyAttrText");
    padview[43] = PadView.getInstance("TSEARCH_ATTR_TEXT               ", 20, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_ea, "TypeTsearchAttrText");
    padview[44] = PadView.getInstance("TOTHER_ATTR_TEXT                ", 2, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_ea, "TypeTotherAttrText");
    padview[45] = PadView.getInstance("TUPDATE_USER_ID                 ", 8, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_ea, "TypeTupdateUserId");
    padview[46] = PadView.getInstance("TOTHER_ATTR_DATE                ", 8, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_DATE, 
      w_ea, "TypeTotherAttrDate");
    padview[47] = PadView.getInstance("TOTHER_ATTR_TIME                ", 6, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TIME, 
      w_ea, "TypeTotherAttrTime");
    padview[48] = PadView.getInstance("TOTHER_ATTR_AMOUNT              ", 17, 2, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_FIXED,
       w_ea, "TypeTotherAttrAmount");
    padview[49] = PadView.getInstance("LOCAL                           ", 0, 0, 0, (short)1, PadView.VT_BASE, PadView.DT_NONE, w_la, 
      "w_la");
    padview[50] = PadView.getInstance("LOC                             ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_la, 
      null);
    padview[51] = PadView.getInstance("DONT_CHANGE_RETURN_CODES        ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_la, null);
    padview[52] = PadView.getInstance("1_OK                            ", 5, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_la, "LocDontChangeReturnCodesQ1Ok");
    padview[53] = PadView.getInstance("N10_OBJ_NOT_FOUND               ", 5, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_la, "LocDontChangeReturnCodesN10ObjNotFound");
    padview[54] = PadView.getInstance("N41_OBJ_UPDATE_FAILED           ", 5, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_la, "LocDontChangeReturnCodesN41ObjUpdateFailed");
    padview[55] = PadView.getInstance("LOC                             ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_la, 
      null);
    padview[56] = PadView.getInstance("DONT_CHANGE_REASON_CODES        ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_la, null);
    padview[57] = PadView.getInstance("1_DEFAULT                       ", 5, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_la, "LocDontChangeReasonCodesQ1Default");
    padview[58] = PadView.getInstance("141_TYPE_NOT_FOUND              ", 5, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_la, "LocDontChangeReasonCodesQ141TypeNotFound");
    padview[59] = PadView.getInstance("142_TYPE_ALREADY_EXIST          ", 5, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_la, "LocDontChangeReasonCodesQ142TypeAlreadyExist");
    padview[60] = PadView.getInstance("143_TYPE_ATTR_VALUE_INVALID     ", 5, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_la, "LocDontChangeReasonCodesQ143TypeAttrValueInvalid");
    padview[61] = PadView.getInstance("152_TYPE_CONCURRENCY_ERROR      ", 5, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_la, "LocDontChangeReasonCodesQ152TypeConcurrencyError");
    padview[62] = PadView.getInstance("******** BOTTOM OF DATA ********", 0, 0, 0, (short)0, PadView.VT_END, PadView.DT_NONE, w_la, 
      null);
  }
  public void f_29360182()
  	throws ABException
  {
    sl_29360182 = ErrorData.SUCCEEDS_FL_LS;
    Type_001cd = ABBase.PV_SELECT;
    Type_lk = ABBase.EVW_UNLOCKED;
    f_29360182_moveb();
    
    if ( sl_29360182.equals( ErrorData.SUCCEEDS_FL_LS ) == true )
    {
      valChkDeadlockTimeout = false;
      valChkDBError = false;
      Type_es = ABBase.EV_USABLE;
      Type_lk = ABBase.EVW_LOCKED;
      if ( curs_open_0029360182 == true )
      {
        curs_open_0029360182 = false;
        try {
          if ( hstmt_0037916950_1_rs != null )
          {
            hstmt_0037916950_1_rs.close();
            hstmt_0037916950_1_rs = null;
          }
          if ( hstmt_0037916950_1 != null )
          {
            hstmt_0037916950_1.close();
            hstmt_0037916950_1 = null;
          }
        } catch( SQLException e ) {
          if ( globdata.getDBMSData().getDBMSManager().wasSuccessful(e) == false )
          {
            sqlException = e;
            f_29360182_jdbc_dberror();
          }
        }
      }
      
      sqlException = null;
      try {
        SQLStatement.setLength(0);
        SQLStatement.append("SELECT ");
        SQLStatement.append("VDVYYYT01.`TINSTANCE_ID`,");
        SQLStatement.append("VDVYYYT01.`TREFERENCE_ID`,");
        SQLStatement.append("VDVYYYT01.`TKEY_ATTR`,");
        SQLStatement.append("VDVYYYT01.`TSEARCH_ATTR`,");
        SQLStatement.append("VDVYYYT01.`TOTHER_ATTR`,");
        SQLStatement.append("VDVYYYT01.`TUPDATE_USERID`,");
        SQLStatement.append("VDVYYYT01.`TOTHER_DATE`,");
        SQLStatement.append("VDVYYYT01.`TOTHER_TIME`,");
        SQLStatement.append("VDVYYYT01.`TOTHER_AMOUNT`");
        SQLStatement.append(" FROM ");
        SQLStatement.append("`VDVYYYT` VDVYYYT01");
        SQLStatement.append(" WHERE ");
        SQLStatement.append("(");
        SQLStatement.append("VDVYYYT01.`TKEY_ATTR` = ?");
        SQLStatement.append(")");
        SQLStatement.append(" FOR UPDATE OF `TINSTANCE_ID` ");
        hstmt_0037916950_1 = globdata.getDBMSData().getDBMSManager().getStatement(globdata, iefRuntimeParm2, "IEFDB", 
          SQLStatement.toString());
        globdata.getDBMSData().getDBMSManager().bindParameterString("IEFDB", hstmt_0037916950_1, 1, TkeyAttrText_001TP);
        hstmt_0037916950_1.execute();
        hstmt_0037916950_1_rs = hstmt_0037916950_1.getResultSet();
      } catch( SQLException e ) {
        sqlException = e;
      }
      if ( (globdata.getDBMSData().getDBMSManager().wasSuccessful(sqlException)) )
      {
        curs_open_0029360182 = true;
        sqlException = null;
        try {
          if ( hstmt_0037916950_1_rs.next() == false )
          {
            throw new SQLException("No data found");
          }
          tinstance_id_009EF = hstmt_0037916950_1_rs.getTimestamp(1);
          treference_id_011EF = hstmt_0037916950_1_rs.getTimestamp(2);
          tkey_attr_001EF = globdata.getDBMSData().getDBMSManager().getStringFromResultSet("IEFDB", hstmt_0037916950_1_rs, 3);
          tsearch_attr_003EF = globdata.getDBMSData().getDBMSManager().getStringFromResultSet("IEFDB", hstmt_0037916950_1_rs, 4);
          tother_attr_005EF = globdata.getDBMSData().getDBMSManager().getStringFromResultSet("IEFDB", hstmt_0037916950_1_rs, 5);
          tupdate_userid_007EF = globdata.getDBMSData().getDBMSManager().getStringFromResultSet("IEFDB", hstmt_0037916950_1_rs, 6);
          tother_date_013EF = hstmt_0037916950_1_rs.getDate(7);
          tother_time_015EF = globdata.getDBMSData().getDBMSManager().getTimeFromResultSet(globdata, iefRuntimeParm2, "IEFDB", 
            hstmt_0037916950_1_rs, 8);
          tother_amount_017EF = globdata.getDBMSData().getDBMSManager().getBigDecimalFromResultSet("IEFDB", hstmt_0037916950_1_rs, 9)
            ;
        } catch( SQLException e ) {
          sqlException = e;
        }
        
      }
      
      if ( globdata.getDBMSData().getDBMSManager().wasSuccessful(sqlException) )
      {
        f_29360182_movea();
        if ( sl_29360182.equals( ErrorData.SUCCEEDS_FL_LS ) )
        {
          Type_es = ABBase.EV_USABLE;
          Type_lk = ABBase.EVW_LOCKED;
        }
        else {
          Type_es = ABBase.EV_UNUSABLE;
          Type_lk = ABBase.EVW_UNLOCKED;
        }
      }
      else if ( globdata.getDBMSData().getDBMSManager().wasNoDataFound(sqlException) )
      {
        sl_29360182 = ErrorData.NOT_FOUND_FL_LS;
        Type_es = ABBase.EV_UNUSABLE;
        Type_lk = ABBase.EVW_UNLOCKED;
      }
      else {
        f_29360182_jdbc_dberror();
      }
    }
  }
  
  public void f_29360182_jdbc_dberror()
  	throws ABException
  {
    globdata.getErrorData().setStatus( ErrorData.FATAL_ERROR_FL_LS );
    globdata.getDBMSData().setActionId( 20 );
    globdata.getErrorData().setLastStatus( ErrorData.DB_ERROR_FL_LS );
    if ( sqlException != null )
    {
      globdata.getErrorData().setErrorMessage(sqlException);
      if ( globdata.getDBMSData().getDBMSManager().wasDeadlockOrTimeout("IEFDB", sqlException) )
      {
        globdata.getErrorData().setLastStatus( ErrorData.DB_DEADLOCK_TIMEOUT_FL_LS );
      }
    }
    sl_29360182 = globdata.getErrorData().getLastStatus();
    throw new ABException();
  }
  
  public void f_29360182_moveb()
  	throws ABException
  {
    TkeyAttrText_001TP = w_ia.ImpTypeTkeyAttrText;
  }
  
  public void f_29360182_movea()
  	throws ABException
  {
    w_ea.TypeTinstanceId = TimestampAttr.valueOf(TIRS2VW.TIRS2VW(globdata, "IEFDB", tinstance_id_009EF));
    w_ea.TypeTreferenceId = TimestampAttr.valueOf(TIRS2VW.TIRS2VW(globdata, "IEFDB", treference_id_011EF));
    w_ea.TypeTupdateUserId = FixedStringAttr.valueOf(tupdate_userid_007EF, (short)8);
    w_ea.TypeTkeyAttrText = FixedStringAttr.valueOf(tkey_attr_001EF, (short)4);
    w_ea.TypeTsearchAttrText = FixedStringAttr.valueOf(tsearch_attr_003EF, (short)20);
    w_ea.TypeTotherAttrText = FixedStringAttr.valueOf(tother_attr_005EF, (short)2);
    w_ea.TypeTotherAttrDate = DateAttr.valueOf(TIRD2VW.TIRD2VW(globdata, "IEFDB", tother_date_013EF));
    w_ea.TypeTotherAttrTime = TimeAttr.valueOf(TIRT2VW.TIRT2VW(globdata, "IEFDB", tother_time_015EF));
    w_ea.TypeTotherAttrAmount = BigDecimalAttr.valueOf(TIRBDRND.roundToBigDecimal(tother_amount_017EF, 2));
  }
  public void f_27262987_moveb()
  {
    if ( (Type_es.equals( ABBase.EV_UNUSABLE ) == true) || (Type_lk.equals( ABBase.EVW_UNLOCKED ) == true) )
    {
      up_27262987 = ABBase.EV_UNUSABLE;
      return;
    }
    treference_id_012EN = TIRVW2S.TIRVW2S(globdata, "IEFDB", w_ea.TypeTreferenceId);
    tupdate_userid_008EN = w_ea.TypeTupdateUserId;
    tsearch_attr_004EN = w_ea.TypeTsearchAttrText;
    tother_attr_006EN = w_ea.TypeTotherAttrText;
    tother_date_014EN = TIRVW2D.TIRVW2D(globdata, "IEFDB", w_ea.TypeTotherAttrDate);
    tother_time_016EN = TIRVW2T.TIRVW2T(globdata, "IEFDB", w_ea.TypeTotherAttrTime);
    tother_amount_018EN = TIRBDRND.roundToBigDecimal(w_ea.TypeTotherAttrAmount,2);
  }
  public void f_27262987()
  	throws ABException
  {
    up_27262987 = ErrorData.SUCCEEDS_FL_LS;
    Type_001cd = ABBase.PV_UPDATE;
    f_27262987_moveb();
    
    if ( up_27262987.equals( ErrorData.SUCCEEDS_FL_LS ) == true )
    {
      sqlException = null;
      try {
        SQLStatement.setLength(0);
        SQLStatement.append("UPDATE ");
        SQLStatement.append("`VDVYYYT`");
        SQLStatement.append(" SET ");
        SQLStatement.append("`TREFERENCE_ID` = ?,");
        SQLStatement.append("`TUPDATE_USERID` = ?,");
        SQLStatement.append("`TSEARCH_ATTR` = ?,");
        SQLStatement.append("`TOTHER_ATTR` = ?,");
        SQLStatement.append("`TOTHER_DATE` = ?,");
        SQLStatement.append("`TOTHER_TIME` = ?,");
        SQLStatement.append("`TOTHER_AMOUNT` = ?");
        SQLStatement.append(" WHERE ");
        SQLStatement.append("`TKEY_ATTR` = ?");
        hstmt_0027262987_1 = globdata.getDBMSData().getDBMSManager().getStatement(globdata, iefRuntimeParm2, "IEFDB", 
          SQLStatement.toString());
        hstmt_0027262987_1.setTimestamp(1, treference_id_012EN);
        globdata.getDBMSData().getDBMSManager().bindParameterString("IEFDB", hstmt_0027262987_1, 2, tupdate_userid_008EN);
        globdata.getDBMSData().getDBMSManager().bindParameterString("IEFDB", hstmt_0027262987_1, 3, tsearch_attr_004EN);
        globdata.getDBMSData().getDBMSManager().bindParameterString("IEFDB", hstmt_0027262987_1, 4, tother_attr_006EN);
        hstmt_0027262987_1.setDate(5, tother_date_014EN);
        hstmt_0027262987_1.setTime(6, tother_time_016EN);
        hstmt_0027262987_1.setBigDecimal(7, tother_amount_018EN);
        globdata.getDBMSData().getDBMSManager().bindParameterString("IEFDB", hstmt_0027262987_1, 8, tkey_attr_001EF);
        hstmt_0027262987_1.execute();
        hstmt_0027262987_1_rs = hstmt_0027262987_1.getResultSet();
        hstmt_0027262987_1_cnt = hstmt_0027262987_1.getUpdateCount();
      } catch( SQLException e ) {
        sqlException = e;
      }
      if ( (globdata.getDBMSData().getDBMSManager().wasSuccessful(sqlException) && hstmt_0027262987_1_cnt == 1) )
      {
        treference_id_011EF = treference_id_012EN;
        tupdate_userid_007EF = tupdate_userid_008EN;
        tsearch_attr_003EF = tsearch_attr_004EN;
        tother_attr_005EF = tother_attr_006EN;
        tother_date_013EF = tother_date_014EN;
        tother_time_015EF = tother_time_016EN;
        tother_amount_017EF = tother_amount_018EN;
        Type_es = ABBase.EV_USABLE;
        Type_lk = ABBase.EVW_LOCKED;
        try {
          if ( hstmt_0027262987_1_rs != null )
          {
            hstmt_0027262987_1_rs.close();
            hstmt_0027262987_1_rs = null;
          }
          if ( hstmt_0027262987_1 != null )
          {
            hstmt_0027262987_1.close();
            hstmt_0027262987_1 = null;
          }
        } catch( SQLException e ) {
          if ( globdata.getDBMSData().getDBMSManager().wasSuccessful(e) == false )
          {
            sqlException = e;
            f_27262987_jdbc_dberror();
          }
        }
      }
      else if ( globdata.getDBMSData().getDBMSManager().wasDuplicateFound("IEFDB", sqlException) )
      {
        up_27262987 = ErrorData.DUPLICATE_FOUND_FL_LS;
        Type_es = ABBase.EV_UNUSABLE;
        try {
          if ( hstmt_0027262987_1_rs != null )
          {
            hstmt_0027262987_1_rs.close();
            hstmt_0027262987_1_rs = null;
          }
          if ( hstmt_0027262987_1 != null )
          {
            hstmt_0027262987_1.close();
            hstmt_0027262987_1 = null;
          }
        } catch( SQLException e ) {
          if ( globdata.getDBMSData().getDBMSManager().wasSuccessful(e) == false )
          {
            sqlException = e;
            f_27262987_jdbc_dberror();
          }
        }
      }
      else {
        f_27262987_jdbc_dberror();
      }
    }
    else if ( up_27262987.equals( ErrorData.INVALID_DATAB_PERM_FL_LS ) == false )
    {
      globdata.getErrorData().setStatus( ErrorData.FATAL_ERROR_FL_LS );
      globdata.getDBMSData().setActionId( 26 );
      globdata.getErrorData().setLastStatus( up_27262987 );
      throw new ABException();
    }
    return;
  }
  
  public void f_27262987_jdbc_dberror()
  	throws ABException
  {
    globdata.getErrorData().setStatus( ErrorData.FATAL_ERROR_FL_LS );
    globdata.getDBMSData().setActionId( 26 );
    globdata.getErrorData().setLastStatus( ErrorData.DB_ERROR_FL_LS );
    if ( sqlException != null )
    {
      globdata.getErrorData().setErrorMessage(sqlException);
      if ( globdata.getDBMSData().getDBMSManager().wasDeadlockOrTimeout("IEFDB", sqlException) )
      {
        globdata.getErrorData().setLastStatus( ErrorData.DB_DEADLOCK_TIMEOUT_FL_LS );
      }
    }
    up_27262987 = globdata.getErrorData().getLastStatus();
    throw new ABException();
  }
  
  public void f_22020275_term()
  {
    
    // * * * * * * * * * *
    // DASG Term Function 
    // * * * * * * * * * *
    
    try {
      if ( curs_open_0029360182 == true )
      {
        curs_open_0029360182 = false;
        try {
          if ( hstmt_0037916950_1_rs != null )
          {
            hstmt_0037916950_1_rs.close();
            hstmt_0037916950_1_rs = null;
          }
          if ( hstmt_0037916950_1 != null )
          {
            hstmt_0037916950_1.close();
            hstmt_0037916950_1 = null;
          }
        } catch( SQLException e ) {
          if ( globdata.getDBMSData().getDBMSManager().wasSuccessful(e) == false )
          {
            sqlException = e;
            f_29360182_jdbc_dberror();
          }
        }
      }
    } catch( ABException e ) {
      // No action can be taken here.
    }
  }
}// end class


package gen.ort.yyy;
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
//
//                    Source Code Generated by
//                           CA Gen 8.6
//
//    Copyright (c) 2023 CA Technologies. All rights reserved.
//
//    Name: DYYY0331_IA                      Date: 2023/07/05
//    User: HakanBal                         Time: 15:09:22
//
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// Import Statements
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
import java.lang.*;
import java.io.*;
import java.util.*;
import java.math.*;
import java.sql.*;
import com.ca.gen.vwrt.*;
import com.ca.gen.vwrt.types.*;
import com.ca.gen.vwrt.vdf.*;
import com.ca.gen.csu.exception.*;

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// START OF IMPORT VIEW
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
/**
 * Internal data view storage for: DYYY0331_IA
 **/
public class DYYY0331_IA extends ViewBase implements IImportView, Serializable
{
  // Entity View: IMP_ERROR
  //        Type: IYY1_COMPONENT
  /**
   * Attribute missing flag for: ImpErrorIyy1ComponentSeverityCode
   **/
  public char ImpErrorIyy1ComponentSeverityCode_AS;
  /**
   * Attribute for: ImpErrorIyy1ComponentSeverityCode
   * Domain: Text
   * Length: 1
   * Varying Length: N
   **/
  public String ImpErrorIyy1ComponentSeverityCode;
  /**
   * Attribute missing flag for: ImpErrorIyy1ComponentRollbackIndicator
   **/
  public char ImpErrorIyy1ComponentRollbackIndicator_AS;
  /**
   * Attribute for: ImpErrorIyy1ComponentRollbackIndicator
   * Domain: Text
   * Length: 1
   * Varying Length: N
   **/
  public String ImpErrorIyy1ComponentRollbackIndicator;
  /**
   * Attribute missing flag for: ImpErrorIyy1ComponentOriginServid
   **/
  public char ImpErrorIyy1ComponentOriginServid_AS;
  /**
   * Attribute for: ImpErrorIyy1ComponentOriginServid
   * Domain: Number
   * Length: 15
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public double ImpErrorIyy1ComponentOriginServid;
  /**
   * Attribute missing flag for: ImpErrorIyy1ComponentContextString
   **/
  public char ImpErrorIyy1ComponentContextString_AS;
  /**
   * Attribute for: ImpErrorIyy1ComponentContextString
   * Domain: Text
   * Length: 512
   * Varying Length: Y
   **/
  public String ImpErrorIyy1ComponentContextString;
  /**
   * Attribute missing flag for: ImpErrorIyy1ComponentReturnCode
   **/
  public char ImpErrorIyy1ComponentReturnCode_AS;
  /**
   * Attribute for: ImpErrorIyy1ComponentReturnCode
   * Domain: Number
   * Length: 5
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public int ImpErrorIyy1ComponentReturnCode;
  /**
   * Attribute missing flag for: ImpErrorIyy1ComponentReasonCode
   **/
  public char ImpErrorIyy1ComponentReasonCode_AS;
  /**
   * Attribute for: ImpErrorIyy1ComponentReasonCode
   * Domain: Number
   * Length: 5
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public int ImpErrorIyy1ComponentReasonCode;
  /**
   * Attribute missing flag for: ImpErrorIyy1ComponentChecksum
   **/
  public char ImpErrorIyy1ComponentChecksum_AS;
  /**
   * Attribute for: ImpErrorIyy1ComponentChecksum
   * Domain: Text
   * Length: 15
   * Varying Length: N
   **/
  public String ImpErrorIyy1ComponentChecksum;
  // Entity View: IMP_REFERENCE
  //        Type: IYY1_SERVER_DATA
  /**
   * Attribute missing flag for: ImpReferenceIyy1ServerDataUserid
   **/
  public char ImpReferenceIyy1ServerDataUserid_AS;
  /**
   * Attribute for: ImpReferenceIyy1ServerDataUserid
   * Domain: Text
   * Length: 8
   * Varying Length: N
   **/
  public String ImpReferenceIyy1ServerDataUserid;
  /**
   * Attribute missing flag for: ImpReferenceIyy1ServerDataReferenceId
   **/
  public char ImpReferenceIyy1ServerDataReferenceId_AS;
  /**
   * Attribute for: ImpReferenceIyy1ServerDataReferenceId
   * Domain: Timestamp
   * Length: 20
   **/
  public String ImpReferenceIyy1ServerDataReferenceId;
  // Entity View: IMP
  //        Type: TYPE
  /**
   * Attribute missing flag for: ImpTypeTinstanceId
   **/
  public char ImpTypeTinstanceId_AS;
  /**
   * Attribute for: ImpTypeTinstanceId
   * Domain: Timestamp
   * Length: 20
   **/
  public String ImpTypeTinstanceId;
  /**
   * Attribute missing flag for: ImpTypeTreferenceId
   **/
  public char ImpTypeTreferenceId_AS;
  /**
   * Attribute for: ImpTypeTreferenceId
   * Domain: Timestamp
   * Length: 20
   **/
  public String ImpTypeTreferenceId;
  /**
   * Attribute missing flag for: ImpTypeTkeyAttrText
   **/
  public char ImpTypeTkeyAttrText_AS;
  /**
   * Attribute for: ImpTypeTkeyAttrText
   * Domain: Text
   * Length: 4
   * Varying Length: N
   **/
  public String ImpTypeTkeyAttrText;
  /**
   * Attribute missing flag for: ImpTypeTsearchAttrText
   **/
  public char ImpTypeTsearchAttrText_AS;
  /**
   * Attribute for: ImpTypeTsearchAttrText
   * Domain: Text
   * Length: 20
   * Varying Length: N
   **/
  public String ImpTypeTsearchAttrText;
  /**
   * Attribute missing flag for: ImpTypeTotherAttrText
   **/
  public char ImpTypeTotherAttrText_AS;
  /**
   * Attribute for: ImpTypeTotherAttrText
   * Domain: Text
   * Length: 2
   * Varying Length: N
   **/
  public String ImpTypeTotherAttrText;
  /**
   * Attribute missing flag for: ImpTypeTotherAttrDate
   **/
  public char ImpTypeTotherAttrDate_AS;
  /**
   * Attribute for: ImpTypeTotherAttrDate
   * Domain: Date
   * Length: 8
   **/
  public int ImpTypeTotherAttrDate;
  /**
   * Attribute missing flag for: ImpTypeTotherAttrTime
   **/
  public char ImpTypeTotherAttrTime_AS;
  /**
   * Attribute for: ImpTypeTotherAttrTime
   * Domain: Time
   * Length: 6
   **/
  public int ImpTypeTotherAttrTime;
  /**
   * Attribute missing flag for: ImpTypeTotherAttrAmount
   **/
  public char ImpTypeTotherAttrAmount_AS;
  /**
   * Attribute for: ImpTypeTotherAttrAmount
   * Domain: Number
   * Length: 17
   * Decimal Places: 2
   * Decimal Precision: Y
   **/
  public BigDecimal ImpTypeTotherAttrAmount;
  /**
   * Default Constructor
   **/
  
  public DYYY0331_IA()
  {
    reset();
  }
  /**
   * Copy Constructor
   **/
  
  public DYYY0331_IA(DYYY0331_IA orig)
  {
    copyFrom(orig);
  }
  /**
   * Static instance creator function
   **/
  
  public static DYYY0331_IA getInstance()
  {
    return new DYYY0331_IA();
  }
  /**
   * Static free instance method
   **/
  
  public void freeInstance()
  {
  }
  /**
   * clone constructor
   **/
  
  @Override public Object clone()
  	throws CloneNotSupportedException
  {
    return(new DYYY0331_IA(this));
  }
  /**
   * Resets all properties to the defaults.
   **/
  
  public void reset()
  {
    ImpErrorIyy1ComponentSeverityCode_AS = ' ';
    ImpErrorIyy1ComponentSeverityCode = " ";
    ImpErrorIyy1ComponentRollbackIndicator_AS = ' ';
    ImpErrorIyy1ComponentRollbackIndicator = " ";
    ImpErrorIyy1ComponentOriginServid_AS = ' ';
    ImpErrorIyy1ComponentOriginServid = 0.0;
    ImpErrorIyy1ComponentContextString_AS = ' ';
    ImpErrorIyy1ComponentContextString = "";
    ImpErrorIyy1ComponentReturnCode_AS = ' ';
    ImpErrorIyy1ComponentReturnCode = 0;
    ImpErrorIyy1ComponentReasonCode_AS = ' ';
    ImpErrorIyy1ComponentReasonCode = 0;
    ImpErrorIyy1ComponentChecksum_AS = ' ';
    ImpErrorIyy1ComponentChecksum = "               ";
    ImpReferenceIyy1ServerDataUserid_AS = ' ';
    ImpReferenceIyy1ServerDataUserid = "        ";
    ImpReferenceIyy1ServerDataReferenceId_AS = ' ';
    ImpReferenceIyy1ServerDataReferenceId = "00000000000000000000";
    ImpTypeTinstanceId_AS = ' ';
    ImpTypeTinstanceId = "00000000000000000000";
    ImpTypeTreferenceId_AS = ' ';
    ImpTypeTreferenceId = "00000000000000000000";
    ImpTypeTkeyAttrText_AS = ' ';
    ImpTypeTkeyAttrText = "    ";
    ImpTypeTsearchAttrText_AS = ' ';
    ImpTypeTsearchAttrText = "                    ";
    ImpTypeTotherAttrText_AS = ' ';
    ImpTypeTotherAttrText = "  ";
    ImpTypeTotherAttrDate_AS = ' ';
    ImpTypeTotherAttrDate = 00000000;
    ImpTypeTotherAttrTime_AS = ' ';
    ImpTypeTotherAttrTime = 00000000;
    ImpTypeTotherAttrAmount_AS = ' ';
    ImpTypeTotherAttrAmount = BigDecimalAttr.getDefaultValue();
  }
  /**
   * Gets the VDF version of the current state of the instance.
   **/
  public VDF getVDF()
  {
    throw new RuntimeException("can only execute getVDF for a Procedure Step.");
  }
  
  /**
   * Sets the current state of the instance to the VDF version.
   **/
  public void setFromVDF(VDF vdf)
  {
    throw new RuntimeException("can only execute setFromVDF for a Procedure Step.");
  }
  
  /**
   * Sets the current instance based on the passed view.
   **/
  public void copyFrom(IImportView orig)
  {
    this.copyFrom((DYYY0331_IA) orig);
  }
  
  /**
   * Sets the current instance based on the passed view.
   **/
  public void copyFrom(DYYY0331_IA orig)
  {
    ImpErrorIyy1ComponentSeverityCode_AS = orig.ImpErrorIyy1ComponentSeverityCode_AS;
    ImpErrorIyy1ComponentSeverityCode = orig.ImpErrorIyy1ComponentSeverityCode;
    ImpErrorIyy1ComponentRollbackIndicator_AS = orig.ImpErrorIyy1ComponentRollbackIndicator_AS;
    ImpErrorIyy1ComponentRollbackIndicator = orig.ImpErrorIyy1ComponentRollbackIndicator;
    ImpErrorIyy1ComponentOriginServid_AS = orig.ImpErrorIyy1ComponentOriginServid_AS;
    ImpErrorIyy1ComponentOriginServid = orig.ImpErrorIyy1ComponentOriginServid;
    ImpErrorIyy1ComponentContextString_AS = orig.ImpErrorIyy1ComponentContextString_AS;
    ImpErrorIyy1ComponentContextString = orig.ImpErrorIyy1ComponentContextString;
    ImpErrorIyy1ComponentReturnCode_AS = orig.ImpErrorIyy1ComponentReturnCode_AS;
    ImpErrorIyy1ComponentReturnCode = orig.ImpErrorIyy1ComponentReturnCode;
    ImpErrorIyy1ComponentReasonCode_AS = orig.ImpErrorIyy1ComponentReasonCode_AS;
    ImpErrorIyy1ComponentReasonCode = orig.ImpErrorIyy1ComponentReasonCode;
    ImpErrorIyy1ComponentChecksum_AS = orig.ImpErrorIyy1ComponentChecksum_AS;
    ImpErrorIyy1ComponentChecksum = orig.ImpErrorIyy1ComponentChecksum;
    ImpReferenceIyy1ServerDataUserid_AS = orig.ImpReferenceIyy1ServerDataUserid_AS;
    ImpReferenceIyy1ServerDataUserid = orig.ImpReferenceIyy1ServerDataUserid;
    ImpReferenceIyy1ServerDataReferenceId_AS = orig.ImpReferenceIyy1ServerDataReferenceId_AS;
    ImpReferenceIyy1ServerDataReferenceId = orig.ImpReferenceIyy1ServerDataReferenceId;
    ImpTypeTinstanceId_AS = orig.ImpTypeTinstanceId_AS;
    ImpTypeTinstanceId = orig.ImpTypeTinstanceId;
    ImpTypeTreferenceId_AS = orig.ImpTypeTreferenceId_AS;
    ImpTypeTreferenceId = orig.ImpTypeTreferenceId;
    ImpTypeTkeyAttrText_AS = orig.ImpTypeTkeyAttrText_AS;
    ImpTypeTkeyAttrText = orig.ImpTypeTkeyAttrText;
    ImpTypeTsearchAttrText_AS = orig.ImpTypeTsearchAttrText_AS;
    ImpTypeTsearchAttrText = orig.ImpTypeTsearchAttrText;
    ImpTypeTotherAttrText_AS = orig.ImpTypeTotherAttrText_AS;
    ImpTypeTotherAttrText = orig.ImpTypeTotherAttrText;
    ImpTypeTotherAttrDate_AS = orig.ImpTypeTotherAttrDate_AS;
    ImpTypeTotherAttrDate = orig.ImpTypeTotherAttrDate;
    ImpTypeTotherAttrTime_AS = orig.ImpTypeTotherAttrTime_AS;
    ImpTypeTotherAttrTime = orig.ImpTypeTotherAttrTime;
    ImpTypeTotherAttrAmount_AS = orig.ImpTypeTotherAttrAmount_AS;
    ImpTypeTotherAttrAmount = orig.ImpTypeTotherAttrAmount;
  }
}

package gen.ort.yyy;
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
//
//                    Source Code Generated by
//                           CA Gen 8.6
//
//    Copyright (c) 2023 CA Technologies. All rights reserved.
//
//    Name: DYYY0331_LA                      Date: 2023/07/05
//    User: HakanBal                         Time: 15:09:22
//
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// Import Statements
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
import java.lang.*;
import java.io.*;
import java.util.*;
import java.math.*;
import java.sql.*;
import com.ca.gen.vwrt.*;
import com.ca.gen.vwrt.types.*;
import com.ca.gen.vwrt.vdf.*;
import com.ca.gen.csu.exception.*;

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// START OF LOCAL VIEW
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
/**
 * Internal data view storage for: DYYY0331_LA
 **/
public class DYYY0331_LA extends ViewBase implements ILocalView, Serializable
{
  // Entity View: LOC
  //        Type: DONT_CHANGE_RETURN_CODES
  /**
   * Attribute missing flag for: LocDontChangeReturnCodesQ1Ok
   **/
  public char LocDontChangeReturnCodesQ1Ok_AS;
  /**
   * Attribute for: LocDontChangeReturnCodesQ1Ok
   * Domain: Number
   * Length: 5
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public int LocDontChangeReturnCodesQ1Ok;
  /**
   * Attribute missing flag for: LocDontChangeReturnCodesN10ObjNotFound
   **/
  public char LocDontChangeReturnCodesN10ObjNotFound_AS;
  /**
   * Attribute for: LocDontChangeReturnCodesN10ObjNotFound
   * Domain: Number
   * Length: 5
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public int LocDontChangeReturnCodesN10ObjNotFound;
  /**
   * Attribute missing flag for: LocDontChangeReturnCodesN41ObjUpdateFailed
   **/
  public char LocDontChangeReturnCodesN41ObjUpdateFailed_AS;
  /**
   * Attribute for: LocDontChangeReturnCodesN41ObjUpdateFailed
   * Domain: Number
   * Length: 5
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public int LocDontChangeReturnCodesN41ObjUpdateFailed;
  // Entity View: LOC
  //        Type: DONT_CHANGE_REASON_CODES
  /**
   * Attribute missing flag for: LocDontChangeReasonCodesQ1Default
   **/
  public char LocDontChangeReasonCodesQ1Default_AS;
  /**
   * Attribute for: LocDontChangeReasonCodesQ1Default
   * Domain: Number
   * Length: 5
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public int LocDontChangeReasonCodesQ1Default;
  /**
   * Attribute missing flag for: LocDontChangeReasonCodesQ141TypeNotFound
   **/
  public char LocDontChangeReasonCodesQ141TypeNotFound_AS;
  /**
   * Attribute for: LocDontChangeReasonCodesQ141TypeNotFound
   * Domain: Number
   * Length: 5
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public int LocDontChangeReasonCodesQ141TypeNotFound;
  /**
   * Attribute missing flag for: LocDontChangeReasonCodesQ142TypeAlreadyExist
   **/
  public char LocDontChangeReasonCodesQ142TypeAlreadyExist_AS;
  /**
   * Attribute for: LocDontChangeReasonCodesQ142TypeAlreadyExist
   * Domain: Number
   * Length: 5
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public int LocDontChangeReasonCodesQ142TypeAlreadyExist;
  /**
   * Attribute missing flag for: LocDontChangeReasonCodesQ143TypeAttrValueInvalid
   **/
  public char LocDontChangeReasonCodesQ143TypeAttrValueInvalid_AS;
  /**
   * Attribute for: LocDontChangeReasonCodesQ143TypeAttrValueInvalid
   * Domain: Number
   * Length: 5
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public int LocDontChangeReasonCodesQ143TypeAttrValueInvalid;
  /**
   * Attribute missing flag for: LocDontChangeReasonCodesQ152TypeConcurrencyError
   **/
  public char LocDontChangeReasonCodesQ152TypeConcurrencyError_AS;
  /**
   * Attribute for: LocDontChangeReasonCodesQ152TypeConcurrencyError
   * Domain: Number
   * Length: 5
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public int LocDontChangeReasonCodesQ152TypeConcurrencyError;
  /**
   * Default Constructor
   **/
  
  public DYYY0331_LA()
  {
    reset();
  }
  /**
   * Copy Constructor
   **/
  
  public DYYY0331_LA(DYYY0331_LA orig)
  {
    LocDontChangeReturnCodesQ1Ok_AS = orig.LocDontChangeReturnCodesQ1Ok_AS;
    LocDontChangeReturnCodesQ1Ok = orig.LocDontChangeReturnCodesQ1Ok;
    LocDontChangeReturnCodesN10ObjNotFound_AS = orig.LocDontChangeReturnCodesN10ObjNotFound_AS;
    LocDontChangeReturnCodesN10ObjNotFound = orig.LocDontChangeReturnCodesN10ObjNotFound;
    LocDontChangeReturnCodesN41ObjUpdateFailed_AS = orig.LocDontChangeReturnCodesN41ObjUpdateFailed_AS;
    LocDontChangeReturnCodesN41ObjUpdateFailed = orig.LocDontChangeReturnCodesN41ObjUpdateFailed;
    LocDontChangeReasonCodesQ1Default_AS = orig.LocDontChangeReasonCodesQ1Default_AS;
    LocDontChangeReasonCodesQ1Default = orig.LocDontChangeReasonCodesQ1Default;
    LocDontChangeReasonCodesQ141TypeNotFound_AS = orig.LocDontChangeReasonCodesQ141TypeNotFound_AS;
    LocDontChangeReasonCodesQ141TypeNotFound = orig.LocDontChangeReasonCodesQ141TypeNotFound;
    LocDontChangeReasonCodesQ142TypeAlreadyExist_AS = orig.LocDontChangeReasonCodesQ142TypeAlreadyExist_AS;
    LocDontChangeReasonCodesQ142TypeAlreadyExist = orig.LocDontChangeReasonCodesQ142TypeAlreadyExist;
    LocDontChangeReasonCodesQ143TypeAttrValueInvalid_AS = orig.LocDontChangeReasonCodesQ143TypeAttrValueInvalid_AS;
    LocDontChangeReasonCodesQ143TypeAttrValueInvalid = orig.LocDontChangeReasonCodesQ143TypeAttrValueInvalid;
    LocDontChangeReasonCodesQ152TypeConcurrencyError_AS = orig.LocDontChangeReasonCodesQ152TypeConcurrencyError_AS;
    LocDontChangeReasonCodesQ152TypeConcurrencyError = orig.LocDontChangeReasonCodesQ152TypeConcurrencyError;
  }
  /**
   * Static instance creator function
   **/
  
  public static DYYY0331_LA getInstance()
  {
    return new DYYY0331_LA();
  }
  /**
   * Static free instance method
   **/
  
  public void freeInstance()
  {
  }
  /**
   * clone constructor
   **/
  
  @Override public Object clone()
  	throws CloneNotSupportedException
  {
    return(new DYYY0331_LA(this));
  }
  /**
   * Resets all properties to the defaults.
   **/
  
  public void reset()
  {
    LocDontChangeReturnCodesQ1Ok_AS = ' ';
    LocDontChangeReturnCodesQ1Ok = 0;
    LocDontChangeReturnCodesN10ObjNotFound_AS = ' ';
    LocDontChangeReturnCodesN10ObjNotFound = 0;
    LocDontChangeReturnCodesN41ObjUpdateFailed_AS = ' ';
    LocDontChangeReturnCodesN41ObjUpdateFailed = 0;
    LocDontChangeReasonCodesQ1Default_AS = ' ';
    LocDontChangeReasonCodesQ1Default = 0;
    LocDontChangeReasonCodesQ141TypeNotFound_AS = ' ';
    LocDontChangeReasonCodesQ141TypeNotFound = 0;
    LocDontChangeReasonCodesQ142TypeAlreadyExist_AS = ' ';
    LocDontChangeReasonCodesQ142TypeAlreadyExist = 0;
    LocDontChangeReasonCodesQ143TypeAttrValueInvalid_AS = ' ';
    LocDontChangeReasonCodesQ143TypeAttrValueInvalid = 0;
    LocDontChangeReasonCodesQ152TypeConcurrencyError_AS = ' ';
    LocDontChangeReasonCodesQ152TypeConcurrencyError = 0;
  }
}

package gen.ort.yyy;
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
//
//                    Source Code Generated by
//                           CA Gen 8.6
//
//    Copyright (c) 2023 CA Technologies. All rights reserved.
//
//    Name: DYYY0331_OA                      Date: 2023/07/05
//    User: HakanBal                         Time: 15:09:22
//
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// Import Statements
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
import java.lang.*;
import java.io.*;
import java.util.*;
import java.math.*;
import java.sql.*;
import com.ca.gen.vwrt.*;
import com.ca.gen.vwrt.types.*;
import com.ca.gen.vwrt.vdf.*;
import com.ca.gen.csu.exception.*;

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// START OF EXPORT VIEW
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
/**
 * Internal data view storage for: DYYY0331_OA
 **/
public class DYYY0331_OA extends ViewBase implements IExportView, Serializable
{
  // Entity View: EXP
  //        Type: TYPE
  /**
   * Attribute missing flag for: ExpTypeTreferenceId
   **/
  public char ExpTypeTreferenceId_AS;
  /**
   * Attribute for: ExpTypeTreferenceId
   * Domain: Timestamp
   * Length: 20
   **/
  public String ExpTypeTreferenceId;
  // Entity View: EXP_ERROR
  //        Type: IYY1_COMPONENT
  /**
   * Attribute missing flag for: ExpErrorIyy1ComponentSeverityCode
   **/
  public char ExpErrorIyy1ComponentSeverityCode_AS;
  /**
   * Attribute for: ExpErrorIyy1ComponentSeverityCode
   * Domain: Text
   * Length: 1
   * Varying Length: N
   **/
  public String ExpErrorIyy1ComponentSeverityCode;
  /**
   * Attribute missing flag for: ExpErrorIyy1ComponentRollbackIndicator
   **/
  public char ExpErrorIyy1ComponentRollbackIndicator_AS;
  /**
   * Attribute for: ExpErrorIyy1ComponentRollbackIndicator
   * Domain: Text
   * Length: 1
   * Varying Length: N
   **/
  public String ExpErrorIyy1ComponentRollbackIndicator;
  /**
   * Attribute missing flag for: ExpErrorIyy1ComponentOriginServid
   **/
  public char ExpErrorIyy1ComponentOriginServid_AS;
  /**
   * Attribute for: ExpErrorIyy1ComponentOriginServid
   * Domain: Number
   * Length: 15
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public double ExpErrorIyy1ComponentOriginServid;
  /**
   * Attribute missing flag for: ExpErrorIyy1ComponentContextString
   **/
  public char ExpErrorIyy1ComponentContextString_AS;
  /**
   * Attribute for: ExpErrorIyy1ComponentContextString
   * Domain: Text
   * Length: 512
   * Varying Length: Y
   **/
  public String ExpErrorIyy1ComponentContextString;
  /**
   * Attribute missing flag for: ExpErrorIyy1ComponentReturnCode
   **/
  public char ExpErrorIyy1ComponentReturnCode_AS;
  /**
   * Attribute for: ExpErrorIyy1ComponentReturnCode
   * Domain: Number
   * Length: 5
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public int ExpErrorIyy1ComponentReturnCode;
  /**
   * Attribute missing flag for: ExpErrorIyy1ComponentReasonCode
   **/
  public char ExpErrorIyy1ComponentReasonCode_AS;
  /**
   * Attribute for: ExpErrorIyy1ComponentReasonCode
   * Domain: Number
   * Length: 5
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public int ExpErrorIyy1ComponentReasonCode;
  /**
   * Attribute missing flag for: ExpErrorIyy1ComponentChecksum
   **/
  public char ExpErrorIyy1ComponentChecksum_AS;
  /**
   * Attribute for: ExpErrorIyy1ComponentChecksum
   * Domain: Text
   * Length: 15
   * Varying Length: N
   **/
  public String ExpErrorIyy1ComponentChecksum;
  /**
   * Default Constructor
   **/
  
  public DYYY0331_OA()
  {
    reset();
  }
  /**
   * Copy Constructor
   **/
  
  public DYYY0331_OA(DYYY0331_OA orig)
  {
    copyFrom(orig);
  }
  /**
   * Static instance creator function
   **/
  
  public static DYYY0331_OA getInstance()
  {
    return new DYYY0331_OA();
  }
  /**
   * Static free instance method
   **/
  
  public void freeInstance()
  {
  }
  /**
   * clone constructor
   **/
  
  @Override public Object clone()
  	throws CloneNotSupportedException
  {
    return(new DYYY0331_OA(this));
  }
  /**
   * Resets all properties to the defaults.
   **/
  
  public void reset()
  {
    ExpTypeTreferenceId_AS = ' ';
    ExpTypeTreferenceId = "00000000000000000000";
    ExpErrorIyy1ComponentSeverityCode_AS = ' ';
    ExpErrorIyy1ComponentSeverityCode = " ";
    ExpErrorIyy1ComponentRollbackIndicator_AS = ' ';
    ExpErrorIyy1ComponentRollbackIndicator = " ";
    ExpErrorIyy1ComponentOriginServid_AS = ' ';
    ExpErrorIyy1ComponentOriginServid = 0.0;
    ExpErrorIyy1ComponentContextString_AS = ' ';
    ExpErrorIyy1ComponentContextString = "";
    ExpErrorIyy1ComponentReturnCode_AS = ' ';
    ExpErrorIyy1ComponentReturnCode = 0;
    ExpErrorIyy1ComponentReasonCode_AS = ' ';
    ExpErrorIyy1ComponentReasonCode = 0;
    ExpErrorIyy1ComponentChecksum_AS = ' ';
    ExpErrorIyy1ComponentChecksum = "               ";
  }
  /**
   * Sets the current state of the instance to the VDF version.
   **/
  public void setFromVDF(VDF vdf)
  {
    throw new RuntimeException("can only execute setFromVDF for a Procedure Step.");
  }
  
  /**
   * Gets the VDF version of the current state of the instance.
   **/
  public VDF getVDF()
  {
    throw new RuntimeException("can only execute getVDF for a Procedure Step.");
  }
  
  /**
   * Sets the current instance based on the passed view.
   **/
  public void copyFrom(IExportView orig)
  {
    this.copyFrom((DYYY0331_OA) orig);
  }
  
  /**
   * Sets the current instance based on the passed view.
   **/
  public void copyFrom(DYYY0331_OA orig)
  {
    ExpTypeTreferenceId_AS = orig.ExpTypeTreferenceId_AS;
    ExpTypeTreferenceId = orig.ExpTypeTreferenceId;
    ExpErrorIyy1ComponentSeverityCode_AS = orig.ExpErrorIyy1ComponentSeverityCode_AS;
    ExpErrorIyy1ComponentSeverityCode = orig.ExpErrorIyy1ComponentSeverityCode;
    ExpErrorIyy1ComponentRollbackIndicator_AS = orig.ExpErrorIyy1ComponentRollbackIndicator_AS;
    ExpErrorIyy1ComponentRollbackIndicator = orig.ExpErrorIyy1ComponentRollbackIndicator;
    ExpErrorIyy1ComponentOriginServid_AS = orig.ExpErrorIyy1ComponentOriginServid_AS;
    ExpErrorIyy1ComponentOriginServid = orig.ExpErrorIyy1ComponentOriginServid;
    ExpErrorIyy1ComponentContextString_AS = orig.ExpErrorIyy1ComponentContextString_AS;
    ExpErrorIyy1ComponentContextString = orig.ExpErrorIyy1ComponentContextString;
    ExpErrorIyy1ComponentReturnCode_AS = orig.ExpErrorIyy1ComponentReturnCode_AS;
    ExpErrorIyy1ComponentReturnCode = orig.ExpErrorIyy1ComponentReturnCode;
    ExpErrorIyy1ComponentReasonCode_AS = orig.ExpErrorIyy1ComponentReasonCode_AS;
    ExpErrorIyy1ComponentReasonCode = orig.ExpErrorIyy1ComponentReasonCode;
    ExpErrorIyy1ComponentChecksum_AS = orig.ExpErrorIyy1ComponentChecksum_AS;
    ExpErrorIyy1ComponentChecksum = orig.ExpErrorIyy1ComponentChecksum;
  }
}
