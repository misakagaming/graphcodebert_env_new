
package gen.ort.yyy;

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
//
//                    Source Code Generated by
//                           CA Gen 8.6
//
//    Copyright (c) 2023 CA Technologies. All rights reserved.
//
//    Name: IYY10431_XML_GROUP_CREATE_S      Date: 2023/07/05
//    Target OS:   JVM                       Time: 15:10:01
//    Target DBMS: JDBC                      User: HakanBal
//    Access Method: JDBC           
//
//    Generation options:
//    Debug trace option selected
//    Data modeling constraint enforcement not selected
//    Optimized import view initialization not selected
//    Enforce default values with DBMS not selected
//    Init unspecified optional fields to NULL not selected
//
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// Import Statements
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
import java.lang.*;
import java.io.*;
import java.util.*;
import java.math.*;
import java.sql.*;
import com.ca.gen.vwrt.*;
import com.ca.gen.vwrt.types.*;
import com.ca.gen.vwrt.vdf.*;

import com.ca.gen.abrt.*;
import com.ca.gen.abrt.functions.*;
import com.ca.gen.abrt.cascade.*;
import com.ca.gen.abrt.trace.*;
import com.ca.gen.exits.common.*;
import com.ca.gen.odc.*;

public class IYY10431 extends ABBase
{
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // IMPORT VIEW CLASS VARIABLE
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  IYY10431_IA w_ia;
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // EXPORT VIEW CLASS VARIABLE
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  IYY10431_OA w_oa;
  
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // ACTION BLOCK IMPORT/EXPORT VIEWS CLASS VARIABLES
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  gen.ort.yyy.MYY10431_IA myy10431_ia;
  gen.ort.yyy.MYY10431_OA myy10431_oa;
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // REPEATING GROUP VIEW STATUS FIELDS 
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  boolean ImpGroup_FL_001;
  int ImpGroup_PS_001;
  boolean ImpGroup_RF_001;
  public final static int ImpGroup_MM_001 = 10;
  boolean ImpGroup_FL_002;
  int ImpGroup_PS_002;
  boolean ImpGroup_RF_002;
  public final static int ImpGroup_MM_002 = 10;
  
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // MISC DECLARATIONS AND PROTOTYPES 
  //    FOLLOW AS NEEDED:             
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  boolean func_0022020173_esc_flag;
  PadView padview[] = new PadView [34];
  int trace_ret_code;
  PadText padtext[] = initPadText();
  public PadText [] initPadText()
  {
    PadText [] result = new PadText [PADTEXT_SIZE];
    result[0] = PadText.getInstance(   0,"+->   IYY10431_XML_GROUP_CREATE_S       07/05/2023  15:10");
    result[1] = PadText.getInstance(   0,"!       IMPORTS:");
    result[2] = PadText.getInstance(   0,"!         Group View (10) imp_group");
    result[3] = PadText.getInstance(   0,"!           Entity View imp_g iyy1_type (Transient, Optional, Import only)");
    result[4] = PadText.getInstance(   0,"!             tinstance_id");
    result[5] = PadText.getInstance(   0,"!             treference_id");
    result[6] = PadText.getInstance(   0,"!             tcreate_user_id");
    result[7] = PadText.getInstance(   0,"!             tupdate_user_id");
    result[8] = PadText.getInstance(   0,"!             tkey_attr_text");
    result[9] = PadText.getInstance(   0,"!             tsearch_attr_text");
    result[10] = PadText.getInstance(   0,"!             tother_attr_text");
    result[11] = PadText.getInstance(   0,"!             tother_attr_date");
    result[12] = PadText.getInstance(   0,"!             tother_attr_time");
    result[13] = PadText.getInstance(   0,"!             tother_attr_amount");
    result[14] = PadText.getInstance(   0,"!       EXPORTS:");
    result[15] = PadText.getInstance(   0,"!         Work View exp canam_xml (Transient, Export only)");
    result[16] = PadText.getInstance(   0,"!           xml_buffer");
    result[17] = PadText.getInstance(   0,"!         Work View exp_error canam_xml (Transient, Export only)");
    result[18] = PadText.getInstance(   0,"!           xml_return_code");
    result[19] = PadText.getInstance(   0,"!           xml_message");
    result[20] = PadText.getInstance(   0,"!           xml_position");
    result[21] = PadText.getInstance(   0,"!           xml_source");
    result[22] = PadText.getInstance(   0,"!         Work View exp_error iyy1_component (Transient, Export only)");
    result[23] = PadText.getInstance(   0,"!           severity_code");
    result[24] = PadText.getInstance(   0,"!           rollback_indicator");
    result[25] = PadText.getInstance(   0,"!           origin_servid");
    result[26] = PadText.getInstance(   0,"!           context_string");
    result[27] = PadText.getInstance(   0,"!           return_code");
    result[28] = PadText.getInstance(   0,"!           reason_code");
    result[29] = PadText.getInstance(   0,"!           checksum");
    result[30] = PadText.getInstance(   0,"!");
    result[31] = PadText.getInstance(   0,"!     PROCEDURE STATEMENTS");
    result[32] = PadText.getInstance(   0,"!");
    result[33] = PadText.getInstance(   1,"!   ");
    result[34] = PadText.getInstance(   2,"!   ");
    result[35] = PadText.getInstance(   3,"!  NOTE: ");
    result[36] = PadText.getInstance(   3,"!  PURPOSE(CONTINUED)");
    result[37] = PadText.getInstance(   3,"!  ");
    result[38] = PadText.getInstance(   4,"!  NOTE: ");
    result[39] = PadText.getInstance(   4,"!  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
    result[40] = PadText.getInstance(   4,"!  Check for Pre-Post Condition and Return/Reason Code");
    result[41] = PadText.getInstance(   4,"!  ");
    result[42] = PadText.getInstance(   5,"!  NOTE: ");
    result[43] = PadText.getInstance(   5,"!  PRE-CONDITION");
    result[44] = PadText.getInstance(   5,"!  Give the attributes that will be composed as XML");
    result[45] = PadText.getInstance(   5,"!  POST-CONDITION");
    result[46] = PadText.getInstance(   5,"!  XML will be created");
    result[47] = PadText.getInstance(   5,"!  Return Code = 1, Reason Code = 1");
    result[48] = PadText.getInstance(   5,"!  ");
    result[49] = PadText.getInstance(   6,"!  NOTE: ");
    result[50] = PadText.getInstance(   6,"!  PRE-CONDITION");
    result[51] = PadText.getInstance(   6,"!  XML Create Error");
    result[52] = PadText.getInstance(   6,"!  POST-CONDITION");
    result[53] = PadText.getInstance(   6,"!  XML could not created. Check Exp_error canam_xml for details");
    result[54] = PadText.getInstance(   6,"!  Return Code = -70, Reason Code = 1");
    result[55] = PadText.getInstance(   6,"!  ");
    result[56] = PadText.getInstance(   7,"!  NOTE: ");
    result[57] = PadText.getInstance(   7,"!  RETURN / REASON CODES");
    result[58] = PadText.getInstance(   7,"!  +1/1 XML Created");
    result[59] = PadText.getInstance(   7,"!  -70/1 XML Create error");
    result[60] = PadText.getInstance(   7,"!  ");
    result[61] = PadText.getInstance(   8,"!  NOTE: ");
    result[62] = PadText.getInstance(   8,"!  RELEASE HISTORY");
    result[63] = PadText.getInstance(   8,"!  01_00 01-10-2009 New Release");
    result[64] = PadText.getInstance(   8,"!  ");
    result[65] = PadText.getInstance(   9,"!  NOTE: ");
    result[66] = PadText.getInstance(   9,"!  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
    result[67] = PadText.getInstance(   9,"!  USE <mapper ab>");
    result[68] = PadText.getInstance(   9,"!  ");
    result[69] = PadText.getInstance(  10,"!  USE myy10431_xml_group_create");
    result[70] = PadText.getInstance(  10,"!     WHICH IMPORTS: Group View  imp_group TO Group View imp_group");
    result[71] = PadText.getInstance(  10,"!     WHICH EXPORTS: Work View exp canam_xml FROM Work View exp canam_xml");
    result[72] = PadText.getInstance(  10,"!                    Work View exp_error canam_xml FROM Work View exp_error canam_xml");
    result[73] = PadText.getInstance(  10,
      "!                    Work View exp_error iyy1_component FROM Work View exp_error iyy1_component");
    result[74] = PadText.getInstance(   0,"+---");
    result[75] = PadText.getInstance(PadText.LASTLINE,"************************* BOTTOM OF DATA *************************");
    return result;
  }
  final static int PADTEXT_SIZE = 76;
  //       +->   IYY10431_XML_GROUP_CREATE_S       07/05/2023  15:10
  //       !       IMPORTS:
  //       !         Group View (10) imp_group
  //       !           Entity View imp_g iyy1_type (Transient, Optional, Import only)
  //       !             tinstance_id
  //       !             treference_id
  //       !             tcreate_user_id
  //       !             tupdate_user_id
  //       !             tkey_attr_text
  //       !             tsearch_attr_text
  //       !             tother_attr_text
  //       !             tother_attr_date
  //       !             tother_attr_time
  //       !             tother_attr_amount
  //       !       EXPORTS:
  //       !         Work View exp canam_xml (Transient, Export only)
  //       !           xml_buffer
  //       !         Work View exp_error canam_xml (Transient, Export only)
  //       !           xml_return_code
  //       !           xml_message
  //       !           xml_position
  //       !           xml_source
  //       !         Work View exp_error iyy1_component (Transient, Export only)
  //       !           severity_code
  //       !           rollback_indicator
  //       !           origin_servid
  //       !           context_string
  //       !           return_code
  //       !           reason_code
  //       !           checksum
  //       !
  //       !     PROCEDURE STATEMENTS
  //       !
  //     1 !   
  //     2 !   
  //     3 !  NOTE: 
  //     3 !  PURPOSE(CONTINUED)
  //     3 !  
  //     4 !  NOTE: 
  //     4 !  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  //     4 !  Check for Pre-Post Condition and Return/Reason Code
  //     4 !  
  //     5 !  NOTE: 
  //     5 !  PRE-CONDITION
  //     5 !  Give the attributes that will be composed as XML
  //     5 !  POST-CONDITION
  //     5 !  XML will be created
  //     5 !  Return Code = 1, Reason Code = 1
  //     5 !  
  //     6 !  NOTE: 
  //     6 !  PRE-CONDITION
  //     6 !  XML Create Error
  //     6 !  POST-CONDITION
  //     6 !  XML could not created. Check Exp_error canam_xml for details
  //     6 !  Return Code = -70, Reason Code = 1
  //     6 !  
  //     7 !  NOTE: 
  //     7 !  RETURN / REASON CODES
  //     7 !  +1/1 XML Created
  //     7 !  -70/1 XML Create error
  //     7 !  
  //     8 !  NOTE: 
  //     8 !  RELEASE HISTORY
  //     8 !  01_00 01-10-2009 New Release
  //     8 !  
  //     9 !  NOTE: 
  //     9 !  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  //     9 !  USE <mapper ab>
  //     9 !  
  //    10 !  USE myy10431_xml_group_create
  //    10 !     WHICH IMPORTS: Group View  imp_group TO Group View imp_group
  //    10 !     WHICH EXPORTS: Work View exp canam_xml FROM Work View exp canam_xml
  //    10 !                    Work View exp_error canam_xml FROM Work View exp_error canam_xml
  //    10 !                    Work View exp_error iyy1_component FROM Work View exp_error iyy1_component
  //       +---
  
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  //  CONSTRUCTOR FOR THE CLASS       
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  public IYY10431()
  {
    iefCGenRlse = "CA Gen 8.6";
    ssCopyright = "Copyright (c) 2023 CA Technologies. All rights reserved.";
    iefCGenDate = "2023/07/05";
    iefCGenTime = "15:10:01";
    iefCGenEncy = "9.2.A6";
    iefCGenUserId = "HakanBal";
    iefCGenModel = "N8I_ORT_YYY_0112_TEMPLATE";
    iefCGenSubset = "ALL";
    iefCGenName = "IYY10431_XML_GROUP_CREATE_S";
    nestingLevel = 0;
    valChkDeadlockTimeout = false;
    valChkDBError = false;
  }
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // ACTION BLOCK FUNCTION DECLARATIONS 
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  
  public void IYY10431( Object in_runtime_parm1, 
  	IRuntimePStepContext in_runtime_parm2, 
  	GlobData in_globdata, 
  	IYY10431_IA import_view, 
  	IYY10431_OA export_view )
  {
    iefRuntimeParm1 = in_runtime_parm1;
    iefRuntimeParm2 = in_runtime_parm2;
    globdata = in_globdata;
    w_ia = import_view;
    w_oa = export_view;
    _IYY10431();
  }
  
  private void _IYY10431()
  {
    
    ++(nestingLevel);
    try {
      f_22020173_init();
      f_22020173();
    } catch( ABException e ) {
    } finally {
      --(nestingLevel);
    }
    String last_stmt_num_saved = globdata.getStateData().getLastStatementNumber();
    globdata.getStateData().setLastStatementNumber( "9999999999" );
    try {
      f_0_trace();
    } catch( ABException e ) {
    }
    globdata.getStateData().setLastStatementNumber( last_stmt_num_saved );
  }
  public void f_22020173()
  	throws ABException
  {
    func_0022020173_esc_flag = false;
    globdata.getStateData().setCurrentABId( "0022020173" );
    globdata.getStateData().setCurrentABName( "IYY10431_XML_GROUP_CREATE_S" );
    padview_init();
    globdata.getStateData().setLastStatementNumber( "0000000000" );
    f_0_trace();
    
    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    //    PURPOSE(CONTINUED)                                              
    //                                                                    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    //    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  
    //    !!!!!!!!!!!!                                                    
    //    Check for Pre-Post Condition and Return/Reason Code             
    //                                                                    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    //    PRE-CONDITION                                                   
    //    Give the attributes that will be composed as XML                
    //    POST-CONDITION                                                  
    //    XML will be created                                             
    //    Return Code = 1, Reason Code = 1                                
    //                                                                    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    //    PRE-CONDITION                                                   
    //    XML Create Error                                                
    //    POST-CONDITION                                                  
    //    XML could not created. Check Exp_error canam_xml for details    
    //    Return Code = -70, Reason Code = 1                              
    //                                                                    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    //    RETURN / REASON CODES                                           
    //    +1/1 XML Created                                                
    //    -70/1 XML Create error                                          
    //                                                                    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    //    RELEASE HISTORY                                                 
    //    01_00 01-10-2009 New Release                                    
    //                                                                    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    //    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  
    //    !!!!!!!!!!!!                                                    
    //    USE <mapper ab>                                                 
    //                                                                    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    globdata.getStateData().setLastStatementNumber( "0000000010" );
    f_0_trace();
    if ( trace_ret_code != 8 )
    {
      
      myy10431_ia = (gen.ort.yyy.MYY10431_IA)(iefRuntimeParm2.getInstance("gen.ort.yyy.MYY10431_IA"));
      myy10431_oa = (gen.ort.yyy.MYY10431_OA)(iefRuntimeParm2.getInstance("gen.ort.yyy.MYY10431_OA"));
      myy10431_ia.ImpGroup_MA = IntAttr.valueOf(w_ia.ImpGroup_MA);
      for(adim1 = 1; adim1 <= w_ia.ImpGroup_MA; ++(adim1))
      {
        myy10431_ia.ImpGIyy1TypeTinstanceId[adim1-1] = TimestampAttr.valueOf(w_ia.ImpGIyy1TypeTinstanceId[adim1-1]);
        myy10431_ia.ImpGIyy1TypeTreferenceId[adim1-1] = TimestampAttr.valueOf(w_ia.ImpGIyy1TypeTreferenceId[adim1-1]);
        myy10431_ia.ImpGIyy1TypeTcreateUserId[adim1-1] = FixedStringAttr.valueOf(w_ia.ImpGIyy1TypeTcreateUserId[adim1-1], (short)8);
        myy10431_ia.ImpGIyy1TypeTupdateUserId[adim1-1] = FixedStringAttr.valueOf(w_ia.ImpGIyy1TypeTupdateUserId[adim1-1], (short)8);
        myy10431_ia.ImpGIyy1TypeTkeyAttrText[adim1-1] = FixedStringAttr.valueOf(w_ia.ImpGIyy1TypeTkeyAttrText[adim1-1], (short)4);
        myy10431_ia.ImpGIyy1TypeTsearchAttrText[adim1-1] = FixedStringAttr.valueOf(w_ia.ImpGIyy1TypeTsearchAttrText[adim1-1], (short)
          20);
        myy10431_ia.ImpGIyy1TypeTotherAttrText[adim1-1] = FixedStringAttr.valueOf(w_ia.ImpGIyy1TypeTotherAttrText[adim1-1], (short)2)
          ;
        myy10431_ia.ImpGIyy1TypeTotherAttrDate[adim1-1] = DateAttr.valueOf(w_ia.ImpGIyy1TypeTotherAttrDate[adim1-1]);
        myy10431_ia.ImpGIyy1TypeTotherAttrTime[adim1-1] = TimeAttr.valueOf(w_ia.ImpGIyy1TypeTotherAttrTime[adim1-1]);
        myy10431_ia.ImpGIyy1TypeTotherAttrAmount[adim1-1] = BigDecimalAttr.valueOf(w_ia.ImpGIyy1TypeTotherAttrAmount[adim1-1]);
      }
      for(adim1 = w_ia.ImpGroup_MA + 1; adim1 <= 10; ++(adim1))
      {
        myy10431_ia.ImpGIyy1TypeTinstanceId[adim1-1] = "00000000000000000000";
        myy10431_ia.ImpGIyy1TypeTreferenceId[adim1-1] = "00000000000000000000";
        myy10431_ia.ImpGIyy1TypeTcreateUserId[adim1-1] = "        ";
        myy10431_ia.ImpGIyy1TypeTupdateUserId[adim1-1] = "        ";
        myy10431_ia.ImpGIyy1TypeTkeyAttrText[adim1-1] = "    ";
        myy10431_ia.ImpGIyy1TypeTsearchAttrText[adim1-1] = "                    ";
        myy10431_ia.ImpGIyy1TypeTotherAttrText[adim1-1] = "  ";
        myy10431_ia.ImpGIyy1TypeTotherAttrDate[adim1-1] = 00000000;
        myy10431_ia.ImpGIyy1TypeTotherAttrTime[adim1-1] = 00000000;
        myy10431_ia.ImpGIyy1TypeTotherAttrAmount[adim1-1] = BigDecimalAttr.getDefaultValue();
      }
      globdata.getErrorData().setErrorEncounteredSW( ErrorData.NO_ERROR_FOUND_SW );
      iefRuntimeParm2.useActionBlock("gen.ort.yyy.MYY10431", "MYY10431", myy10431_ia, myy10431_oa);
      if ( ((!(globdata.getErrorData().getStatus().equals( ErrorData.NONE_SF ))) || (globdata.getErrorData().getErrorEncounteredSW() 
        != ErrorData.NO_ERROR_FOUND_SW)) || (globdata.getErrorData().getViewOverflowSW() != ErrorData.NO_ERROR_FOUND_SW) )
      {
        throw new ABException();
      }
      globdata.getStateData().setCurrentABId( "0022020173" );
      globdata.getStateData().setCurrentABName( "IYY10431_XML_GROUP_CREATE_S" );
      globdata.getStateData().setLastStatementNumber( "0000000010" );
      w_oa.ExpErrorIyy1ComponentSeverityCode = FixedStringAttr.valueOf(myy10431_oa.ExpErrorIyy1ComponentSeverityCode, (short)1);
      w_oa.ExpErrorIyy1ComponentRollbackIndicator = FixedStringAttr.valueOf(myy10431_oa.ExpErrorIyy1ComponentRollbackIndicator, (
        short)1);
      w_oa.ExpErrorIyy1ComponentOriginServid = DoubleAttr.valueOf(myy10431_oa.ExpErrorIyy1ComponentOriginServid);
      w_oa.ExpErrorIyy1ComponentContextString = StringAttr.valueOf(myy10431_oa.ExpErrorIyy1ComponentContextString, (short)512);
      w_oa.ExpErrorIyy1ComponentReturnCode = IntAttr.valueOf(myy10431_oa.ExpErrorIyy1ComponentReturnCode);
      w_oa.ExpErrorIyy1ComponentReasonCode = IntAttr.valueOf(myy10431_oa.ExpErrorIyy1ComponentReasonCode);
      w_oa.ExpErrorIyy1ComponentChecksum = FixedStringAttr.valueOf(myy10431_oa.ExpErrorIyy1ComponentChecksum, (short)15);
      w_oa.ExpErrorCanamXmlXmlReturnCode = FixedStringAttr.valueOf(myy10431_oa.ExpErrorCanamXmlXmlReturnCode, (short)2);
      w_oa.ExpErrorCanamXmlXmlMessage = FixedStringAttr.valueOf(myy10431_oa.ExpErrorCanamXmlXmlMessage, (short)80);
      w_oa.ExpErrorCanamXmlXmlPosition = DoubleAttr.valueOf(myy10431_oa.ExpErrorCanamXmlXmlPosition);
      w_oa.ExpErrorCanamXmlXmlSource = FixedStringAttr.valueOf(myy10431_oa.ExpErrorCanamXmlXmlSource, (short)120);
      w_oa.ExpCanamXmlXmlBuffer = StringAttr.valueOf(myy10431_oa.ExpCanamXmlXmlBuffer, (short)4094);
      myy10431_ia.freeInstance();
      myy10431_ia = null;
      myy10431_oa.freeInstance();
      myy10431_oa = null;
    }
  }
  
  
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // SUBORDINATE FUNCTIONS
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // INITIALIZATION UTILITY FUNCTIONS 
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  
  public void f_22020173_init()
  	throws ABException
  {
    if ( nestingLevel < 2 )
    {
    }
    w_oa.ExpCanamXmlXmlBuffer = "";
    w_oa.ExpErrorCanamXmlXmlReturnCode = "  ";
    w_oa.ExpErrorCanamXmlXmlMessage = "                                                                                ";
    w_oa.ExpErrorCanamXmlXmlPosition = 0.0;
    w_oa.ExpErrorCanamXmlXmlSource = 
      "                                                                                                                        ";
    w_oa.ExpErrorIyy1ComponentSeverityCode = " ";
    w_oa.ExpErrorIyy1ComponentRollbackIndicator = " ";
    w_oa.ExpErrorIyy1ComponentOriginServid = 0.0;
    w_oa.ExpErrorIyy1ComponentContextString = "";
    w_oa.ExpErrorIyy1ComponentReturnCode = 0;
    w_oa.ExpErrorIyy1ComponentReasonCode = 0;
    w_oa.ExpErrorIyy1ComponentChecksum = "               ";
    for(ImpGroup_PS_001 = 1; ImpGroup_PS_001 <= 10; ++(ImpGroup_PS_001))
    {
    }
    ImpGroup_PS_001 = 1;
    ImpGroup_PS_002 = 1;
  }
  
  public void f_0_trace()
  	throws ABException
  {
    trace_ret_code = TIRTRCE.TIRTRCE(iefRuntimeParm1, iefRuntimeParm2, globdata, padtext, padview);
    if ( trace_ret_code == 20 )
    {
      throw new ABException();
    }
  }
  
  public void padview_init()
  {
padview[0] = PadView.getInstance("IMPORT                          ", 0, 0, 0, (short)1, PadView.VT_BASE, PadView.DT_NONE, w_ia, 
      "w_ia");
    padview[1] = PadView.getInstance("IMP_GROUP                       ", 0, 0, 10, (short)2, PadView.VT_GROUP, PadView.DT_NONE, w_ia,
       "ImpGroup_MA");
    padview[2] = PadView.getInstance("IMP_G                           ", 0, 0, 0, (short)3, PadView.VT_VIEW, PadView.DT_NONE, w_ia, 
      null);
    padview[3] = PadView.getInstance("IYY1_TYPE                       ", 0, 0, 0, (short)4, PadView.VT_ENTITY, PadView.DT_NONE, w_ia,
       null);
    padview[4] = PadView.getInstance("TINSTANCE_ID                    ", 20, 0, 0, (short)4, PadView.VT_PREDICATE, 
      PadView.DT_TIMESTAMP, w_ia, "ImpGIyy1TypeTinstanceId");
    padview[5] = PadView.getInstance("TREFERENCE_ID                   ", 20, 0, 0, (short)4, PadView.VT_PREDICATE, 
      PadView.DT_TIMESTAMP, w_ia, "ImpGIyy1TypeTreferenceId");
    padview[6] = PadView.getInstance("TCREATE_USER_ID                 ", 8, 0, 0, (short)4, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_ia, "ImpGIyy1TypeTcreateUserId");
    padview[7] = PadView.getInstance("TUPDATE_USER_ID                 ", 8, 0, 0, (short)4, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_ia, "ImpGIyy1TypeTupdateUserId");
    padview[8] = PadView.getInstance("TKEY_ATTR_TEXT                  ", 4, 0, 0, (short)4, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_ia, "ImpGIyy1TypeTkeyAttrText");
    padview[9] = PadView.getInstance("TSEARCH_ATTR_TEXT               ", 20, 0, 0, (short)4, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_ia, "ImpGIyy1TypeTsearchAttrText");
    padview[10] = PadView.getInstance("TOTHER_ATTR_TEXT                ", 2, 0, 0, (short)4, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_ia, "ImpGIyy1TypeTotherAttrText");
    padview[11] = PadView.getInstance("TOTHER_ATTR_DATE                ", 8, 0, 0, (short)4, PadView.VT_PREDICATE, PadView.DT_DATE, 
      w_ia, "ImpGIyy1TypeTotherAttrDate");
    padview[12] = PadView.getInstance("TOTHER_ATTR_TIME                ", 6, 0, 0, (short)4, PadView.VT_PREDICATE, PadView.DT_TIME, 
      w_ia, "ImpGIyy1TypeTotherAttrTime");
    padview[13] = PadView.getInstance("TOTHER_ATTR_AMOUNT              ", 17, 2, 0, (short)4, PadView.VT_PREDICATE, PadView.DT_FIXED,
       w_ia, "ImpGIyy1TypeTotherAttrAmount");
    padview[14] = PadView.getInstance("EXPORT                          ", 0, 0, 0, (short)1, PadView.VT_BASE, PadView.DT_NONE, w_oa, 
      "w_oa");
    padview[15] = PadView.getInstance("EXP                             ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_oa, 
      null);
    padview[16] = PadView.getInstance("CANAM_XML                       ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_oa, null);
    padview[17] = PadView.getInstance("XML_BUFFER                      ", 4094, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_VARCHAR, w_oa, "ExpCanamXmlXmlBuffer");
    padview[18] = PadView.getInstance("EXP_ERROR                       ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_oa, 
      null);
    padview[19] = PadView.getInstance("CANAM_XML                       ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_oa, null);
    padview[20] = PadView.getInstance("XML_RETURN_CODE                 ", 2, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_oa, "ExpErrorCanamXmlXmlReturnCode");
    padview[21] = PadView.getInstance("XML_MESSAGE                     ", 80, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_oa, "ExpErrorCanamXmlXmlMessage");
    padview[22] = PadView.getInstance("XML_POSITION                    ", 15, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_oa, "ExpErrorCanamXmlXmlPosition");
    padview[23] = PadView.getInstance("XML_SOURCE                      ", 120, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT,
       w_oa, "ExpErrorCanamXmlXmlSource");
    padview[24] = PadView.getInstance("EXP_ERROR                       ", 0, 0, 0, (short)2, PadView.VT_VIEW, PadView.DT_NONE, w_oa, 
      null);
    padview[25] = PadView.getInstance("IYY1_COMPONENT                  ", 0, 0, 0, (short)3, PadView.VT_ENTITY, PadView.DT_NONE, 
      w_oa, null);
    padview[26] = PadView.getInstance("SEVERITY_CODE                   ", 1, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_oa, "ExpErrorIyy1ComponentSeverityCode");
    padview[27] = PadView.getInstance("ROLLBACK_INDICATOR              ", 1, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_oa, "ExpErrorIyy1ComponentRollbackIndicator");
    padview[28] = PadView.getInstance("ORIGIN_SERVID                   ", 15, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_oa, "ExpErrorIyy1ComponentOriginServid");
    padview[29] = PadView.getInstance("CONTEXT_STRING                  ", 512, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_VARCHAR, w_oa, "ExpErrorIyy1ComponentContextString");
    padview[30] = PadView.getInstance("RETURN_CODE                     ", 5, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_oa, "ExpErrorIyy1ComponentReturnCode");
    padview[31] = PadView.getInstance("REASON_CODE                     ", 5, 0, 0, (short)3, PadView.VT_PREDICATE, 
      PadView.DT_NUMERIC, w_oa, "ExpErrorIyy1ComponentReasonCode");
    padview[32] = PadView.getInstance("CHECKSUM                        ", 15, 0, 0, (short)3, PadView.VT_PREDICATE, PadView.DT_TEXT, 
      w_oa, "ExpErrorIyy1ComponentChecksum");
    padview[33] = PadView.getInstance("******** BOTTOM OF DATA ********", 0, 0, 0, (short)0, PadView.VT_END, PadView.DT_NONE, w_oa, 
      null);
  }
}// end class


package gen.ort.yyy;
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
//
//                    Source Code Generated by
//                           CA Gen 8.6
//
//    Copyright (c) 2023 CA Technologies. All rights reserved.
//
//    Name: IYY10431_IA                      Date: 2023/07/05
//    User: HakanBal                         Time: 15:10:01
//
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// Import Statements
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
import java.lang.*;
import java.io.*;
import java.util.*;
import java.math.*;
import java.sql.*;
import com.ca.gen.vwrt.*;
import com.ca.gen.vwrt.types.*;
import com.ca.gen.vwrt.vdf.*;
import com.ca.gen.csu.exception.*;

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// START OF IMPORT VIEW
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
/**
 * Internal data view storage for: IYY10431_IA
 **/
public class IYY10431_IA extends ViewBase implements IImportView, Serializable
{
  // Repeating GV:  IMP_GROUP
  //     Repeats: 10 times
  /**
   * Repeating group view count
   **/
  public int ImpGroup_MA;
  /**
   * Repeating group view occurrance array
   **/
  public char ImpGroup_AC[] = new char[10];
  // Entity View: IMP_G
  //        Type: IYY1_TYPE
  /**
   * Attribute missing flag for: ImpGIyy1TypeTinstanceId
   **/
  public char ImpGIyy1TypeTinstanceId_AS[] = new char[10];
  /**
   * Attribute for: ImpGIyy1TypeTinstanceId
   * Domain: Timestamp
   * Length: 20
   **/
  public String ImpGIyy1TypeTinstanceId[] = new String[10];
  /**
   * Attribute missing flag for: ImpGIyy1TypeTreferenceId
   **/
  public char ImpGIyy1TypeTreferenceId_AS[] = new char[10];
  /**
   * Attribute for: ImpGIyy1TypeTreferenceId
   * Domain: Timestamp
   * Length: 20
   **/
  public String ImpGIyy1TypeTreferenceId[] = new String[10];
  /**
   * Attribute missing flag for: ImpGIyy1TypeTcreateUserId
   **/
  public char ImpGIyy1TypeTcreateUserId_AS[] = new char[10];
  /**
   * Attribute for: ImpGIyy1TypeTcreateUserId
   * Domain: Text
   * Length: 8
   * Varying Length: N
   **/
  public String ImpGIyy1TypeTcreateUserId[] = new String[10];
  /**
   * Attribute missing flag for: ImpGIyy1TypeTupdateUserId
   **/
  public char ImpGIyy1TypeTupdateUserId_AS[] = new char[10];
  /**
   * Attribute for: ImpGIyy1TypeTupdateUserId
   * Domain: Text
   * Length: 8
   * Varying Length: N
   **/
  public String ImpGIyy1TypeTupdateUserId[] = new String[10];
  /**
   * Attribute missing flag for: ImpGIyy1TypeTkeyAttrText
   **/
  public char ImpGIyy1TypeTkeyAttrText_AS[] = new char[10];
  /**
   * Attribute for: ImpGIyy1TypeTkeyAttrText
   * Domain: Text
   * Length: 4
   * Varying Length: N
   **/
  public String ImpGIyy1TypeTkeyAttrText[] = new String[10];
  /**
   * Attribute missing flag for: ImpGIyy1TypeTsearchAttrText
   **/
  public char ImpGIyy1TypeTsearchAttrText_AS[] = new char[10];
  /**
   * Attribute for: ImpGIyy1TypeTsearchAttrText
   * Domain: Text
   * Length: 20
   * Varying Length: N
   **/
  public String ImpGIyy1TypeTsearchAttrText[] = new String[10];
  /**
   * Attribute missing flag for: ImpGIyy1TypeTotherAttrText
   **/
  public char ImpGIyy1TypeTotherAttrText_AS[] = new char[10];
  /**
   * Attribute for: ImpGIyy1TypeTotherAttrText
   * Domain: Text
   * Length: 2
   * Varying Length: N
   **/
  public String ImpGIyy1TypeTotherAttrText[] = new String[10];
  /**
   * Attribute missing flag for: ImpGIyy1TypeTotherAttrDate
   **/
  public char ImpGIyy1TypeTotherAttrDate_AS[] = new char[10];
  /**
   * Attribute for: ImpGIyy1TypeTotherAttrDate
   * Domain: Date
   * Length: 8
   **/
  public int ImpGIyy1TypeTotherAttrDate[] = new int[10];
  /**
   * Attribute missing flag for: ImpGIyy1TypeTotherAttrTime
   **/
  public char ImpGIyy1TypeTotherAttrTime_AS[] = new char[10];
  /**
   * Attribute for: ImpGIyy1TypeTotherAttrTime
   * Domain: Time
   * Length: 6
   **/
  public int ImpGIyy1TypeTotherAttrTime[] = new int[10];
  /**
   * Attribute missing flag for: ImpGIyy1TypeTotherAttrAmount
   **/
  public char ImpGIyy1TypeTotherAttrAmount_AS[] = new char[10];
  /**
   * Attribute for: ImpGIyy1TypeTotherAttrAmount
   * Domain: Number
   * Length: 17
   * Decimal Places: 2
   * Decimal Precision: Y
   **/
  public BigDecimal ImpGIyy1TypeTotherAttrAmount[] = new BigDecimal[10];
  /**
   * Default Constructor
   **/
  
  public IYY10431_IA()
  {
    reset();
  }
  /**
   * Copy Constructor
   **/
  
  public IYY10431_IA(IYY10431_IA orig)
  {
    copyFrom(orig);
  }
  /**
   * Static instance creator function
   **/
  
  public static IYY10431_IA getInstance()
  {
    return new IYY10431_IA();
  }
  /**
   * Static free instance method
   **/
  
  public void freeInstance()
  {
  }
  /**
   * clone constructor
   **/
  
  @Override public Object clone()
  	throws CloneNotSupportedException
  {
    return(new IYY10431_IA(this));
  }
  /**
   * Resets all properties to the defaults.
   **/
  
  public void reset()
  {
    ImpGroup_MA = 0;
    for(int a = 0; a < 10; a++)
    {
      ImpGroup_AC[a] = ' ';
      ImpGIyy1TypeTinstanceId_AS[a] = ' ';
      ImpGIyy1TypeTinstanceId[a] = "00000000000000000000";
      ImpGIyy1TypeTreferenceId_AS[a] = ' ';
      ImpGIyy1TypeTreferenceId[a] = "00000000000000000000";
      ImpGIyy1TypeTcreateUserId_AS[a] = ' ';
      ImpGIyy1TypeTcreateUserId[a] = "        ";
      ImpGIyy1TypeTupdateUserId_AS[a] = ' ';
      ImpGIyy1TypeTupdateUserId[a] = "        ";
      ImpGIyy1TypeTkeyAttrText_AS[a] = ' ';
      ImpGIyy1TypeTkeyAttrText[a] = "    ";
      ImpGIyy1TypeTsearchAttrText_AS[a] = ' ';
      ImpGIyy1TypeTsearchAttrText[a] = "                    ";
      ImpGIyy1TypeTotherAttrText_AS[a] = ' ';
      ImpGIyy1TypeTotherAttrText[a] = "  ";
      ImpGIyy1TypeTotherAttrDate_AS[a] = ' ';
      ImpGIyy1TypeTotherAttrDate[a] = 00000000;
      ImpGIyy1TypeTotherAttrTime_AS[a] = ' ';
      ImpGIyy1TypeTotherAttrTime[a] = 00000000;
      ImpGIyy1TypeTotherAttrAmount_AS[a] = ' ';
      ImpGIyy1TypeTotherAttrAmount[a] = BigDecimalAttr.getDefaultValue();
    }
  }
  /**
   * Gets the VDF version of the current state of the instance.
   **/
  public VDF getVDF()
  {
    throw new RuntimeException("can only execute getVDF for a Procedure Step.");
  }
  
  /**
   * Sets the current state of the instance to the VDF version.
   **/
  public void setFromVDF(VDF vdf)
  {
    throw new RuntimeException("can only execute setFromVDF for a Procedure Step.");
  }
  
  /**
   * Sets the current instance based on the passed view.
   **/
  public void copyFrom(IImportView orig)
  {
    this.copyFrom((IYY10431_IA) orig);
  }
  
  /**
   * Sets the current instance based on the passed view.
   **/
  public void copyFrom(IYY10431_IA orig)
  {
    ImpGroup_MA = orig.ImpGroup_MA;
    for(int a = 0; a < 10; a++)
    {
      ImpGroup_AC[a] = orig.ImpGroup_AC[a];
      ImpGIyy1TypeTinstanceId_AS[a] = orig.ImpGIyy1TypeTinstanceId_AS[a];
      ImpGIyy1TypeTinstanceId[a] = orig.ImpGIyy1TypeTinstanceId[a];
      ImpGIyy1TypeTreferenceId_AS[a] = orig.ImpGIyy1TypeTreferenceId_AS[a];
      ImpGIyy1TypeTreferenceId[a] = orig.ImpGIyy1TypeTreferenceId[a];
      ImpGIyy1TypeTcreateUserId_AS[a] = orig.ImpGIyy1TypeTcreateUserId_AS[a];
      ImpGIyy1TypeTcreateUserId[a] = orig.ImpGIyy1TypeTcreateUserId[a];
      ImpGIyy1TypeTupdateUserId_AS[a] = orig.ImpGIyy1TypeTupdateUserId_AS[a];
      ImpGIyy1TypeTupdateUserId[a] = orig.ImpGIyy1TypeTupdateUserId[a];
      ImpGIyy1TypeTkeyAttrText_AS[a] = orig.ImpGIyy1TypeTkeyAttrText_AS[a];
      ImpGIyy1TypeTkeyAttrText[a] = orig.ImpGIyy1TypeTkeyAttrText[a];
      ImpGIyy1TypeTsearchAttrText_AS[a] = orig.ImpGIyy1TypeTsearchAttrText_AS[a];
      ImpGIyy1TypeTsearchAttrText[a] = orig.ImpGIyy1TypeTsearchAttrText[a];
      ImpGIyy1TypeTotherAttrText_AS[a] = orig.ImpGIyy1TypeTotherAttrText_AS[a];
      ImpGIyy1TypeTotherAttrText[a] = orig.ImpGIyy1TypeTotherAttrText[a];
      ImpGIyy1TypeTotherAttrDate_AS[a] = orig.ImpGIyy1TypeTotherAttrDate_AS[a];
      ImpGIyy1TypeTotherAttrDate[a] = orig.ImpGIyy1TypeTotherAttrDate[a];
      ImpGIyy1TypeTotherAttrTime_AS[a] = orig.ImpGIyy1TypeTotherAttrTime_AS[a];
      ImpGIyy1TypeTotherAttrTime[a] = orig.ImpGIyy1TypeTotherAttrTime[a];
      ImpGIyy1TypeTotherAttrAmount_AS[a] = orig.ImpGIyy1TypeTotherAttrAmount_AS[a];
      ImpGIyy1TypeTotherAttrAmount[a] = orig.ImpGIyy1TypeTotherAttrAmount[a];
    }
  }
}

package gen.ort.yyy;
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
//
//                    Source Code Generated by
//                           CA Gen 8.6
//
//    Copyright (c) 2023 CA Technologies. All rights reserved.
//
//    Name: IYY10431_OA                      Date: 2023/07/05
//    User: HakanBal                         Time: 15:10:01
//
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// Import Statements
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
import java.lang.*;
import java.io.*;
import java.util.*;
import java.math.*;
import java.sql.*;
import com.ca.gen.vwrt.*;
import com.ca.gen.vwrt.types.*;
import com.ca.gen.vwrt.vdf.*;
import com.ca.gen.csu.exception.*;

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// START OF EXPORT VIEW
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
/**
 * Internal data view storage for: IYY10431_OA
 **/
public class IYY10431_OA extends ViewBase implements IExportView, Serializable
{
  // Entity View: EXP
  //        Type: CANAM_XML
  /**
   * Attribute missing flag for: ExpCanamXmlXmlBuffer
   **/
  public char ExpCanamXmlXmlBuffer_AS;
  /**
   * Attribute for: ExpCanamXmlXmlBuffer
   * Domain: Text
   * Length: 4094
   * Varying Length: Y
   **/
  public String ExpCanamXmlXmlBuffer;
  // Entity View: EXP_ERROR
  //        Type: CANAM_XML
  /**
   * Attribute missing flag for: ExpErrorCanamXmlXmlReturnCode
   **/
  public char ExpErrorCanamXmlXmlReturnCode_AS;
  /**
   * Attribute for: ExpErrorCanamXmlXmlReturnCode
   * Domain: Text
   * Length: 2
   * Varying Length: N
   **/
  public String ExpErrorCanamXmlXmlReturnCode;
  /**
   * Attribute missing flag for: ExpErrorCanamXmlXmlMessage
   **/
  public char ExpErrorCanamXmlXmlMessage_AS;
  /**
   * Attribute for: ExpErrorCanamXmlXmlMessage
   * Domain: Text
   * Length: 80
   * Varying Length: N
   **/
  public String ExpErrorCanamXmlXmlMessage;
  /**
   * Attribute missing flag for: ExpErrorCanamXmlXmlPosition
   **/
  public char ExpErrorCanamXmlXmlPosition_AS;
  /**
   * Attribute for: ExpErrorCanamXmlXmlPosition
   * Domain: Number
   * Length: 15
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public double ExpErrorCanamXmlXmlPosition;
  /**
   * Attribute missing flag for: ExpErrorCanamXmlXmlSource
   **/
  public char ExpErrorCanamXmlXmlSource_AS;
  /**
   * Attribute for: ExpErrorCanamXmlXmlSource
   * Domain: Text
   * Length: 120
   * Varying Length: N
   **/
  public String ExpErrorCanamXmlXmlSource;
  // Entity View: EXP_ERROR
  //        Type: IYY1_COMPONENT
  /**
   * Attribute missing flag for: ExpErrorIyy1ComponentSeverityCode
   **/
  public char ExpErrorIyy1ComponentSeverityCode_AS;
  /**
   * Attribute for: ExpErrorIyy1ComponentSeverityCode
   * Domain: Text
   * Length: 1
   * Varying Length: N
   **/
  public String ExpErrorIyy1ComponentSeverityCode;
  /**
   * Attribute missing flag for: ExpErrorIyy1ComponentRollbackIndicator
   **/
  public char ExpErrorIyy1ComponentRollbackIndicator_AS;
  /**
   * Attribute for: ExpErrorIyy1ComponentRollbackIndicator
   * Domain: Text
   * Length: 1
   * Varying Length: N
   **/
  public String ExpErrorIyy1ComponentRollbackIndicator;
  /**
   * Attribute missing flag for: ExpErrorIyy1ComponentOriginServid
   **/
  public char ExpErrorIyy1ComponentOriginServid_AS;
  /**
   * Attribute for: ExpErrorIyy1ComponentOriginServid
   * Domain: Number
   * Length: 15
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public double ExpErrorIyy1ComponentOriginServid;
  /**
   * Attribute missing flag for: ExpErrorIyy1ComponentContextString
   **/
  public char ExpErrorIyy1ComponentContextString_AS;
  /**
   * Attribute for: ExpErrorIyy1ComponentContextString
   * Domain: Text
   * Length: 512
   * Varying Length: Y
   **/
  public String ExpErrorIyy1ComponentContextString;
  /**
   * Attribute missing flag for: ExpErrorIyy1ComponentReturnCode
   **/
  public char ExpErrorIyy1ComponentReturnCode_AS;
  /**
   * Attribute for: ExpErrorIyy1ComponentReturnCode
   * Domain: Number
   * Length: 5
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public int ExpErrorIyy1ComponentReturnCode;
  /**
   * Attribute missing flag for: ExpErrorIyy1ComponentReasonCode
   **/
  public char ExpErrorIyy1ComponentReasonCode_AS;
  /**
   * Attribute for: ExpErrorIyy1ComponentReasonCode
   * Domain: Number
   * Length: 5
   * Decimal Places: 0
   * Decimal Precision: N
   **/
  public int ExpErrorIyy1ComponentReasonCode;
  /**
   * Attribute missing flag for: ExpErrorIyy1ComponentChecksum
   **/
  public char ExpErrorIyy1ComponentChecksum_AS;
  /**
   * Attribute for: ExpErrorIyy1ComponentChecksum
   * Domain: Text
   * Length: 15
   * Varying Length: N
   **/
  public String ExpErrorIyy1ComponentChecksum;
  /**
   * Default Constructor
   **/
  
  public IYY10431_OA()
  {
    reset();
  }
  /**
   * Copy Constructor
   **/
  
  public IYY10431_OA(IYY10431_OA orig)
  {
    copyFrom(orig);
  }
  /**
   * Static instance creator function
   **/
  
  public static IYY10431_OA getInstance()
  {
    return new IYY10431_OA();
  }
  /**
   * Static free instance method
   **/
  
  public void freeInstance()
  {
  }
  /**
   * clone constructor
   **/
  
  @Override public Object clone()
  	throws CloneNotSupportedException
  {
    return(new IYY10431_OA(this));
  }
  /**
   * Resets all properties to the defaults.
   **/
  
  public void reset()
  {
    ExpCanamXmlXmlBuffer_AS = ' ';
    ExpCanamXmlXmlBuffer = "";
    ExpErrorCanamXmlXmlReturnCode_AS = ' ';
    ExpErrorCanamXmlXmlReturnCode = "  ";
    ExpErrorCanamXmlXmlMessage_AS = ' ';
    ExpErrorCanamXmlXmlMessage = "                                                                                ";
    ExpErrorCanamXmlXmlPosition_AS = ' ';
    ExpErrorCanamXmlXmlPosition = 0.0;
    ExpErrorCanamXmlXmlSource_AS = ' ';
    ExpErrorCanamXmlXmlSource = 
      "                                                                                                                        ";
    ExpErrorIyy1ComponentSeverityCode_AS = ' ';
    ExpErrorIyy1ComponentSeverityCode = " ";
    ExpErrorIyy1ComponentRollbackIndicator_AS = ' ';
    ExpErrorIyy1ComponentRollbackIndicator = " ";
    ExpErrorIyy1ComponentOriginServid_AS = ' ';
    ExpErrorIyy1ComponentOriginServid = 0.0;
    ExpErrorIyy1ComponentContextString_AS = ' ';
    ExpErrorIyy1ComponentContextString = "";
    ExpErrorIyy1ComponentReturnCode_AS = ' ';
    ExpErrorIyy1ComponentReturnCode = 0;
    ExpErrorIyy1ComponentReasonCode_AS = ' ';
    ExpErrorIyy1ComponentReasonCode = 0;
    ExpErrorIyy1ComponentChecksum_AS = ' ';
    ExpErrorIyy1ComponentChecksum = "               ";
  }
  /**
   * Sets the current state of the instance to the VDF version.
   **/
  public void setFromVDF(VDF vdf)
  {
    throw new RuntimeException("can only execute setFromVDF for a Procedure Step.");
  }
  
  /**
   * Gets the VDF version of the current state of the instance.
   **/
  public VDF getVDF()
  {
    throw new RuntimeException("can only execute getVDF for a Procedure Step.");
  }
  
  /**
   * Sets the current instance based on the passed view.
   **/
  public void copyFrom(IExportView orig)
  {
    this.copyFrom((IYY10431_OA) orig);
  }
  
  /**
   * Sets the current instance based on the passed view.
   **/
  public void copyFrom(IYY10431_OA orig)
  {
    ExpCanamXmlXmlBuffer_AS = orig.ExpCanamXmlXmlBuffer_AS;
    ExpCanamXmlXmlBuffer = orig.ExpCanamXmlXmlBuffer;
    ExpErrorCanamXmlXmlReturnCode_AS = orig.ExpErrorCanamXmlXmlReturnCode_AS;
    ExpErrorCanamXmlXmlReturnCode = orig.ExpErrorCanamXmlXmlReturnCode;
    ExpErrorCanamXmlXmlMessage_AS = orig.ExpErrorCanamXmlXmlMessage_AS;
    ExpErrorCanamXmlXmlMessage = orig.ExpErrorCanamXmlXmlMessage;
    ExpErrorCanamXmlXmlPosition_AS = orig.ExpErrorCanamXmlXmlPosition_AS;
    ExpErrorCanamXmlXmlPosition = orig.ExpErrorCanamXmlXmlPosition;
    ExpErrorCanamXmlXmlSource_AS = orig.ExpErrorCanamXmlXmlSource_AS;
    ExpErrorCanamXmlXmlSource = orig.ExpErrorCanamXmlXmlSource;
    ExpErrorIyy1ComponentSeverityCode_AS = orig.ExpErrorIyy1ComponentSeverityCode_AS;
    ExpErrorIyy1ComponentSeverityCode = orig.ExpErrorIyy1ComponentSeverityCode;
    ExpErrorIyy1ComponentRollbackIndicator_AS = orig.ExpErrorIyy1ComponentRollbackIndicator_AS;
    ExpErrorIyy1ComponentRollbackIndicator = orig.ExpErrorIyy1ComponentRollbackIndicator;
    ExpErrorIyy1ComponentOriginServid_AS = orig.ExpErrorIyy1ComponentOriginServid_AS;
    ExpErrorIyy1ComponentOriginServid = orig.ExpErrorIyy1ComponentOriginServid;
    ExpErrorIyy1ComponentContextString_AS = orig.ExpErrorIyy1ComponentContextString_AS;
    ExpErrorIyy1ComponentContextString = orig.ExpErrorIyy1ComponentContextString;
    ExpErrorIyy1ComponentReturnCode_AS = orig.ExpErrorIyy1ComponentReturnCode_AS;
    ExpErrorIyy1ComponentReturnCode = orig.ExpErrorIyy1ComponentReturnCode;
    ExpErrorIyy1ComponentReasonCode_AS = orig.ExpErrorIyy1ComponentReasonCode_AS;
    ExpErrorIyy1ComponentReasonCode = orig.ExpErrorIyy1ComponentReasonCode;
    ExpErrorIyy1ComponentChecksum_AS = orig.ExpErrorIyy1ComponentChecksum_AS;
    ExpErrorIyy1ComponentChecksum = orig.ExpErrorIyy1ComponentChecksum;
  }
}
