namespace GEN.ORT.YYY
{
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  //
  //                    Source Code Generated by
  //                           CA Gen 8.6
  //
  //    Copyright (c) 2024 CA Technologies. All rights reserved.
  //
  //    Name: IYY1Q911_TYPE_MAINTAIN_SVC       Date: 2024/01/09
  //    Target OS:   CLR                       Time: 13:41:39
  //    Target DBMS: ODBC/ADO.NET              User: AliAl
  //    Access Method: <NONE>         
  //
  //    Generation options:
  //    Debug trace option not selected
  //    Data modeling constraint enforcement not selected
  //    Optimized import view initialization not selected
  //    Enforce default values with DBMS not selected
  //    Init unspecified optional fields to NULL not selected
  //
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // using Statements
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  using System;
  using com.ca.gen.vwrt;
  using com.ca.gen.vwrt.types;
  using com.ca.gen.vwrt.vdf;
  using com.ca.gen.csu.exception;
  
  using com.ca.gen.abrt;
  using com.ca.gen.abrt.functions;
  using com.ca.gen.abrt.cascade;
  using com.ca.gen.abrt.manager;
  using com.ca.gen.abrt.trace;
  using com.ca.gen.exits.common;
  using com.ca.gen.odc;
  using System.Data;
  using System.Collections;
  
  public class IYY1Q911 : ABBase
  {
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // IMPORT VIEW CLASS VARIABLE
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    IYY1Q911_IA WIa;
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // EXPORT VIEW CLASS VARIABLE
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    IYY1Q911_OA WOa;
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // LOCAL VIEW CLASS VARIABLE
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    IYY1Q911_LA WLa;
    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // ACTION BLOCK IMPORT/EXPORT VIEWS CLASS VARIABLES
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    GEN.ORT.YYY.CYYY9721_OA Cyyy9721Oa;
    GEN.ORT.YYY.CYYY9141_IA Cyyy9141Ia;
    GEN.ORT.YYY.CYYY9141_OA Cyyy9141Oa;
    GEN.ORT.YYY.IYY10351_IA Iyy10351Ia;
    GEN.ORT.YYY.IYY10351_OA Iyy10351Oa;
    GEN.ORT.YYY.CYYY9741_IA Cyyy9741Ia;
    GEN.ORT.YYY.CYYY9741_OA Cyyy9741Oa;
    GEN.ORT.YYY.IYY10311_IA Iyy10311Ia;
    GEN.ORT.YYY.IYY10311_OA Iyy10311Oa;
    GEN.ORT.YYY.IYY10321_IA Iyy10321Ia;
    GEN.ORT.YYY.IYY10321_OA Iyy10321Oa;
    GEN.ORT.YYY.IYY10331_IA Iyy10331Ia;
    GEN.ORT.YYY.IYY10331_OA Iyy10331Oa;
    GEN.ORT.YYY.IYY10341_IA Iyy10341Ia;
    GEN.ORT.YYY.IYY10341_OA Iyy10341Oa;
    // Data View Group: NUMTEXT_OA
    // Entity View: EXPORT
    //        Type: NUMTEXT
    DoubleAttr NumtextOa_ExportNumtextNumber_FP_248 = DoubleAttr.GetInstance();
    // Data View Group: NUMTEXT_IA
    // Entity View: IMPORT
    //        Type: NUMTEXT
    StringAttr NumtextIa_ImportNumtextString_FP_249 = StringAttr.GetInstance();
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // REPEATING GROUP VIEW STATUS FIELDS 
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    bool ExpGroupList_FL_001;
    int ExpGroupList_PS_001;
    bool ExpGroupList_RF_001;
    public const int ExpGroupList_MM_001 = 48;
    bool LocGroupContext_FL_002;
    int LocGroupContext_PS_002;
    bool LocGroupContext_RF_002;
    public const int LocGroupContext_MM_002 = 9;
    bool ImpGroupContext_FL_003;
    int ImpGroupContext_PS_003;
    bool ImpGroupContext_RF_003;
    public const int ImpGroupContext_MM_003 = 9;
    bool ExpGroupList_FL_004;
    int ExpGroupList_PS_004;
    bool ExpGroupList_RF_004;
    public const int ExpGroupList_MM_004 = 48;
    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // MISC DECLARATIONS AND PROTOTYPES 
    //    FOLLOW AS NEEDED:             
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    bool func_0022020222_esc_flag;
    bool func_0020972450_esc_flag;
    bool func_0020972837_esc_flag;
    bool func_0020972838_esc_flag;
    bool func_0020972840_esc_flag;
    bool func_0020972841_esc_flag;
    bool func_0020972843_esc_flag;
    bool func_0020973023_esc_flag;
    //       +->   IYY1Q911_TYPE_MAINTAIN_SVC        01/09/2024  13:41
    //       !       IMPORTS:
    //       !         Entity View imp iyy1_type (Transient, Optional, Import
    //       !                     only)
    //       !           tinstance_id
    //       !           treference_id
    //       !           tkey_attr_text
    //       !           tsearch_attr_text
    //       !           tother_attr_text
    //       !           tother_attr_date
    //       !           tother_attr_time
    //       !           tother_attr_amount
    //       !         Work View imp_filter iyy1_list (Transient, Optional,
    //       !                     Import only)
    //       !           sort_option
    //       !           scroll_type
    //       !           list_direction
    //       !           scroll_amount
    //       !           order_by_field_num
    //       !         Entity View imp_from iyy1_type (Transient, Optional,
    //       !                     Import only)
    //       !           tinstance_id
    //       !           tkey_attr_text
    //       !           tsearch_attr_text
    //       !         Entity View imp_filter_start iyy1_type (Transient,
    //       !                     Optional, Import only)
    //       !           tkey_attr_text
    //       !         Entity View imp_filter_stop iyy1_type (Transient,
    //       !                     Optional, Import only)
    //       !           tkey_attr_text
    //       !         Entity View imp_filter iyy1_type (Transient, Optional,
    //       !                     Import only)
    //       !           tsearch_attr_text
    //       !           tother_attr_text
    //       !       EXPORTS:
    //       !         Work View exp_reference iyy1_server_data (Transient,
    //       !                     Export only)
    //       !           server_date
    //       !           server_time
    //       !           reference_id
    //       !         Entity View exp iyy1_type (Transient, Export only)
    //       !           tinstance_id
    //       !           treference_id
    //       !           tcreate_user_id
    //       !           tupdate_user_id
    //       !           tkey_attr_text
    //       !           tsearch_attr_text
    //       !           tother_attr_text
    //       !           tother_attr_date
    //       !           tother_attr_time
    //       !           tother_attr_amount
    //       !         Entity View exp_ts iyy1_type (Transient, Export only)
    //       !           tinstance_id
    //       !           treference_id
    //       !         Group View (48) exp_group_list
    //       !           Entity View exp_g_list iyy1_type (Transient, Export
    //       !                       only)
    //       !             tinstance_id
    //       !             treference_id
    //       !             tcreate_user_id
    //       !             tupdate_user_id
    //       !             tkey_attr_text
    //       !             tsearch_attr_text
    //       !             tother_attr_text
    //       !             tother_attr_date
    //       !             tother_attr_time
    //       !             tother_attr_amount
    //       !         Work View exp_msg iyy1_component (Transient, Export
    //       !                     only)
    //       !           severity_code
    //       !           message_tx
    //       !         Work View exp_error iyy1_component (Transient, Export
    //       !                     only)
    //       !           severity_code
    //       !           rollback_indicator
    //       !           origin_servid
    //       !           context_string
    //       !           return_code
    //       !           reason_code
    //       !           checksum
    //       !           dialect_cd
    //       !       LOCALS:
    //       !         Work View loc_number dont_change_number
    //       !           num_15
    //       !         Work View loc_text dont_change_text
    //       !           text_17
    //       !         Work View loc_reference iyy1_server_data
    //       !           userid
    //       !           server_date
    //       !           server_time
    //       !           reference_id
    //       !           server_timestamp
    //       !         Group View (9) loc_group_context
    //       !           Work View loc_g_context dont_change_text
    //       !             text_150
    //       !         Work View loc_error iyy1_component
    //       !           severity_code
    //       !           rollback_indicator
    //       !           origin_servid
    //       !           context_string
    //       !           return_code
    //       !           reason_code
    //       !           checksum
    //       !         Work View loc_context iyy1_component
    //       !           context_string
    //       !         Work View loc dont_change_return_codes
    //       !           1_ok
    //       !           n1120_invalid_command
    //       !         Work View loc dont_change_reason_codes
    //       !           1_default
    //       !
    //       !     PROCEDURE STATEMENTS
    //       !
    //     1 !  NOTE: 
    //     1 !  PURPOSE(CONTINUED)
    //     2 !   
    //     3 !  NOTE: 
    //     3 !  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    //     3 !  !!!!!!!!!!!!
    //     3 !  Check out the Pre-Post Conditions and Return/Reason Codes.
    //     3 !  
    //     4 !  NOTE: 
    //     4 !  PRE-CONDITION:
    //     4 !  READ command, key fields are given.
    //     4 !  POST-CONDITION:
    //     4 !  The record is read, EXP_ALL and EXP_TS are produced.
    //     4 !  RETURN CODE = 1, REASON CODE = 1
    //     4 !  
    //     5 !  NOTE: 
    //     5 !  PRE-CONDITION:
    //     5 !  UPDATE command, all fields are given.
    //     5 !  POST-CONDITION:
    //     5 !  The record is read and changed, EXP_TS is produced.
    //     5 !  RETURN CODE = 1, REASON CODE = 1
    //     6 !   
    //     7 !  NOTE: 
    //     7 !  PRE-CONDITION:
    //     7 !  DELETE command, key fields and the latest update time is given.
    //     7 !  POST-CONDITION:
    //     7 !  The record is read and deleted.
    //     7 !  RETURN CODE = 1, REASON CODE = 1
    //     8 !   
    //     9 !  NOTE: 
    //     9 !  PRE-CONDITION:
    //     9 !  CREATE command and all the fields are given.
    //     9 !  POST-CONDITION:
    //     9 !  The record is created, EXP_TS is produced.
    //     9 !  RETURN CODE = 1, REASON CODE = 1
    //    10 !   
    //    11 !  NOTE: 
    //    11 !  PRE-CONDITION:
    //    11 !  A command that is different than the ones above is given.
    //    11 !  POST-CONDITION:
    //    11 !  No result can be produced.
    //    11 !  RETURN CODE = -1120, REASON CODE = 1
    //    11 !  
    //    12 !  NOTE: 
    //    12 !  RETURN / REASON  CODES
    //    12 !  +1/1 Normal
    //    12 !  -1120/1 False command
    //    13 !   
    //    14 !  NOTE: 
    //    14 !  RELEASE HISTORY
    //    14 !  01_00 16-09-2005 New release
    //    15 !   
    //    16 !  NOTE: 
    //    16 !  **************************************************************
    //    16 !  Return/Reason code values
    //    16 !  
    //    17 !  NOTE: 
    //    17 !  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    //    17 !  Set the used return code/reason code values
    //    17 !  
    //    17 !  
    //    18 *  SET loc_text dont_change_text text_17 TO "-123,45" 
    //    19 *  SET loc_number dont_change_number num_15 TO numtext(loc_text
    //    19 *              dont_change_text text_17) 
    //    20 !   
    //    21 !  SET loc dont_change_return_codes 1_ok TO 1 
    //    22 !  SET loc dont_change_return_codes n1120_invalid_command TO
    //    22 !              -1120 
    //    23 !   
    //    24 !  SET loc dont_change_reason_codes 1_default TO 1 
    //    25 !   
    //    26 !  NOTE: 
    //    26 !  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    //    26 !  Set the name of the procedure below
    //    26 !  
    //    27 !  SET SUBSCRIPT OF loc_group_context TO 1 
    //    28 !  SET loc_g_context dont_change_text text_150 TO "CYY1Q011" 
    //    29 !  SET SUBSCRIPT OF loc_group_context TO 2 
    //    30 !  SET loc_g_context dont_change_text text_150 TO COMMAND 
    //    31 !   
    //    32 !  NOTE: 
    //    32 !  **************************************************************
    //    32 !  **
    //    32 !  WARNING! There will not be codification for authorization
    //    32 !  control in Service Servers.
    //    32 !  
    //    33 !  USE cyyy9721_service_init
    //    33 !     WHICH EXPORTS: Work View exp_error iyy1_component FROM Work
    //    33 !              View exp_error iyy1_component
    //    33 !                    Work View loc_reference iyy1_server_data
    //    33 !              FROM Work View exp_reference iyy1_server_data
    //    34 !   
    //    35 !  NOTE: 
    //    35 !  ****************************************************************
    //    35 !  Everything' s OK. Nothing left to be controlled.
    //    36 !  +->IF exp_error iyy1_component return_code = loc
    //    36 !  !        dont_change_return_codes 1_ok
    //    37 !  !   
    //    38 !  !  SET loc_reference iyy1_server_data userid TO CLIENT_USER_ID
    //    39 !  !   
    //    40 !  !  NOTE: 
    //    40 ...**************************************************************
    //    40 ...**
    //    40 ...Whether there' s a mistake or not, let' s build a Context
    //    40 ...string.
    //    40 ...There' s a message to be returned in error-free condition.
    //    40 ...
    //    40 ...
    //    41 !  !  USE cyyy9141_context_string_set
    //    41 !  !     WHICH IMPORTS: Group View  loc_group_context TO Group
    //    41 !  !              View imp_group_context
    //    41 !  !     WHICH EXPORTS: Work View loc_error iyy1_component FROM
    //    41 !  !              Work View exp_error iyy1_component
    //    41 !  !                    Work View loc_context iyy1_component FROM
    //    41 !  !              Work View exp_context iyy1_component
    //    42 !  !  +->IF loc_error iyy1_component return_code < loc
    //    42 !  !  !        dont_change_return_codes 1_ok
    //    43 !  !  !  MOVE loc_error iyy1_component TO exp_error
    //    43 !  !  !              iyy1_component
    //    42 !  !  +> ELSE
    //    44 !  !  !  SET exp_error iyy1_component context_string TO
    //    44 !  !  !              loc_context iyy1_component context_string 
    //    42 !  !  +--
    //    45 !  !   
    //    46 !  !  NOTE: 
    //    46 ...**************************************************************
    //    46 ...**
    //    46 ...
    //    46 ...WARNING! If Service Server exports a single method, Case Of
    //    46 ...Command should not be used.
    //    46 ...
    //    47 !  !  NOTE: 
    //    47 ...**************************************************************
    //    47 ...**
    //    47 ...All the operations must be performed in the Service AB that
    //    47 ...is being used, and only these ABs should be used in Server.
    //    47 ...
    //    48 !  !  +->CASE OF COMMAND
    //    48 !  !  +> CASE "CREATE"
    //    49 !  !  !  USE iyy10311_type_create_s
    //    49 !  !  !     WHICH IMPORTS: Work View loc_reference
    //    49 !  !  !              iyy1_server_data TO Work View imp_reference
    //    49 !  !  !              iyy1_server_data
    //    49 !  !  !                    Entity View imp iyy1_type TO Entity
    //    49 !  !  !              View imp iyy1_type
    //    49 !  !  !     WHICH EXPORTS: Entity View exp_ts iyy1_type FROM
    //    49 !  !  !              Entity View exp iyy1_type
    //    49 !  !  !                    Work View loc_error iyy1_component
    //    49 !  !  !              FROM Work View exp_error iyy1_component
    //    50 !  !  !   
    //    51 !  !  !  +->IF loc_error iyy1_component return_code < loc
    //    51 !  !  !  !        dont_change_return_codes 1_ok
    //    52 !  !  !  !  NOTE: 
    //    52 ...**************************************************************
    //    52 ...**
    //    52 ...If the function caught an error...
    //    52 ...
    //    52 ...
    //    52 ...
    //    53 !  !  !  !  MOVE loc_error iyy1_component TO exp_error
    //    53 !  !  !  !              iyy1_component
    //    54 !  ! <------ESCAPE
    //    51 !  !  !  +--
    //    55 !  !  !   
    //    48 !  !  +> CASE "READ"
    //    56 !  !  !  USE iyy10321_type_read_s
    //    56 !  !  !     WHICH IMPORTS: Entity View imp iyy1_type TO Entity
    //    56 !  !  !              View imp iyy1_type
    //    56 !  !  !     WHICH EXPORTS: Entity View exp iyy1_type FROM Entity
    //    56 !  !  !              View exp iyy1_type
    //    56 !  !  !                    Work View loc_error iyy1_component
    //    56 !  !  !              FROM Work View exp_error iyy1_component
    //    57 !  !  !   
    //    58 !  !  !  MOVE exp iyy1_type TO exp_ts iyy1_type
    //    59 !  !  !   
    //    60 !  !  !  +->IF loc_error iyy1_component return_code < loc
    //    60 !  !  !  !        dont_change_return_codes 1_ok
    //    61 !  !  !  !  NOTE: 
    //    61 ...**************************************************************
    //    61 ...**
    //    61 ...If the function caught an error...
    //    61 ...
    //    62 !  !  !  !  MOVE loc_error iyy1_component TO exp_error
    //    62 !  !  !  !              iyy1_component
    //    60 !  !  !  +--
    //    48 !  !  +> CASE "UPDATE"
    //    63 !  !  !  USE iyy10331_type_update_s
    //    63 !  !  !     WHICH IMPORTS: Work View loc_reference
    //    63 !  !  !              iyy1_server_data TO Work View imp_reference
    //    63 !  !  !              iyy1_server_data
    //    63 !  !  !                    Entity View imp iyy1_type TO Entity
    //    63 !  !  !              View imp iyy1_type
    //    63 !  !  !     WHICH EXPORTS: Entity View exp_ts iyy1_type FROM
    //    63 !  !  !              Entity View exp iyy1_type
    //    63 !  !  !                    Work View loc_error iyy1_component
    //    63 !  !  !              FROM Work View exp_error iyy1_component
    //    64 !  !  !   
    //    65 !  !  !  +->IF loc_error iyy1_component return_code < loc
    //    65 !  !  !  !        dont_change_return_codes 1_ok
    //    66 !  !  !  !  NOTE: 
    //    66 ...**************************************************************
    //    66 ...**
    //    66 ...If the function caught an error...
    //    66 ...
    //    67 !  !  !  !  MOVE loc_error iyy1_component TO exp_error
    //    67 !  !  !  !              iyy1_component
    //    65 !  !  !  +--
    //    48 !  !  +> CASE "DELETE"
    //    68 !  !  !  USE iyy10341_type_delete_s
    //    68 !  !  !     WHICH IMPORTS: Work View loc_reference
    //    68 !  !  !              iyy1_server_data TO Work View imp_reference
    //    68 !  !  !              iyy1_server_data
    //    68 !  !  !                    Entity View imp iyy1_type TO Entity
    //    68 !  !  !              View imp iyy1_type
    //    68 !  !  !     WHICH EXPORTS: Work View loc_error iyy1_component
    //    68 !  !  !              FROM Work View exp_error iyy1_component
    //    69 !  !  !   
    //    70 !  !  !  +->IF loc_error iyy1_component return_code < loc
    //    70 !  !  !  !        dont_change_return_codes 1_ok
    //    71 !  !  !  !  NOTE: 
    //    71 ...**************************************************************
    //    71 ...**
    //    71 ...If the function caught an error...
    //    71 ...
    //    72 !  !  !  !  MOVE loc_error iyy1_component TO exp_error
    //    72 !  !  !  !              iyy1_component
    //    70 !  !  !  +--
    //    48 !  !  +> CASE "LIST"
    //    73 !  !  !  USE iyy10351_type_list_s
    //    73 !  !  !     WHICH IMPORTS: Work View imp_filter iyy1_list TO Work
    //    73 !  !  !              View imp_filter iyy1_list
    //    73 !  !  !                    Entity View imp_from iyy1_type TO
    //    73 !  !  !              Entity View imp_from iyy1_type
    //    73 !  !  !                    Entity View imp_filter_start iyy1_type
    //    73 !  !  !              TO Entity View imp_filter_start iyy1_type
    //    73 !  !  !                    Entity View imp_filter_stop iyy1_type
    //    73 !  !  !              TO Entity View imp_filter_stop iyy1_type
    //    73 !  !  !                    Entity View imp_filter iyy1_type TO
    //    73 !  !  !              Entity View imp_filter iyy1_type
    //    73 !  !  !     WHICH EXPORTS: Group View  exp_group_list FROM Group
    //    73 !  !  !              View exp_group_list
    //    73 !  !  !                    Work View loc_error iyy1_component
    //    73 !  !  !              FROM Work View exp_error iyy1_component
    //    74 !  !  !   
    //    75 !  !  !  +->IF loc_error iyy1_component return_code < loc
    //    75 !  !  !  !        dont_change_return_codes 1_ok
    //    76 !  !  !  !  NOTE: 
    //    76 ...**************************************************************
    //    76 ...**
    //    76 ...If the function caught an error...
    //    76 ...
    //    77 !  !  !  !  MOVE loc_error iyy1_component TO exp_error
    //    77 !  !  !  !              iyy1_component
    //    75 !  !  !  +--
    //    48 !  !  +--
    //    36 !  +--
    //    78 !   
    //    79 !  USE cyyy9741_service_termination
    //    79 !     WHICH IMPORTS: Work View exp_error iyy1_component TO Work
    //    79 !              View imp_error iyy1_component
    //    79 !     WHICH EXPORTS: Work View exp_msg iyy1_component FROM Work
    //    79 !              View exp_error_msg iyy1_component
    //    79 !                    Work View exp_error iyy1_component FROM Work
    //    79 !              View exp_error iyy1_component
    //       +---
    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    //  CONSTRUCTOR FOR THE CLASS       
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    public IYY1Q911(  )
    {
      IefCGenRlse = "CA Gen 8.6";
      IsCopyright = "Copyright (c) 2024 CA Technologies. All rights reserved.";
      IefCGenDate = "2024/01/09";
      IefCGenTime = "13:41:39";
      IefCGenEncy = "9.2.A6";
      IefCGenUserId = "AliAl";
      IefCGenModel = "N8I_ORT_YYY_0112_TEMPLATE";
      IefCGenSubset = "ALL";
      IefCGenName = "IYY1Q911_TYPE_MAINTAIN_SVC";
      NestingLevel = 0;
      ValChkDeadlockTimeout = false;
      ValChkDBError = false;
    }
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // ACTION BLOCK FUNCTION DECLARATIONS 
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    
    public void Execute( Object in_runtime_parm1, 
    	IRuntimePStepContext in_runtime_parm2, 
    	GlobData in_globdata, 
    	IYY1Q911_IA import_view, 
    	IYY1Q911_OA export_view )
    {
      IefRuntimeParm1 = in_runtime_parm1;
      IefRuntimeParm2 = in_runtime_parm2;
      Globdata = in_globdata;
      WIa = import_view;
      WOa = export_view;
      _Execute();
    }
    
    private void _Execute()
    {
      
      f_22020222_localAlloc( "IYY1Q911_TYPE_MAINTAIN_SVC" );
      if ( Globdata.GetErrorData().GetLastStatus() == ErrorData.LastStatusIefAllocationError )
      	return;
      
      ++(NestingLevel);
      try {
        f_22020222_init(  );
        f_22020222(  );
      } catch( Exception e ) {
        if ( ((Globdata.GetErrorData().GetStatus() == ErrorData.StatusNone) && (Globdata.GetErrorData().GetErrorEncountered() == 
          ErrorData.ErrorEncounteredNoErrorFound)) && (Globdata.GetErrorData().GetViewOverflow() == 
          ErrorData.ErrorEncounteredNoErrorFound) )
        {
          Globdata.GetErrorData().SetStatus( ErrorData.LastStatusFatalError );
          Globdata.GetErrorData().SetLastStatus( ErrorData.LastStatusUnexpectedExceptionError );
          Globdata.GetErrorData().SetErrorEncountered( ErrorData.ErrorEncounteredErrorFound );
          Globdata.GetErrorData(  ).SetErrorMessage( e );
        }
      }
      --(NestingLevel);
    }
    public void f_22020222(  )
    {
      func_0022020222_esc_flag = false;
      Globdata.GetStateData().SetCurrentABId( "0022020222" );
      Globdata.GetStateData().SetCurrentABName( "IYY1Q911_TYPE_MAINTAIN_SVC" );
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    PURPOSE(CONTINUED)                                              
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  
      //    !!!!!!!!!!!!                                                    
      //    Check out the Pre-Post Conditions and Return/Reason Codes.      
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    PRE-CONDITION:                                                  
      //    READ command, key fields are given.                             
      //    POST-CONDITION:                                                 
      //    The record is read, EXP_ALL and EXP_TS are produced.            
      //    RETURN CODE = 1, REASON CODE = 1                                
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    PRE-CONDITION:                                                  
      //    UPDATE command, all fields are given.                           
      //    POST-CONDITION:                                                 
      //    The record is read and changed, EXP_TS is produced.             
      //    RETURN CODE = 1, REASON CODE = 1                                
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    PRE-CONDITION:                                                  
      //    DELETE command, key fields and the latest update time is        
      //    given.                                                          
      //    POST-CONDITION:                                                 
      //    The record is read and deleted.                                 
      //    RETURN CODE = 1, REASON CODE = 1                                
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    PRE-CONDITION:                                                  
      //    CREATE command and all the fields are given.                    
      //    POST-CONDITION:                                                 
      //    The record is created, EXP_TS is produced.                      
      //    RETURN CODE = 1, REASON CODE = 1                                
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    PRE-CONDITION:                                                  
      //    A command that is different than the ones above is given.       
      //    POST-CONDITION:                                                 
      //    No result can be produced.                                      
      //    RETURN CODE = -1120, REASON CODE = 1                            
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    RETURN / REASON  CODES                                          
      //    +1/1 Normal                                                     
      //    -1120/1 False command                                           
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    RELEASE HISTORY                                                 
      //    01_00 16-09-2005 New release                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    **************************************************************  
      //    Return/Reason code values                                       
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!     
      //    Set the used return code/reason code values                     
      //                                                                    
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      
      Globdata.GetStateData().SetLastStatementNumber( "0000000021" );
      WLa.LocDontChangeReturnCodesQ1Ok = IntAttr.ValueOf((int)TIRD2DEC.Execute1(1, 0, TIRD2DEC.ROUND_NONE, 5));
      Globdata.GetStateData().SetLastStatementNumber( "0000000022" );
      WLa.LocDontChangeReturnCodesN1120InvalidCommand = IntAttr.ValueOf((int)TIRD2DEC.Execute1(-1120, 0, TIRD2DEC.ROUND_NONE, 5));
      
      Globdata.GetStateData().SetLastStatementNumber( "0000000024" );
      WLa.LocDontChangeReasonCodesQ1Default = IntAttr.ValueOf((int)TIRD2DEC.Execute1(1, 0, TIRD2DEC.ROUND_NONE, 5));
      
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!                      
      //    Set the name of the procedure below                             
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      Globdata.GetStateData().SetLastStatementNumber( "0000000027" );
      LocGroupContext_PS_002 = (int)TIRD2DEC.Execute1(1, 0, TIRD2DEC.ROUND_NONE, 0);
      if ( (LocGroupContext_PS_002 > WLa.LocGroupContext_MA) && (LocGroupContext_PS_002 <= 9) )
      WLa.LocGroupContext_MA = IntAttr.ValueOf(LocGroupContext_PS_002);
      Globdata.GetStateData().SetLastStatementNumber( "0000000028" );
      WLa.LocGContextDontChangeTextText150[LocGroupContext_PS_002-1] = FixedStringAttr.ValueOf("CYY1Q011", 150);
      f_173015139_rgvc(  );
      Globdata.GetStateData().SetLastStatementNumber( "0000000029" );
      LocGroupContext_PS_002 = (int)TIRD2DEC.Execute1(2, 0, TIRD2DEC.ROUND_NONE, 0);
      if ( (LocGroupContext_PS_002 > WLa.LocGroupContext_MA) && (LocGroupContext_PS_002 <= 9) )
      WLa.LocGroupContext_MA = IntAttr.ValueOf(LocGroupContext_PS_002);
      Globdata.GetStateData().SetLastStatementNumber( "0000000030" );
      WLa.LocGContextDontChangeTextText150[LocGroupContext_PS_002-1] = FixedStringAttr.ValueOf(Globdata.GetStateData().GetCommand(), 
        150);
      f_173015139_rgvc(  );
      
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    **************************************************************  
      //    **                                                              
      //    WARNING! There will not be codification for authorization       
      //    control in Service Servers.                                     
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      Globdata.GetStateData().SetLastStatementNumber( "0000000033" );
      
      Cyyy9721Oa = (GEN.ORT.YYY.CYYY9721_OA)(IefRuntimeParm2.GetInstance( typeof(GEN.ORT.YYY.CYYY9721).Assembly,
      	"GEN.ORT.YYY.CYYY9721_OA" ));
      Globdata.GetErrorData().SetErrorEncountered( ErrorData.ErrorEncounteredNoErrorFound );
      IefRuntimeParm2.UseActionBlock( typeof(GEN.ORT.YYY.CYYY9721).Assembly,
      	"GEN.ORT.YYY.CYYY9721",
      	"Execute",
      	null,
      	Cyyy9721Oa );
      if ( ((Globdata.GetErrorData().GetStatus() != ErrorData.StatusNone) || (Globdata.GetErrorData().GetErrorEncountered() != 
        ErrorData.ErrorEncounteredNoErrorFound)) || (Globdata.GetErrorData().GetViewOverflow() != 
        ErrorData.ErrorEncounteredNoErrorFound) )
      {
        throw new ABException();
      }
      Globdata.GetStateData().SetCurrentABId( "0022020222" );
      Globdata.GetStateData().SetCurrentABName( "IYY1Q911_TYPE_MAINTAIN_SVC" );
      Globdata.GetStateData().SetLastStatementNumber( "0000000033" );
      WLa.LocReferenceIyy1ServerDataServerDate = DateAttr.ValueOf(Cyyy9721Oa.ExpReferenceIyy1ServerDataServerDate);
      WLa.LocReferenceIyy1ServerDataServerTime = TimeAttr.ValueOf(Cyyy9721Oa.ExpReferenceIyy1ServerDataServerTime);
      WLa.LocReferenceIyy1ServerDataReferenceId = TimestampAttr.ValueOf(Cyyy9721Oa.ExpReferenceIyy1ServerDataReferenceId);
      WLa.LocReferenceIyy1ServerDataServerTimestamp = TimestampAttr.ValueOf(Cyyy9721Oa.ExpReferenceIyy1ServerDataServerTimestamp);
      WOa.ExpErrorIyy1ComponentSeverityCode = FixedStringAttr.ValueOf(Cyyy9721Oa.ExpErrorIyy1ComponentSeverityCode, 1);
      WOa.ExpErrorIyy1ComponentRollbackIndicator = FixedStringAttr.ValueOf(Cyyy9721Oa.ExpErrorIyy1ComponentRollbackIndicator, 1);
      WOa.ExpErrorIyy1ComponentOriginServid = DoubleAttr.ValueOf(Cyyy9721Oa.ExpErrorIyy1ComponentOriginServid);
      WOa.ExpErrorIyy1ComponentContextString = StringAttr.ValueOf(Cyyy9721Oa.ExpErrorIyy1ComponentContextString, 512);
      WOa.ExpErrorIyy1ComponentReturnCode = IntAttr.ValueOf(Cyyy9721Oa.ExpErrorIyy1ComponentReturnCode);
      WOa.ExpErrorIyy1ComponentReasonCode = IntAttr.ValueOf(Cyyy9721Oa.ExpErrorIyy1ComponentReasonCode);
      WOa.ExpErrorIyy1ComponentChecksum = FixedStringAttr.ValueOf(Cyyy9721Oa.ExpErrorIyy1ComponentChecksum, 15);
      Cyyy9721Oa.FreeInstance(  );
      Cyyy9721Oa = null;
      
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    **************************************************************  
      //    **                                                              
      //    Everything' s OK. Nothing left to be controlled.                
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      Globdata.GetStateData().SetLastStatementNumber( "0000000036" );
      if ( ((double) WOa.ExpErrorIyy1ComponentReturnCode == (double) WLa.LocDontChangeReturnCodesQ1Ok) )
      {
        f_20972450(  );
      }
      
      
      Globdata.GetStateData().SetLastStatementNumber( "0000000079" );
      
      Cyyy9741Ia = (GEN.ORT.YYY.CYYY9741_IA)(IefRuntimeParm2.GetInstance( typeof(GEN.ORT.YYY.CYYY9741).Assembly,
      	"GEN.ORT.YYY.CYYY9741_IA" ));
      Cyyy9741Oa = (GEN.ORT.YYY.CYYY9741_OA)(IefRuntimeParm2.GetInstance( typeof(GEN.ORT.YYY.CYYY9741).Assembly,
      	"GEN.ORT.YYY.CYYY9741_OA" ));
      Cyyy9741Ia.ImpErrorIyy1ComponentSeverityCode = FixedStringAttr.ValueOf(WOa.ExpErrorIyy1ComponentSeverityCode, 1);
      Cyyy9741Ia.ImpErrorIyy1ComponentRollbackIndicator = FixedStringAttr.ValueOf(WOa.ExpErrorIyy1ComponentRollbackIndicator, 1);
      Cyyy9741Ia.ImpErrorIyy1ComponentOriginServid = DoubleAttr.ValueOf(WOa.ExpErrorIyy1ComponentOriginServid);
      Cyyy9741Ia.ImpErrorIyy1ComponentContextString = StringAttr.ValueOf(WOa.ExpErrorIyy1ComponentContextString, 512);
      Cyyy9741Ia.ImpErrorIyy1ComponentReturnCode = IntAttr.ValueOf(WOa.ExpErrorIyy1ComponentReturnCode);
      Cyyy9741Ia.ImpErrorIyy1ComponentReasonCode = IntAttr.ValueOf(WOa.ExpErrorIyy1ComponentReasonCode);
      Cyyy9741Ia.ImpErrorIyy1ComponentChecksum = FixedStringAttr.ValueOf(WOa.ExpErrorIyy1ComponentChecksum, 15);
      Globdata.GetErrorData().SetErrorEncountered( ErrorData.ErrorEncounteredNoErrorFound );
      IefRuntimeParm2.UseActionBlock( typeof(GEN.ORT.YYY.CYYY9741).Assembly,
      	"GEN.ORT.YYY.CYYY9741",
      	"Execute",
      	Cyyy9741Ia,
      	Cyyy9741Oa );
      if ( ((Globdata.GetErrorData().GetStatus() != ErrorData.StatusNone) || (Globdata.GetErrorData().GetErrorEncountered() != 
        ErrorData.ErrorEncounteredNoErrorFound)) || (Globdata.GetErrorData().GetViewOverflow() != 
        ErrorData.ErrorEncounteredNoErrorFound) )
      {
        throw new ABException();
      }
      Globdata.GetStateData().SetCurrentABId( "0022020222" );
      Globdata.GetStateData().SetCurrentABName( "IYY1Q911_TYPE_MAINTAIN_SVC" );
      Globdata.GetStateData().SetLastStatementNumber( "0000000079" );
      WOa.ExpErrorIyy1ComponentSeverityCode = FixedStringAttr.ValueOf(Cyyy9741Oa.ExpErrorIyy1ComponentSeverityCode, 1);
      WOa.ExpErrorIyy1ComponentRollbackIndicator = FixedStringAttr.ValueOf(Cyyy9741Oa.ExpErrorIyy1ComponentRollbackIndicator, 1);
      WOa.ExpErrorIyy1ComponentOriginServid = DoubleAttr.ValueOf(Cyyy9741Oa.ExpErrorIyy1ComponentOriginServid);
      WOa.ExpErrorIyy1ComponentContextString = StringAttr.ValueOf(Cyyy9741Oa.ExpErrorIyy1ComponentContextString, 512);
      WOa.ExpErrorIyy1ComponentReturnCode = IntAttr.ValueOf(Cyyy9741Oa.ExpErrorIyy1ComponentReturnCode);
      WOa.ExpErrorIyy1ComponentReasonCode = IntAttr.ValueOf(Cyyy9741Oa.ExpErrorIyy1ComponentReasonCode);
      WOa.ExpErrorIyy1ComponentChecksum = FixedStringAttr.ValueOf(Cyyy9741Oa.ExpErrorIyy1ComponentChecksum, 15);
      WOa.ExpMsgIyy1ComponentSeverityCode = FixedStringAttr.ValueOf(Cyyy9741Oa.ExpErrorMsgIyy1ComponentSeverityCode, 1);
      WOa.ExpMsgIyy1ComponentMessageTx = StringAttr.ValueOf(Cyyy9741Oa.ExpErrorMsgIyy1ComponentMessageTx, 512);
      Cyyy9741Ia.FreeInstance(  );
      Cyyy9741Ia = null;
      Cyyy9741Oa.FreeInstance(  );
      Cyyy9741Oa = null;
      return;
    }
    
    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // SUBORDINATE FUNCTIONS
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    
    
    public void f_20972450(  )
    {
      func_0020972450_esc_flag = false;
      {
        
        Globdata.GetStateData().SetLastStatementNumber( "0000000038" );
        WLa.LocReferenceIyy1ServerDataUserid = FixedStringAttr.ValueOf(Globdata.GetStateData().GetClientUserId(), 8);
        
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        //    **************************************************************  
        //    **                                                              
        //    Whether there' s a mistake or not, let' s build a Context       
        //    string.                                                         
        //    There' s a message to be returned in error-free condition.      
        //                                                                    
        //                                                                    
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        Globdata.GetStateData().SetLastStatementNumber( "0000000041" );
        
        Cyyy9141Ia = (GEN.ORT.YYY.CYYY9141_IA)(IefRuntimeParm2.GetInstance( typeof(GEN.ORT.YYY.CYYY9141).Assembly,
        	"GEN.ORT.YYY.CYYY9141_IA" ));
        Cyyy9141Oa = (GEN.ORT.YYY.CYYY9141_OA)(IefRuntimeParm2.GetInstance( typeof(GEN.ORT.YYY.CYYY9141).Assembly,
        	"GEN.ORT.YYY.CYYY9141_OA" ));
        Cyyy9141Ia.ImpGroupContext_MA = IntAttr.ValueOf(WLa.LocGroupContext_MA);
        for(Adim1 = 1; Adim1 <= WLa.LocGroupContext_MA; ++(Adim1))
        {
          Cyyy9141Ia.ImpGContextDontChangeTextText150[Adim1-1] = FixedStringAttr.ValueOf(WLa.LocGContextDontChangeTextText150[
            Adim1-1], 150);
        }
        for(Adim1 = WLa.LocGroupContext_MA + 1; Adim1 <= 9; ++(Adim1))
        {
          Cyyy9141Ia.ImpGContextDontChangeTextText150[Adim1-1] = 
"                                                                                                                                                      "
            ;
        }
        Globdata.GetErrorData().SetErrorEncountered( ErrorData.ErrorEncounteredNoErrorFound );
        IefRuntimeParm2.UseActionBlock( typeof(GEN.ORT.YYY.CYYY9141).Assembly,
        	"GEN.ORT.YYY.CYYY9141",
        	"Execute",
        	Cyyy9141Ia,
        	Cyyy9141Oa );
        if ( ((Globdata.GetErrorData().GetStatus() != ErrorData.StatusNone) || (Globdata.GetErrorData().GetErrorEncountered() != 
          ErrorData.ErrorEncounteredNoErrorFound)) || (Globdata.GetErrorData().GetViewOverflow() != 
          ErrorData.ErrorEncounteredNoErrorFound) )
        {
          throw new ABException();
        }
        Globdata.GetStateData().SetCurrentABId( "0022020222" );
        Globdata.GetStateData().SetCurrentABName( "IYY1Q911_TYPE_MAINTAIN_SVC" );
        Globdata.GetStateData().SetLastStatementNumber( "0000000041" );
        WLa.LocContextIyy1ComponentContextString = StringAttr.ValueOf(Cyyy9141Oa.ExpContextIyy1ComponentContextString, 512);
        WLa.LocErrorIyy1ComponentSeverityCode = FixedStringAttr.ValueOf(Cyyy9141Oa.ExpErrorIyy1ComponentSeverityCode, 1);
        WLa.LocErrorIyy1ComponentRollbackIndicator = FixedStringAttr.ValueOf(Cyyy9141Oa.ExpErrorIyy1ComponentRollbackIndicator, 1);
        WLa.LocErrorIyy1ComponentOriginServid = DoubleAttr.ValueOf(Cyyy9141Oa.ExpErrorIyy1ComponentOriginServid);
        WLa.LocErrorIyy1ComponentContextString = StringAttr.ValueOf(Cyyy9141Oa.ExpErrorIyy1ComponentContextString, 512);
        WLa.LocErrorIyy1ComponentReturnCode = IntAttr.ValueOf(Cyyy9141Oa.ExpErrorIyy1ComponentReturnCode);
        WLa.LocErrorIyy1ComponentReasonCode = IntAttr.ValueOf(Cyyy9141Oa.ExpErrorIyy1ComponentReasonCode);
        WLa.LocErrorIyy1ComponentChecksum = FixedStringAttr.ValueOf(Cyyy9141Oa.ExpErrorIyy1ComponentChecksum, 15);
        Cyyy9141Ia.FreeInstance(  );
        Cyyy9141Ia = null;
        Cyyy9141Oa.FreeInstance(  );
        Cyyy9141Oa = null;
        Globdata.GetStateData().SetLastStatementNumber( "0000000042" );
        if ( ((double) WLa.LocErrorIyy1ComponentReturnCode < (double) WLa.LocDontChangeReturnCodesQ1Ok) )
        {
          Globdata.GetStateData().SetLastStatementNumber( "0000000043" );
          WOa.ExpErrorIyy1ComponentSeverityCode = FixedStringAttr.ValueOf(WLa.LocErrorIyy1ComponentSeverityCode, 1);
          WOa.ExpErrorIyy1ComponentRollbackIndicator = FixedStringAttr.ValueOf(WLa.LocErrorIyy1ComponentRollbackIndicator, 1);
          WOa.ExpErrorIyy1ComponentOriginServid = DoubleAttr.ValueOf(WLa.LocErrorIyy1ComponentOriginServid);
          WOa.ExpErrorIyy1ComponentContextString = StringAttr.ValueOf(WLa.LocErrorIyy1ComponentContextString, 512);
          WOa.ExpErrorIyy1ComponentReturnCode = IntAttr.ValueOf(WLa.LocErrorIyy1ComponentReturnCode);
          WOa.ExpErrorIyy1ComponentReasonCode = IntAttr.ValueOf(WLa.LocErrorIyy1ComponentReasonCode);
          WOa.ExpErrorIyy1ComponentChecksum = FixedStringAttr.ValueOf(WLa.LocErrorIyy1ComponentChecksum, 15);
        }
        else 
        {
          Globdata.GetStateData().SetLastSubStatementNumber( "1" );
          {
            Globdata.GetStateData().SetLastStatementNumber( "0000000044" );
            WOa.ExpErrorIyy1ComponentContextString = StringAttr.ValueOf(WLa.LocContextIyy1ComponentContextString, 512);
          }
        }
        
        
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        //    **************************************************************  
        //    **                                                              
        //                                                                    
        //    WARNING! If Service Server exports a single method, Case Of     
        //    Command should not be used.                                     
        //                                                                    
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        //    **************************************************************  
        //    **                                                              
        //    All the operations must be performed in the Service AB that     
        //    is being used, and only these ABs should be used in Server.     
        //                                                                    
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        Globdata.GetStateData().SetLastStatementNumber( "0000000048" );
        if ( CompareExit.CompareTo(Globdata.GetStateData().GetCommand(), "CREATE") == 0 )
        {
          Globdata.GetStateData().SetLastSubStatementNumber( "1" );
          {
            f_20972837(  );
          }
        }
        else if ( CompareExit.CompareTo(Globdata.GetStateData().GetCommand(), "READ") == 0 )
        {
          Globdata.GetStateData().SetLastSubStatementNumber( "2" );
          {
            f_20972838(  );
          }
        }
        else if ( CompareExit.CompareTo(Globdata.GetStateData().GetCommand(), "UPDATE") == 0 )
        {
          Globdata.GetStateData().SetLastSubStatementNumber( "3" );
          {
            f_20972840(  );
          }
        }
        else if ( CompareExit.CompareTo(Globdata.GetStateData().GetCommand(), "DELETE") == 0 )
        {
          Globdata.GetStateData().SetLastSubStatementNumber( "4" );
          {
            f_20972841(  );
          }
        }
        else if ( CompareExit.CompareTo(Globdata.GetStateData().GetCommand(), "LIST") == 0 )
        {
          Globdata.GetStateData().SetLastSubStatementNumber( "5" );
          {
            f_20972843(  );
          }
        }
      }
      f_0020972450_esctag: 
      ;
      return;
    }
    
    public void f_20972837(  )
    {
      func_0020972837_esc_flag = false;
      {
        Globdata.GetStateData().SetLastStatementNumber( "0000000049" );
        
        Iyy10311Ia = (GEN.ORT.YYY.IYY10311_IA)(IefRuntimeParm2.GetInstance( typeof(GEN.ORT.YYY.IYY10311).Assembly,
        	"GEN.ORT.YYY.IYY10311_IA" ));
        Iyy10311Oa = (GEN.ORT.YYY.IYY10311_OA)(IefRuntimeParm2.GetInstance( typeof(GEN.ORT.YYY.IYY10311).Assembly,
        	"GEN.ORT.YYY.IYY10311_OA" ));
        Iyy10311Ia.ImpIyy1TypeTkeyAttrText = FixedStringAttr.ValueOf(WIa.ImpIyy1TypeTkeyAttrText, 4);
        Iyy10311Ia.ImpIyy1TypeTsearchAttrText = FixedStringAttr.ValueOf(WIa.ImpIyy1TypeTsearchAttrText, 20);
        Iyy10311Ia.ImpIyy1TypeTotherAttrText = FixedStringAttr.ValueOf(WIa.ImpIyy1TypeTotherAttrText, 2);
        Iyy10311Ia.ImpIyy1TypeTotherAttrDate = DateAttr.ValueOf(WIa.ImpIyy1TypeTotherAttrDate);
        Iyy10311Ia.ImpIyy1TypeTotherAttrTime = TimeAttr.ValueOf(WIa.ImpIyy1TypeTotherAttrTime);
        Iyy10311Ia.ImpIyy1TypeTotherAttrAmount = DecimalAttr.ValueOf(WIa.ImpIyy1TypeTotherAttrAmount);
        Iyy10311Ia.ImpReferenceIyy1ServerDataUserid = FixedStringAttr.ValueOf(WLa.LocReferenceIyy1ServerDataUserid, 8);
        Iyy10311Ia.ImpReferenceIyy1ServerDataReferenceId = TimestampAttr.ValueOf(WLa.LocReferenceIyy1ServerDataReferenceId);
        Globdata.GetErrorData().SetErrorEncountered( ErrorData.ErrorEncounteredNoErrorFound );
        IefRuntimeParm2.UseActionBlock( typeof(GEN.ORT.YYY.IYY10311).Assembly,
        	"GEN.ORT.YYY.IYY10311",
        	"Execute",
        	Iyy10311Ia,
        	Iyy10311Oa );
        if ( ((Globdata.GetErrorData().GetStatus() != ErrorData.StatusNone) || (Globdata.GetErrorData().GetErrorEncountered() != 
          ErrorData.ErrorEncounteredNoErrorFound)) || (Globdata.GetErrorData().GetViewOverflow() != 
          ErrorData.ErrorEncounteredNoErrorFound) )
        {
          throw new ABException();
        }
        Globdata.GetStateData().SetCurrentABId( "0022020222" );
        Globdata.GetStateData().SetCurrentABName( "IYY1Q911_TYPE_MAINTAIN_SVC" );
        Globdata.GetStateData().SetLastStatementNumber( "0000000049" );
        WLa.LocErrorIyy1ComponentSeverityCode = FixedStringAttr.ValueOf(Iyy10311Oa.ExpErrorIyy1ComponentSeverityCode, 1);
        WLa.LocErrorIyy1ComponentRollbackIndicator = FixedStringAttr.ValueOf(Iyy10311Oa.ExpErrorIyy1ComponentRollbackIndicator, 1);
        WLa.LocErrorIyy1ComponentOriginServid = DoubleAttr.ValueOf(Iyy10311Oa.ExpErrorIyy1ComponentOriginServid);
        WLa.LocErrorIyy1ComponentContextString = StringAttr.ValueOf(Iyy10311Oa.ExpErrorIyy1ComponentContextString, 512);
        WLa.LocErrorIyy1ComponentReturnCode = IntAttr.ValueOf(Iyy10311Oa.ExpErrorIyy1ComponentReturnCode);
        WLa.LocErrorIyy1ComponentReasonCode = IntAttr.ValueOf(Iyy10311Oa.ExpErrorIyy1ComponentReasonCode);
        WLa.LocErrorIyy1ComponentChecksum = FixedStringAttr.ValueOf(Iyy10311Oa.ExpErrorIyy1ComponentChecksum, 15);
        WOa.ExpTsIyy1TypeTinstanceId = TimestampAttr.ValueOf(Iyy10311Oa.ExpIyy1TypeTinstanceId);
        WOa.ExpTsIyy1TypeTreferenceId = TimestampAttr.ValueOf(Iyy10311Oa.ExpIyy1TypeTreferenceId);
        Iyy10311Ia.FreeInstance(  );
        Iyy10311Ia = null;
        Iyy10311Oa.FreeInstance(  );
        Iyy10311Oa = null;
        
        Globdata.GetStateData().SetLastStatementNumber( "0000000051" );
        if ( ((double) WLa.LocErrorIyy1ComponentReturnCode < (double) WLa.LocDontChangeReturnCodesQ1Ok) )
        {
          f_20973023(  );
        }
        
        if ( func_0020972837_esc_flag )
        {
          goto f_0020972837_esctag;
        }
        
      }
      f_0020972837_esctag: 
      ;
      return;
    }
    
    public void f_20972838(  )
    {
      func_0020972838_esc_flag = false;
      Globdata.GetStateData().SetLastStatementNumber( "0000000056" );
      
      Iyy10321Ia = (GEN.ORT.YYY.IYY10321_IA)(IefRuntimeParm2.GetInstance( typeof(GEN.ORT.YYY.IYY10321).Assembly,
      	"GEN.ORT.YYY.IYY10321_IA" ));
      Iyy10321Oa = (GEN.ORT.YYY.IYY10321_OA)(IefRuntimeParm2.GetInstance( typeof(GEN.ORT.YYY.IYY10321).Assembly,
      	"GEN.ORT.YYY.IYY10321_OA" ));
      Iyy10321Ia.ImpIyy1TypeTinstanceId = TimestampAttr.ValueOf(WIa.ImpIyy1TypeTinstanceId);
      Iyy10321Ia.ImpIyy1TypeTkeyAttrText = FixedStringAttr.ValueOf(WIa.ImpIyy1TypeTkeyAttrText, 4);
      Globdata.GetErrorData().SetErrorEncountered( ErrorData.ErrorEncounteredNoErrorFound );
      IefRuntimeParm2.UseActionBlock( typeof(GEN.ORT.YYY.IYY10321).Assembly,
      	"GEN.ORT.YYY.IYY10321",
      	"Execute",
      	Iyy10321Ia,
      	Iyy10321Oa );
      if ( ((Globdata.GetErrorData().GetStatus() != ErrorData.StatusNone) || (Globdata.GetErrorData().GetErrorEncountered() != 
        ErrorData.ErrorEncounteredNoErrorFound)) || (Globdata.GetErrorData().GetViewOverflow() != 
        ErrorData.ErrorEncounteredNoErrorFound) )
      {
        throw new ABException();
      }
      Globdata.GetStateData().SetCurrentABId( "0022020222" );
      Globdata.GetStateData().SetCurrentABName( "IYY1Q911_TYPE_MAINTAIN_SVC" );
      Globdata.GetStateData().SetLastStatementNumber( "0000000056" );
      WLa.LocErrorIyy1ComponentSeverityCode = FixedStringAttr.ValueOf(Iyy10321Oa.ExpErrorIyy1ComponentSeverityCode, 1);
      WLa.LocErrorIyy1ComponentRollbackIndicator = FixedStringAttr.ValueOf(Iyy10321Oa.ExpErrorIyy1ComponentRollbackIndicator, 1);
      WLa.LocErrorIyy1ComponentOriginServid = DoubleAttr.ValueOf(Iyy10321Oa.ExpErrorIyy1ComponentOriginServid);
      WLa.LocErrorIyy1ComponentContextString = StringAttr.ValueOf(Iyy10321Oa.ExpErrorIyy1ComponentContextString, 512);
      WLa.LocErrorIyy1ComponentReturnCode = IntAttr.ValueOf(Iyy10321Oa.ExpErrorIyy1ComponentReturnCode);
      WLa.LocErrorIyy1ComponentReasonCode = IntAttr.ValueOf(Iyy10321Oa.ExpErrorIyy1ComponentReasonCode);
      WLa.LocErrorIyy1ComponentChecksum = FixedStringAttr.ValueOf(Iyy10321Oa.ExpErrorIyy1ComponentChecksum, 15);
      WOa.ExpIyy1TypeTinstanceId = TimestampAttr.ValueOf(Iyy10321Oa.ExpIyy1TypeTinstanceId);
      WOa.ExpIyy1TypeTreferenceId = TimestampAttr.ValueOf(Iyy10321Oa.ExpIyy1TypeTreferenceId);
      WOa.ExpIyy1TypeTcreateUserId = FixedStringAttr.ValueOf(Iyy10321Oa.ExpIyy1TypeTcreateUserId, 8);
      WOa.ExpIyy1TypeTupdateUserId = FixedStringAttr.ValueOf(Iyy10321Oa.ExpIyy1TypeTupdateUserId, 8);
      WOa.ExpIyy1TypeTkeyAttrText = FixedStringAttr.ValueOf(Iyy10321Oa.ExpIyy1TypeTkeyAttrText, 4);
      WOa.ExpIyy1TypeTsearchAttrText = FixedStringAttr.ValueOf(Iyy10321Oa.ExpIyy1TypeTsearchAttrText, 20);
      WOa.ExpIyy1TypeTotherAttrText = FixedStringAttr.ValueOf(Iyy10321Oa.ExpIyy1TypeTotherAttrText, 2);
      WOa.ExpIyy1TypeTotherAttrDate = DateAttr.ValueOf(Iyy10321Oa.ExpIyy1TypeTotherAttrDate);
      WOa.ExpIyy1TypeTotherAttrTime = TimeAttr.ValueOf(Iyy10321Oa.ExpIyy1TypeTotherAttrTime);
      WOa.ExpIyy1TypeTotherAttrAmount = DecimalAttr.ValueOf(Iyy10321Oa.ExpIyy1TypeTotherAttrAmount);
      Iyy10321Ia.FreeInstance(  );
      Iyy10321Ia = null;
      Iyy10321Oa.FreeInstance(  );
      Iyy10321Oa = null;
      
      Globdata.GetStateData().SetLastStatementNumber( "0000000058" );
      WOa.ExpTsIyy1TypeTinstanceId = TimestampAttr.ValueOf(WOa.ExpIyy1TypeTinstanceId);
      WOa.ExpTsIyy1TypeTreferenceId = TimestampAttr.ValueOf(WOa.ExpIyy1TypeTreferenceId);
      
      Globdata.GetStateData().SetLastStatementNumber( "0000000060" );
      if ( ((double) WLa.LocErrorIyy1ComponentReturnCode < (double) WLa.LocDontChangeReturnCodesQ1Ok) )
      {
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        //    **************************************************************  
        //    **                                                              
        //    If the function caught an error...                              
        //                                                                    
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        Globdata.GetStateData().SetLastStatementNumber( "0000000062" );
        WOa.ExpErrorIyy1ComponentSeverityCode = FixedStringAttr.ValueOf(WLa.LocErrorIyy1ComponentSeverityCode, 1);
        WOa.ExpErrorIyy1ComponentRollbackIndicator = FixedStringAttr.ValueOf(WLa.LocErrorIyy1ComponentRollbackIndicator, 1);
        WOa.ExpErrorIyy1ComponentOriginServid = DoubleAttr.ValueOf(WLa.LocErrorIyy1ComponentOriginServid);
        WOa.ExpErrorIyy1ComponentContextString = StringAttr.ValueOf(WLa.LocErrorIyy1ComponentContextString, 512);
        WOa.ExpErrorIyy1ComponentReturnCode = IntAttr.ValueOf(WLa.LocErrorIyy1ComponentReturnCode);
        WOa.ExpErrorIyy1ComponentReasonCode = IntAttr.ValueOf(WLa.LocErrorIyy1ComponentReasonCode);
        WOa.ExpErrorIyy1ComponentChecksum = FixedStringAttr.ValueOf(WLa.LocErrorIyy1ComponentChecksum, 15);
      }
      
      return;
    }
    
    public void f_20972840(  )
    {
      func_0020972840_esc_flag = false;
      Globdata.GetStateData().SetLastStatementNumber( "0000000063" );
      
      Iyy10331Ia = (GEN.ORT.YYY.IYY10331_IA)(IefRuntimeParm2.GetInstance( typeof(GEN.ORT.YYY.IYY10331).Assembly,
      	"GEN.ORT.YYY.IYY10331_IA" ));
      Iyy10331Oa = (GEN.ORT.YYY.IYY10331_OA)(IefRuntimeParm2.GetInstance( typeof(GEN.ORT.YYY.IYY10331).Assembly,
      	"GEN.ORT.YYY.IYY10331_OA" ));
      Iyy10331Ia.ImpIyy1TypeTinstanceId = TimestampAttr.ValueOf(WIa.ImpIyy1TypeTinstanceId);
      Iyy10331Ia.ImpIyy1TypeTreferenceId = TimestampAttr.ValueOf(WIa.ImpIyy1TypeTreferenceId);
      Iyy10331Ia.ImpIyy1TypeTkeyAttrText = FixedStringAttr.ValueOf(WIa.ImpIyy1TypeTkeyAttrText, 4);
      Iyy10331Ia.ImpIyy1TypeTsearchAttrText = FixedStringAttr.ValueOf(WIa.ImpIyy1TypeTsearchAttrText, 20);
      Iyy10331Ia.ImpIyy1TypeTotherAttrText = FixedStringAttr.ValueOf(WIa.ImpIyy1TypeTotherAttrText, 2);
      Iyy10331Ia.ImpIyy1TypeTotherAttrDate = DateAttr.ValueOf(WIa.ImpIyy1TypeTotherAttrDate);
      Iyy10331Ia.ImpIyy1TypeTotherAttrTime = TimeAttr.ValueOf(WIa.ImpIyy1TypeTotherAttrTime);
      Iyy10331Ia.ImpIyy1TypeTotherAttrAmount = DecimalAttr.ValueOf(WIa.ImpIyy1TypeTotherAttrAmount);
      Iyy10331Ia.ImpReferenceIyy1ServerDataUserid = FixedStringAttr.ValueOf(WLa.LocReferenceIyy1ServerDataUserid, 8);
      Iyy10331Ia.ImpReferenceIyy1ServerDataReferenceId = TimestampAttr.ValueOf(WLa.LocReferenceIyy1ServerDataReferenceId);
      Globdata.GetErrorData().SetErrorEncountered( ErrorData.ErrorEncounteredNoErrorFound );
      IefRuntimeParm2.UseActionBlock( typeof(GEN.ORT.YYY.IYY10331).Assembly,
      	"GEN.ORT.YYY.IYY10331",
      	"Execute",
      	Iyy10331Ia,
      	Iyy10331Oa );
      if ( ((Globdata.GetErrorData().GetStatus() != ErrorData.StatusNone) || (Globdata.GetErrorData().GetErrorEncountered() != 
        ErrorData.ErrorEncounteredNoErrorFound)) || (Globdata.GetErrorData().GetViewOverflow() != 
        ErrorData.ErrorEncounteredNoErrorFound) )
      {
        throw new ABException();
      }
      Globdata.GetStateData().SetCurrentABId( "0022020222" );
      Globdata.GetStateData().SetCurrentABName( "IYY1Q911_TYPE_MAINTAIN_SVC" );
      Globdata.GetStateData().SetLastStatementNumber( "0000000063" );
      WLa.LocErrorIyy1ComponentSeverityCode = FixedStringAttr.ValueOf(Iyy10331Oa.ExpErrorIyy1ComponentSeverityCode, 1);
      WLa.LocErrorIyy1ComponentRollbackIndicator = FixedStringAttr.ValueOf(Iyy10331Oa.ExpErrorIyy1ComponentRollbackIndicator, 1);
      WLa.LocErrorIyy1ComponentOriginServid = DoubleAttr.ValueOf(Iyy10331Oa.ExpErrorIyy1ComponentOriginServid);
      WLa.LocErrorIyy1ComponentContextString = StringAttr.ValueOf(Iyy10331Oa.ExpErrorIyy1ComponentContextString, 512);
      WLa.LocErrorIyy1ComponentReturnCode = IntAttr.ValueOf(Iyy10331Oa.ExpErrorIyy1ComponentReturnCode);
      WLa.LocErrorIyy1ComponentReasonCode = IntAttr.ValueOf(Iyy10331Oa.ExpErrorIyy1ComponentReasonCode);
      WLa.LocErrorIyy1ComponentChecksum = FixedStringAttr.ValueOf(Iyy10331Oa.ExpErrorIyy1ComponentChecksum, 15);
      WOa.ExpTsIyy1TypeTreferenceId = TimestampAttr.ValueOf(Iyy10331Oa.ExpIyy1TypeTreferenceId);
      Iyy10331Ia.FreeInstance(  );
      Iyy10331Ia = null;
      Iyy10331Oa.FreeInstance(  );
      Iyy10331Oa = null;
      
      Globdata.GetStateData().SetLastStatementNumber( "0000000065" );
      if ( ((double) WLa.LocErrorIyy1ComponentReturnCode < (double) WLa.LocDontChangeReturnCodesQ1Ok) )
      {
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        //    **************************************************************  
        //    **                                                              
        //    If the function caught an error...                              
        //                                                                    
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        Globdata.GetStateData().SetLastStatementNumber( "0000000067" );
        WOa.ExpErrorIyy1ComponentSeverityCode = FixedStringAttr.ValueOf(WLa.LocErrorIyy1ComponentSeverityCode, 1);
        WOa.ExpErrorIyy1ComponentRollbackIndicator = FixedStringAttr.ValueOf(WLa.LocErrorIyy1ComponentRollbackIndicator, 1);
        WOa.ExpErrorIyy1ComponentOriginServid = DoubleAttr.ValueOf(WLa.LocErrorIyy1ComponentOriginServid);
        WOa.ExpErrorIyy1ComponentContextString = StringAttr.ValueOf(WLa.LocErrorIyy1ComponentContextString, 512);
        WOa.ExpErrorIyy1ComponentReturnCode = IntAttr.ValueOf(WLa.LocErrorIyy1ComponentReturnCode);
        WOa.ExpErrorIyy1ComponentReasonCode = IntAttr.ValueOf(WLa.LocErrorIyy1ComponentReasonCode);
        WOa.ExpErrorIyy1ComponentChecksum = FixedStringAttr.ValueOf(WLa.LocErrorIyy1ComponentChecksum, 15);
      }
      
      return;
    }
    
    public void f_20972841(  )
    {
      func_0020972841_esc_flag = false;
      Globdata.GetStateData().SetLastStatementNumber( "0000000068" );
      
      Iyy10341Ia = (GEN.ORT.YYY.IYY10341_IA)(IefRuntimeParm2.GetInstance( typeof(GEN.ORT.YYY.IYY10341).Assembly,
      	"GEN.ORT.YYY.IYY10341_IA" ));
      Iyy10341Oa = (GEN.ORT.YYY.IYY10341_OA)(IefRuntimeParm2.GetInstance( typeof(GEN.ORT.YYY.IYY10341).Assembly,
      	"GEN.ORT.YYY.IYY10341_OA" ));
      Iyy10341Ia.ImpIyy1TypeTinstanceId = TimestampAttr.ValueOf(WIa.ImpIyy1TypeTinstanceId);
      Iyy10341Ia.ImpIyy1TypeTreferenceId = TimestampAttr.ValueOf(WIa.ImpIyy1TypeTreferenceId);
      Iyy10341Ia.ImpIyy1TypeTkeyAttrText = FixedStringAttr.ValueOf(WIa.ImpIyy1TypeTkeyAttrText, 4);
      Iyy10341Ia.ImpReferenceIyy1ServerDataUserid = FixedStringAttr.ValueOf(WLa.LocReferenceIyy1ServerDataUserid, 8);
      Iyy10341Ia.ImpReferenceIyy1ServerDataReferenceId = TimestampAttr.ValueOf(WLa.LocReferenceIyy1ServerDataReferenceId);
      Globdata.GetErrorData().SetErrorEncountered( ErrorData.ErrorEncounteredNoErrorFound );
      IefRuntimeParm2.UseActionBlock( typeof(GEN.ORT.YYY.IYY10341).Assembly,
      	"GEN.ORT.YYY.IYY10341",
      	"Execute",
      	Iyy10341Ia,
      	Iyy10341Oa );
      if ( ((Globdata.GetErrorData().GetStatus() != ErrorData.StatusNone) || (Globdata.GetErrorData().GetErrorEncountered() != 
        ErrorData.ErrorEncounteredNoErrorFound)) || (Globdata.GetErrorData().GetViewOverflow() != 
        ErrorData.ErrorEncounteredNoErrorFound) )
      {
        throw new ABException();
      }
      Globdata.GetStateData().SetCurrentABId( "0022020222" );
      Globdata.GetStateData().SetCurrentABName( "IYY1Q911_TYPE_MAINTAIN_SVC" );
      Globdata.GetStateData().SetLastStatementNumber( "0000000068" );
      WLa.LocErrorIyy1ComponentSeverityCode = FixedStringAttr.ValueOf(Iyy10341Oa.ExpErrorIyy1ComponentSeverityCode, 1);
      WLa.LocErrorIyy1ComponentRollbackIndicator = FixedStringAttr.ValueOf(Iyy10341Oa.ExpErrorIyy1ComponentRollbackIndicator, 1);
      WLa.LocErrorIyy1ComponentOriginServid = DoubleAttr.ValueOf(Iyy10341Oa.ExpErrorIyy1ComponentOriginServid);
      WLa.LocErrorIyy1ComponentContextString = StringAttr.ValueOf(Iyy10341Oa.ExpErrorIyy1ComponentContextString, 512);
      WLa.LocErrorIyy1ComponentReturnCode = IntAttr.ValueOf(Iyy10341Oa.ExpErrorIyy1ComponentReturnCode);
      WLa.LocErrorIyy1ComponentReasonCode = IntAttr.ValueOf(Iyy10341Oa.ExpErrorIyy1ComponentReasonCode);
      WLa.LocErrorIyy1ComponentChecksum = FixedStringAttr.ValueOf(Iyy10341Oa.ExpErrorIyy1ComponentChecksum, 15);
      Iyy10341Ia.FreeInstance(  );
      Iyy10341Ia = null;
      Iyy10341Oa.FreeInstance(  );
      Iyy10341Oa = null;
      
      Globdata.GetStateData().SetLastStatementNumber( "0000000070" );
      if ( ((double) WLa.LocErrorIyy1ComponentReturnCode < (double) WLa.LocDontChangeReturnCodesQ1Ok) )
      {
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        //    **************************************************************  
        //    **                                                              
        //    If the function caught an error...                              
        //                                                                    
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        Globdata.GetStateData().SetLastStatementNumber( "0000000072" );
        WOa.ExpErrorIyy1ComponentSeverityCode = FixedStringAttr.ValueOf(WLa.LocErrorIyy1ComponentSeverityCode, 1);
        WOa.ExpErrorIyy1ComponentRollbackIndicator = FixedStringAttr.ValueOf(WLa.LocErrorIyy1ComponentRollbackIndicator, 1);
        WOa.ExpErrorIyy1ComponentOriginServid = DoubleAttr.ValueOf(WLa.LocErrorIyy1ComponentOriginServid);
        WOa.ExpErrorIyy1ComponentContextString = StringAttr.ValueOf(WLa.LocErrorIyy1ComponentContextString, 512);
        WOa.ExpErrorIyy1ComponentReturnCode = IntAttr.ValueOf(WLa.LocErrorIyy1ComponentReturnCode);
        WOa.ExpErrorIyy1ComponentReasonCode = IntAttr.ValueOf(WLa.LocErrorIyy1ComponentReasonCode);
        WOa.ExpErrorIyy1ComponentChecksum = FixedStringAttr.ValueOf(WLa.LocErrorIyy1ComponentChecksum, 15);
      }
      
      return;
    }
    
    public void f_20972843(  )
    {
      func_0020972843_esc_flag = false;
      Globdata.GetStateData().SetLastStatementNumber( "0000000073" );
      
      Iyy10351Ia = (GEN.ORT.YYY.IYY10351_IA)(IefRuntimeParm2.GetInstance( typeof(GEN.ORT.YYY.IYY10351).Assembly,
      	"GEN.ORT.YYY.IYY10351_IA" ));
      Iyy10351Oa = (GEN.ORT.YYY.IYY10351_OA)(IefRuntimeParm2.GetInstance( typeof(GEN.ORT.YYY.IYY10351).Assembly,
      	"GEN.ORT.YYY.IYY10351_OA" ));
      Iyy10351Ia.ImpFilterIyy1TypeTsearchAttrText = FixedStringAttr.ValueOf(WIa.ImpFilterIyy1TypeTsearchAttrText, 20);
      Iyy10351Ia.ImpFilterIyy1TypeTotherAttrText = FixedStringAttr.ValueOf(WIa.ImpFilterIyy1TypeTotherAttrText, 2);
      Iyy10351Ia.ImpFilterStopIyy1TypeTkeyAttrText = FixedStringAttr.ValueOf(WIa.ImpFilterStopIyy1TypeTkeyAttrText, 4);
      Iyy10351Ia.ImpFilterStartIyy1TypeTkeyAttrText = FixedStringAttr.ValueOf(WIa.ImpFilterStartIyy1TypeTkeyAttrText, 4);
      Iyy10351Ia.ImpFromIyy1TypeTinstanceId = TimestampAttr.ValueOf(WIa.ImpFromIyy1TypeTinstanceId);
      Iyy10351Ia.ImpFromIyy1TypeTkeyAttrText = FixedStringAttr.ValueOf(WIa.ImpFromIyy1TypeTkeyAttrText, 4);
      Iyy10351Ia.ImpFromIyy1TypeTsearchAttrText = FixedStringAttr.ValueOf(WIa.ImpFromIyy1TypeTsearchAttrText, 20);
      Iyy10351Ia.ImpFilterIyy1ListSortOption = FixedStringAttr.ValueOf(WIa.ImpFilterIyy1ListSortOption, 3);
      Iyy10351Ia.ImpFilterIyy1ListScrollType = FixedStringAttr.ValueOf(WIa.ImpFilterIyy1ListScrollType, 1);
      Iyy10351Ia.ImpFilterIyy1ListListDirection = FixedStringAttr.ValueOf(WIa.ImpFilterIyy1ListListDirection, 1);
      Iyy10351Ia.ImpFilterIyy1ListScrollAmount = IntAttr.ValueOf(WIa.ImpFilterIyy1ListScrollAmount);
      Iyy10351Ia.ImpFilterIyy1ListOrderByFieldNum = ShortAttr.ValueOf(WIa.ImpFilterIyy1ListOrderByFieldNum);
      Globdata.GetErrorData().SetErrorEncountered( ErrorData.ErrorEncounteredNoErrorFound );
      IefRuntimeParm2.UseActionBlock( typeof(GEN.ORT.YYY.IYY10351).Assembly,
      	"GEN.ORT.YYY.IYY10351",
      	"Execute",
      	Iyy10351Ia,
      	Iyy10351Oa );
      if ( ((Globdata.GetErrorData().GetStatus() != ErrorData.StatusNone) || (Globdata.GetErrorData().GetErrorEncountered() != 
        ErrorData.ErrorEncounteredNoErrorFound)) || (Globdata.GetErrorData().GetViewOverflow() != 
        ErrorData.ErrorEncounteredNoErrorFound) )
      {
        throw new ABException();
      }
      Globdata.GetStateData().SetCurrentABId( "0022020222" );
      Globdata.GetStateData().SetCurrentABName( "IYY1Q911_TYPE_MAINTAIN_SVC" );
      Globdata.GetStateData().SetLastStatementNumber( "0000000073" );
      WLa.LocErrorIyy1ComponentSeverityCode = FixedStringAttr.ValueOf(Iyy10351Oa.ExpErrorIyy1ComponentSeverityCode, 1);
      WLa.LocErrorIyy1ComponentRollbackIndicator = FixedStringAttr.ValueOf(Iyy10351Oa.ExpErrorIyy1ComponentRollbackIndicator, 1);
      WLa.LocErrorIyy1ComponentOriginServid = DoubleAttr.ValueOf(Iyy10351Oa.ExpErrorIyy1ComponentOriginServid);
      WLa.LocErrorIyy1ComponentContextString = StringAttr.ValueOf(Iyy10351Oa.ExpErrorIyy1ComponentContextString, 512);
      WLa.LocErrorIyy1ComponentReturnCode = IntAttr.ValueOf(Iyy10351Oa.ExpErrorIyy1ComponentReturnCode);
      WLa.LocErrorIyy1ComponentReasonCode = IntAttr.ValueOf(Iyy10351Oa.ExpErrorIyy1ComponentReasonCode);
      WLa.LocErrorIyy1ComponentChecksum = FixedStringAttr.ValueOf(Iyy10351Oa.ExpErrorIyy1ComponentChecksum, 15);
      WOa.ExpGroupList_MA = IntAttr.ValueOf(Iyy10351Oa.ExpGroupList_MA);
      for(Adim1 = 1; Adim1 <= WOa.ExpGroupList_MA; ++(Adim1))
      {
        WOa.ExpGListIyy1TypeTinstanceId[Adim1-1] = TimestampAttr.ValueOf(Iyy10351Oa.ExpGListIyy1TypeTinstanceId[Adim1-1]);
        WOa.ExpGListIyy1TypeTreferenceId[Adim1-1] = TimestampAttr.ValueOf(Iyy10351Oa.ExpGListIyy1TypeTreferenceId[Adim1-1]);
        WOa.ExpGListIyy1TypeTcreateUserId[Adim1-1] = FixedStringAttr.ValueOf(Iyy10351Oa.ExpGListIyy1TypeTcreateUserId[Adim1-1], 8);
        WOa.ExpGListIyy1TypeTupdateUserId[Adim1-1] = FixedStringAttr.ValueOf(Iyy10351Oa.ExpGListIyy1TypeTupdateUserId[Adim1-1], 8);
        WOa.ExpGListIyy1TypeTkeyAttrText[Adim1-1] = FixedStringAttr.ValueOf(Iyy10351Oa.ExpGListIyy1TypeTkeyAttrText[Adim1-1], 4);
        WOa.ExpGListIyy1TypeTsearchAttrText[Adim1-1] = FixedStringAttr.ValueOf(Iyy10351Oa.ExpGListIyy1TypeTsearchAttrText[Adim1-1], 
          20);
        WOa.ExpGListIyy1TypeTotherAttrText[Adim1-1] = FixedStringAttr.ValueOf(Iyy10351Oa.ExpGListIyy1TypeTotherAttrText[Adim1-1], 2)
          ;
        WOa.ExpGListIyy1TypeTotherAttrDate[Adim1-1] = DateAttr.ValueOf(Iyy10351Oa.ExpGListIyy1TypeTotherAttrDate[Adim1-1]);
        WOa.ExpGListIyy1TypeTotherAttrTime[Adim1-1] = TimeAttr.ValueOf(Iyy10351Oa.ExpGListIyy1TypeTotherAttrTime[Adim1-1]);
        WOa.ExpGListIyy1TypeTotherAttrAmount[Adim1-1] = DecimalAttr.ValueOf(Iyy10351Oa.ExpGListIyy1TypeTotherAttrAmount[Adim1-1]);
      }
      Iyy10351Ia.FreeInstance(  );
      Iyy10351Ia = null;
      Iyy10351Oa.FreeInstance(  );
      Iyy10351Oa = null;
      
      Globdata.GetStateData().SetLastStatementNumber( "0000000075" );
      if ( ((double) WLa.LocErrorIyy1ComponentReturnCode < (double) WLa.LocDontChangeReturnCodesQ1Ok) )
      {
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        //    **************************************************************  
        //    **                                                              
        //    If the function caught an error...                              
        //                                                                    
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        Globdata.GetStateData().SetLastStatementNumber( "0000000077" );
        WOa.ExpErrorIyy1ComponentSeverityCode = FixedStringAttr.ValueOf(WLa.LocErrorIyy1ComponentSeverityCode, 1);
        WOa.ExpErrorIyy1ComponentRollbackIndicator = FixedStringAttr.ValueOf(WLa.LocErrorIyy1ComponentRollbackIndicator, 1);
        WOa.ExpErrorIyy1ComponentOriginServid = DoubleAttr.ValueOf(WLa.LocErrorIyy1ComponentOriginServid);
        WOa.ExpErrorIyy1ComponentContextString = StringAttr.ValueOf(WLa.LocErrorIyy1ComponentContextString, 512);
        WOa.ExpErrorIyy1ComponentReturnCode = IntAttr.ValueOf(WLa.LocErrorIyy1ComponentReturnCode);
        WOa.ExpErrorIyy1ComponentReasonCode = IntAttr.ValueOf(WLa.LocErrorIyy1ComponentReasonCode);
        WOa.ExpErrorIyy1ComponentChecksum = FixedStringAttr.ValueOf(WLa.LocErrorIyy1ComponentChecksum, 15);
      }
      
      return;
    }
    
    public void f_20973023(  )
    {
      func_0020973023_esc_flag = false;
      {
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        //    **************************************************************  
        //    **                                                              
        //    If the function caught an error...                              
        //                                                                    
        //                                                                    
        //                                                                    
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        Globdata.GetStateData().SetLastStatementNumber( "0000000053" );
        WOa.ExpErrorIyy1ComponentSeverityCode = FixedStringAttr.ValueOf(WLa.LocErrorIyy1ComponentSeverityCode, 1);
        WOa.ExpErrorIyy1ComponentRollbackIndicator = FixedStringAttr.ValueOf(WLa.LocErrorIyy1ComponentRollbackIndicator, 1);
        WOa.ExpErrorIyy1ComponentOriginServid = DoubleAttr.ValueOf(WLa.LocErrorIyy1ComponentOriginServid);
        WOa.ExpErrorIyy1ComponentContextString = StringAttr.ValueOf(WLa.LocErrorIyy1ComponentContextString, 512);
        WOa.ExpErrorIyy1ComponentReturnCode = IntAttr.ValueOf(WLa.LocErrorIyy1ComponentReturnCode);
        WOa.ExpErrorIyy1ComponentReasonCode = IntAttr.ValueOf(WLa.LocErrorIyy1ComponentReasonCode);
        WOa.ExpErrorIyy1ComponentChecksum = FixedStringAttr.ValueOf(WLa.LocErrorIyy1ComponentChecksum, 15);
        Globdata.GetStateData().SetLastStatementNumber( "0000000054" );
        func_0020973023_esc_flag = true;
        func_0020972837_esc_flag = true;
      }
      f_0020973023_esctag: 
      ;
      return;
    }
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // INITIALIZATION UTILITY FUNCTIONS 
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    
    public void f_22020222_localAlloc( String abname )
    {
      // Request localview allocation 
      WLa = (GEN.ORT.YYY.IYY1Q911_LA)(IefRuntimeParm2.GetInstance( GetType().Assembly,
      	"GEN.ORT.YYY.IYY1Q911_LA" ));
      if ( WLa == null )
      {
        Globdata.GetStateData().SetCurrentABId( "0022020222" );
        Globdata.GetStateData().SetCurrentABName( abname );
        Globdata.GetErrorData().SetErrorEncountered( ErrorData.ErrorEncounteredErrorFound );
        Globdata.GetErrorData().SetLastStatus( ErrorData.LastStatusIefAllocationError );
      }
    }
    
    public void f_22020222_init(  )
    {
      if ( NestingLevel < 2 )
      {
        WLa.Reset();
      }
      WLa.LocGroupContext_MA = 0;
      for(LocGroupContext_PS_002 = 1; LocGroupContext_PS_002 <= 9; ++(LocGroupContext_PS_002))
      {
      }
      WOa.ExpReferenceIyy1ServerDataServerDate = 00000000;
      WOa.ExpReferenceIyy1ServerDataServerTime = 00000000;
      WOa.ExpReferenceIyy1ServerDataReferenceId = "00000000000000000000";
      WOa.ExpIyy1TypeTinstanceId = "00000000000000000000";
      WOa.ExpIyy1TypeTreferenceId = "00000000000000000000";
      WOa.ExpIyy1TypeTcreateUserId = "        ";
      WOa.ExpIyy1TypeTupdateUserId = "        ";
      WOa.ExpIyy1TypeTkeyAttrText = "    ";
      WOa.ExpIyy1TypeTsearchAttrText = "                    ";
      WOa.ExpIyy1TypeTotherAttrText = "  ";
      WOa.ExpIyy1TypeTotherAttrDate = 00000000;
      WOa.ExpIyy1TypeTotherAttrTime = 00000000;
      WOa.ExpIyy1TypeTotherAttrAmount = DecimalAttr.GetDefaultValue();
      WOa.ExpTsIyy1TypeTinstanceId = "00000000000000000000";
      WOa.ExpTsIyy1TypeTreferenceId = "00000000000000000000";
      WOa.ExpGroupList_MA = 0;
      for(ExpGroupList_PS_001 = 1; ExpGroupList_PS_001 <= 48; ++(ExpGroupList_PS_001))
      {
        WOa.ExpGListIyy1TypeTinstanceId[ExpGroupList_PS_001-1] = "00000000000000000000";
        WOa.ExpGListIyy1TypeTreferenceId[ExpGroupList_PS_001-1] = "00000000000000000000";
        WOa.ExpGListIyy1TypeTcreateUserId[ExpGroupList_PS_001-1] = "        ";
        WOa.ExpGListIyy1TypeTupdateUserId[ExpGroupList_PS_001-1] = "        ";
        WOa.ExpGListIyy1TypeTkeyAttrText[ExpGroupList_PS_001-1] = "    ";
        WOa.ExpGListIyy1TypeTsearchAttrText[ExpGroupList_PS_001-1] = "                    ";
        WOa.ExpGListIyy1TypeTotherAttrText[ExpGroupList_PS_001-1] = "  ";
        WOa.ExpGListIyy1TypeTotherAttrDate[ExpGroupList_PS_001-1] = 00000000;
        WOa.ExpGListIyy1TypeTotherAttrTime[ExpGroupList_PS_001-1] = 00000000;
        WOa.ExpGListIyy1TypeTotherAttrAmount[ExpGroupList_PS_001-1] = DecimalAttr.GetDefaultValue();
      }
      WOa.ExpMsgIyy1ComponentSeverityCode = " ";
      WOa.ExpMsgIyy1ComponentMessageTx = "";
      WOa.ExpErrorIyy1ComponentSeverityCode = " ";
      WOa.ExpErrorIyy1ComponentRollbackIndicator = " ";
      WOa.ExpErrorIyy1ComponentOriginServid = 0.0;
      WOa.ExpErrorIyy1ComponentContextString = "";
      WOa.ExpErrorIyy1ComponentReturnCode = 0;
      WOa.ExpErrorIyy1ComponentReasonCode = 0;
      WOa.ExpErrorIyy1ComponentChecksum = "               ";
      WOa.ExpErrorIyy1ComponentDialectCd = "  ";
      ExpGroupList_PS_001 = 1;
      LocGroupContext_PS_002 = 1;
    }
    public void f_173015139_rgvc(  )
    {
      if ( (LocGroupContext_PS_002 > 9) || (LocGroupContext_PS_002 < 1) )
      {
        Globdata.GetErrorData().SetViewOverflow( ErrorData.ErrorEncounteredErrorFound );
        {
          throw new ABException();
        }
      }
    }
  }// end class
  
}

