namespace GEN.ORT.YYY
{
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  //
  //                    Source Code Generated by
  //                           CA Gen 8.6
  //
  //    Copyright (c) 2024 CA Technologies. All rights reserved.
  //
  //    Name: IYY10121_PARENT_READ_S           Date: 2024/01/09
  //    Target OS:   CLR                       Time: 13:41:55
  //    Target DBMS: ODBC/ADO.NET              User: AliAl
  //    Access Method: <NONE>         
  //
  //    Generation options:
  //    Debug trace option not selected
  //    Data modeling constraint enforcement not selected
  //    Optimized import view initialization not selected
  //    Enforce default values with DBMS not selected
  //    Init unspecified optional fields to NULL not selected
  //
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // using Statements
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  using System;
  using com.ca.gen.vwrt;
  using com.ca.gen.vwrt.types;
  using com.ca.gen.vwrt.vdf;
  using com.ca.gen.csu.exception;
  
  using com.ca.gen.abrt;
  using com.ca.gen.abrt.functions;
  using com.ca.gen.abrt.cascade;
  using com.ca.gen.abrt.manager;
  using com.ca.gen.abrt.trace;
  using com.ca.gen.exits.common;
  using com.ca.gen.odc;
  using System.Data;
  using System.Collections;
  
  public class IYY10121 : ABBase
  {
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // IMPORT VIEW CLASS VARIABLE
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    IYY10121_IA WIa;
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // EXPORT VIEW CLASS VARIABLE
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    IYY10121_OA WOa;
    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // ACTION BLOCK IMPORT/EXPORT VIEWS CLASS VARIABLES
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    GEN.ORT.YYY.MYY10121_IA Myy10121Ia;
    GEN.ORT.YYY.MYY10121_OA Myy10121Oa;
    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // MISC DECLARATIONS AND PROTOTYPES 
    //    FOLLOW AS NEEDED:             
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    bool func_0022020323_esc_flag;
    //       +->   IYY10121_PARENT_READ_S            01/09/2024  13:41
    //       !       IMPORTS:
    //       !         Entity View imp iyy1_parent (Transient, Mandatory,
    //       !                     Import only)
    //       !           pinstance_id
    //       !           pkey_attr_text
    //       !       EXPORTS:
    //       !         Entity View exp iyy1_parent (Transient, Export only)
    //       !           pinstance_id
    //       !           preference_id
    //       !           pcreate_user_id
    //       !           pupdate_user_id
    //       !           pkey_attr_text
    //       !           psearch_attr_text
    //       !           pother_attr_text
    //       !           ptype_tkey_attr_text
    //       !         Work View exp_error iyy1_component (Transient, Export
    //       !                     only)
    //       !           severity_code
    //       !           rollback_indicator
    //       !           origin_servid
    //       !           context_string
    //       !           return_code
    //       !           reason_code
    //       !           checksum
    //       !
    //       !     PROCEDURE STATEMENTS
    //       !
    //     1 !  NOTE: 
    //     1 !  PURPOSE(CONTINUED)
    //     1 !  
    //     2 !  NOTE: 
    //     2 !  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    //     2 !  !!!!!!!!!!!!
    //     2 !  Review the Pre-Post Conditions and Return/Reason Codes.
    //     2 !  
    //     3 !  NOTE: 
    //     3 !  PRE-CONDITION
    //     3 !  Key belonging to an existing record is given.
    //     3 !  POST-CONDITION
    //     3 !  Record is read.
    //     3 !  Return Code = 1, Reason Code = 1
    //     3 !  
    //     4 !  NOTE: 
    //     4 !  PRE-CONDITION
    //     4 !  Key is given belonging to an unexisting record, or the key
    //     4 !  field includes an invalid value..
    //     4 !  POST-CONDITION
    //     4 !  Record cannot be read.
    //     4 !  Return Code = -10, Reason Code = 1
    //     4 !  
    //     5 !  NOTE: 
    //     5 !  RETURN / REASON CODES
    //     5 !  +1/1 Record has been read.
    //     5 !  +1999/1 Other warnings.
    //     5 !  -10/1 Record could not be found.
    //     5 !  -1999/1 Other warnings.
    //     5 !  
    //     6 !  NOTE: 
    //     6 !  RELEASE HISTORY
    //     6 !  01_00 23-02-1998 New release
    //     6 !  
    //     7 !  NOTE: 
    //     7 !  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    //     7 !  !!!!!!!!!!!!
    //     7 !  USE <mapper ab>
    //     7 !  
    //     8 !  USE myy10121_parent_read
    //     8 !     WHICH IMPORTS: Entity View imp iyy1_parent TO Entity View
    //     8 !              imp iyy1_parent
    //     8 !     WHICH EXPORTS: Entity View exp iyy1_parent FROM Entity View
    //     8 !              exp iyy1_parent
    //     8 !                    Work View exp_error iyy1_component FROM Work
    //     8 !              View exp_error iyy1_component
    //       +---
    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    //  CONSTRUCTOR FOR THE CLASS       
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    public IYY10121(  )
    {
      IefCGenRlse = "CA Gen 8.6";
      IsCopyright = "Copyright (c) 2024 CA Technologies. All rights reserved.";
      IefCGenDate = "2024/01/09";
      IefCGenTime = "13:41:55";
      IefCGenEncy = "9.2.A6";
      IefCGenUserId = "AliAl";
      IefCGenModel = "N8I_ORT_YYY_0112_TEMPLATE";
      IefCGenSubset = "ALL";
      IefCGenName = "IYY10121_PARENT_READ_S";
      NestingLevel = 0;
      ValChkDeadlockTimeout = false;
      ValChkDBError = false;
    }
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // ACTION BLOCK FUNCTION DECLARATIONS 
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    
    public void Execute( Object in_runtime_parm1, 
    	IRuntimePStepContext in_runtime_parm2, 
    	GlobData in_globdata, 
    	IYY10121_IA import_view, 
    	IYY10121_OA export_view )
    {
      IefRuntimeParm1 = in_runtime_parm1;
      IefRuntimeParm2 = in_runtime_parm2;
      Globdata = in_globdata;
      WIa = import_view;
      WOa = export_view;
      _Execute();
    }
    
    private void _Execute()
    {
      
      ++(NestingLevel);
      try {
        f_22020323_init(  );
        f_22020323(  );
      } catch( Exception e ) {
        if ( ((Globdata.GetErrorData().GetStatus() == ErrorData.StatusNone) && (Globdata.GetErrorData().GetErrorEncountered() == 
          ErrorData.ErrorEncounteredNoErrorFound)) && (Globdata.GetErrorData().GetViewOverflow() == 
          ErrorData.ErrorEncounteredNoErrorFound) )
        {
          Globdata.GetErrorData().SetStatus( ErrorData.LastStatusFatalError );
          Globdata.GetErrorData().SetLastStatus( ErrorData.LastStatusUnexpectedExceptionError );
          Globdata.GetErrorData().SetErrorEncountered( ErrorData.ErrorEncounteredErrorFound );
          Globdata.GetErrorData(  ).SetErrorMessage( e );
        }
      }
      --(NestingLevel);
    }
    public void f_22020323(  )
    {
      func_0022020323_esc_flag = false;
      Globdata.GetStateData().SetCurrentABId( "0022020323" );
      Globdata.GetStateData().SetCurrentABName( "IYY10121_PARENT_READ_S" );
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    PURPOSE(CONTINUED)                                              
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  
      //    !!!!!!!!!!!!                                                    
      //    Review the Pre-Post Conditions and Return/Reason Codes.         
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    PRE-CONDITION                                                   
      //    Key belonging to an existing record is given.                   
      //    POST-CONDITION                                                  
      //    Record is read.                                                 
      //    Return Code = 1, Reason Code = 1                                
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    PRE-CONDITION                                                   
      //    Key is given belonging to an unexisting record, or the key      
      //    field includes an invalid value..                               
      //    POST-CONDITION                                                  
      //    Record cannot be read.                                          
      //    Return Code = -10, Reason Code = 1                              
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    RETURN / REASON CODES                                           
      //    +1/1 Record has been read.                                      
      //    +1999/1 Other warnings.                                         
      //    -10/1 Record could not be found.                                
      //    -1999/1 Other warnings.                                         
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    RELEASE HISTORY                                                 
      //    01_00 23-02-1998 New release                                    
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  
      //    !!!!!!!!!!!!                                                    
      //    USE <mapper ab>                                                 
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      Globdata.GetStateData().SetLastStatementNumber( "0000000008" );
      
      Myy10121Ia = (GEN.ORT.YYY.MYY10121_IA)(IefRuntimeParm2.GetInstance( typeof(GEN.ORT.YYY.MYY10121).Assembly,
      	"GEN.ORT.YYY.MYY10121_IA" ));
      Myy10121Oa = (GEN.ORT.YYY.MYY10121_OA)(IefRuntimeParm2.GetInstance( typeof(GEN.ORT.YYY.MYY10121).Assembly,
      	"GEN.ORT.YYY.MYY10121_OA" ));
      Myy10121Ia.ImpIyy1ParentPinstanceId = TimestampAttr.ValueOf(WIa.ImpIyy1ParentPinstanceId);
      Myy10121Ia.ImpIyy1ParentPkeyAttrText = FixedStringAttr.ValueOf(WIa.ImpIyy1ParentPkeyAttrText, 5);
      Globdata.GetErrorData().SetErrorEncountered( ErrorData.ErrorEncounteredNoErrorFound );
      IefRuntimeParm2.UseActionBlock( typeof(GEN.ORT.YYY.MYY10121).Assembly,
      	"GEN.ORT.YYY.MYY10121",
      	"Execute",
      	Myy10121Ia,
      	Myy10121Oa );
      if ( ((Globdata.GetErrorData().GetStatus() != ErrorData.StatusNone) || (Globdata.GetErrorData().GetErrorEncountered() != 
        ErrorData.ErrorEncounteredNoErrorFound)) || (Globdata.GetErrorData().GetViewOverflow() != 
        ErrorData.ErrorEncounteredNoErrorFound) )
      {
        throw new ABException();
      }
      Globdata.GetStateData().SetCurrentABId( "0022020323" );
      Globdata.GetStateData().SetCurrentABName( "IYY10121_PARENT_READ_S" );
      Globdata.GetStateData().SetLastStatementNumber( "0000000008" );
      WOa.ExpErrorIyy1ComponentSeverityCode = FixedStringAttr.ValueOf(Myy10121Oa.ExpErrorIyy1ComponentSeverityCode, 1);
      WOa.ExpErrorIyy1ComponentRollbackIndicator = FixedStringAttr.ValueOf(Myy10121Oa.ExpErrorIyy1ComponentRollbackIndicator, 1);
      WOa.ExpErrorIyy1ComponentOriginServid = DoubleAttr.ValueOf(Myy10121Oa.ExpErrorIyy1ComponentOriginServid);
      WOa.ExpErrorIyy1ComponentContextString = StringAttr.ValueOf(Myy10121Oa.ExpErrorIyy1ComponentContextString, 512);
      WOa.ExpErrorIyy1ComponentReturnCode = IntAttr.ValueOf(Myy10121Oa.ExpErrorIyy1ComponentReturnCode);
      WOa.ExpErrorIyy1ComponentReasonCode = IntAttr.ValueOf(Myy10121Oa.ExpErrorIyy1ComponentReasonCode);
      WOa.ExpErrorIyy1ComponentChecksum = FixedStringAttr.ValueOf(Myy10121Oa.ExpErrorIyy1ComponentChecksum, 15);
      WOa.ExpIyy1ParentPinstanceId = TimestampAttr.ValueOf(Myy10121Oa.ExpIyy1ParentPinstanceId);
      WOa.ExpIyy1ParentPreferenceId = TimestampAttr.ValueOf(Myy10121Oa.ExpIyy1ParentPreferenceId);
      WOa.ExpIyy1ParentPcreateUserId = FixedStringAttr.ValueOf(Myy10121Oa.ExpIyy1ParentPcreateUserId, 8);
      WOa.ExpIyy1ParentPupdateUserId = FixedStringAttr.ValueOf(Myy10121Oa.ExpIyy1ParentPupdateUserId, 8);
      WOa.ExpIyy1ParentPkeyAttrText = FixedStringAttr.ValueOf(Myy10121Oa.ExpIyy1ParentPkeyAttrText, 5);
      WOa.ExpIyy1ParentPsearchAttrText = FixedStringAttr.ValueOf(Myy10121Oa.ExpIyy1ParentPsearchAttrText, 25);
      WOa.ExpIyy1ParentPotherAttrText = FixedStringAttr.ValueOf(Myy10121Oa.ExpIyy1ParentPotherAttrText, 25);
      WOa.ExpIyy1ParentPtypeTkeyAttrText = FixedStringAttr.ValueOf(Myy10121Oa.ExpIyy1ParentPtypeTkeyAttrText, 4);
      Myy10121Ia.FreeInstance(  );
      Myy10121Ia = null;
      Myy10121Oa.FreeInstance(  );
      Myy10121Oa = null;
      return;
    }
    
    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // SUBORDINATE FUNCTIONS
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // INITIALIZATION UTILITY FUNCTIONS 
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    
    public void f_22020323_init(  )
    {
      if ( NestingLevel < 2 )
      {
      }
      WOa.ExpIyy1ParentPinstanceId = "00000000000000000000";
      WOa.ExpIyy1ParentPreferenceId = "00000000000000000000";
      WOa.ExpIyy1ParentPcreateUserId = "        ";
      WOa.ExpIyy1ParentPupdateUserId = "        ";
      WOa.ExpIyy1ParentPkeyAttrText = "     ";
      WOa.ExpIyy1ParentPsearchAttrText = "                         ";
      WOa.ExpIyy1ParentPotherAttrText = "                         ";
      WOa.ExpIyy1ParentPtypeTkeyAttrText = "    ";
      WOa.ExpErrorIyy1ComponentSeverityCode = " ";
      WOa.ExpErrorIyy1ComponentRollbackIndicator = " ";
      WOa.ExpErrorIyy1ComponentOriginServid = 0.0;
      WOa.ExpErrorIyy1ComponentContextString = "";
      WOa.ExpErrorIyy1ComponentReturnCode = 0;
      WOa.ExpErrorIyy1ComponentReasonCode = 0;
      WOa.ExpErrorIyy1ComponentChecksum = "               ";
    }
  }// end class
  
}

