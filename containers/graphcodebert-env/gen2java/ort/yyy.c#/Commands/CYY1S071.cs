namespace GEN.ORT.YYY
{
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  //
  //                    Source Code Generated by
  //                           CA Gen 8.6
  //
  //    Copyright (c) 2024 CA Technologies. All rights reserved.
  //
  //    Name: CYY1S071_TYPE_MAINTAIN           Date: 2024/01/09
  //    Target OS:   CLR                       Time: 13:41:13
  //    Target DBMS: ODBC/ADO.NET              User: AliAl
  //    Access Method: <NONE>         
  //
  //    Generation options:
  //    Debug trace option not selected
  //    Data modeling constraint enforcement not selected
  //    Optimized import view initialization not selected
  //    Enforce default values with DBMS not selected
  //    Init unspecified optional fields to NULL not selected
  //
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // using Statements
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  using System;
  using com.ca.gen.vwrt;
  using com.ca.gen.vwrt.types;
  using com.ca.gen.vwrt.vdf;
  using com.ca.gen.csu.exception;
  
  using com.ca.gen.abrt;
  using com.ca.gen.abrt.functions;
  using com.ca.gen.abrt.cascade;
  using com.ca.gen.abrt.manager;
  using com.ca.gen.abrt.trace;
  using com.ca.gen.exits.common;
  using com.ca.gen.odc;
  using System.Data;
  using System.Collections;
  
  public class CYY1S071 : ABBase
  {
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // IMPORT VIEW CLASS VARIABLE
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    CYY1S071_IA WIa;
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // EXPORT VIEW CLASS VARIABLE
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    CYY1S071_OA WOa;
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // LOCAL VIEW CLASS VARIABLE
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    CYY1S071_LA WLa;
    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // ACTION BLOCK IMPORT/EXPORT VIEWS CLASS VARIABLES
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    GEN.ORT.YYY.CYYY9001_OA Cyyy9001Oa;
    GEN.ORT.YYY.CYYY0311_IA Cyyy0311Ia;
    GEN.ORT.YYY.CYYY0311_OA Cyyy0311Oa;
    GEN.ORT.YYY.CYYY0321_IA Cyyy0321Ia;
    GEN.ORT.YYY.CYYY0321_OA Cyyy0321Oa;
    GEN.ORT.YYY.CYYY0331_IA Cyyy0331Ia;
    GEN.ORT.YYY.CYYY0331_OA Cyyy0331Oa;
    GEN.ORT.YYY.CYYY0341_IA Cyyy0341Ia;
    GEN.ORT.YYY.CYYY0341_OA Cyyy0341Oa;
    GEN.ORT.YYY.ISC1Z021_IA Isc1z021Ia;
    GEN.ORT.YYY.ISC1Z021_OA Isc1z021Oa;
    GEN.ORT.YYY.CYYY9831_IA Cyyy9831Ia;
    GEN.ORT.YYY.CYYY9831_OA Cyyy9831Oa;
    GEN.ORT.YYY.CYYY9141_IA Cyyy9141Ia;
    GEN.ORT.YYY.CYYY9141_OA Cyyy9141Oa;
    GEN.ORT.YYY.CYY1A121_IA Cyy1a121Ia;
    GEN.ORT.YYY.CYY1A121_OA Cyy1a121Oa;
    GEN.ORT.YYY.CYY1A131_OA Cyy1a131Oa;
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // REPEATING GROUP VIEW STATUS FIELDS 
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    bool LocGroupContext_FL_001;
    int LocGroupContext_PS_001;
    bool LocGroupContext_RF_001;
    public const int LocGroupContext_MM_001 = 9;
    bool ImpGroupTrans_FL_002;
    int ImpGroupTrans_PS_002;
    bool ImpGroupTrans_RF_002;
    public const int ImpGroupTrans_MM_002 = 30;
    bool ImpGroupContext_FL_003;
    int ImpGroupContext_PS_003;
    bool ImpGroupContext_RF_003;
    public const int ImpGroupContext_MM_003 = 9;
    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // MISC DECLARATIONS AND PROTOTYPES 
    //    FOLLOW AS NEEDED:             
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    bool func_0022020345_esc_flag;
    bool func_0020972919_esc_flag;
    bool func_0020972568_esc_flag;
    bool func_0020972109_esc_flag;
    bool func_0020972115_esc_flag;
    bool func_0020972215_esc_flag;
    bool func_0020972226_esc_flag;
    bool func_0020972534_esc_flag;
    bool func_0020972535_esc_flag;
    bool func_0020972633_esc_flag;
    bool func_0020972637_esc_flag;
    //       +->   CYY1S071_TYPE_MAINTAIN            01/09/2024  13:41
    //       !       IMPORTS:
    //       !         Work View imp_command iyy1_component (Transient,
    //       !                     Mandatory, Import only)
    //       !           send_command
    //       !         Work View imp_dialect iyy1_component (Transient,
    //       !                     Mandatory, Import only)
    //       !           dialect_cd
    //       !         Entity View imp isc1_authorization_info (Transient,
    //       !                     Mandatory, Import only)
    //       !           userid
    //       !           token_id
    //       !           module_id
    //       !           authority_object_id
    //       !           version
    //       !           working_unit_num
    //       !         Entity View imp type (Transient, Optional, Import only)
    //       !           tinstance_id
    //       !           treference_id
    //       !           tkey_attr_text
    //       !           tsearch_attr_text
    //       !           tother_attr_text
    //       !           tother_attr_date
    //       !           tother_attr_time
    //       !           tother_attr_amount
    //       !       EXPORTS:
    //       !         Work View exp_reference iyy1_server_data (Transient,
    //       !                     Export only)
    //       !           server_date
    //       !           server_time
    //       !           reference_id
    //       !         Entity View exp isc1_authorization_info (Transient,
    //       !                     Export only)
    //       !           token_id
    //       !           authority_ind
    //       !           authority_status_r
    //       !           authority_status_u
    //       !           authority_status_d
    //       !           authority_status_l
    //       !         Entity View exp_all type (Transient, Export only)
    //       !           tinstance_id
    //       !           treference_id
    //       !           tcreate_user_id
    //       !           tupdate_user_id
    //       !           tkey_attr_text
    //       !           tsearch_attr_text
    //       !           tother_attr_text
    //       !           tother_attr_date
    //       !           tother_attr_time
    //       !           tother_attr_amount
    //       !         Entity View exp_ts type (Transient, Export only)
    //       !           tinstance_id
    //       !           treference_id
    //       !         Work View exp_msg iyy1_component (Transient, Export
    //       !                     only)
    //       !           severity_code
    //       !           message_tx
    //       !         Work View exp_error iyy1_component (Transient, Export
    //       !                     only)
    //       !           severity_code
    //       !           rollback_indicator
    //       !           origin_servid
    //       !           context_string
    //       !           return_code
    //       !           reason_code
    //       !           checksum
    //       !       LOCALS:
    //       !         Work View loc_reference iyy1_server_data
    //       !           userid
    //       !           server_date
    //       !           server_time
    //       !           reference_id
    //       !           server_timestamp
    //       !         Work View loc_error isc1_component
    //       !           severity_code
    //       !           rollback_indicator
    //       !           origin_servid
    //       !           context_string
    //       !           return_code
    //       !           reason_code
    //       !           checksum
    //       !         Group View (9) loc_group_context
    //       !           Work View loc_g_context dont_change_text
    //       !             text_150
    //       !         Work View loc_error iyy1_component
    //       !           severity_code
    //       !           rollback_indicator
    //       !           origin_servid
    //       !           context_string
    //       !           return_code
    //       !           reason_code
    //       !           checksum
    //       !         Work View loc_context iyy1_component
    //       !           context_string
    //       !         Work View loc dont_change_return_codes
    //       !           1_ok
    //       !           n1110_unauthorized_operation
    //       !           n1120_invalid_command
    //       !         Work View loc dont_change_reason_codes
    //       !           1_default
    //       !
    //       !     PROCEDURE STATEMENTS
    //       !
    //     1 !  NOTE: 
    //     1 !  PURPOSE(CONTINUED)
    //     2 !   
    //     3 !  NOTE: 
    //     3 !  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    //     3 !  !!!!!!!!!!!!
    //     3 !  Review Pre-Post Conditiona and Return/Reason Codes.
    //     3 !  
    //     4 !  NOTE: 
    //     4 !  PRE-CONDITION:
    //     4 !  Init command, user data is submitted.
    //     4 !  POST-CONDITION:
    //     4 !  Security check results are produced.
    //     4 !  RETURN CODE = 1, REASON CODE = 1
    //     5 !   
    //     6 !  NOTE: 
    //     6 !  PRE-CONDITION:
    //     6 !  READ command, key fields are submitted.
    //     6 !  POST-CONDITION:
    //     6 !  The record is read, EXP_ALL and EXP_TS are produced.
    //     6 !  RETURN CODE = 1, REASON CODE = 1
    //     7 !   
    //     8 !  NOTE: 
    //     8 !  PRE-CONDITION:
    //     8 !  UPDATE command, all fields are submitted.
    //     8 !  POST-CONDITION:
    //     8 !  The record is read and updated, EXP_TS are produced.
    //     8 !  RETURN CODE = 1, REASON CODE = 1
    //     9 !   
    //    10 !  NOTE: 
    //    10 !  PRE-CONDITION:
    //    10 !  DELETE command, key fields and last update date are submitted.
    //    10 !  POST-CONDITION:
    //    10 !  The record is read and deleted.
    //    10 !  RETURN CODE = 1, REASON CODE = 1
    //    11 !   
    //    12 !  NOTE: 
    //    12 !  PRE-CONDITION:
    //    12 !  CREATE command, all fields are submitted.
    //    12 !  POST-CONDITION:
    //    12 !  The record is created, EXP_TS are produced.
    //    12 !  RETURN CODE = 1, REASON CODE = 1
    //    13 !   
    //    14 !  NOTE: 
    //    14 !  PRE-CONDITION:
    //    14 !  Any command but listed above is submitted.
    //    14 !  POST-CONDITION:
    //    14 !  No results are produced.
    //    14 !  RETURN CODE = -1120, REASON CODE = 1
    //    14 !  
    //    15 !  NOTE: 
    //    15 !  PRE-CONDITION:
    //    15 !  The user is not authorized for performing the operation.
    //    15 !  POST-CONDITION:
    //    15 !  No results are produced.
    //    15 !  RETURN CODE = -1110, REASON CODE = 1
    //    16 !   
    //    17 !  NOTE: 
    //    17 !  RETURN / REASON  CODES
    //    17 !  +1/1 Normal
    //    17 !  -1110/1 Unauthorized operation
    //    17 !  -1120/1 Erroneous command
    //    18 !   
    //    19 !  NOTE: 
    //    19 !  RELEASE HISTORY
    //    19 !  01_00 23-02-1998 New release
    //    20 !   
    //    21 !  USE cyyy9001_exception_hndlng_dflt
    //    21 !     WHICH EXPORTS: Work View exp_error iyy1_component FROM Work
    //    21 !              View exp_error iyy1_component
    //    22 !   
    //    23 !  NOTE: 
    //    23 !  **************************************************************
    //    23 !  Return/Reason code values
    //    23 !  
    //    24 !  NOTE: 
    //    24 !  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    //    24 !  Set the values of used return codes/reason codes.
    //    24 !  
    //    25 !  SET loc dont_change_return_codes 1_ok TO 1 
    //    26 !  SET loc dont_change_return_codes n1110_unauthorized_operation
    //    26 !              TO -1110 
    //    27 !  SET loc dont_change_return_codes n1120_invalid_command TO
    //    27 !              -1120 
    //    28 !   
    //    29 !  SET loc dont_change_reason_codes 1_default TO 1 
    //    30 !   
    //    31 !  NOTE: 
    //    31 !  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    //    31 !  Please rename the procedure name below.
    //    31 !  
    //    32 !  SET SUBSCRIPT OF loc_group_context TO 1 
    //    33 !  SET loc_g_context dont_change_text text_150 TO "CYY1S071" 
    //    34 !  SET SUBSCRIPT OF loc_group_context TO 2 
    //    35 !  SET loc_g_context dont_change_text text_150 TO imp_command
    //    35 !              iyy1_component send_command 
    //    36 !   
    //    37 !  USE cyy1a131_server_init
    //    37 !     WHICH EXPORTS: Work View loc_reference iyy1_server_data
    //    37 !              FROM Work View exp_reference iyy1_server_data
    //    38 !  MOVE loc_reference iyy1_server_data TO exp_reference
    //    38 !              iyy1_server_data
    //    39 !   
    //    40 !  NOTE: 
    //    40 !  ****************************************************************
    //    40 !  Security check
    //    40 !  
    //    41 !  USE isc1z021_o_authorization_check_s
    //    41 !     WHICH IMPORTS: Entity View imp isc1_authorization_info TO
    //    41 !              Entity View imp isc1_authorization_info
    //    41 !     WHICH EXPORTS: Entity View exp isc1_authorization_info FROM
    //    41 !              Entity View exp isc1_authorization_info
    //    41 !                    Work View loc_error isc1_component FROM Work
    //    41 !              View exp_error isc1_component
    //    42 !   
    //    43 !  +->IF loc_error isc1_component return_code < loc
    //    43 !  !        dont_change_return_codes 1_ok
    //    44 !  !  USE cyyy9831_mv_sc1_to_yy1
    //    44 !  !     WHICH IMPORTS: Work View loc_error isc1_component TO
    //    44 !  !              Work View imp_error isc1_component
    //    44 !  !     WHICH EXPORTS: Work View exp_error iyy1_component FROM
    //    44 !  !              Work View exp_error iyy1_component
    //    43 !  +--
    //    45 !   
    //    46 !  NOTE: 
    //    46 !  ****************************************************************
    //    46 !  All the necessary checking for the server is performed.
    //    46 !  
    //    47 !  +->IF exp_error iyy1_component return_code = loc
    //    47 !  !        dont_change_return_codes 1_ok
    //    48 !  !   
    //    49 !  !  NOTE: 
    //    49 ...**************************************************************
    //    49 ...**
    //    49 ...Check the required operation..
    //    49 ...
    //    50 !  !  SET loc_reference iyy1_server_data userid TO imp
    //    50 !  !              isc1_authorization_info userid 
    //    51 !  !   
    //    52 !  !  +->CASE OF imp_command iyy1_component send_command
    //    52 !  !  +> CASE "INIT"
    //    52 !  !  +> CASE "CREATE"
    //    53 !  !  !  +->IF exp isc1_authorization_info authority_status_u ^=
    //    53 !  !  !  !        "Y"
    //    54 !  !  !  !  SET exp_error iyy1_component return_code TO loc
    //    54 !  !  !  !              dont_change_return_codes
    //    54 !  !  !  !              n1110_unauthorized_operation 
    //    55 !  !  !  !  SET exp_error iyy1_component reason_code TO loc
    //    55 !  !  !  !              dont_change_reason_codes 1_default 
    //    56 !  !  !  !  SET SUBSCRIPT OF loc_group_context TO 3 
    //    57 !  !  !  !  SET loc_g_context dont_change_text text_150 TO
    //    57 !  !  !  !              CLIENT_USER_ID 
    //    53 !  !  !  +--
    //    52 !  !  +> CASE "READ"
    //    58 !  !  !  +->IF exp isc1_authorization_info authority_status_r ^=
    //    58 !  !  !  !        "Y"
    //    59 !  !  !  !  SET exp_error iyy1_component return_code TO loc
    //    59 !  !  !  !              dont_change_return_codes
    //    59 !  !  !  !              n1110_unauthorized_operation 
    //    60 !  !  !  !  SET exp_error iyy1_component reason_code TO loc
    //    60 !  !  !  !              dont_change_reason_codes 1_default 
    //    61 !  !  !  !  SET SUBSCRIPT OF loc_group_context TO 3 
    //    62 !  !  !  !  SET loc_g_context dont_change_text text_150 TO
    //    62 !  !  !  !              CLIENT_USER_ID 
    //    58 !  !  !  +--
    //    52 !  !  +> CASE "UPDATE"
    //    63 !  !  !  +->IF exp isc1_authorization_info authority_status_u ^=
    //    63 !  !  !  !        "Y"
    //    64 !  !  !  !  SET exp_error iyy1_component return_code TO loc
    //    64 !  !  !  !              dont_change_return_codes
    //    64 !  !  !  !              n1110_unauthorized_operation 
    //    65 !  !  !  !  SET exp_error iyy1_component reason_code TO loc
    //    65 !  !  !  !              dont_change_reason_codes 1_default 
    //    66 !  !  !  !  SET SUBSCRIPT OF loc_group_context TO 3 
    //    67 !  !  !  !  SET loc_g_context dont_change_text text_150 TO
    //    67 !  !  !  !              CLIENT_USER_ID 
    //    63 !  !  !  +--
    //    52 !  !  +> CASE "DELETE"
    //    68 !  !  !  +->IF exp isc1_authorization_info authority_status_d ^=
    //    68 !  !  !  !        "Y"
    //    69 !  !  !  !  SET exp_error iyy1_component return_code TO loc
    //    69 !  !  !  !              dont_change_return_codes
    //    69 !  !  !  !              n1110_unauthorized_operation 
    //    70 !  !  !  !  SET exp_error iyy1_component reason_code TO loc
    //    70 !  !  !  !              dont_change_reason_codes 1_default 
    //    71 !  !  !  !  SET SUBSCRIPT OF loc_group_context TO 3 
    //    72 !  !  !  !  SET loc_g_context dont_change_text text_150 TO
    //    72 !  !  !  !              CLIENT_USER_ID 
    //    68 !  !  !  +--
    //    52 !  !  +> OTHERWISE
    //    73 !  !  !  SET exp_error iyy1_component return_code TO loc
    //    73 !  !  !              dont_change_return_codes
    //    73 !  !  !              n1120_invalid_command 
    //    74 !  !  !  SET exp_error iyy1_component reason_code TO loc
    //    74 !  !  !              dont_change_reason_codes 1_default 
    //    75 !  !  !  SET SUBSCRIPT OF loc_group_context TO 3 
    //    76 !  !  !  SET loc_g_context dont_change_text text_150 TO
    //    76 !  !  !              imp_command iyy1_component send_command 
    //    52 !  !  +--
    //    77 !  !   
    //    78 !  !  NOTE: 
    //    78 ...**************************************************************
    //    78 ...**
    //    78 ...All of the checking process is OK. Form the context string.
    //    78 ...
    //    79 !  !  NOTE: 
    //    79 ...**************************************************************
    //    79 ...**
    //    79 ...Form the context string whether there is error or not. 
    //    79 ...For non error situations there is a message returned.
    //    79 ...
    //    80 !  !  USE cyyy9141_context_string_set
    //    80 !  !     WHICH IMPORTS: Group View  loc_group_context TO Group
    //    80 !  !              View imp_group_context
    //    80 !  !     WHICH EXPORTS: Work View loc_error iyy1_component FROM
    //    80 !  !              Work View exp_error iyy1_component
    //    80 !  !                    Work View loc_context iyy1_component FROM
    //    80 !  !              Work View exp_context iyy1_component
    //    81 !  !  +->IF loc_error iyy1_component return_code < loc
    //    81 !  !  !        dont_change_return_codes 1_ok
    //    82 !  !  !  MOVE loc_error iyy1_component TO exp_error
    //    82 !  !  !              iyy1_component
    //    81 !  !  +> ELSE
    //    83 !  !  !  SET exp_error iyy1_component context_string TO
    //    83 !  !  !              loc_context iyy1_component context_string 
    //    81 !  !  +--
    //    47 !  +--
    //    84 !   
    //    85 !  NOTE: 
    //    85 !  ****************************************************************
    //    85 !  All of the checking process is OK.
    //    85 !  
    //    86 !  +->IF exp_error iyy1_component return_code = loc
    //    86 !  !        dont_change_return_codes 1_ok
    //    87 !  !   
    //    88 !  !  +->CASE OF imp_command iyy1_component send_command
    //    88 !  !  +> CASE "INIT"
    //    89 !  !  !   
    //    90 !  !  !  NOTE: 
    //    90 ...**************************************************************
    //    90 ...**
    //    90 ...When server is called for the first time, things to be done.
    //    90 ...
    //    91 !  !  !  NOTE: 
    //    91 ...!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    //    91 ...!!
    //    91 ...When server is called for the first time, insert code for
    //    91 ...things to be done.
    //    91 ...
    //    88 !  !  +> CASE "CREATE"
    //    92 !  !  !  USE cyyy0311_type_create
    //    92 !  !  !     WHICH IMPORTS: Work View loc_reference
    //    92 !  !  !              iyy1_server_data TO Work View imp_reference
    //    92 !  !  !              iyy1_server_data
    //    92 !  !  !                    Entity View imp type TO Entity View
    //    92 !  !  !              imp type
    //    92 !  !  !     WHICH EXPORTS: Entity View exp_ts type FROM Entity
    //    92 !  !  !              View exp type
    //    92 !  !  !                    Work View loc_error iyy1_component
    //    92 !  !  !              FROM Work View exp_error iyy1_component
    //    93 !  !  !   
    //    94 !  !  !  +->IF loc_error iyy1_component return_code < loc
    //    94 !  !  !  !        dont_change_return_codes 1_ok
    //    95 !  !  !  !  NOTE: 
    //    95 ...**************************************************************
    //    95 ...**
    //    95 ...If the function raised an error..
    //    95 ...
    //    96 !  !  !  !  MOVE loc_error iyy1_component TO exp_error
    //    96 !  !  !  !              iyy1_component
    //    94 !  !  !  +--
    //    88 !  !  +> CASE "READ"
    //    97 !  !  !  USE cyyy0321_type_read
    //    97 !  !  !     WHICH IMPORTS: Entity View imp type TO Entity View
    //    97 !  !  !              imp type
    //    97 !  !  !     WHICH EXPORTS: Entity View exp_all type FROM Entity
    //    97 !  !  !              View exp type
    //    97 !  !  !                    Work View loc_error iyy1_component
    //    97 !  !  !              FROM Work View exp_error iyy1_component
    //    98 !  !  !   
    //    99 !  !  !  MOVE exp_all type TO exp_ts type
    //   100 !  !  !   
    //   101 !  !  !  +->IF loc_error iyy1_component return_code < loc
    //   101 !  !  !  !        dont_change_return_codes 1_ok
    //   102 !  !  !  !  NOTE: 
    //   102 ...**************************************************************
    //   102 ...**
    //   102 ...If the function raised an error..
    //   102 ...
    //   103 !  !  !  !  MOVE loc_error iyy1_component TO exp_error
    //   103 !  !  !  !              iyy1_component
    //   101 !  !  !  +--
    //    88 !  !  +> CASE "UPDATE"
    //   104 !  !  !  USE cyyy0331_type_update
    //   104 !  !  !     WHICH IMPORTS: Work View loc_reference
    //   104 !  !  !              iyy1_server_data TO Work View imp_reference
    //   104 !  !  !              iyy1_server_data
    //   104 !  !  !                    Entity View imp type TO Entity View
    //   104 !  !  !              imp type
    //   104 !  !  !     WHICH EXPORTS: Entity View exp_ts type FROM Entity
    //   104 !  !  !              View exp type
    //   104 !  !  !                    Work View loc_error iyy1_component
    //   104 !  !  !              FROM Work View exp_error iyy1_component
    //   105 !  !  !   
    //   106 !  !  !  +->IF loc_error iyy1_component return_code < loc
    //   106 !  !  !  !        dont_change_return_codes 1_ok
    //   107 !  !  !  !  NOTE: 
    //   107 ...**************************************************************
    //   107 ...**
    //   107 ...If the function raised an error..
    //   107 ...
    //   108 !  !  !  !  MOVE loc_error iyy1_component TO exp_error
    //   108 !  !  !  !              iyy1_component
    //   106 !  !  !  +--
    //    88 !  !  +> CASE "DELETE"
    //   109 !  !  !  USE cyyy0341_type_delete
    //   109 !  !  !     WHICH IMPORTS: Work View loc_reference
    //   109 !  !  !              iyy1_server_data TO Work View imp_reference
    //   109 !  !  !              iyy1_server_data
    //   109 !  !  !                    Entity View imp type TO Entity View
    //   109 !  !  !              imp type
    //   109 !  !  !     WHICH EXPORTS: Work View loc_error iyy1_component
    //   109 !  !  !              FROM Work View exp_error iyy1_component
    //   110 !  !  !   
    //   111 !  !  !  +->IF loc_error iyy1_component return_code < loc
    //   111 !  !  !  !        dont_change_return_codes 1_ok
    //   112 !  !  !  !  NOTE: 
    //   112 ...**************************************************************
    //   112 ...**
    //   112 ...If the function raised an error..
    //   112 ...
    //   113 !  !  !  !  MOVE loc_error iyy1_component TO exp_error
    //   113 !  !  !  !              iyy1_component
    //   111 !  !  !  +--
    //    88 !  !  +--
    //    86 !  +--
    //   114 !   
    //   115 !  USE cyy1a121_server_termination
    //   115 !     WHICH IMPORTS: Work View imp_dialect iyy1_component TO Work
    //   115 !              View imp_dialect iyy1_component
    //   115 !                    Work View exp_error iyy1_component TO Work
    //   115 !              View imp_error iyy1_component
    //   115 !     WHICH EXPORTS: Work View exp_error iyy1_component FROM Work
    //   115 !              View exp_error iyy1_component
    //   115 !                    Work View exp_msg iyy1_component FROM Work
    //   115 !              View exp_error_msg iyy1_component
    //       +---
    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    //  CONSTRUCTOR FOR THE CLASS       
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    public CYY1S071(  )
    {
      IefCGenRlse = "CA Gen 8.6";
      IsCopyright = "Copyright (c) 2024 CA Technologies. All rights reserved.";
      IefCGenDate = "2024/01/09";
      IefCGenTime = "13:41:13";
      IefCGenEncy = "9.2.A6";
      IefCGenUserId = "AliAl";
      IefCGenModel = "N8I_ORT_YYY_0112_TEMPLATE";
      IefCGenSubset = "ALL";
      IefCGenName = "CYY1S071_TYPE_MAINTAIN";
      NestingLevel = 0;
      ValChkDeadlockTimeout = false;
      ValChkDBError = false;
    }
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // ACTION BLOCK FUNCTION DECLARATIONS 
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    
    public void Execute( Object in_runtime_parm1, 
    	IRuntimePStepContext in_runtime_parm2, 
    	GlobData in_globdata, 
    	CYY1S071_IA import_view, 
    	CYY1S071_OA export_view )
    {
      IefRuntimeParm1 = in_runtime_parm1;
      IefRuntimeParm2 = in_runtime_parm2;
      Globdata = in_globdata;
      WIa = import_view;
      WOa = export_view;
      _Execute();
    }
    
    private void _Execute()
    {
      
      f_22020345_localAlloc( "CYY1S071_TYPE_MAINTAIN" );
      if ( Globdata.GetErrorData().GetLastStatus() == ErrorData.LastStatusIefAllocationError )
      	return;
      
      ++(NestingLevel);
      try {
        f_22020345_init(  );
        f_22020345(  );
      } catch( Exception e ) {
        if ( ((Globdata.GetErrorData().GetStatus() == ErrorData.StatusNone) && (Globdata.GetErrorData().GetErrorEncountered() == 
          ErrorData.ErrorEncounteredNoErrorFound)) && (Globdata.GetErrorData().GetViewOverflow() == 
          ErrorData.ErrorEncounteredNoErrorFound) )
        {
          Globdata.GetErrorData().SetStatus( ErrorData.LastStatusFatalError );
          Globdata.GetErrorData().SetLastStatus( ErrorData.LastStatusUnexpectedExceptionError );
          Globdata.GetErrorData().SetErrorEncountered( ErrorData.ErrorEncounteredErrorFound );
          Globdata.GetErrorData(  ).SetErrorMessage( e );
        }
      }
      --(NestingLevel);
    }
    public void f_22020345(  )
    {
      func_0022020345_esc_flag = false;
      Globdata.GetStateData().SetCurrentABId( "0022020345" );
      Globdata.GetStateData().SetCurrentABName( "CYY1S071_TYPE_MAINTAIN" );
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    PURPOSE(CONTINUED)                                              
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  
      //    !!!!!!!!!!!!                                                    
      //    Review Pre-Post Conditiona and Return/Reason Codes.             
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    PRE-CONDITION:                                                  
      //    Init command, user data is submitted.                           
      //    POST-CONDITION:                                                 
      //    Security check results are produced.                            
      //    RETURN CODE = 1, REASON CODE = 1                                
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    PRE-CONDITION:                                                  
      //    READ command, key fields are submitted.                         
      //    POST-CONDITION:                                                 
      //    The record is read, EXP_ALL and EXP_TS are produced.            
      //    RETURN CODE = 1, REASON CODE = 1                                
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    PRE-CONDITION:                                                  
      //    UPDATE command, all fields are submitted.                       
      //    POST-CONDITION:                                                 
      //    The record is read and updated, EXP_TS are produced.            
      //    RETURN CODE = 1, REASON CODE = 1                                
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    PRE-CONDITION:                                                  
      //    DELETE command, key fields and last update date are             
      //    submitted.                                                      
      //    POST-CONDITION:                                                 
      //    The record is read and deleted.                                 
      //    RETURN CODE = 1, REASON CODE = 1                                
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    PRE-CONDITION:                                                  
      //    CREATE command, all fields are submitted.                       
      //    POST-CONDITION:                                                 
      //    The record is created, EXP_TS are produced.                     
      //    RETURN CODE = 1, REASON CODE = 1                                
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    PRE-CONDITION:                                                  
      //    Any command but listed above is submitted.                      
      //    POST-CONDITION:                                                 
      //    No results are produced.                                        
      //    RETURN CODE = -1120, REASON CODE = 1                            
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    PRE-CONDITION:                                                  
      //    The user is not authorized for performing the operation.        
      //    POST-CONDITION:                                                 
      //    No results are produced.                                        
      //    RETURN CODE = -1110, REASON CODE = 1                            
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    RETURN / REASON  CODES                                          
      //    +1/1 Normal                                                     
      //    -1110/1 Unauthorized operation                                  
      //    -1120/1 Erroneous command                                       
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    RELEASE HISTORY                                                 
      //    01_00 23-02-1998 New release                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      
      Globdata.GetStateData().SetLastStatementNumber( "0000000021" );
      
      Cyyy9001Oa = (GEN.ORT.YYY.CYYY9001_OA)(IefRuntimeParm2.GetInstance( typeof(GEN.ORT.YYY.CYYY9001).Assembly,
      	"GEN.ORT.YYY.CYYY9001_OA" ));
      Globdata.GetErrorData().SetErrorEncountered( ErrorData.ErrorEncounteredNoErrorFound );
      IefRuntimeParm2.UseActionBlock( typeof(GEN.ORT.YYY.CYYY9001).Assembly,
      	"GEN.ORT.YYY.CYYY9001",
      	"Execute",
      	null,
      	Cyyy9001Oa );
      if ( ((Globdata.GetErrorData().GetStatus() != ErrorData.StatusNone) || (Globdata.GetErrorData().GetErrorEncountered() != 
        ErrorData.ErrorEncounteredNoErrorFound)) || (Globdata.GetErrorData().GetViewOverflow() != 
        ErrorData.ErrorEncounteredNoErrorFound) )
      {
        throw new ABException();
      }
      Globdata.GetStateData().SetCurrentABId( "0022020345" );
      Globdata.GetStateData().SetCurrentABName( "CYY1S071_TYPE_MAINTAIN" );
      Globdata.GetStateData().SetLastStatementNumber( "0000000021" );
      WOa.ExpErrorIyy1ComponentSeverityCode = FixedStringAttr.ValueOf(Cyyy9001Oa.ExpErrorIyy1ComponentSeverityCode, 1);
      WOa.ExpErrorIyy1ComponentRollbackIndicator = FixedStringAttr.ValueOf(Cyyy9001Oa.ExpErrorIyy1ComponentRollbackIndicator, 1);
      WOa.ExpErrorIyy1ComponentOriginServid = DoubleAttr.ValueOf(Cyyy9001Oa.ExpErrorIyy1ComponentOriginServid);
      WOa.ExpErrorIyy1ComponentContextString = StringAttr.ValueOf(Cyyy9001Oa.ExpErrorIyy1ComponentContextString, 512);
      WOa.ExpErrorIyy1ComponentReturnCode = IntAttr.ValueOf(Cyyy9001Oa.ExpErrorIyy1ComponentReturnCode);
      WOa.ExpErrorIyy1ComponentReasonCode = IntAttr.ValueOf(Cyyy9001Oa.ExpErrorIyy1ComponentReasonCode);
      WOa.ExpErrorIyy1ComponentChecksum = FixedStringAttr.ValueOf(Cyyy9001Oa.ExpErrorIyy1ComponentChecksum, 15);
      Cyyy9001Oa.FreeInstance(  );
      Cyyy9001Oa = null;
      
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    **************************************************************  
      //    Return/Reason code values                                       
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!     
      //    Set the values of used return codes/reason codes.               
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      Globdata.GetStateData().SetLastStatementNumber( "0000000025" );
      WLa.LocDontChangeReturnCodesQ1Ok = IntAttr.ValueOf((int)TIRD2DEC.Execute1(1, 0, TIRD2DEC.ROUND_NONE, 5));
      Globdata.GetStateData().SetLastStatementNumber( "0000000026" );
      WLa.LocDontChangeReturnCodesN1110UnauthorizedOperation = IntAttr.ValueOf((int)TIRD2DEC.Execute1(-1110, 0, TIRD2DEC.ROUND_NONE, 
        5));
      Globdata.GetStateData().SetLastStatementNumber( "0000000027" );
      WLa.LocDontChangeReturnCodesN1120InvalidCommand = IntAttr.ValueOf((int)TIRD2DEC.Execute1(-1120, 0, TIRD2DEC.ROUND_NONE, 5));
      
      Globdata.GetStateData().SetLastStatementNumber( "0000000029" );
      WLa.LocDontChangeReasonCodesQ1Default = IntAttr.ValueOf((int)TIRD2DEC.Execute1(1, 0, TIRD2DEC.ROUND_NONE, 5));
      
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!                      
      //    Please rename the procedure name below.                         
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      Globdata.GetStateData().SetLastStatementNumber( "0000000032" );
      LocGroupContext_PS_001 = (int)TIRD2DEC.Execute1(1, 0, TIRD2DEC.ROUND_NONE, 0);
      if ( (LocGroupContext_PS_001 > WLa.LocGroupContext_MA) && (LocGroupContext_PS_001 <= 9) )
      WLa.LocGroupContext_MA = IntAttr.ValueOf(LocGroupContext_PS_001);
      Globdata.GetStateData().SetLastStatementNumber( "0000000033" );
      WLa.LocGContextDontChangeTextText150[LocGroupContext_PS_001-1] = FixedStringAttr.ValueOf("CYY1S071", 150);
      f_173015194_rgvc(  );
      Globdata.GetStateData().SetLastStatementNumber( "0000000034" );
      LocGroupContext_PS_001 = (int)TIRD2DEC.Execute1(2, 0, TIRD2DEC.ROUND_NONE, 0);
      if ( (LocGroupContext_PS_001 > WLa.LocGroupContext_MA) && (LocGroupContext_PS_001 <= 9) )
      WLa.LocGroupContext_MA = IntAttr.ValueOf(LocGroupContext_PS_001);
      Globdata.GetStateData().SetLastStatementNumber( "0000000035" );
      WLa.LocGContextDontChangeTextText150[LocGroupContext_PS_001-1] = FixedStringAttr.ValueOf(
        WIa.ImpCommandIyy1ComponentSendCommand, 150);
      f_173015194_rgvc(  );
      
      Globdata.GetStateData().SetLastStatementNumber( "0000000037" );
      
      Cyy1a131Oa = (GEN.ORT.YYY.CYY1A131_OA)(IefRuntimeParm2.GetInstance( typeof(GEN.ORT.YYY.CYY1A131).Assembly,
      	"GEN.ORT.YYY.CYY1A131_OA" ));
      Globdata.GetErrorData().SetErrorEncountered( ErrorData.ErrorEncounteredNoErrorFound );
      IefRuntimeParm2.UseActionBlock( typeof(GEN.ORT.YYY.CYY1A131).Assembly,
      	"GEN.ORT.YYY.CYY1A131",
      	"Execute",
      	null,
      	Cyy1a131Oa );
      if ( ((Globdata.GetErrorData().GetStatus() != ErrorData.StatusNone) || (Globdata.GetErrorData().GetErrorEncountered() != 
        ErrorData.ErrorEncounteredNoErrorFound)) || (Globdata.GetErrorData().GetViewOverflow() != 
        ErrorData.ErrorEncounteredNoErrorFound) )
      {
        throw new ABException();
      }
      Globdata.GetStateData().SetCurrentABId( "0022020345" );
      Globdata.GetStateData().SetCurrentABName( "CYY1S071_TYPE_MAINTAIN" );
      Globdata.GetStateData().SetLastStatementNumber( "0000000037" );
      WLa.LocReferenceIyy1ServerDataServerDate = DateAttr.ValueOf(Cyy1a131Oa.ExpReferenceIyy1ServerDataServerDate);
      WLa.LocReferenceIyy1ServerDataServerTime = TimeAttr.ValueOf(Cyy1a131Oa.ExpReferenceIyy1ServerDataServerTime);
      WLa.LocReferenceIyy1ServerDataReferenceId = TimestampAttr.ValueOf(Cyy1a131Oa.ExpReferenceIyy1ServerDataReferenceId);
      WLa.LocReferenceIyy1ServerDataServerTimestamp = TimestampAttr.ValueOf(Cyy1a131Oa.ExpReferenceIyy1ServerDataServerTimestamp);
      Cyy1a131Oa.FreeInstance(  );
      Cyy1a131Oa = null;
      Globdata.GetStateData().SetLastStatementNumber( "0000000038" );
      WOa.ExpReferenceIyy1ServerDataServerDate = DateAttr.ValueOf(WLa.LocReferenceIyy1ServerDataServerDate);
      WOa.ExpReferenceIyy1ServerDataServerTime = TimeAttr.ValueOf(WLa.LocReferenceIyy1ServerDataServerTime);
      WOa.ExpReferenceIyy1ServerDataReferenceId = TimestampAttr.ValueOf(WLa.LocReferenceIyy1ServerDataReferenceId);
      
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    **************************************************************  
      //    **                                                              
      //    Security check                                                  
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      Globdata.GetStateData().SetLastStatementNumber( "0000000041" );
      
      Isc1z021Ia = (GEN.ORT.YYY.ISC1Z021_IA)(IefRuntimeParm2.GetInstance( typeof(GEN.ORT.YYY.ISC1Z021).Assembly,
      	"GEN.ORT.YYY.ISC1Z021_IA" ));
      Isc1z021Oa = (GEN.ORT.YYY.ISC1Z021_OA)(IefRuntimeParm2.GetInstance( typeof(GEN.ORT.YYY.ISC1Z021).Assembly,
      	"GEN.ORT.YYY.ISC1Z021_OA" ));
      Isc1z021Ia.ImpIsc1AuthorizationInfoUserid = FixedStringAttr.ValueOf(WIa.ImpIsc1AuthorizationInfoUserid, 20);
      Isc1z021Ia.ImpIsc1AuthorizationInfoTokenId = FixedStringAttr.ValueOf(WIa.ImpIsc1AuthorizationInfoTokenId, 32);
      Isc1z021Ia.ImpIsc1AuthorizationInfoModuleId = FixedStringAttr.ValueOf(WIa.ImpIsc1AuthorizationInfoModuleId, 20);
      Isc1z021Ia.ImpIsc1AuthorizationInfoAuthorityObjectId = FixedStringAttr.ValueOf(WIa.ImpIsc1AuthorizationInfoAuthorityObjectId, 
        20);
      Isc1z021Ia.ImpIsc1AuthorizationInfoVersion = FixedStringAttr.ValueOf(WIa.ImpIsc1AuthorizationInfoVersion, 4);
      Isc1z021Ia.ImpIsc1AuthorizationInfoWorkingUnitNum = IntAttr.ValueOf(WIa.ImpIsc1AuthorizationInfoWorkingUnitNum);
      Globdata.GetErrorData().SetErrorEncountered( ErrorData.ErrorEncounteredNoErrorFound );
      IefRuntimeParm2.UseActionBlock( typeof(GEN.ORT.YYY.ISC1Z021).Assembly,
      	"GEN.ORT.YYY.ISC1Z021",
      	"Execute",
      	Isc1z021Ia,
      	Isc1z021Oa );
      if ( ((Globdata.GetErrorData().GetStatus() != ErrorData.StatusNone) || (Globdata.GetErrorData().GetErrorEncountered() != 
        ErrorData.ErrorEncounteredNoErrorFound)) || (Globdata.GetErrorData().GetViewOverflow() != 
        ErrorData.ErrorEncounteredNoErrorFound) )
      {
        throw new ABException();
      }
      Globdata.GetStateData().SetCurrentABId( "0022020345" );
      Globdata.GetStateData().SetCurrentABName( "CYY1S071_TYPE_MAINTAIN" );
      Globdata.GetStateData().SetLastStatementNumber( "0000000041" );
      WLa.LocErrorIsc1ComponentSeverityCode = FixedStringAttr.ValueOf(Isc1z021Oa.ExpErrorIsc1ComponentSeverityCode, 1);
      WLa.LocErrorIsc1ComponentRollbackIndicator = FixedStringAttr.ValueOf(Isc1z021Oa.ExpErrorIsc1ComponentRollbackIndicator, 1);
      WLa.LocErrorIsc1ComponentOriginServid = DoubleAttr.ValueOf(Isc1z021Oa.ExpErrorIsc1ComponentOriginServid);
      WLa.LocErrorIsc1ComponentContextString = StringAttr.ValueOf(Isc1z021Oa.ExpErrorIsc1ComponentContextString, 512);
      WLa.LocErrorIsc1ComponentReturnCode = IntAttr.ValueOf(Isc1z021Oa.ExpErrorIsc1ComponentReturnCode);
      WLa.LocErrorIsc1ComponentReasonCode = IntAttr.ValueOf(Isc1z021Oa.ExpErrorIsc1ComponentReasonCode);
      WLa.LocErrorIsc1ComponentChecksum = FixedStringAttr.ValueOf(Isc1z021Oa.ExpErrorIsc1ComponentChecksum, 15);
      WOa.ExpIsc1AuthorizationInfoTokenId = FixedStringAttr.ValueOf(Isc1z021Oa.ExpIsc1AuthorizationInfoTokenId, 32);
      WOa.ExpIsc1AuthorizationInfoAuthorityInd = FixedStringAttr.ValueOf(Isc1z021Oa.ExpIsc1AuthorizationInfoAuthorityInd, 1);
      WOa.ExpIsc1AuthorizationInfoAuthorityStatusR = FixedStringAttr.ValueOf(Isc1z021Oa.ExpIsc1AuthorizationInfoAuthorityStatusR, 1)
        ;
      WOa.ExpIsc1AuthorizationInfoAuthorityStatusU = FixedStringAttr.ValueOf(Isc1z021Oa.ExpIsc1AuthorizationInfoAuthorityStatusU, 1)
        ;
      WOa.ExpIsc1AuthorizationInfoAuthorityStatusD = FixedStringAttr.ValueOf(Isc1z021Oa.ExpIsc1AuthorizationInfoAuthorityStatusD, 1)
        ;
      WOa.ExpIsc1AuthorizationInfoAuthorityStatusL = FixedStringAttr.ValueOf(Isc1z021Oa.ExpIsc1AuthorizationInfoAuthorityStatusL, 1)
        ;
      Isc1z021Ia.FreeInstance(  );
      Isc1z021Ia = null;
      Isc1z021Oa.FreeInstance(  );
      Isc1z021Oa = null;
      
      Globdata.GetStateData().SetLastStatementNumber( "0000000043" );
      if ( ((double) WLa.LocErrorIsc1ComponentReturnCode < (double) WLa.LocDontChangeReturnCodesQ1Ok) )
      {
        Globdata.GetStateData().SetLastStatementNumber( "0000000044" );
        
        Cyyy9831Ia = (GEN.ORT.YYY.CYYY9831_IA)(IefRuntimeParm2.GetInstance( typeof(GEN.ORT.YYY.CYYY9831).Assembly,
        	"GEN.ORT.YYY.CYYY9831_IA" ));
        Cyyy9831Oa = (GEN.ORT.YYY.CYYY9831_OA)(IefRuntimeParm2.GetInstance( typeof(GEN.ORT.YYY.CYYY9831).Assembly,
        	"GEN.ORT.YYY.CYYY9831_OA" ));
        Cyyy9831Ia.ImpErrorIsc1ComponentSeverityCode = FixedStringAttr.ValueOf(WLa.LocErrorIsc1ComponentSeverityCode, 1);
        Cyyy9831Ia.ImpErrorIsc1ComponentRollbackIndicator = FixedStringAttr.ValueOf(WLa.LocErrorIsc1ComponentRollbackIndicator, 1);
        Cyyy9831Ia.ImpErrorIsc1ComponentOriginServid = DoubleAttr.ValueOf(WLa.LocErrorIsc1ComponentOriginServid);
        Cyyy9831Ia.ImpErrorIsc1ComponentContextString = StringAttr.ValueOf(WLa.LocErrorIsc1ComponentContextString, 512);
        Cyyy9831Ia.ImpErrorIsc1ComponentReturnCode = IntAttr.ValueOf(WLa.LocErrorIsc1ComponentReturnCode);
        Cyyy9831Ia.ImpErrorIsc1ComponentReasonCode = IntAttr.ValueOf(WLa.LocErrorIsc1ComponentReasonCode);
        Cyyy9831Ia.ImpErrorIsc1ComponentChecksum = FixedStringAttr.ValueOf(WLa.LocErrorIsc1ComponentChecksum, 15);
        Globdata.GetErrorData().SetErrorEncountered( ErrorData.ErrorEncounteredNoErrorFound );
        IefRuntimeParm2.UseActionBlock( typeof(GEN.ORT.YYY.CYYY9831).Assembly,
        	"GEN.ORT.YYY.CYYY9831",
        	"Execute",
        	Cyyy9831Ia,
        	Cyyy9831Oa );
        if ( ((Globdata.GetErrorData().GetStatus() != ErrorData.StatusNone) || (Globdata.GetErrorData().GetErrorEncountered() != 
          ErrorData.ErrorEncounteredNoErrorFound)) || (Globdata.GetErrorData().GetViewOverflow() != 
          ErrorData.ErrorEncounteredNoErrorFound) )
        {
          throw new ABException();
        }
        Globdata.GetStateData().SetCurrentABId( "0022020345" );
        Globdata.GetStateData().SetCurrentABName( "CYY1S071_TYPE_MAINTAIN" );
        Globdata.GetStateData().SetLastStatementNumber( "0000000044" );
        WOa.ExpErrorIyy1ComponentSeverityCode = FixedStringAttr.ValueOf(Cyyy9831Oa.ExpErrorIyy1ComponentSeverityCode, 1);
        WOa.ExpErrorIyy1ComponentRollbackIndicator = FixedStringAttr.ValueOf(Cyyy9831Oa.ExpErrorIyy1ComponentRollbackIndicator, 1);
        WOa.ExpErrorIyy1ComponentOriginServid = DoubleAttr.ValueOf(Cyyy9831Oa.ExpErrorIyy1ComponentOriginServid);
        WOa.ExpErrorIyy1ComponentContextString = StringAttr.ValueOf(Cyyy9831Oa.ExpErrorIyy1ComponentContextString, 512);
        WOa.ExpErrorIyy1ComponentReturnCode = IntAttr.ValueOf(Cyyy9831Oa.ExpErrorIyy1ComponentReturnCode);
        WOa.ExpErrorIyy1ComponentReasonCode = IntAttr.ValueOf(Cyyy9831Oa.ExpErrorIyy1ComponentReasonCode);
        WOa.ExpErrorIyy1ComponentChecksum = FixedStringAttr.ValueOf(Cyyy9831Oa.ExpErrorIyy1ComponentChecksum, 15);
        Cyyy9831Ia.FreeInstance(  );
        Cyyy9831Ia = null;
        Cyyy9831Oa.FreeInstance(  );
        Cyyy9831Oa = null;
      }
      
      
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    **************************************************************  
      //    **                                                              
      //    All the necessary checking for the server is performed.         
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      Globdata.GetStateData().SetLastStatementNumber( "0000000047" );
      if ( ((double) WOa.ExpErrorIyy1ComponentReturnCode == (double) WLa.LocDontChangeReturnCodesQ1Ok) )
      {
        f_20972919(  );
      }
      
      
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    **************************************************************  
      //    **                                                              
      //    All of the checking process is OK.                              
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      Globdata.GetStateData().SetLastStatementNumber( "0000000086" );
      if ( ((double) WOa.ExpErrorIyy1ComponentReturnCode == (double) WLa.LocDontChangeReturnCodesQ1Ok) )
      {
        f_20972568(  );
      }
      
      
      Globdata.GetStateData().SetLastStatementNumber( "0000000115" );
      
      Cyy1a121Ia = (GEN.ORT.YYY.CYY1A121_IA)(IefRuntimeParm2.GetInstance( typeof(GEN.ORT.YYY.CYY1A121).Assembly,
      	"GEN.ORT.YYY.CYY1A121_IA" ));
      Cyy1a121Oa = (GEN.ORT.YYY.CYY1A121_OA)(IefRuntimeParm2.GetInstance( typeof(GEN.ORT.YYY.CYY1A121).Assembly,
      	"GEN.ORT.YYY.CYY1A121_OA" ));
      Cyy1a121Ia.ImpErrorIyy1ComponentSeverityCode = FixedStringAttr.ValueOf(WOa.ExpErrorIyy1ComponentSeverityCode, 1);
      Cyy1a121Ia.ImpErrorIyy1ComponentRollbackIndicator = FixedStringAttr.ValueOf(WOa.ExpErrorIyy1ComponentRollbackIndicator, 1);
      Cyy1a121Ia.ImpErrorIyy1ComponentOriginServid = DoubleAttr.ValueOf(WOa.ExpErrorIyy1ComponentOriginServid);
      Cyy1a121Ia.ImpErrorIyy1ComponentContextString = StringAttr.ValueOf(WOa.ExpErrorIyy1ComponentContextString, 512);
      Cyy1a121Ia.ImpErrorIyy1ComponentReturnCode = IntAttr.ValueOf(WOa.ExpErrorIyy1ComponentReturnCode);
      Cyy1a121Ia.ImpErrorIyy1ComponentReasonCode = IntAttr.ValueOf(WOa.ExpErrorIyy1ComponentReasonCode);
      Cyy1a121Ia.ImpErrorIyy1ComponentChecksum = FixedStringAttr.ValueOf(WOa.ExpErrorIyy1ComponentChecksum, 15);
      Cyy1a121Ia.ImpDialectIyy1ComponentDialectCd = FixedStringAttr.ValueOf(WIa.ImpDialectIyy1ComponentDialectCd, 2);
      Globdata.GetErrorData().SetErrorEncountered( ErrorData.ErrorEncounteredNoErrorFound );
      IefRuntimeParm2.UseActionBlock( typeof(GEN.ORT.YYY.CYY1A121).Assembly,
      	"GEN.ORT.YYY.CYY1A121",
      	"Execute",
      	Cyy1a121Ia,
      	Cyy1a121Oa );
      if ( ((Globdata.GetErrorData().GetStatus() != ErrorData.StatusNone) || (Globdata.GetErrorData().GetErrorEncountered() != 
        ErrorData.ErrorEncounteredNoErrorFound)) || (Globdata.GetErrorData().GetViewOverflow() != 
        ErrorData.ErrorEncounteredNoErrorFound) )
      {
        throw new ABException();
      }
      Globdata.GetStateData().SetCurrentABId( "0022020345" );
      Globdata.GetStateData().SetCurrentABName( "CYY1S071_TYPE_MAINTAIN" );
      Globdata.GetStateData().SetLastStatementNumber( "0000000115" );
      WOa.ExpMsgIyy1ComponentSeverityCode = FixedStringAttr.ValueOf(Cyy1a121Oa.ExpErrorMsgIyy1ComponentSeverityCode, 1);
      WOa.ExpMsgIyy1ComponentMessageTx = StringAttr.ValueOf(Cyy1a121Oa.ExpErrorMsgIyy1ComponentMessageTx, 512);
      WOa.ExpErrorIyy1ComponentSeverityCode = FixedStringAttr.ValueOf(Cyy1a121Oa.ExpErrorIyy1ComponentSeverityCode, 1);
      WOa.ExpErrorIyy1ComponentRollbackIndicator = FixedStringAttr.ValueOf(Cyy1a121Oa.ExpErrorIyy1ComponentRollbackIndicator, 1);
      WOa.ExpErrorIyy1ComponentOriginServid = DoubleAttr.ValueOf(Cyy1a121Oa.ExpErrorIyy1ComponentOriginServid);
      WOa.ExpErrorIyy1ComponentContextString = StringAttr.ValueOf(Cyy1a121Oa.ExpErrorIyy1ComponentContextString, 512);
      WOa.ExpErrorIyy1ComponentReturnCode = IntAttr.ValueOf(Cyy1a121Oa.ExpErrorIyy1ComponentReturnCode);
      WOa.ExpErrorIyy1ComponentReasonCode = IntAttr.ValueOf(Cyy1a121Oa.ExpErrorIyy1ComponentReasonCode);
      WOa.ExpErrorIyy1ComponentChecksum = FixedStringAttr.ValueOf(Cyy1a121Oa.ExpErrorIyy1ComponentChecksum, 15);
      Cyy1a121Ia.FreeInstance(  );
      Cyy1a121Ia = null;
      Cyy1a121Oa.FreeInstance(  );
      Cyy1a121Oa = null;
      return;
    }
    
    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // SUBORDINATE FUNCTIONS
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    
    
    public void f_20972919(  )
    {
      func_0020972919_esc_flag = false;
      
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    **************************************************************  
      //    **                                                              
      //    Check the required operation..                                  
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      Globdata.GetStateData().SetLastStatementNumber( "0000000050" );
      WLa.LocReferenceIyy1ServerDataUserid = FixedStringAttr.ValueOf(WIa.ImpIsc1AuthorizationInfoUserid, 8);
      
      Globdata.GetStateData().SetLastStatementNumber( "0000000052" );
      if ( CompareExit.CompareTo(WIa.ImpCommandIyy1ComponentSendCommand, "INIT") == 0 )
      {
        Globdata.GetStateData().SetLastSubStatementNumber( "1" );
        {
          // Empty statement here.
          ;
        }
      }
      else if ( CompareExit.CompareTo(WIa.ImpCommandIyy1ComponentSendCommand, "CREATE") == 0 )
      {
        Globdata.GetStateData().SetLastSubStatementNumber( "2" );
        {
          f_20972109(  );
        }
      }
      else if ( CompareExit.CompareTo(WIa.ImpCommandIyy1ComponentSendCommand, "READ") == 0 )
      {
        Globdata.GetStateData().SetLastSubStatementNumber( "3" );
        {
          f_20972115(  );
        }
      }
      else if ( CompareExit.CompareTo(WIa.ImpCommandIyy1ComponentSendCommand, "UPDATE") == 0 )
      {
        Globdata.GetStateData().SetLastSubStatementNumber( "4" );
        {
          f_20972215(  );
        }
      }
      else if ( CompareExit.CompareTo(WIa.ImpCommandIyy1ComponentSendCommand, "DELETE") == 0 )
      {
        Globdata.GetStateData().SetLastSubStatementNumber( "5" );
        {
          f_20972226(  );
        }
      }
      else {
        Globdata.GetStateData().SetLastSubStatementNumber( "6" );
        {
          Globdata.GetStateData().SetLastStatementNumber( "0000000073" );
          WOa.ExpErrorIyy1ComponentReturnCode = IntAttr.ValueOf((int)TIRD2DEC.Execute1((double) 
            WLa.LocDontChangeReturnCodesN1120InvalidCommand, 0, TIRD2DEC.ROUND_NONE, 5));
          Globdata.GetStateData().SetLastStatementNumber( "0000000074" );
          WOa.ExpErrorIyy1ComponentReasonCode = IntAttr.ValueOf((int)TIRD2DEC.Execute1((double) 
            WLa.LocDontChangeReasonCodesQ1Default, 0, TIRD2DEC.ROUND_NONE, 5));
          Globdata.GetStateData().SetLastStatementNumber( "0000000075" );
          LocGroupContext_PS_001 = (int)TIRD2DEC.Execute1(3, 0, TIRD2DEC.ROUND_NONE, 0);
          if ( (LocGroupContext_PS_001 > WLa.LocGroupContext_MA) && (LocGroupContext_PS_001 <= 9) )
          WLa.LocGroupContext_MA = IntAttr.ValueOf(LocGroupContext_PS_001);
          Globdata.GetStateData().SetLastStatementNumber( "0000000076" );
          WLa.LocGContextDontChangeTextText150[LocGroupContext_PS_001-1] = FixedStringAttr.ValueOf(
            WIa.ImpCommandIyy1ComponentSendCommand, 150);
          f_173015194_rgvc(  );
        }
      }
      
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    **************************************************************  
      //    **                                                              
      //    All of the checking process is OK. Form the context string.     
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    **************************************************************  
      //    **                                                              
      //    Form the context string whether there is error or not.          
      //    For non error situations there is a message returned.           
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      Globdata.GetStateData().SetLastStatementNumber( "0000000080" );
      
      Cyyy9141Ia = (GEN.ORT.YYY.CYYY9141_IA)(IefRuntimeParm2.GetInstance( typeof(GEN.ORT.YYY.CYYY9141).Assembly,
      	"GEN.ORT.YYY.CYYY9141_IA" ));
      Cyyy9141Oa = (GEN.ORT.YYY.CYYY9141_OA)(IefRuntimeParm2.GetInstance( typeof(GEN.ORT.YYY.CYYY9141).Assembly,
      	"GEN.ORT.YYY.CYYY9141_OA" ));
      Cyyy9141Ia.ImpGroupContext_MA = IntAttr.ValueOf(WLa.LocGroupContext_MA);
      for(Adim1 = 1; Adim1 <= WLa.LocGroupContext_MA; ++(Adim1))
      {
        Cyyy9141Ia.ImpGContextDontChangeTextText150[Adim1-1] = FixedStringAttr.ValueOf(WLa.LocGContextDontChangeTextText150[Adim1-1],
           150);
      }
      for(Adim1 = WLa.LocGroupContext_MA + 1; Adim1 <= 9; ++(Adim1))
      {
        Cyyy9141Ia.ImpGContextDontChangeTextText150[Adim1-1] = 
"                                                                                                                                                      "
          ;
      }
      Globdata.GetErrorData().SetErrorEncountered( ErrorData.ErrorEncounteredNoErrorFound );
      IefRuntimeParm2.UseActionBlock( typeof(GEN.ORT.YYY.CYYY9141).Assembly,
      	"GEN.ORT.YYY.CYYY9141",
      	"Execute",
      	Cyyy9141Ia,
      	Cyyy9141Oa );
      if ( ((Globdata.GetErrorData().GetStatus() != ErrorData.StatusNone) || (Globdata.GetErrorData().GetErrorEncountered() != 
        ErrorData.ErrorEncounteredNoErrorFound)) || (Globdata.GetErrorData().GetViewOverflow() != 
        ErrorData.ErrorEncounteredNoErrorFound) )
      {
        throw new ABException();
      }
      Globdata.GetStateData().SetCurrentABId( "0022020345" );
      Globdata.GetStateData().SetCurrentABName( "CYY1S071_TYPE_MAINTAIN" );
      Globdata.GetStateData().SetLastStatementNumber( "0000000080" );
      WLa.LocContextIyy1ComponentContextString = StringAttr.ValueOf(Cyyy9141Oa.ExpContextIyy1ComponentContextString, 512);
      WLa.LocErrorIyy1ComponentSeverityCode = FixedStringAttr.ValueOf(Cyyy9141Oa.ExpErrorIyy1ComponentSeverityCode, 1);
      WLa.LocErrorIyy1ComponentRollbackIndicator = FixedStringAttr.ValueOf(Cyyy9141Oa.ExpErrorIyy1ComponentRollbackIndicator, 1);
      WLa.LocErrorIyy1ComponentOriginServid = DoubleAttr.ValueOf(Cyyy9141Oa.ExpErrorIyy1ComponentOriginServid);
      WLa.LocErrorIyy1ComponentContextString = StringAttr.ValueOf(Cyyy9141Oa.ExpErrorIyy1ComponentContextString, 512);
      WLa.LocErrorIyy1ComponentReturnCode = IntAttr.ValueOf(Cyyy9141Oa.ExpErrorIyy1ComponentReturnCode);
      WLa.LocErrorIyy1ComponentReasonCode = IntAttr.ValueOf(Cyyy9141Oa.ExpErrorIyy1ComponentReasonCode);
      WLa.LocErrorIyy1ComponentChecksum = FixedStringAttr.ValueOf(Cyyy9141Oa.ExpErrorIyy1ComponentChecksum, 15);
      Cyyy9141Ia.FreeInstance(  );
      Cyyy9141Ia = null;
      Cyyy9141Oa.FreeInstance(  );
      Cyyy9141Oa = null;
      Globdata.GetStateData().SetLastStatementNumber( "0000000081" );
      if ( ((double) WLa.LocErrorIyy1ComponentReturnCode < (double) WLa.LocDontChangeReturnCodesQ1Ok) )
      {
        Globdata.GetStateData().SetLastStatementNumber( "0000000082" );
        WOa.ExpErrorIyy1ComponentSeverityCode = FixedStringAttr.ValueOf(WLa.LocErrorIyy1ComponentSeverityCode, 1);
        WOa.ExpErrorIyy1ComponentRollbackIndicator = FixedStringAttr.ValueOf(WLa.LocErrorIyy1ComponentRollbackIndicator, 1);
        WOa.ExpErrorIyy1ComponentOriginServid = DoubleAttr.ValueOf(WLa.LocErrorIyy1ComponentOriginServid);
        WOa.ExpErrorIyy1ComponentContextString = StringAttr.ValueOf(WLa.LocErrorIyy1ComponentContextString, 512);
        WOa.ExpErrorIyy1ComponentReturnCode = IntAttr.ValueOf(WLa.LocErrorIyy1ComponentReturnCode);
        WOa.ExpErrorIyy1ComponentReasonCode = IntAttr.ValueOf(WLa.LocErrorIyy1ComponentReasonCode);
        WOa.ExpErrorIyy1ComponentChecksum = FixedStringAttr.ValueOf(WLa.LocErrorIyy1ComponentChecksum, 15);
      }
      else 
      {
        Globdata.GetStateData().SetLastSubStatementNumber( "1" );
        {
          Globdata.GetStateData().SetLastStatementNumber( "0000000083" );
          WOa.ExpErrorIyy1ComponentContextString = StringAttr.ValueOf(WLa.LocContextIyy1ComponentContextString, 512);
        }
      }
      
      return;
    }
    
    public void f_20972568(  )
    {
      func_0020972568_esc_flag = false;
      
      Globdata.GetStateData().SetLastStatementNumber( "0000000088" );
      if ( CompareExit.CompareTo(WIa.ImpCommandIyy1ComponentSendCommand, "INIT") == 0 )
      {
        Globdata.GetStateData().SetLastSubStatementNumber( "1" );
        {
          
          // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
          //    **************************************************************  
          //    **                                                              
          //    When server is called for the first time, things to be done.    
          //                                                                    
          // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
          // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
          //    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  
          //    !!                                                              
          //    When server is called for the first time, insert code for       
          //    things to be done.                                              
          //                                                                    
          // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        }
      }
      else if ( CompareExit.CompareTo(WIa.ImpCommandIyy1ComponentSendCommand, "CREATE") == 0 )
      {
        Globdata.GetStateData().SetLastSubStatementNumber( "2" );
        {
          f_20972534(  );
        }
      }
      else if ( CompareExit.CompareTo(WIa.ImpCommandIyy1ComponentSendCommand, "READ") == 0 )
      {
        Globdata.GetStateData().SetLastSubStatementNumber( "3" );
        {
          f_20972535(  );
        }
      }
      else if ( CompareExit.CompareTo(WIa.ImpCommandIyy1ComponentSendCommand, "UPDATE") == 0 )
      {
        Globdata.GetStateData().SetLastSubStatementNumber( "4" );
        {
          f_20972633(  );
        }
      }
      else if ( CompareExit.CompareTo(WIa.ImpCommandIyy1ComponentSendCommand, "DELETE") == 0 )
      {
        Globdata.GetStateData().SetLastSubStatementNumber( "5" );
        {
          f_20972637(  );
        }
      }
      return;
    }
    
    public void f_20972109(  )
    {
      func_0020972109_esc_flag = false;
      Globdata.GetStateData().SetLastStatementNumber( "0000000053" );
      if ( CompareExit.CompareTo(WOa.ExpIsc1AuthorizationInfoAuthorityStatusU, "Y") != 0 )
      {
        Globdata.GetStateData().SetLastStatementNumber( "0000000054" );
        WOa.ExpErrorIyy1ComponentReturnCode = IntAttr.ValueOf((int)TIRD2DEC.Execute1((double) 
          WLa.LocDontChangeReturnCodesN1110UnauthorizedOperation, 0, TIRD2DEC.ROUND_NONE, 5));
        Globdata.GetStateData().SetLastStatementNumber( "0000000055" );
        WOa.ExpErrorIyy1ComponentReasonCode = IntAttr.ValueOf((int)TIRD2DEC.Execute1((double) WLa.LocDontChangeReasonCodesQ1Default, 
          0, TIRD2DEC.ROUND_NONE, 5));
        Globdata.GetStateData().SetLastStatementNumber( "0000000056" );
        LocGroupContext_PS_001 = (int)TIRD2DEC.Execute1(3, 0, TIRD2DEC.ROUND_NONE, 0);
        if ( (LocGroupContext_PS_001 > WLa.LocGroupContext_MA) && (LocGroupContext_PS_001 <= 9) )
        WLa.LocGroupContext_MA = IntAttr.ValueOf(LocGroupContext_PS_001);
        Globdata.GetStateData().SetLastStatementNumber( "0000000057" );
        WLa.LocGContextDontChangeTextText150[LocGroupContext_PS_001-1] = FixedStringAttr.ValueOf(Globdata.GetStateData()
          .GetClientUserId(), 150);
        f_173015194_rgvc(  );
      }
      
      return;
    }
    
    public void f_20972115(  )
    {
      func_0020972115_esc_flag = false;
      Globdata.GetStateData().SetLastStatementNumber( "0000000058" );
      if ( CompareExit.CompareTo(WOa.ExpIsc1AuthorizationInfoAuthorityStatusR, "Y") != 0 )
      {
        Globdata.GetStateData().SetLastStatementNumber( "0000000059" );
        WOa.ExpErrorIyy1ComponentReturnCode = IntAttr.ValueOf((int)TIRD2DEC.Execute1((double) 
          WLa.LocDontChangeReturnCodesN1110UnauthorizedOperation, 0, TIRD2DEC.ROUND_NONE, 5));
        Globdata.GetStateData().SetLastStatementNumber( "0000000060" );
        WOa.ExpErrorIyy1ComponentReasonCode = IntAttr.ValueOf((int)TIRD2DEC.Execute1((double) WLa.LocDontChangeReasonCodesQ1Default, 
          0, TIRD2DEC.ROUND_NONE, 5));
        Globdata.GetStateData().SetLastStatementNumber( "0000000061" );
        LocGroupContext_PS_001 = (int)TIRD2DEC.Execute1(3, 0, TIRD2DEC.ROUND_NONE, 0);
        if ( (LocGroupContext_PS_001 > WLa.LocGroupContext_MA) && (LocGroupContext_PS_001 <= 9) )
        WLa.LocGroupContext_MA = IntAttr.ValueOf(LocGroupContext_PS_001);
        Globdata.GetStateData().SetLastStatementNumber( "0000000062" );
        WLa.LocGContextDontChangeTextText150[LocGroupContext_PS_001-1] = FixedStringAttr.ValueOf(Globdata.GetStateData()
          .GetClientUserId(), 150);
        f_173015194_rgvc(  );
      }
      
      return;
    }
    
    public void f_20972215(  )
    {
      func_0020972215_esc_flag = false;
      Globdata.GetStateData().SetLastStatementNumber( "0000000063" );
      if ( CompareExit.CompareTo(WOa.ExpIsc1AuthorizationInfoAuthorityStatusU, "Y") != 0 )
      {
        Globdata.GetStateData().SetLastStatementNumber( "0000000064" );
        WOa.ExpErrorIyy1ComponentReturnCode = IntAttr.ValueOf((int)TIRD2DEC.Execute1((double) 
          WLa.LocDontChangeReturnCodesN1110UnauthorizedOperation, 0, TIRD2DEC.ROUND_NONE, 5));
        Globdata.GetStateData().SetLastStatementNumber( "0000000065" );
        WOa.ExpErrorIyy1ComponentReasonCode = IntAttr.ValueOf((int)TIRD2DEC.Execute1((double) WLa.LocDontChangeReasonCodesQ1Default, 
          0, TIRD2DEC.ROUND_NONE, 5));
        Globdata.GetStateData().SetLastStatementNumber( "0000000066" );
        LocGroupContext_PS_001 = (int)TIRD2DEC.Execute1(3, 0, TIRD2DEC.ROUND_NONE, 0);
        if ( (LocGroupContext_PS_001 > WLa.LocGroupContext_MA) && (LocGroupContext_PS_001 <= 9) )
        WLa.LocGroupContext_MA = IntAttr.ValueOf(LocGroupContext_PS_001);
        Globdata.GetStateData().SetLastStatementNumber( "0000000067" );
        WLa.LocGContextDontChangeTextText150[LocGroupContext_PS_001-1] = FixedStringAttr.ValueOf(Globdata.GetStateData()
          .GetClientUserId(), 150);
        f_173015194_rgvc(  );
      }
      
      return;
    }
    
    public void f_20972226(  )
    {
      func_0020972226_esc_flag = false;
      Globdata.GetStateData().SetLastStatementNumber( "0000000068" );
      if ( CompareExit.CompareTo(WOa.ExpIsc1AuthorizationInfoAuthorityStatusD, "Y") != 0 )
      {
        Globdata.GetStateData().SetLastStatementNumber( "0000000069" );
        WOa.ExpErrorIyy1ComponentReturnCode = IntAttr.ValueOf((int)TIRD2DEC.Execute1((double) 
          WLa.LocDontChangeReturnCodesN1110UnauthorizedOperation, 0, TIRD2DEC.ROUND_NONE, 5));
        Globdata.GetStateData().SetLastStatementNumber( "0000000070" );
        WOa.ExpErrorIyy1ComponentReasonCode = IntAttr.ValueOf((int)TIRD2DEC.Execute1((double) WLa.LocDontChangeReasonCodesQ1Default, 
          0, TIRD2DEC.ROUND_NONE, 5));
        Globdata.GetStateData().SetLastStatementNumber( "0000000071" );
        LocGroupContext_PS_001 = (int)TIRD2DEC.Execute1(3, 0, TIRD2DEC.ROUND_NONE, 0);
        if ( (LocGroupContext_PS_001 > WLa.LocGroupContext_MA) && (LocGroupContext_PS_001 <= 9) )
        WLa.LocGroupContext_MA = IntAttr.ValueOf(LocGroupContext_PS_001);
        Globdata.GetStateData().SetLastStatementNumber( "0000000072" );
        WLa.LocGContextDontChangeTextText150[LocGroupContext_PS_001-1] = FixedStringAttr.ValueOf(Globdata.GetStateData()
          .GetClientUserId(), 150);
        f_173015194_rgvc(  );
      }
      
      return;
    }
    
    public void f_20972534(  )
    {
      func_0020972534_esc_flag = false;
      Globdata.GetStateData().SetLastStatementNumber( "0000000092" );
      
      Cyyy0311Ia = (GEN.ORT.YYY.CYYY0311_IA)(IefRuntimeParm2.GetInstance( typeof(GEN.ORT.YYY.CYYY0311).Assembly,
      	"GEN.ORT.YYY.CYYY0311_IA" ));
      Cyyy0311Oa = (GEN.ORT.YYY.CYYY0311_OA)(IefRuntimeParm2.GetInstance( typeof(GEN.ORT.YYY.CYYY0311).Assembly,
      	"GEN.ORT.YYY.CYYY0311_OA" ));
      Cyyy0311Ia.ImpTypeTkeyAttrText = FixedStringAttr.ValueOf(WIa.ImpTypeTkeyAttrText, 4);
      Cyyy0311Ia.ImpTypeTsearchAttrText = FixedStringAttr.ValueOf(WIa.ImpTypeTsearchAttrText, 20);
      Cyyy0311Ia.ImpTypeTotherAttrText = FixedStringAttr.ValueOf(WIa.ImpTypeTotherAttrText, 2);
      Cyyy0311Ia.ImpTypeTotherAttrDate = DateAttr.ValueOf(WIa.ImpTypeTotherAttrDate);
      Cyyy0311Ia.ImpTypeTotherAttrTime = TimeAttr.ValueOf(WIa.ImpTypeTotherAttrTime);
      Cyyy0311Ia.ImpTypeTotherAttrAmount = DecimalAttr.ValueOf(WIa.ImpTypeTotherAttrAmount);
      Cyyy0311Ia.ImpReferenceIyy1ServerDataUserid = FixedStringAttr.ValueOf(WLa.LocReferenceIyy1ServerDataUserid, 8);
      Cyyy0311Ia.ImpReferenceIyy1ServerDataReferenceId = TimestampAttr.ValueOf(WLa.LocReferenceIyy1ServerDataReferenceId);
      Globdata.GetErrorData().SetErrorEncountered( ErrorData.ErrorEncounteredNoErrorFound );
      IefRuntimeParm2.UseActionBlock( typeof(GEN.ORT.YYY.CYYY0311).Assembly,
      	"GEN.ORT.YYY.CYYY0311",
      	"Execute",
      	Cyyy0311Ia,
      	Cyyy0311Oa );
      if ( ((Globdata.GetErrorData().GetStatus() != ErrorData.StatusNone) || (Globdata.GetErrorData().GetErrorEncountered() != 
        ErrorData.ErrorEncounteredNoErrorFound)) || (Globdata.GetErrorData().GetViewOverflow() != 
        ErrorData.ErrorEncounteredNoErrorFound) )
      {
        throw new ABException();
      }
      Globdata.GetStateData().SetCurrentABId( "0022020345" );
      Globdata.GetStateData().SetCurrentABName( "CYY1S071_TYPE_MAINTAIN" );
      Globdata.GetStateData().SetLastStatementNumber( "0000000092" );
      WLa.LocErrorIyy1ComponentSeverityCode = FixedStringAttr.ValueOf(Cyyy0311Oa.ExpErrorIyy1ComponentSeverityCode, 1);
      WLa.LocErrorIyy1ComponentRollbackIndicator = FixedStringAttr.ValueOf(Cyyy0311Oa.ExpErrorIyy1ComponentRollbackIndicator, 1);
      WLa.LocErrorIyy1ComponentOriginServid = DoubleAttr.ValueOf(Cyyy0311Oa.ExpErrorIyy1ComponentOriginServid);
      WLa.LocErrorIyy1ComponentContextString = StringAttr.ValueOf(Cyyy0311Oa.ExpErrorIyy1ComponentContextString, 512);
      WLa.LocErrorIyy1ComponentReturnCode = IntAttr.ValueOf(Cyyy0311Oa.ExpErrorIyy1ComponentReturnCode);
      WLa.LocErrorIyy1ComponentReasonCode = IntAttr.ValueOf(Cyyy0311Oa.ExpErrorIyy1ComponentReasonCode);
      WLa.LocErrorIyy1ComponentChecksum = FixedStringAttr.ValueOf(Cyyy0311Oa.ExpErrorIyy1ComponentChecksum, 15);
      WOa.ExpTsTypeTinstanceId = TimestampAttr.ValueOf(Cyyy0311Oa.ExpTypeTinstanceId);
      WOa.ExpTsTypeTreferenceId = TimestampAttr.ValueOf(Cyyy0311Oa.ExpTypeTreferenceId);
      Cyyy0311Ia.FreeInstance(  );
      Cyyy0311Ia = null;
      Cyyy0311Oa.FreeInstance(  );
      Cyyy0311Oa = null;
      
      Globdata.GetStateData().SetLastStatementNumber( "0000000094" );
      if ( ((double) WLa.LocErrorIyy1ComponentReturnCode < (double) WLa.LocDontChangeReturnCodesQ1Ok) )
      {
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        //    **************************************************************  
        //    **                                                              
        //    If the function raised an error..                               
        //                                                                    
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        Globdata.GetStateData().SetLastStatementNumber( "0000000096" );
        WOa.ExpErrorIyy1ComponentSeverityCode = FixedStringAttr.ValueOf(WLa.LocErrorIyy1ComponentSeverityCode, 1);
        WOa.ExpErrorIyy1ComponentRollbackIndicator = FixedStringAttr.ValueOf(WLa.LocErrorIyy1ComponentRollbackIndicator, 1);
        WOa.ExpErrorIyy1ComponentOriginServid = DoubleAttr.ValueOf(WLa.LocErrorIyy1ComponentOriginServid);
        WOa.ExpErrorIyy1ComponentContextString = StringAttr.ValueOf(WLa.LocErrorIyy1ComponentContextString, 512);
        WOa.ExpErrorIyy1ComponentReturnCode = IntAttr.ValueOf(WLa.LocErrorIyy1ComponentReturnCode);
        WOa.ExpErrorIyy1ComponentReasonCode = IntAttr.ValueOf(WLa.LocErrorIyy1ComponentReasonCode);
        WOa.ExpErrorIyy1ComponentChecksum = FixedStringAttr.ValueOf(WLa.LocErrorIyy1ComponentChecksum, 15);
      }
      
      return;
    }
    
    public void f_20972535(  )
    {
      func_0020972535_esc_flag = false;
      Globdata.GetStateData().SetLastStatementNumber( "0000000097" );
      
      Cyyy0321Ia = (GEN.ORT.YYY.CYYY0321_IA)(IefRuntimeParm2.GetInstance( typeof(GEN.ORT.YYY.CYYY0321).Assembly,
      	"GEN.ORT.YYY.CYYY0321_IA" ));
      Cyyy0321Oa = (GEN.ORT.YYY.CYYY0321_OA)(IefRuntimeParm2.GetInstance( typeof(GEN.ORT.YYY.CYYY0321).Assembly,
      	"GEN.ORT.YYY.CYYY0321_OA" ));
      Cyyy0321Ia.ImpTypeTinstanceId = TimestampAttr.ValueOf(WIa.ImpTypeTinstanceId);
      Cyyy0321Ia.ImpTypeTkeyAttrText = FixedStringAttr.ValueOf(WIa.ImpTypeTkeyAttrText, 4);
      Globdata.GetErrorData().SetErrorEncountered( ErrorData.ErrorEncounteredNoErrorFound );
      IefRuntimeParm2.UseActionBlock( typeof(GEN.ORT.YYY.CYYY0321).Assembly,
      	"GEN.ORT.YYY.CYYY0321",
      	"Execute",
      	Cyyy0321Ia,
      	Cyyy0321Oa );
      if ( ((Globdata.GetErrorData().GetStatus() != ErrorData.StatusNone) || (Globdata.GetErrorData().GetErrorEncountered() != 
        ErrorData.ErrorEncounteredNoErrorFound)) || (Globdata.GetErrorData().GetViewOverflow() != 
        ErrorData.ErrorEncounteredNoErrorFound) )
      {
        throw new ABException();
      }
      Globdata.GetStateData().SetCurrentABId( "0022020345" );
      Globdata.GetStateData().SetCurrentABName( "CYY1S071_TYPE_MAINTAIN" );
      Globdata.GetStateData().SetLastStatementNumber( "0000000097" );
      WLa.LocErrorIyy1ComponentSeverityCode = FixedStringAttr.ValueOf(Cyyy0321Oa.ExpErrorIyy1ComponentSeverityCode, 1);
      WLa.LocErrorIyy1ComponentRollbackIndicator = FixedStringAttr.ValueOf(Cyyy0321Oa.ExpErrorIyy1ComponentRollbackIndicator, 1);
      WLa.LocErrorIyy1ComponentOriginServid = DoubleAttr.ValueOf(Cyyy0321Oa.ExpErrorIyy1ComponentOriginServid);
      WLa.LocErrorIyy1ComponentContextString = StringAttr.ValueOf(Cyyy0321Oa.ExpErrorIyy1ComponentContextString, 512);
      WLa.LocErrorIyy1ComponentReturnCode = IntAttr.ValueOf(Cyyy0321Oa.ExpErrorIyy1ComponentReturnCode);
      WLa.LocErrorIyy1ComponentReasonCode = IntAttr.ValueOf(Cyyy0321Oa.ExpErrorIyy1ComponentReasonCode);
      WLa.LocErrorIyy1ComponentChecksum = FixedStringAttr.ValueOf(Cyyy0321Oa.ExpErrorIyy1ComponentChecksum, 15);
      WOa.ExpAllTypeTinstanceId = TimestampAttr.ValueOf(Cyyy0321Oa.ExpTypeTinstanceId);
      WOa.ExpAllTypeTreferenceId = TimestampAttr.ValueOf(Cyyy0321Oa.ExpTypeTreferenceId);
      WOa.ExpAllTypeTcreateUserId = FixedStringAttr.ValueOf(Cyyy0321Oa.ExpTypeTcreateUserId, 8);
      WOa.ExpAllTypeTupdateUserId = FixedStringAttr.ValueOf(Cyyy0321Oa.ExpTypeTupdateUserId, 8);
      WOa.ExpAllTypeTkeyAttrText = FixedStringAttr.ValueOf(Cyyy0321Oa.ExpTypeTkeyAttrText, 4);
      WOa.ExpAllTypeTsearchAttrText = FixedStringAttr.ValueOf(Cyyy0321Oa.ExpTypeTsearchAttrText, 20);
      WOa.ExpAllTypeTotherAttrText = FixedStringAttr.ValueOf(Cyyy0321Oa.ExpTypeTotherAttrText, 2);
      WOa.ExpAllTypeTotherAttrDate = DateAttr.ValueOf(Cyyy0321Oa.ExpTypeTotherAttrDate);
      WOa.ExpAllTypeTotherAttrTime = TimeAttr.ValueOf(Cyyy0321Oa.ExpTypeTotherAttrTime);
      WOa.ExpAllTypeTotherAttrAmount = DecimalAttr.ValueOf(Cyyy0321Oa.ExpTypeTotherAttrAmount);
      Cyyy0321Ia.FreeInstance(  );
      Cyyy0321Ia = null;
      Cyyy0321Oa.FreeInstance(  );
      Cyyy0321Oa = null;
      
      Globdata.GetStateData().SetLastStatementNumber( "0000000099" );
      WOa.ExpTsTypeTinstanceId = TimestampAttr.ValueOf(WOa.ExpAllTypeTinstanceId);
      WOa.ExpTsTypeTreferenceId = TimestampAttr.ValueOf(WOa.ExpAllTypeTreferenceId);
      
      Globdata.GetStateData().SetLastStatementNumber( "0000000101" );
      if ( ((double) WLa.LocErrorIyy1ComponentReturnCode < (double) WLa.LocDontChangeReturnCodesQ1Ok) )
      {
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        //    **************************************************************  
        //    **                                                              
        //    If the function raised an error..                               
        //                                                                    
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        Globdata.GetStateData().SetLastStatementNumber( "0000000103" );
        WOa.ExpErrorIyy1ComponentSeverityCode = FixedStringAttr.ValueOf(WLa.LocErrorIyy1ComponentSeverityCode, 1);
        WOa.ExpErrorIyy1ComponentRollbackIndicator = FixedStringAttr.ValueOf(WLa.LocErrorIyy1ComponentRollbackIndicator, 1);
        WOa.ExpErrorIyy1ComponentOriginServid = DoubleAttr.ValueOf(WLa.LocErrorIyy1ComponentOriginServid);
        WOa.ExpErrorIyy1ComponentContextString = StringAttr.ValueOf(WLa.LocErrorIyy1ComponentContextString, 512);
        WOa.ExpErrorIyy1ComponentReturnCode = IntAttr.ValueOf(WLa.LocErrorIyy1ComponentReturnCode);
        WOa.ExpErrorIyy1ComponentReasonCode = IntAttr.ValueOf(WLa.LocErrorIyy1ComponentReasonCode);
        WOa.ExpErrorIyy1ComponentChecksum = FixedStringAttr.ValueOf(WLa.LocErrorIyy1ComponentChecksum, 15);
      }
      
      return;
    }
    
    public void f_20972633(  )
    {
      func_0020972633_esc_flag = false;
      Globdata.GetStateData().SetLastStatementNumber( "0000000104" );
      
      Cyyy0331Ia = (GEN.ORT.YYY.CYYY0331_IA)(IefRuntimeParm2.GetInstance( typeof(GEN.ORT.YYY.CYYY0331).Assembly,
      	"GEN.ORT.YYY.CYYY0331_IA" ));
      Cyyy0331Oa = (GEN.ORT.YYY.CYYY0331_OA)(IefRuntimeParm2.GetInstance( typeof(GEN.ORT.YYY.CYYY0331).Assembly,
      	"GEN.ORT.YYY.CYYY0331_OA" ));
      Cyyy0331Ia.ImpTypeTinstanceId = TimestampAttr.ValueOf(WIa.ImpTypeTinstanceId);
      Cyyy0331Ia.ImpTypeTreferenceId = TimestampAttr.ValueOf(WIa.ImpTypeTreferenceId);
      Cyyy0331Ia.ImpTypeTkeyAttrText = FixedStringAttr.ValueOf(WIa.ImpTypeTkeyAttrText, 4);
      Cyyy0331Ia.ImpTypeTsearchAttrText = FixedStringAttr.ValueOf(WIa.ImpTypeTsearchAttrText, 20);
      Cyyy0331Ia.ImpTypeTotherAttrText = FixedStringAttr.ValueOf(WIa.ImpTypeTotherAttrText, 2);
      Cyyy0331Ia.ImpTypeTotherAttrDate = DateAttr.ValueOf(WIa.ImpTypeTotherAttrDate);
      Cyyy0331Ia.ImpTypeTotherAttrTime = TimeAttr.ValueOf(WIa.ImpTypeTotherAttrTime);
      Cyyy0331Ia.ImpTypeTotherAttrAmount = DecimalAttr.ValueOf(WIa.ImpTypeTotherAttrAmount);
      Cyyy0331Ia.ImpReferenceIyy1ServerDataUserid = FixedStringAttr.ValueOf(WLa.LocReferenceIyy1ServerDataUserid, 8);
      Cyyy0331Ia.ImpReferenceIyy1ServerDataReferenceId = TimestampAttr.ValueOf(WLa.LocReferenceIyy1ServerDataReferenceId);
      Globdata.GetErrorData().SetErrorEncountered( ErrorData.ErrorEncounteredNoErrorFound );
      IefRuntimeParm2.UseActionBlock( typeof(GEN.ORT.YYY.CYYY0331).Assembly,
      	"GEN.ORT.YYY.CYYY0331",
      	"Execute",
      	Cyyy0331Ia,
      	Cyyy0331Oa );
      if ( ((Globdata.GetErrorData().GetStatus() != ErrorData.StatusNone) || (Globdata.GetErrorData().GetErrorEncountered() != 
        ErrorData.ErrorEncounteredNoErrorFound)) || (Globdata.GetErrorData().GetViewOverflow() != 
        ErrorData.ErrorEncounteredNoErrorFound) )
      {
        throw new ABException();
      }
      Globdata.GetStateData().SetCurrentABId( "0022020345" );
      Globdata.GetStateData().SetCurrentABName( "CYY1S071_TYPE_MAINTAIN" );
      Globdata.GetStateData().SetLastStatementNumber( "0000000104" );
      WLa.LocErrorIyy1ComponentSeverityCode = FixedStringAttr.ValueOf(Cyyy0331Oa.ExpErrorIyy1ComponentSeverityCode, 1);
      WLa.LocErrorIyy1ComponentRollbackIndicator = FixedStringAttr.ValueOf(Cyyy0331Oa.ExpErrorIyy1ComponentRollbackIndicator, 1);
      WLa.LocErrorIyy1ComponentOriginServid = DoubleAttr.ValueOf(Cyyy0331Oa.ExpErrorIyy1ComponentOriginServid);
      WLa.LocErrorIyy1ComponentContextString = StringAttr.ValueOf(Cyyy0331Oa.ExpErrorIyy1ComponentContextString, 512);
      WLa.LocErrorIyy1ComponentReturnCode = IntAttr.ValueOf(Cyyy0331Oa.ExpErrorIyy1ComponentReturnCode);
      WLa.LocErrorIyy1ComponentReasonCode = IntAttr.ValueOf(Cyyy0331Oa.ExpErrorIyy1ComponentReasonCode);
      WLa.LocErrorIyy1ComponentChecksum = FixedStringAttr.ValueOf(Cyyy0331Oa.ExpErrorIyy1ComponentChecksum, 15);
      WOa.ExpTsTypeTreferenceId = TimestampAttr.ValueOf(Cyyy0331Oa.ExpTypeTreferenceId);
      Cyyy0331Ia.FreeInstance(  );
      Cyyy0331Ia = null;
      Cyyy0331Oa.FreeInstance(  );
      Cyyy0331Oa = null;
      
      Globdata.GetStateData().SetLastStatementNumber( "0000000106" );
      if ( ((double) WLa.LocErrorIyy1ComponentReturnCode < (double) WLa.LocDontChangeReturnCodesQ1Ok) )
      {
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        //    **************************************************************  
        //    **                                                              
        //    If the function raised an error..                               
        //                                                                    
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        Globdata.GetStateData().SetLastStatementNumber( "0000000108" );
        WOa.ExpErrorIyy1ComponentSeverityCode = FixedStringAttr.ValueOf(WLa.LocErrorIyy1ComponentSeverityCode, 1);
        WOa.ExpErrorIyy1ComponentRollbackIndicator = FixedStringAttr.ValueOf(WLa.LocErrorIyy1ComponentRollbackIndicator, 1);
        WOa.ExpErrorIyy1ComponentOriginServid = DoubleAttr.ValueOf(WLa.LocErrorIyy1ComponentOriginServid);
        WOa.ExpErrorIyy1ComponentContextString = StringAttr.ValueOf(WLa.LocErrorIyy1ComponentContextString, 512);
        WOa.ExpErrorIyy1ComponentReturnCode = IntAttr.ValueOf(WLa.LocErrorIyy1ComponentReturnCode);
        WOa.ExpErrorIyy1ComponentReasonCode = IntAttr.ValueOf(WLa.LocErrorIyy1ComponentReasonCode);
        WOa.ExpErrorIyy1ComponentChecksum = FixedStringAttr.ValueOf(WLa.LocErrorIyy1ComponentChecksum, 15);
      }
      
      return;
    }
    
    public void f_20972637(  )
    {
      func_0020972637_esc_flag = false;
      Globdata.GetStateData().SetLastStatementNumber( "0000000109" );
      
      Cyyy0341Ia = (GEN.ORT.YYY.CYYY0341_IA)(IefRuntimeParm2.GetInstance( typeof(GEN.ORT.YYY.CYYY0341).Assembly,
      	"GEN.ORT.YYY.CYYY0341_IA" ));
      Cyyy0341Oa = (GEN.ORT.YYY.CYYY0341_OA)(IefRuntimeParm2.GetInstance( typeof(GEN.ORT.YYY.CYYY0341).Assembly,
      	"GEN.ORT.YYY.CYYY0341_OA" ));
      Cyyy0341Ia.ImpTypeTinstanceId = TimestampAttr.ValueOf(WIa.ImpTypeTinstanceId);
      Cyyy0341Ia.ImpTypeTreferenceId = TimestampAttr.ValueOf(WIa.ImpTypeTreferenceId);
      Cyyy0341Ia.ImpTypeTkeyAttrText = FixedStringAttr.ValueOf(WIa.ImpTypeTkeyAttrText, 4);
      Cyyy0341Ia.ImpReferenceIyy1ServerDataUserid = FixedStringAttr.ValueOf(WLa.LocReferenceIyy1ServerDataUserid, 8);
      Cyyy0341Ia.ImpReferenceIyy1ServerDataReferenceId = TimestampAttr.ValueOf(WLa.LocReferenceIyy1ServerDataReferenceId);
      Globdata.GetErrorData().SetErrorEncountered( ErrorData.ErrorEncounteredNoErrorFound );
      IefRuntimeParm2.UseActionBlock( typeof(GEN.ORT.YYY.CYYY0341).Assembly,
      	"GEN.ORT.YYY.CYYY0341",
      	"Execute",
      	Cyyy0341Ia,
      	Cyyy0341Oa );
      if ( ((Globdata.GetErrorData().GetStatus() != ErrorData.StatusNone) || (Globdata.GetErrorData().GetErrorEncountered() != 
        ErrorData.ErrorEncounteredNoErrorFound)) || (Globdata.GetErrorData().GetViewOverflow() != 
        ErrorData.ErrorEncounteredNoErrorFound) )
      {
        throw new ABException();
      }
      Globdata.GetStateData().SetCurrentABId( "0022020345" );
      Globdata.GetStateData().SetCurrentABName( "CYY1S071_TYPE_MAINTAIN" );
      Globdata.GetStateData().SetLastStatementNumber( "0000000109" );
      WLa.LocErrorIyy1ComponentSeverityCode = FixedStringAttr.ValueOf(Cyyy0341Oa.ExpErrorIyy1ComponentSeverityCode, 1);
      WLa.LocErrorIyy1ComponentRollbackIndicator = FixedStringAttr.ValueOf(Cyyy0341Oa.ExpErrorIyy1ComponentRollbackIndicator, 1);
      WLa.LocErrorIyy1ComponentOriginServid = DoubleAttr.ValueOf(Cyyy0341Oa.ExpErrorIyy1ComponentOriginServid);
      WLa.LocErrorIyy1ComponentContextString = StringAttr.ValueOf(Cyyy0341Oa.ExpErrorIyy1ComponentContextString, 512);
      WLa.LocErrorIyy1ComponentReturnCode = IntAttr.ValueOf(Cyyy0341Oa.ExpErrorIyy1ComponentReturnCode);
      WLa.LocErrorIyy1ComponentReasonCode = IntAttr.ValueOf(Cyyy0341Oa.ExpErrorIyy1ComponentReasonCode);
      WLa.LocErrorIyy1ComponentChecksum = FixedStringAttr.ValueOf(Cyyy0341Oa.ExpErrorIyy1ComponentChecksum, 15);
      Cyyy0341Ia.FreeInstance(  );
      Cyyy0341Ia = null;
      Cyyy0341Oa.FreeInstance(  );
      Cyyy0341Oa = null;
      
      Globdata.GetStateData().SetLastStatementNumber( "0000000111" );
      if ( ((double) WLa.LocErrorIyy1ComponentReturnCode < (double) WLa.LocDontChangeReturnCodesQ1Ok) )
      {
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        //    **************************************************************  
        //    **                                                              
        //    If the function raised an error..                               
        //                                                                    
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        Globdata.GetStateData().SetLastStatementNumber( "0000000113" );
        WOa.ExpErrorIyy1ComponentSeverityCode = FixedStringAttr.ValueOf(WLa.LocErrorIyy1ComponentSeverityCode, 1);
        WOa.ExpErrorIyy1ComponentRollbackIndicator = FixedStringAttr.ValueOf(WLa.LocErrorIyy1ComponentRollbackIndicator, 1);
        WOa.ExpErrorIyy1ComponentOriginServid = DoubleAttr.ValueOf(WLa.LocErrorIyy1ComponentOriginServid);
        WOa.ExpErrorIyy1ComponentContextString = StringAttr.ValueOf(WLa.LocErrorIyy1ComponentContextString, 512);
        WOa.ExpErrorIyy1ComponentReturnCode = IntAttr.ValueOf(WLa.LocErrorIyy1ComponentReturnCode);
        WOa.ExpErrorIyy1ComponentReasonCode = IntAttr.ValueOf(WLa.LocErrorIyy1ComponentReasonCode);
        WOa.ExpErrorIyy1ComponentChecksum = FixedStringAttr.ValueOf(WLa.LocErrorIyy1ComponentChecksum, 15);
      }
      
      return;
    }
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // INITIALIZATION UTILITY FUNCTIONS 
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    
    public void f_22020345_localAlloc( String abname )
    {
      // Request localview allocation 
      WLa = (GEN.ORT.YYY.CYY1S071_LA)(IefRuntimeParm2.GetInstance( GetType().Assembly,
      	"GEN.ORT.YYY.CYY1S071_LA" ));
      if ( WLa == null )
      {
        Globdata.GetStateData().SetCurrentABId( "0022020345" );
        Globdata.GetStateData().SetCurrentABName( abname );
        Globdata.GetErrorData().SetErrorEncountered( ErrorData.ErrorEncounteredErrorFound );
        Globdata.GetErrorData().SetLastStatus( ErrorData.LastStatusIefAllocationError );
      }
    }
    
    public void f_22020345_init(  )
    {
      if ( NestingLevel < 2 )
      {
        WLa.Reset();
      }
      WLa.LocGroupContext_MA = 0;
      for(LocGroupContext_PS_001 = 1; LocGroupContext_PS_001 <= 9; ++(LocGroupContext_PS_001))
      {
      }
      WOa.ExpReferenceIyy1ServerDataServerDate = 00000000;
      WOa.ExpReferenceIyy1ServerDataServerTime = 00000000;
      WOa.ExpReferenceIyy1ServerDataReferenceId = "00000000000000000000";
      WOa.ExpIsc1AuthorizationInfoTokenId = "                                ";
      WOa.ExpIsc1AuthorizationInfoAuthorityInd = " ";
      WOa.ExpIsc1AuthorizationInfoAuthorityStatusR = " ";
      WOa.ExpIsc1AuthorizationInfoAuthorityStatusU = " ";
      WOa.ExpIsc1AuthorizationInfoAuthorityStatusD = " ";
      WOa.ExpIsc1AuthorizationInfoAuthorityStatusL = " ";
      WOa.ExpAllTypeTinstanceId = "00000000000000000000";
      WOa.ExpAllTypeTreferenceId = "00000000000000000000";
      WOa.ExpAllTypeTcreateUserId = "        ";
      WOa.ExpAllTypeTupdateUserId = "        ";
      WOa.ExpAllTypeTkeyAttrText = "    ";
      WOa.ExpAllTypeTsearchAttrText = "                    ";
      WOa.ExpAllTypeTotherAttrText = "  ";
      WOa.ExpAllTypeTotherAttrDate = 00000000;
      WOa.ExpAllTypeTotherAttrTime = 00000000;
      WOa.ExpAllTypeTotherAttrAmount = DecimalAttr.GetDefaultValue();
      WOa.ExpTsTypeTinstanceId = "00000000000000000000";
      WOa.ExpTsTypeTreferenceId = "00000000000000000000";
      WOa.ExpMsgIyy1ComponentSeverityCode = " ";
      WOa.ExpMsgIyy1ComponentMessageTx = "";
      WOa.ExpErrorIyy1ComponentSeverityCode = " ";
      WOa.ExpErrorIyy1ComponentRollbackIndicator = " ";
      WOa.ExpErrorIyy1ComponentOriginServid = 0.0;
      WOa.ExpErrorIyy1ComponentContextString = "";
      WOa.ExpErrorIyy1ComponentReturnCode = 0;
      WOa.ExpErrorIyy1ComponentReasonCode = 0;
      WOa.ExpErrorIyy1ComponentChecksum = "               ";
      LocGroupContext_PS_001 = 1;
    }
    public void f_173015194_rgvc(  )
    {
      if ( (LocGroupContext_PS_001 > 9) || (LocGroupContext_PS_001 < 1) )
      {
        Globdata.GetErrorData().SetViewOverflow( ErrorData.ErrorEncounteredErrorFound );
        {
          throw new ABException();
        }
      }
    }
  }// end class
  
}

