namespace GEN.ORT.YYY
{
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  //
  //                    Source Code Generated by
  //                           CA Gen 8.6
  //
  //    Copyright (c) 2024 CA Technologies. All rights reserved.
  //
  //    Name: DYYY0331_TYPE_UPDATE             Date: 2024/01/09
  //    Target OS:   CLR                       Time: 13:40:34
  //    Target DBMS: ODBC/ADO.NET              User: AliAl
  //    Access Method: <NONE>         
  //
  //    Generation options:
  //    Debug trace option not selected
  //    Data modeling constraint enforcement not selected
  //    Optimized import view initialization not selected
  //    Enforce default values with DBMS not selected
  //    Init unspecified optional fields to NULL not selected
  //
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // using Statements
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  using System;
  using com.ca.gen.vwrt;
  using com.ca.gen.vwrt.types;
  using com.ca.gen.vwrt.vdf;
  using com.ca.gen.csu.exception;
  
  using com.ca.gen.abrt;
  using com.ca.gen.abrt.functions;
  using com.ca.gen.abrt.cascade;
  using com.ca.gen.abrt.manager;
  using com.ca.gen.abrt.trace;
  using com.ca.gen.exits.common;
  using com.ca.gen.odc;
  using System.Data;
  using System.Collections;
  
  public class DYYY0331 : ABBase
  {
    // * * * * * * * * * * * * * * * * * * *
    // ENTITY ACTION STATEMENT STATUS FLAGS 
    // ENTITY VIEW STATUS FLAGS AND         
    // LAST COMMAND FOR EACH ENTITY VIEW    
    // * * * * * * * * * * * * * * * * * * *
    string sl_29360182 = ErrorData.LastStatusNone;
    string up_27262987 = ErrorData.LastStatusNone;
    string Type_es;
    string Type_001cd;
    string Type_lk;
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // IMPORT VIEW CLASS VARIABLE
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    DYYY0331_IA WIa;
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // EXPORT VIEW CLASS VARIABLE
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    DYYY0331_OA WOa;
    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // START OF ENTITY ACTION VIEW
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    /// <summary>
    /// Internal data view storage for: DYYY0331_EA
    /// </summary>
    [Serializable]
    public class DYYY0331_EA : ViewBase, IEntityActionView
    {
      // Entity View: 
      //        Type: TYPE
      /// <summary>
      /// Internal storage for attribute missing flag for: TypeTinstanceId
      /// </summary>
      private char _TypeTinstanceId_AS;
      /// <summary>
      /// Attribute missing flag for: TypeTinstanceId
      /// </summary>
      public char TypeTinstanceId_AS {
        get {
          return(_TypeTinstanceId_AS);
        }
        set {
          _TypeTinstanceId_AS = value;
        }
      }
      /// <summary>
      /// Internal storage, attribute for: TypeTinstanceId
      /// Domain: Timestamp
      /// Length: 20
      /// </summary>
      private string _TypeTinstanceId;
      /// <summary>
      /// Attribute for: TypeTinstanceId
      /// </summary>
      public string TypeTinstanceId {
        get {
          return(_TypeTinstanceId);
        }
        set {
          _TypeTinstanceId = value;
        }
      }
      /// <summary>
      /// Internal storage for attribute missing flag for: TypeTreferenceId
      /// </summary>
      private char _TypeTreferenceId_AS;
      /// <summary>
      /// Attribute missing flag for: TypeTreferenceId
      /// </summary>
      public char TypeTreferenceId_AS {
        get {
          return(_TypeTreferenceId_AS);
        }
        set {
          _TypeTreferenceId_AS = value;
        }
      }
      /// <summary>
      /// Internal storage, attribute for: TypeTreferenceId
      /// Domain: Timestamp
      /// Length: 20
      /// </summary>
      private string _TypeTreferenceId;
      /// <summary>
      /// Attribute for: TypeTreferenceId
      /// </summary>
      public string TypeTreferenceId {
        get {
          return(_TypeTreferenceId);
        }
        set {
          _TypeTreferenceId = value;
        }
      }
      /// <summary>
      /// Internal storage for attribute missing flag for: TypeTkeyAttrText
      /// </summary>
      private char _TypeTkeyAttrText_AS;
      /// <summary>
      /// Attribute missing flag for: TypeTkeyAttrText
      /// </summary>
      public char TypeTkeyAttrText_AS {
        get {
          return(_TypeTkeyAttrText_AS);
        }
        set {
          _TypeTkeyAttrText_AS = value;
        }
      }
      /// <summary>
      /// Internal storage, attribute for: TypeTkeyAttrText
      /// Domain: Text
      /// Length: 4
      /// Varying Length: N
      /// </summary>
      private string _TypeTkeyAttrText;
      /// <summary>
      /// Attribute for: TypeTkeyAttrText
      /// </summary>
      public string TypeTkeyAttrText {
        get {
          return(_TypeTkeyAttrText);
        }
        set {
          _TypeTkeyAttrText = value;
        }
      }
      /// <summary>
      /// Internal storage for attribute missing flag for: TypeTsearchAttrText
      /// </summary>
      private char _TypeTsearchAttrText_AS;
      /// <summary>
      /// Attribute missing flag for: TypeTsearchAttrText
      /// </summary>
      public char TypeTsearchAttrText_AS {
        get {
          return(_TypeTsearchAttrText_AS);
        }
        set {
          _TypeTsearchAttrText_AS = value;
        }
      }
      /// <summary>
      /// Internal storage, attribute for: TypeTsearchAttrText
      /// Domain: Text
      /// Length: 20
      /// Varying Length: N
      /// </summary>
      private string _TypeTsearchAttrText;
      /// <summary>
      /// Attribute for: TypeTsearchAttrText
      /// </summary>
      public string TypeTsearchAttrText {
        get {
          return(_TypeTsearchAttrText);
        }
        set {
          _TypeTsearchAttrText = value;
        }
      }
      /// <summary>
      /// Internal storage for attribute missing flag for: TypeTotherAttrText
      /// </summary>
      private char _TypeTotherAttrText_AS;
      /// <summary>
      /// Attribute missing flag for: TypeTotherAttrText
      /// </summary>
      public char TypeTotherAttrText_AS {
        get {
          return(_TypeTotherAttrText_AS);
        }
        set {
          _TypeTotherAttrText_AS = value;
        }
      }
      /// <summary>
      /// Internal storage, attribute for: TypeTotherAttrText
      /// Domain: Text
      /// Length: 2
      /// Varying Length: N
      /// </summary>
      private string _TypeTotherAttrText;
      /// <summary>
      /// Attribute for: TypeTotherAttrText
      /// </summary>
      public string TypeTotherAttrText {
        get {
          return(_TypeTotherAttrText);
        }
        set {
          _TypeTotherAttrText = value;
        }
      }
      /// <summary>
      /// Internal storage for attribute missing flag for: TypeTupdateUserId
      /// </summary>
      private char _TypeTupdateUserId_AS;
      /// <summary>
      /// Attribute missing flag for: TypeTupdateUserId
      /// </summary>
      public char TypeTupdateUserId_AS {
        get {
          return(_TypeTupdateUserId_AS);
        }
        set {
          _TypeTupdateUserId_AS = value;
        }
      }
      /// <summary>
      /// Internal storage, attribute for: TypeTupdateUserId
      /// Domain: Text
      /// Length: 8
      /// Varying Length: N
      /// </summary>
      private string _TypeTupdateUserId;
      /// <summary>
      /// Attribute for: TypeTupdateUserId
      /// </summary>
      public string TypeTupdateUserId {
        get {
          return(_TypeTupdateUserId);
        }
        set {
          _TypeTupdateUserId = value;
        }
      }
      /// <summary>
      /// Internal storage for attribute missing flag for: TypeTotherAttrDate
      /// </summary>
      private char _TypeTotherAttrDate_AS;
      /// <summary>
      /// Attribute missing flag for: TypeTotherAttrDate
      /// </summary>
      public char TypeTotherAttrDate_AS {
        get {
          return(_TypeTotherAttrDate_AS);
        }
        set {
          _TypeTotherAttrDate_AS = value;
        }
      }
      /// <summary>
      /// Internal storage, attribute for: TypeTotherAttrDate
      /// Domain: Date
      /// Length: 8
      /// </summary>
      private int _TypeTotherAttrDate;
      /// <summary>
      /// Attribute for: TypeTotherAttrDate
      /// </summary>
      public int TypeTotherAttrDate {
        get {
          return(_TypeTotherAttrDate);
        }
        set {
          _TypeTotherAttrDate = value;
        }
      }
      /// <summary>
      /// Internal storage for attribute missing flag for: TypeTotherAttrTime
      /// </summary>
      private char _TypeTotherAttrTime_AS;
      /// <summary>
      /// Attribute missing flag for: TypeTotherAttrTime
      /// </summary>
      public char TypeTotherAttrTime_AS {
        get {
          return(_TypeTotherAttrTime_AS);
        }
        set {
          _TypeTotherAttrTime_AS = value;
        }
      }
      /// <summary>
      /// Internal storage, attribute for: TypeTotherAttrTime
      /// Domain: Time
      /// Length: 6
      /// </summary>
      private int _TypeTotherAttrTime;
      /// <summary>
      /// Attribute for: TypeTotherAttrTime
      /// </summary>
      public int TypeTotherAttrTime {
        get {
          return(_TypeTotherAttrTime);
        }
        set {
          _TypeTotherAttrTime = value;
        }
      }
      /// <summary>
      /// Internal storage for attribute missing flag for: TypeTotherAttrAmount
      /// </summary>
      private char _TypeTotherAttrAmount_AS;
      /// <summary>
      /// Attribute missing flag for: TypeTotherAttrAmount
      /// </summary>
      public char TypeTotherAttrAmount_AS {
        get {
          return(_TypeTotherAttrAmount_AS);
        }
        set {
          _TypeTotherAttrAmount_AS = value;
        }
      }
      /// <summary>
      /// Internal storage, attribute for: TypeTotherAttrAmount
      /// Domain: Number
      /// Length: 17
      /// Decimal Places: 2
      /// Decimal Precision: Y
      /// </summary>
      private decimal _TypeTotherAttrAmount;
      /// <summary>
      /// Attribute for: TypeTotherAttrAmount
      /// </summary>
      public decimal TypeTotherAttrAmount {
        get {
          return(_TypeTotherAttrAmount);
        }
        set {
          _TypeTotherAttrAmount = value;
        }
      }
      /// <summary>
      /// Default Constructor
      /// </summary>
      
      public DYYY0331_EA(  )
      {
        Reset(  );
      }
      /// <summary>
      /// Copy Constructor
      /// </summary>
      
      public DYYY0331_EA( DYYY0331_EA orig )
      {
        TypeTinstanceId_AS = orig.TypeTinstanceId_AS;
        TypeTinstanceId = orig.TypeTinstanceId;
        TypeTreferenceId_AS = orig.TypeTreferenceId_AS;
        TypeTreferenceId = orig.TypeTreferenceId;
        TypeTkeyAttrText_AS = orig.TypeTkeyAttrText_AS;
        TypeTkeyAttrText = orig.TypeTkeyAttrText;
        TypeTsearchAttrText_AS = orig.TypeTsearchAttrText_AS;
        TypeTsearchAttrText = orig.TypeTsearchAttrText;
        TypeTotherAttrText_AS = orig.TypeTotherAttrText_AS;
        TypeTotherAttrText = orig.TypeTotherAttrText;
        TypeTupdateUserId_AS = orig.TypeTupdateUserId_AS;
        TypeTupdateUserId = orig.TypeTupdateUserId;
        TypeTotherAttrDate_AS = orig.TypeTotherAttrDate_AS;
        TypeTotherAttrDate = orig.TypeTotherAttrDate;
        TypeTotherAttrTime_AS = orig.TypeTotherAttrTime_AS;
        TypeTotherAttrTime = orig.TypeTotherAttrTime;
        TypeTotherAttrAmount_AS = orig.TypeTotherAttrAmount_AS;
        TypeTotherAttrAmount = orig.TypeTotherAttrAmount;
      }
      /// <summary>
      /// clone constructor
      /// </summary>
      
      public override Object Clone(  )
      {
        return(new DYYY0331_EA(this));
      }
      /// <summary>
      /// Resets all properties to the defaults.
      /// </summary>
      
      public void Reset(  )
      {
        TypeTinstanceId_AS = ' ';
        TypeTinstanceId = "00000000000000000000";
        TypeTreferenceId_AS = ' ';
        TypeTreferenceId = "00000000000000000000";
        TypeTkeyAttrText_AS = ' ';
        TypeTkeyAttrText = "    ";
        TypeTsearchAttrText_AS = ' ';
        TypeTsearchAttrText = "                    ";
        TypeTotherAttrText_AS = ' ';
        TypeTotherAttrText = "  ";
        TypeTupdateUserId_AS = ' ';
        TypeTupdateUserId = "        ";
        TypeTotherAttrDate_AS = ' ';
        TypeTotherAttrDate = 00000000;
        TypeTotherAttrTime_AS = ' ';
        TypeTotherAttrTime = 00000000;
        TypeTotherAttrAmount_AS = ' ';
        TypeTotherAttrAmount = DecimalAttr.GetDefaultValue();
      }
    }
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // ENTITY ACTION VIEW CLASS VARIABLE
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    DYYY0331_EA WEa = new DYYY0331_EA();
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // LOCAL VIEW CLASS VARIABLE
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    DYYY0331_LA WLa;
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // CURSOR OPEN FLAGS
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    bool curs_open_0029360182 = false;
    
    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // HOST VARIABLES FOR TABLE: VDVYYYT
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    string TkeyAttr_001EF;
    string TkeyAttr_002EN;
    string TsearchAttr_003EF;
    string TsearchAttr_004EN;
    string TotherAttr_005EF;
    string TotherAttr_006EN;
    string TupdateUserid_007EF;
    string TupdateUserid_008EN;
    DateTime TinstanceId_009EF;
    DateTime TinstanceId_010EN;
    DateTime TreferenceId_011EF;
    DateTime TreferenceId_012EN;
    DateTime TotherDate_013EF;
    DateTime TotherDate_014EN;
    DateTime TotherTime_015EF;
    DateTime TotherTime_016EN;
    decimal TotherAmount_017EF;
    decimal TotherAmount_018EN;
    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // TEMPORARY HOST VARIABLES 
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    string TkeyAttrText_001TP;
    
    
    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // MISC DECLARATIONS AND PROTOTYPES 
    //    FOLLOW AS NEEDED:             
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    bool func_0022020275_esc_flag;
    IAbstractCommand hstmt_0037916950_1_cmd;
    IAbstractResultSet hstmt_0037916950_1_rs;
    bool func_0020972967_esc_flag;
    IAbstractCommand hstmt_0027262987_1_cmd;
    int hstmt_0027262987_1_cnt;
    IAbstractResultSet hstmt_0027262987_1_rs;
    bool func_0020972810_esc_flag;
    //       +->   DYYY0331_TYPE_UPDATE              01/09/2024  13:40
    //       !       IMPORTS:
    //       !         Work View imp_error iyy1_component (Transient,
    //       !                     Mandatory, Import only)
    //       !           severity_code
    //       !           rollback_indicator
    //       !           origin_servid
    //       !           context_string
    //       !           return_code
    //       !           reason_code
    //       !           checksum
    //       !         Work View imp_reference iyy1_server_data (Transient,
    //       !                     Mandatory, Import only)
    //       !           userid
    //       !           reference_id
    //       !         Entity View imp type (Transient, Mandatory, Import
    //       !                     only)
    //       !           tinstance_id
    //       !           treference_id
    //       !           tkey_attr_text
    //       !           tsearch_attr_text
    //       !           tother_attr_text
    //       !           tother_attr_date
    //       !           tother_attr_time
    //       !           tother_attr_amount
    //       !       EXPORTS:
    //       !         Entity View exp type (Transient, Export only)
    //       !           treference_id
    //       !         Work View exp_error iyy1_component (Transient, Export
    //       !                     only)
    //       !           severity_code
    //       !           rollback_indicator
    //       !           origin_servid
    //       !           context_string
    //       !           return_code
    //       !           reason_code
    //       !           checksum
    //       !       ENTITY ACTIONS:
    //       !         Entity View type
    //       !           tinstance_id
    //       !           treference_id
    //       !           tkey_attr_text
    //       !           tsearch_attr_text
    //       !           tother_attr_text
    //       !           tupdate_user_id
    //       !           tother_attr_date
    //       !           tother_attr_time
    //       !           tother_attr_amount
    //       !       LOCALS:
    //       !         Work View loc dont_change_return_codes
    //       !           1_ok
    //       !           n10_obj_not_found
    //       !           n41_obj_update_failed
    //       !         Work View loc dont_change_reason_codes
    //       !           1_default
    //       !           141_type_not_found
    //       !           142_type_already_exist
    //       !           143_type_attr_value_invalid
    //       !           152_type_concurrency_error
    //       !
    //       !     PROCEDURE STATEMENTS
    //       !
    //     1 !  NOTE: 
    //     1 !  Please review explanation for purpose.
    //     1 !  
    //     2 !  NOTE: 
    //     2 !  RELEASE HISTORY
    //     2 !  01_00 23-02-1998 New release
    //     2 !  
    //     3 !  MOVE imp_error iyy1_component TO exp_error iyy1_component
    //     4 !   
    //     5 !  NOTE: 
    //     5 !  ****************************************************************
    //     5 !  Values of the ReturnCode/ReasonCode used.
    //     5 !  
    //     6 !  NOTE: 
    //     6 !  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    //     6 !  Please set the return ve reason code values below.
    //     6 !  
    //     7 !  SET loc dont_change_return_codes 1_ok TO 1 
    //     8 !  SET loc dont_change_return_codes n10_obj_not_found TO -10 
    //     9 !  SET loc dont_change_return_codes n41_obj_update_failed TO -41 
    //    10 !   
    //    11 !  SET loc dont_change_reason_codes 1_default TO 1 
    //    12 !  SET loc dont_change_reason_codes 141_type_not_found TO 141 
    //    13 !  SET loc dont_change_reason_codes 142_type_already_exist TO 142
    //    14 !  SET loc dont_change_reason_codes 143_type_attr_value_invalid
    //    14 !              TO 143 
    //    15 !  SET loc dont_change_reason_codes 152_type_concurrency_error TO
    //    15 !              152 
    //    16 !   
    //    17 !  NOTE: 
    //    17 !  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    //    17 !  !!!!!!!!!!!!!!!!!!!!!
    //    17 !  If Instance_id is used, reading should not be done according
    //    17 !  to business key(s). This field must be used.
    //    17 !  
    //    18 !  NOTE: 
    //    18 !  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    //    18 !  !!!!!!!!!!!!!!
    //    18 !  If operation is dependent to 'parent' data type, preserve the
    //    18 !  PARENT READ process below, otherwise delete it.
    //    18 !  
    //    19 !  NOTE: 
    //    19 !  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    //    19 !  !!!!!!!!!!!!!!!!!!!!!
    //    19 !  Please set "Control of Cursor Generation" property to "Cursor
    //    19 !  only". (It is read for Update.)
    //    19 !  
    //    20 !  +=>READ (Cursor Only) type
    //    20 !  !        WHERE DESIRED type tkey_attr_text = imp type
    //    20 !  !              tkey_attr_text
    //    20 !  +> WHEN successful
    //    21 !  !  +->IF type treference_id ^= imp type treference_id
    //    22 !  !  !  SET exp_error iyy1_component return_code TO loc
    //    22 !  !  !              dont_change_return_codes
    //    22 !  !  !              n41_obj_update_failed 
    //    23 !  !  !  SET exp_error iyy1_component reason_code TO loc
    //    23 !  !  !              dont_change_reason_codes
    //    23 !  !  !              152_type_concurrency_error 
    //    24 ! <------ESCAPE
    //    21 !  !  +--
    //    25 !  !  NOTE: 
    //    25 ...!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    //    25 ...!!!!!!!!!!!!!!!!!!!!!
    //    25 ...Except the specified fields (Key field(s), Create_ts,
    //    25 ...Create_userid), all fields must be changed. 
    //    25 ...
    //    26 !  !  +->UPDATE type
    //    27 !  !  !  SET treference_id TO imp_reference iyy1_server_data
    //    27 !  !  !              reference_id 
    //    28 !  !  !  SET tupdate_user_id TO imp_reference iyy1_server_data
    //    28 !  !  !              userid 
    //    29 !  !  !  SET tsearch_attr_text TO imp type tsearch_attr_text 
    //    30 !  !  !  SET tother_attr_text TO imp type tother_attr_text 
    //    31 !  !  !  SET tother_attr_date TO imp type tother_attr_date 
    //    32 !  !  !  SET tother_attr_time TO imp type tother_attr_time 
    //    33 !  !  !  SET tother_attr_amount TO imp type tother_attr_amount 
    //    26 !  !  +> WHEN successful
    //    34 !  !  !  MOVE  type TO exp type
    //    26 !  !  +> WHEN not unique
    //    35 !  !  !  SET exp_error iyy1_component return_code TO loc
    //    35 !  !  !              dont_change_return_codes
    //    35 !  !  !              n41_obj_update_failed 
    //    36 !  !  !  SET exp_error iyy1_component reason_code TO loc
    //    36 !  !  !              dont_change_reason_codes
    //    36 !  !  !              142_type_already_exist 
    //    26 !  !  +> WHEN permitted value violation
    //    37 !  !  !  SET exp_error iyy1_component return_code TO loc
    //    37 !  !  !              dont_change_return_codes
    //    37 !  !  !              n41_obj_update_failed 
    //    38 !  !  !  SET exp_error iyy1_component reason_code TO loc
    //    38 !  !  !              dont_change_reason_codes
    //    38 !  !  !              143_type_attr_value_invalid 
    //    26 !  !  +--
    //    20 !  +> WHEN not found
    //    39 !  !  SET exp_error iyy1_component return_code TO loc
    //    39 !  !              dont_change_return_codes n10_obj_not_found 
    //    40 !  !  SET exp_error iyy1_component reason_code TO loc
    //    40 !  !              dont_change_reason_codes 141_type_not_found 
    //    20 !  +--
    //       +---
    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    //  CONSTRUCTOR FOR THE CLASS       
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    public DYYY0331(  )
    {
      IefCGenRlse = "CA Gen 8.6";
      IsCopyright = "Copyright (c) 2024 CA Technologies. All rights reserved.";
      IefCGenDate = "2024/01/09";
      IefCGenTime = "13:40:34";
      IefCGenEncy = "9.2.A6";
      IefCGenUserId = "AliAl";
      IefCGenModel = "N8I_ORT_YYY_0112_TEMPLATE";
      IefCGenSubset = "ALL";
      IefCGenName = "DYYY0331_TYPE_UPDATE";
      NestingLevel = 0;
      ValChkDeadlockTimeout = false;
      ValChkDBError = false;
    }
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // ACTION BLOCK FUNCTION DECLARATIONS 
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    
    public void Execute( Object in_runtime_parm1, 
    	IRuntimePStepContext in_runtime_parm2, 
    	GlobData in_globdata, 
    	DYYY0331_IA import_view, 
    	DYYY0331_OA export_view )
    {
      IefRuntimeParm1 = in_runtime_parm1;
      IefRuntimeParm2 = in_runtime_parm2;
      Globdata = in_globdata;
      WIa = import_view;
      WOa = export_view;
      _Execute();
    }
    
    private void _Execute()
    {
      
      f_22020275_localAlloc( "DYYY0331_TYPE_UPDATE" );
      if ( Globdata.GetErrorData().GetLastStatus() == ErrorData.LastStatusIefAllocationError )
      	return;
      
      ++(NestingLevel);
      try {
        f_22020275_init(  );
        f_22020275(  );
      } catch( Exception e ) {
        if ( ((Globdata.GetErrorData().GetStatus() == ErrorData.StatusNone) && (Globdata.GetErrorData().GetErrorEncountered() == 
          ErrorData.ErrorEncounteredNoErrorFound)) && (Globdata.GetErrorData().GetViewOverflow() == 
          ErrorData.ErrorEncounteredNoErrorFound) )
        {
          Globdata.GetErrorData().SetStatus( ErrorData.LastStatusFatalError );
          Globdata.GetErrorData().SetLastStatus( ErrorData.LastStatusUnexpectedExceptionError );
          Globdata.GetErrorData().SetErrorEncountered( ErrorData.ErrorEncounteredErrorFound );
          Globdata.GetErrorData(  ).SetErrorMessage( e );
        }
      }
      --(NestingLevel);
      
      
      f_22020275_term(  );
    }
    public void f_22020275(  )
    {
      func_0022020275_esc_flag = false;
      Globdata.GetStateData().SetCurrentABId( "0022020275" );
      Globdata.GetStateData().SetCurrentABName( "DYYY0331_TYPE_UPDATE" );
      {
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        //    Please review explanation for purpose.                          
        //                                                                    
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        //    RELEASE HISTORY                                                 
        //    01_00 23-02-1998 New release                                    
        //                                                                    
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        Globdata.GetStateData().SetLastStatementNumber( "0000000003" );
        WOa.ExpErrorIyy1ComponentSeverityCode = FixedStringAttr.ValueOf(WIa.ImpErrorIyy1ComponentSeverityCode, 1);
        WOa.ExpErrorIyy1ComponentRollbackIndicator = FixedStringAttr.ValueOf(WIa.ImpErrorIyy1ComponentRollbackIndicator, 1);
        WOa.ExpErrorIyy1ComponentOriginServid = DoubleAttr.ValueOf(WIa.ImpErrorIyy1ComponentOriginServid);
        WOa.ExpErrorIyy1ComponentContextString = StringAttr.ValueOf(WIa.ImpErrorIyy1ComponentContextString, 512);
        WOa.ExpErrorIyy1ComponentReturnCode = IntAttr.ValueOf(WIa.ImpErrorIyy1ComponentReturnCode);
        WOa.ExpErrorIyy1ComponentReasonCode = IntAttr.ValueOf(WIa.ImpErrorIyy1ComponentReasonCode);
        WOa.ExpErrorIyy1ComponentChecksum = FixedStringAttr.ValueOf(WIa.ImpErrorIyy1ComponentChecksum, 15);
        
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        //    **************************************************************  
        //    **                                                              
        //    Values of the ReturnCode/ReasonCode used.                       
        //                                                                    
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        //    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  
        //    !!                                                              
        //    Please set the return ve reason code values below.              
        //                                                                    
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        Globdata.GetStateData().SetLastStatementNumber( "0000000007" );
        WLa.LocDontChangeReturnCodesQ1Ok = IntAttr.ValueOf((int)TIRD2DEC.Execute1(1, 0, TIRD2DEC.ROUND_NONE, 5));
        Globdata.GetStateData().SetLastStatementNumber( "0000000008" );
        WLa.LocDontChangeReturnCodesN10ObjNotFound = IntAttr.ValueOf((int)TIRD2DEC.Execute1(-10, 0, TIRD2DEC.ROUND_NONE, 5));
        Globdata.GetStateData().SetLastStatementNumber( "0000000009" );
        WLa.LocDontChangeReturnCodesN41ObjUpdateFailed = IntAttr.ValueOf((int)TIRD2DEC.Execute1(-41, 0, TIRD2DEC.ROUND_NONE, 5));
        
        Globdata.GetStateData().SetLastStatementNumber( "0000000011" );
        WLa.LocDontChangeReasonCodesQ1Default = IntAttr.ValueOf((int)TIRD2DEC.Execute1(1, 0, TIRD2DEC.ROUND_NONE, 5));
        Globdata.GetStateData().SetLastStatementNumber( "0000000012" );
        WLa.LocDontChangeReasonCodesQ141TypeNotFound = IntAttr.ValueOf((int)TIRD2DEC.Execute1(141, 0, TIRD2DEC.ROUND_NONE, 5));
        Globdata.GetStateData().SetLastStatementNumber( "0000000013" );
        WLa.LocDontChangeReasonCodesQ142TypeAlreadyExist = IntAttr.ValueOf((int)TIRD2DEC.Execute1(142, 0, TIRD2DEC.ROUND_NONE, 5));
        Globdata.GetStateData().SetLastStatementNumber( "0000000014" );
        WLa.LocDontChangeReasonCodesQ143TypeAttrValueInvalid = IntAttr.ValueOf((int)TIRD2DEC.Execute1(143, 0, TIRD2DEC.ROUND_NONE, 5)
          );
        Globdata.GetStateData().SetLastStatementNumber( "0000000015" );
        WLa.LocDontChangeReasonCodesQ152TypeConcurrencyError = IntAttr.ValueOf((int)TIRD2DEC.Execute1(152, 0, TIRD2DEC.ROUND_NONE, 5)
          );
        
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        //    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  
        //    !!!!!!!!!!!!!!!!!!!!!                                           
        //    If Instance_id is used, reading should not be done according    
        //    to business key(s). This field must be used.                    
        //                                                                    
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        //    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  
        //    !!!!!!!!!!!!!!                                                  
        //    If operation is dependent to 'parent' data type, preserve the   
        //    PARENT READ process below, otherwise delete it.                 
        //                                                                    
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        //    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  
        //    !!!!!!!!!!!!!!!!!!!!!                                           
        //    Please set "Control of Cursor Generation" property to "Cursor   
        //    only". (It is read for Update.)                                 
        //                                                                    
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        Globdata.GetStateData().SetLastStatementNumber( "0000000020" );
        f_29360182(  );
        if ( sl_29360182 == ErrorData.LastStatusSucceeds )
        {
          Globdata.GetStateData().SetLastSubStatementNumber( "1" );
          {
            f_20972967(  );
          }
        }
        else if ( sl_29360182 == ErrorData.LastStatusNotFound )
        {
          Globdata.GetStateData().SetLastSubStatementNumber( "2" );
          {
            Globdata.GetStateData().SetLastStatementNumber( "0000000039" );
            WOa.ExpErrorIyy1ComponentReturnCode = IntAttr.ValueOf((int)TIRD2DEC.Execute1((double) 
              WLa.LocDontChangeReturnCodesN10ObjNotFound, 0, TIRD2DEC.ROUND_NONE, 5));
            Globdata.GetStateData().SetLastStatementNumber( "0000000040" );
            WOa.ExpErrorIyy1ComponentReasonCode = IntAttr.ValueOf((int)TIRD2DEC.Execute1((double) 
              WLa.LocDontChangeReasonCodesQ141TypeNotFound, 0, TIRD2DEC.ROUND_NONE, 5));
          }
        }
        else {
          Globdata.GetErrorData().SetStatus( ErrorData.LastStatusFatalError );
          Globdata.GetErrorData().SetLastStatus( sl_29360182 );
          Globdata.GetErrorData().SetErrorEncountered( ErrorData.ErrorEncounteredErrorFound );
          throw new ABException();
        }
      }
      f_0022020275_esctag: 
      ;
      return;
    }
    
    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // SUBORDINATE FUNCTIONS
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    
    
    public void f_20972967(  )
    {
      func_0020972967_esc_flag = false;
      {
        Globdata.GetStateData().SetLastStatementNumber( "0000000021" );
        if ( CompareExit.CompareTo(WEa.TypeTreferenceId, WIa.ImpTypeTreferenceId) != 0 )
        {
          f_20972810(  );
        }
        
        if ( func_0020972967_esc_flag )
        {
          goto f_0020972967_esctag;
        }
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        //    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  
        //    !!!!!!!!!!!!!!!!!!!!!                                           
        //    Except the specified fields (Key field(s), Create_ts,           
        //    Create_userid), all fields must be changed.                     
        //                                                                    
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        Globdata.GetStateData().SetLastStatementNumber( "0000000026" );
        WEa.TypeTreferenceId = TimestampAttr.ValueOf(WIa.ImpReferenceIyy1ServerDataReferenceId);
        WEa.TypeTupdateUserId = FixedStringAttr.ValueOf(WIa.ImpReferenceIyy1ServerDataUserid, 8);
        WEa.TypeTsearchAttrText = FixedStringAttr.ValueOf(WIa.ImpTypeTsearchAttrText, 20);
        WEa.TypeTotherAttrText = FixedStringAttr.ValueOf(WIa.ImpTypeTotherAttrText, 2);
        WEa.TypeTotherAttrDate = DateAttr.ValueOf(WIa.ImpTypeTotherAttrDate);
        WEa.TypeTotherAttrTime = TimeAttr.ValueOf(WIa.ImpTypeTotherAttrTime);
        WEa.TypeTotherAttrAmount = DecimalAttr.ValueOf(TIRBDTRU.TruncateToDecimal(WIa.ImpTypeTotherAttrAmount, 2));
        ValChkDeadlockTimeout = false;
        ValChkDBError = false;
        f_27262987(  );
        if ( up_27262987 == ErrorData.LastStatusSucceeds )
        {
          Globdata.GetStateData().SetLastSubStatementNumber( "1" );
          {
            Globdata.GetStateData().SetLastStatementNumber( "0000000034" );
            WOa.ExpTypeTreferenceId = TimestampAttr.ValueOf(WEa.TypeTreferenceId);
          }
        }
        else if ( up_27262987 == ErrorData.LastStatusDuplicateFound )
        {
          Globdata.GetStateData().SetLastSubStatementNumber( "2" );
          {
            Globdata.GetStateData().SetLastStatementNumber( "0000000035" );
            WOa.ExpErrorIyy1ComponentReturnCode = IntAttr.ValueOf((int)TIRD2DEC.Execute1((double) 
              WLa.LocDontChangeReturnCodesN41ObjUpdateFailed, 0, TIRD2DEC.ROUND_NONE, 5));
            Globdata.GetStateData().SetLastStatementNumber( "0000000036" );
            WOa.ExpErrorIyy1ComponentReasonCode = IntAttr.ValueOf((int)TIRD2DEC.Execute1((double) 
              WLa.LocDontChangeReasonCodesQ142TypeAlreadyExist, 0, TIRD2DEC.ROUND_NONE, 5));
          }
        }
        else if ( up_27262987 == ErrorData.LastStatusInvalidDatabPerm )
        {
          Globdata.GetStateData().SetLastSubStatementNumber( "3" );
          {
            Globdata.GetStateData().SetLastStatementNumber( "0000000037" );
            WOa.ExpErrorIyy1ComponentReturnCode = IntAttr.ValueOf((int)TIRD2DEC.Execute1((double) 
              WLa.LocDontChangeReturnCodesN41ObjUpdateFailed, 0, TIRD2DEC.ROUND_NONE, 5));
            Globdata.GetStateData().SetLastStatementNumber( "0000000038" );
            WOa.ExpErrorIyy1ComponentReasonCode = IntAttr.ValueOf((int)TIRD2DEC.Execute1((double) 
              WLa.LocDontChangeReasonCodesQ143TypeAttrValueInvalid, 0, TIRD2DEC.ROUND_NONE, 5));
          }
        }
        else {
          Globdata.GetErrorData().SetStatus( ErrorData.LastStatusDbError );
          Globdata.GetErrorData().SetErrorEncountered( ErrorData.ErrorEncounteredErrorFound );
          throw new ABException();
        }
      }
      f_0020972967_esctag: 
      ;
      return;
    }
    
    public void f_20972810(  )
    {
      func_0020972810_esc_flag = false;
      {
        Globdata.GetStateData().SetLastStatementNumber( "0000000022" );
        WOa.ExpErrorIyy1ComponentReturnCode = IntAttr.ValueOf((int)TIRD2DEC.Execute1((double) 
          WLa.LocDontChangeReturnCodesN41ObjUpdateFailed, 0, TIRD2DEC.ROUND_NONE, 5));
        Globdata.GetStateData().SetLastStatementNumber( "0000000023" );
        WOa.ExpErrorIyy1ComponentReasonCode = IntAttr.ValueOf((int)TIRD2DEC.Execute1((double) 
          WLa.LocDontChangeReasonCodesQ152TypeConcurrencyError, 0, TIRD2DEC.ROUND_NONE, 5));
        Globdata.GetStateData().SetLastStatementNumber( "0000000024" );
        func_0020972810_esc_flag = true;
        func_0020972967_esc_flag = true;
      }
      f_0020972810_esctag: 
      ;
      return;
    }
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // INITIALIZATION UTILITY FUNCTIONS 
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    
    public void f_22020275_localAlloc( String abname )
    {
      // Request localview allocation 
      WLa = (GEN.ORT.YYY.DYYY0331_LA)(IefRuntimeParm2.GetInstance( GetType().Assembly,
      	"GEN.ORT.YYY.DYYY0331_LA" ));
      if ( WLa == null )
      {
        Globdata.GetStateData().SetCurrentABId( "0022020275" );
        Globdata.GetStateData().SetCurrentABName( abname );
        Globdata.GetErrorData().SetErrorEncountered( ErrorData.ErrorEncounteredErrorFound );
        Globdata.GetErrorData().SetLastStatus( ErrorData.LastStatusIefAllocationError );
      }
    }
    
    public void f_22020275_init(  )
    {
      
      TkeyAttr_001EF = Spaces;
      TkeyAttr_002EN = Spaces;
      TsearchAttr_003EF = Spaces;
      TsearchAttr_004EN = Spaces;
      TotherAttr_005EF = Spaces;
      TotherAttr_006EN = Spaces;
      TupdateUserid_007EF = Spaces;
      TupdateUserid_008EN = Spaces;
      TinstanceId_009EF = TIRVW2S.Execute( IefRuntimeParm1,
      	IefRuntimeParm2,
      	Globdata,
      	"IEFDB",
      	"00010101000000000000" );
      TinstanceId_010EN = TIRVW2S.Execute( IefRuntimeParm1,
      	IefRuntimeParm2,
      	Globdata,
      	"IEFDB",
      	"00010101000000000000" );
      TreferenceId_011EF = TIRVW2S.Execute( IefRuntimeParm1,
      	IefRuntimeParm2,
      	Globdata,
      	"IEFDB",
      	"00010101000000000000" );
      TreferenceId_012EN = TIRVW2S.Execute( IefRuntimeParm1,
      	IefRuntimeParm2,
      	Globdata,
      	"IEFDB",
      	"00010101000000000000" );
      TotherDate_013EF = TIRVW2D.Execute( IefRuntimeParm1,
      	IefRuntimeParm2,
      	Globdata,
      	"IEFDB",
      	0 );
      TotherDate_014EN = TIRVW2D.Execute( IefRuntimeParm1,
      	IefRuntimeParm2,
      	Globdata,
      	"IEFDB",
      	0 );
      TotherTime_015EF = TIRVW2T.Execute( IefRuntimeParm1,
      	IefRuntimeParm2,
      	Globdata,
      	"IEFDB",
      	0 );
      TotherTime_016EN = TIRVW2T.Execute( IefRuntimeParm1,
      	IefRuntimeParm2,
      	Globdata,
      	"IEFDB",
      	0 );
      TotherAmount_017EF = 0.0M;
      TotherAmount_018EN = 0.0M;
      if ( NestingLevel < 2 )
      {
        WLa.Reset();
      }
      WEa.Reset();
      WOa.ExpTypeTreferenceId = "00000000000000000000";
      WOa.ExpErrorIyy1ComponentSeverityCode = " ";
      WOa.ExpErrorIyy1ComponentRollbackIndicator = " ";
      WOa.ExpErrorIyy1ComponentOriginServid = 0.0;
      WOa.ExpErrorIyy1ComponentContextString = "";
      WOa.ExpErrorIyy1ComponentReturnCode = 0;
      WOa.ExpErrorIyy1ComponentReasonCode = 0;
      WOa.ExpErrorIyy1ComponentChecksum = "               ";
      Type_es = ABBase.EvUnusable;
      Type_lk = ABBase.EvwUnlocked;
      WEa.TypeTinstanceId = "00000000000000000000";
      WEa.TypeTreferenceId = "00000000000000000000";
    }
    public void f_29360182(  )
    {
      sl_29360182 = ErrorData.LastStatusSucceeds;
      Type_001cd = ABBase.PvSelect;
      Type_lk = ABBase.EvwUnlocked;
      f_29360182_moveb(  );
      
      if ( sl_29360182 == ErrorData.LastStatusSucceeds )
      {
        ValChkDeadlockTimeout = false;
        ValChkDBError = false;
        Type_es = ABBase.EvUsable;
        Type_lk = ABBase.EvwLocked;
        if ( curs_open_0029360182 == true )
        {
          curs_open_0029360182 = false;
          try {
            if ( hstmt_0037916950_1_rs != null )
            {
              hstmt_0037916950_1_rs.Close(  );
              hstmt_0037916950_1_rs = null;
            }
            if ( hstmt_0037916950_1_cmd != null )
            {
              hstmt_0037916950_1_cmd.Close(  );
              hstmt_0037916950_1_cmd = null;
            }
          } catch( Exception e ) {
            if ( Globdata.GetDBMSData().GetDBMSManager().WasSuccessful(e) == false )
            {
              DataException = e;
              f_29360182_adonet_dberror(  );
            }
          }
        }
        
        DataException = null;
        try {
          if ( hstmt_0037916950_1_cmd == null )
          {
            SQLStatement.Length = 0;
            
            SQLStatement.Append("SELECT ");
            SQLStatement.Append("VDVYYYT01.`TINSTANCE_ID`,");
            SQLStatement.Append("VDVYYYT01.`TREFERENCE_ID`,");
            SQLStatement.Append("VDVYYYT01.`TKEY_ATTR`,");
            SQLStatement.Append("VDVYYYT01.`TSEARCH_ATTR`,");
            SQLStatement.Append("VDVYYYT01.`TOTHER_ATTR`,");
            SQLStatement.Append("VDVYYYT01.`TUPDATE_USERID`,");
            SQLStatement.Append("VDVYYYT01.`TOTHER_DATE`,");
            SQLStatement.Append("VDVYYYT01.`TOTHER_TIME`,");
            SQLStatement.Append("VDVYYYT01.`TOTHER_AMOUNT`");
            SQLStatement.Append(" FROM ");
            SQLStatement.Append("`VDVYYYT` VDVYYYT01");
            SQLStatement.Append(" WHERE ");
            SQLStatement.Append("(");
            SQLStatement.Append("VDVYYYT01.`TKEY_ATTR` = ?");
            SQLStatement.Append(")");
            SQLStatement.Append(" FOR UPDATE OF `TINSTANCE_ID` ");
            hstmt_0037916950_1_cmd = Globdata.GetDBMSData().GetDBMSManager().GetCommand(Globdata, IefRuntimeParm2, "IEFDB", 
              SQLStatement.ToString());
            hstmt_0037916950_1_cmd.InsertParameter();
          }
          hstmt_0037916950_1_cmd.BindParameter(0, TkeyAttrText_001TP);
          hstmt_0037916950_1_rs = hstmt_0037916950_1_cmd.ExecuteQuery(  );
        } catch( Exception e ) {
          DataException = e;
        }
        if ( (Globdata.GetDBMSData().GetDBMSManager().WasSuccessful(DataException)) )
        {
          curs_open_0029360182 = true;
          DataException = null;
          try {
            if ( hstmt_0037916950_1_rs.MoveNext(  ) == false )
            {
              throw new Exception("No data found");
            }
            TinstanceId_009EF = Globdata.GetDBMSData().GetDBMSManager().GetDateTime(IefRuntimeParm2, "IEFDB", 
              hstmt_0037916950_1_rs.GetValue(0));
            TreferenceId_011EF = Globdata.GetDBMSData().GetDBMSManager().GetDateTime(IefRuntimeParm2, "IEFDB", 
              hstmt_0037916950_1_rs.GetValue(1));
            TkeyAttr_001EF = Globdata.GetDBMSData().GetDBMSManager().GetString(IefRuntimeParm2, "IEFDB", 
              hstmt_0037916950_1_rs.GetValue(2));
            TsearchAttr_003EF = Globdata.GetDBMSData().GetDBMSManager().GetString(IefRuntimeParm2, "IEFDB", 
              hstmt_0037916950_1_rs.GetValue(3));
            TotherAttr_005EF = Globdata.GetDBMSData().GetDBMSManager().GetString(IefRuntimeParm2, "IEFDB", 
              hstmt_0037916950_1_rs.GetValue(4));
            TupdateUserid_007EF = Globdata.GetDBMSData().GetDBMSManager().GetString(IefRuntimeParm2, "IEFDB", 
              hstmt_0037916950_1_rs.GetValue(5));
            TotherDate_013EF = Globdata.GetDBMSData().GetDBMSManager().GetDateTime(IefRuntimeParm2, "IEFDB", 
              hstmt_0037916950_1_rs.GetValue(6));
            TotherTime_015EF = Globdata.GetDBMSData().GetDBMSManager().GetDateTime(IefRuntimeParm2, "IEFDB", 
              hstmt_0037916950_1_rs.GetValue(7));
            TotherAmount_017EF = Globdata.GetDBMSData().GetDBMSManager().GetDecimal(IefRuntimeParm2, "IEFDB", 
              hstmt_0037916950_1_rs.GetValue(8));
          } catch( Exception e ) {
            DataException = e;
          }
          
        }
        
        if ( Globdata.GetDBMSData().GetDBMSManager().WasSuccessful(DataException) )
        {
          f_29360182_movea(  );
          if ( sl_29360182 == ErrorData.LastStatusSucceeds )
          {
            Type_es = ABBase.EvUsable;
            Type_lk = ABBase.EvwLocked;
          }
          else {
            Type_es = ABBase.EvUnusable;
            Type_lk = ABBase.EvwUnlocked;
          }
        }
        else if ( Globdata.GetDBMSData().GetDBMSManager().WasNoDataFound(DataException) )
        {
          sl_29360182 = ErrorData.LastStatusNotFound;
          Type_es = ABBase.EvUnusable;
          Type_lk = ABBase.EvwUnlocked;
        }
        else {
          f_29360182_adonet_dberror(  );
        }
      }
    }
    
    public void f_29360182_adonet_dberror(  )
    {
      Globdata.GetErrorData().SetStatus( ErrorData.LastStatusFatalError );
      Globdata.GetDBMSData().SetActionId( 20 );
      if ( DataException != null )
      {
        Globdata.GetErrorData(  ).SetErrorMessage( DataException );
      }
      Globdata.GetErrorData().SetLastStatus( ErrorData.LastStatusDbError );
      sl_29360182 = Globdata.GetErrorData().GetLastStatus();
      throw new ABException();
    }
    
    public void f_29360182_moveb(  )
    {
      TkeyAttrText_001TP = WIa.ImpTypeTkeyAttrText;
    }
    
    public void f_29360182_movea(  )
    {
      WEa.TypeTinstanceId = TimestampAttr.ValueOf(TIRS2VW.Execute( IefRuntimeParm1,
      	IefRuntimeParm2,
      	Globdata,
      	"IEFDB",
      	TinstanceId_009EF ));
      WEa.TypeTreferenceId = TimestampAttr.ValueOf(TIRS2VW.Execute( IefRuntimeParm1,
      	IefRuntimeParm2,
      	Globdata,
      	"IEFDB",
      	TreferenceId_011EF ));
      WEa.TypeTupdateUserId = FixedStringAttr.ValueOf(TupdateUserid_007EF, 8);
      WEa.TypeTkeyAttrText = FixedStringAttr.ValueOf(TkeyAttr_001EF, 4);
      WEa.TypeTsearchAttrText = FixedStringAttr.ValueOf(TsearchAttr_003EF, 20);
      WEa.TypeTotherAttrText = FixedStringAttr.ValueOf(TotherAttr_005EF, 2);
      WEa.TypeTotherAttrDate = DateAttr.ValueOf(TIRD2VW.Execute( IefRuntimeParm1,
      	IefRuntimeParm2,
      	Globdata,
      	"IEFDB",
      	TotherDate_013EF ));
      WEa.TypeTotherAttrTime = TimeAttr.ValueOf(TIRT2VW.Execute( IefRuntimeParm1,
      	IefRuntimeParm2,
      	Globdata,
      	"IEFDB",
      	TotherTime_015EF ));
      WEa.TypeTotherAttrAmount = DecimalAttr.ValueOf(TIRBDRND.RoundToDecimal(TotherAmount_017EF, 2));
    }
    public void f_27262987_moveb(  )
    {
      if ( (Type_es == ABBase.EvUnusable) || (Type_lk == ABBase.EvwUnlocked) )
      {
        up_27262987 = ABBase.EvUnusable;
        return;
      }
      TreferenceId_012EN = TIRVW2S.Execute( IefRuntimeParm1,
      	IefRuntimeParm2,
      	Globdata,
      	"IEFDB",
      	WEa.TypeTreferenceId );
      TupdateUserid_008EN = WEa.TypeTupdateUserId;
      TsearchAttr_004EN = WEa.TypeTsearchAttrText;
      TotherAttr_006EN = WEa.TypeTotherAttrText;
      TotherDate_014EN = TIRVW2D.Execute( IefRuntimeParm1,
      	IefRuntimeParm2,
      	Globdata,
      	"IEFDB",
      	WEa.TypeTotherAttrDate );
      TotherTime_016EN = TIRVW2T.Execute( IefRuntimeParm1,
      	IefRuntimeParm2,
      	Globdata,
      	"IEFDB",
      	WEa.TypeTotherAttrTime );
      TotherAmount_018EN = TIRBDRND.RoundToDecimal(WEa.TypeTotherAttrAmount,2);
    }
    public void f_27262987(  )
    {
      up_27262987 = ErrorData.LastStatusSucceeds;
      Type_001cd = ABBase.PvUpdate;
      f_27262987_moveb(  );
      
      if ( up_27262987 == ErrorData.LastStatusSucceeds )
      {
        DataException = null;
        try {
          if ( hstmt_0027262987_1_cmd == null )
          {
            SQLStatement.Length = 0;
            
            SQLStatement.Append("UPDATE ");
            SQLStatement.Append("`VDVYYYT`");
            SQLStatement.Append(" SET ");
            SQLStatement.Append("`TREFERENCE_ID` = ?,");
            SQLStatement.Append("`TUPDATE_USERID` = ?,");
            SQLStatement.Append("`TSEARCH_ATTR` = ?,");
            SQLStatement.Append("`TOTHER_ATTR` = ?,");
            SQLStatement.Append("`TOTHER_DATE` = ?,");
            SQLStatement.Append("`TOTHER_TIME` = ?,");
            SQLStatement.Append("`TOTHER_AMOUNT` = ?");
            SQLStatement.Append(" WHERE ");
            SQLStatement.Append("`TKEY_ATTR` = ?");
            hstmt_0027262987_1_cmd = Globdata.GetDBMSData().GetDBMSManager().GetCommand(Globdata, IefRuntimeParm2, "IEFDB", 
              SQLStatement.ToString());
            hstmt_0027262987_1_cmd.InsertParameter();
            hstmt_0027262987_1_cmd.InsertParameter();
            hstmt_0027262987_1_cmd.InsertParameter();
            hstmt_0027262987_1_cmd.InsertParameter();
            hstmt_0027262987_1_cmd.InsertParameter();
            hstmt_0027262987_1_cmd.InsertParameter();
            hstmt_0027262987_1_cmd.InsertParameter();
            hstmt_0027262987_1_cmd.InsertParameter();
          }
          hstmt_0027262987_1_cmd.BindParameter(0, TreferenceId_012EN);
          hstmt_0027262987_1_cmd.BindParameter(1, TupdateUserid_008EN);
          hstmt_0027262987_1_cmd.BindParameter(2, TsearchAttr_004EN);
          hstmt_0027262987_1_cmd.BindParameter(3, TotherAttr_006EN);
          hstmt_0027262987_1_cmd.BindParameter(4, TotherDate_014EN);
          hstmt_0027262987_1_cmd.BindParameter(5, TotherTime_016EN);
          hstmt_0027262987_1_cmd.BindParameter(6, TotherAmount_018EN);
          hstmt_0027262987_1_cmd.BindParameter(7, TkeyAttr_001EF);
          hstmt_0027262987_1_cnt = hstmt_0027262987_1_cmd.ExecuteNonQuery(  );
        } catch( Exception e ) {
          DataException = e;
        }
        if ( (Globdata.GetDBMSData().GetDBMSManager().WasSuccessful(DataException) && hstmt_0027262987_1_cnt == 1) )
        {
          TreferenceId_011EF = TreferenceId_012EN;
          TupdateUserid_007EF = TupdateUserid_008EN;
          TsearchAttr_003EF = TsearchAttr_004EN;
          TotherAttr_005EF = TotherAttr_006EN;
          TotherDate_013EF = TotherDate_014EN;
          TotherTime_015EF = TotherTime_016EN;
          TotherAmount_017EF = TotherAmount_018EN;
          Type_es = ABBase.EvUsable;
          Type_lk = ABBase.EvwLocked;
          try {
            if ( hstmt_0027262987_1_rs != null )
            {
              hstmt_0027262987_1_rs.Close(  );
              hstmt_0027262987_1_rs = null;
            }
            if ( hstmt_0027262987_1_cmd != null )
            {
              hstmt_0027262987_1_cmd.Close(  );
              hstmt_0027262987_1_cmd = null;
            }
          } catch( Exception e ) {
            if ( Globdata.GetDBMSData().GetDBMSManager().WasSuccessful(e) == false )
            {
              DataException = e;
              f_27262987_adonet_dberror(  );
            }
          }
        }
        else if ( Globdata.GetDBMSData().GetDBMSManager().WasDuplicateFound(IefRuntimeParm2, "IEFDB", DataException) )
        {
          up_27262987 = ErrorData.LastStatusDuplicateFound;
          Type_es = ABBase.EvUnusable;
          try {
            if ( hstmt_0027262987_1_rs != null )
            {
              hstmt_0027262987_1_rs.Close(  );
              hstmt_0027262987_1_rs = null;
            }
            if ( hstmt_0027262987_1_cmd != null )
            {
              hstmt_0027262987_1_cmd.Close(  );
              hstmt_0027262987_1_cmd = null;
            }
          } catch( Exception e ) {
            if ( Globdata.GetDBMSData().GetDBMSManager().WasSuccessful(e) == false )
            {
              DataException = e;
              f_27262987_adonet_dberror(  );
            }
          }
        }
        else {
          f_27262987_adonet_dberror(  );
        }
      }
      else if ( up_27262987 != ErrorData.LastStatusInvalidDatabPerm )
      {
        Globdata.GetErrorData().SetStatus( ErrorData.LastStatusFatalError );
        Globdata.GetDBMSData().SetActionId( 26 );
        Globdata.GetErrorData().SetLastStatus( up_27262987 );
        throw new ABException();
      }
      return;
    }
    
    public void f_27262987_adonet_dberror(  )
    {
      Globdata.GetErrorData().SetStatus( ErrorData.LastStatusFatalError );
      Globdata.GetDBMSData().SetActionId( 26 );
      if ( DataException != null )
      {
        Globdata.GetErrorData(  ).SetErrorMessage( DataException );
      }
      Globdata.GetErrorData().SetLastStatus( ErrorData.LastStatusDbError );
      up_27262987 = Globdata.GetErrorData().GetLastStatus();
      throw new ABException();
    }
    
    public void f_22020275_term(  )
    {
      
      // * * * * * * * * * *
      // DASG Term Function 
      // * * * * * * * * * *
      
      try {
        if ( curs_open_0029360182 == true )
        {
          curs_open_0029360182 = false;
          try {
            if ( hstmt_0037916950_1_rs != null )
            {
              hstmt_0037916950_1_rs.Close(  );
              hstmt_0037916950_1_rs = null;
            }
            if ( hstmt_0037916950_1_cmd != null )
            {
              hstmt_0037916950_1_cmd.Close(  );
              hstmt_0037916950_1_cmd = null;
            }
          } catch( Exception e ) {
            if ( Globdata.GetDBMSData().GetDBMSManager().WasSuccessful(e) == false )
            {
              DataException = e;
              f_29360182_adonet_dberror(  );
            }
          }
        }
      } catch( ABException e ) {
        // No action can be taken here.
      }
    }
  }// end class
  
}

