namespace GEN.ORT.YYY
{
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  //
  //                    Source Code Generated by
  //                           CA Gen 8.6
  //
  //    Copyright (c) 2024 CA Technologies. All rights reserved.
  //
  //    Name: DYYY0351_TYPE_LIST               Date: 2024/01/09
  //    Target OS:   CLR                       Time: 13:40:35
  //    Target DBMS: ODBC/ADO.NET              User: AliAl
  //    Access Method: <NONE>         
  //
  //    Generation options:
  //    Debug trace option not selected
  //    Data modeling constraint enforcement not selected
  //    Optimized import view initialization not selected
  //    Enforce default values with DBMS not selected
  //    Init unspecified optional fields to NULL not selected
  //
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // using Statements
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  using System;
  using com.ca.gen.vwrt;
  using com.ca.gen.vwrt.types;
  using com.ca.gen.vwrt.vdf;
  using com.ca.gen.csu.exception;
  
  using com.ca.gen.abrt;
  using com.ca.gen.abrt.functions;
  using com.ca.gen.abrt.cascade;
  using com.ca.gen.abrt.manager;
  using com.ca.gen.abrt.trace;
  using com.ca.gen.exits.common;
  using com.ca.gen.odc;
  using System.Data;
  using System.Collections;
  
  public class DYYY0351 : ABBase
  {
    // * * * * * * * * * * * * * * * * * * *
    // ENTITY ACTION STATEMENT STATUS FLAGS 
    // ENTITY VIEW STATUS FLAGS AND         
    // LAST COMMAND FOR EACH ENTITY VIEW    
    // * * * * * * * * * * * * * * * * * * *
    string sl_29360142 = ErrorData.LastStatusNone;
    string sl_29360130 = ErrorData.LastStatusNone;
    string sl_29360150 = ErrorData.LastStatusNone;
    string sl_29360134 = ErrorData.LastStatusNone;
    string Type_es;
    string Type_001cd;
    string Type_lk;
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // IMPORT VIEW CLASS VARIABLE
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    DYYY0351_IA WIa;
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // EXPORT VIEW CLASS VARIABLE
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    DYYY0351_OA WOa;
    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // START OF ENTITY ACTION VIEW
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    /// <summary>
    /// Internal data view storage for: DYYY0351_EA
    /// </summary>
    [Serializable]
    public class DYYY0351_EA : ViewBase, IEntityActionView
    {
      // Entity View: 
      //        Type: TYPE
      /// <summary>
      /// Internal storage for attribute missing flag for: TypeTinstanceId
      /// </summary>
      private char _TypeTinstanceId_AS;
      /// <summary>
      /// Attribute missing flag for: TypeTinstanceId
      /// </summary>
      public char TypeTinstanceId_AS {
        get {
          return(_TypeTinstanceId_AS);
        }
        set {
          _TypeTinstanceId_AS = value;
        }
      }
      /// <summary>
      /// Internal storage, attribute for: TypeTinstanceId
      /// Domain: Timestamp
      /// Length: 20
      /// </summary>
      private string _TypeTinstanceId;
      /// <summary>
      /// Attribute for: TypeTinstanceId
      /// </summary>
      public string TypeTinstanceId {
        get {
          return(_TypeTinstanceId);
        }
        set {
          _TypeTinstanceId = value;
        }
      }
      /// <summary>
      /// Internal storage for attribute missing flag for: TypeTreferenceId
      /// </summary>
      private char _TypeTreferenceId_AS;
      /// <summary>
      /// Attribute missing flag for: TypeTreferenceId
      /// </summary>
      public char TypeTreferenceId_AS {
        get {
          return(_TypeTreferenceId_AS);
        }
        set {
          _TypeTreferenceId_AS = value;
        }
      }
      /// <summary>
      /// Internal storage, attribute for: TypeTreferenceId
      /// Domain: Timestamp
      /// Length: 20
      /// </summary>
      private string _TypeTreferenceId;
      /// <summary>
      /// Attribute for: TypeTreferenceId
      /// </summary>
      public string TypeTreferenceId {
        get {
          return(_TypeTreferenceId);
        }
        set {
          _TypeTreferenceId = value;
        }
      }
      /// <summary>
      /// Internal storage for attribute missing flag for: TypeTcreateUserId
      /// </summary>
      private char _TypeTcreateUserId_AS;
      /// <summary>
      /// Attribute missing flag for: TypeTcreateUserId
      /// </summary>
      public char TypeTcreateUserId_AS {
        get {
          return(_TypeTcreateUserId_AS);
        }
        set {
          _TypeTcreateUserId_AS = value;
        }
      }
      /// <summary>
      /// Internal storage, attribute for: TypeTcreateUserId
      /// Domain: Text
      /// Length: 8
      /// Varying Length: N
      /// </summary>
      private string _TypeTcreateUserId;
      /// <summary>
      /// Attribute for: TypeTcreateUserId
      /// </summary>
      public string TypeTcreateUserId {
        get {
          return(_TypeTcreateUserId);
        }
        set {
          _TypeTcreateUserId = value;
        }
      }
      /// <summary>
      /// Internal storage for attribute missing flag for: TypeTupdateUserId
      /// </summary>
      private char _TypeTupdateUserId_AS;
      /// <summary>
      /// Attribute missing flag for: TypeTupdateUserId
      /// </summary>
      public char TypeTupdateUserId_AS {
        get {
          return(_TypeTupdateUserId_AS);
        }
        set {
          _TypeTupdateUserId_AS = value;
        }
      }
      /// <summary>
      /// Internal storage, attribute for: TypeTupdateUserId
      /// Domain: Text
      /// Length: 8
      /// Varying Length: N
      /// </summary>
      private string _TypeTupdateUserId;
      /// <summary>
      /// Attribute for: TypeTupdateUserId
      /// </summary>
      public string TypeTupdateUserId {
        get {
          return(_TypeTupdateUserId);
        }
        set {
          _TypeTupdateUserId = value;
        }
      }
      /// <summary>
      /// Internal storage for attribute missing flag for: TypeTkeyAttrText
      /// </summary>
      private char _TypeTkeyAttrText_AS;
      /// <summary>
      /// Attribute missing flag for: TypeTkeyAttrText
      /// </summary>
      public char TypeTkeyAttrText_AS {
        get {
          return(_TypeTkeyAttrText_AS);
        }
        set {
          _TypeTkeyAttrText_AS = value;
        }
      }
      /// <summary>
      /// Internal storage, attribute for: TypeTkeyAttrText
      /// Domain: Text
      /// Length: 4
      /// Varying Length: N
      /// </summary>
      private string _TypeTkeyAttrText;
      /// <summary>
      /// Attribute for: TypeTkeyAttrText
      /// </summary>
      public string TypeTkeyAttrText {
        get {
          return(_TypeTkeyAttrText);
        }
        set {
          _TypeTkeyAttrText = value;
        }
      }
      /// <summary>
      /// Internal storage for attribute missing flag for: TypeTsearchAttrText
      /// </summary>
      private char _TypeTsearchAttrText_AS;
      /// <summary>
      /// Attribute missing flag for: TypeTsearchAttrText
      /// </summary>
      public char TypeTsearchAttrText_AS {
        get {
          return(_TypeTsearchAttrText_AS);
        }
        set {
          _TypeTsearchAttrText_AS = value;
        }
      }
      /// <summary>
      /// Internal storage, attribute for: TypeTsearchAttrText
      /// Domain: Text
      /// Length: 20
      /// Varying Length: N
      /// </summary>
      private string _TypeTsearchAttrText;
      /// <summary>
      /// Attribute for: TypeTsearchAttrText
      /// </summary>
      public string TypeTsearchAttrText {
        get {
          return(_TypeTsearchAttrText);
        }
        set {
          _TypeTsearchAttrText = value;
        }
      }
      /// <summary>
      /// Internal storage for attribute missing flag for: TypeTotherAttrText
      /// </summary>
      private char _TypeTotherAttrText_AS;
      /// <summary>
      /// Attribute missing flag for: TypeTotherAttrText
      /// </summary>
      public char TypeTotherAttrText_AS {
        get {
          return(_TypeTotherAttrText_AS);
        }
        set {
          _TypeTotherAttrText_AS = value;
        }
      }
      /// <summary>
      /// Internal storage, attribute for: TypeTotherAttrText
      /// Domain: Text
      /// Length: 2
      /// Varying Length: N
      /// </summary>
      private string _TypeTotherAttrText;
      /// <summary>
      /// Attribute for: TypeTotherAttrText
      /// </summary>
      public string TypeTotherAttrText {
        get {
          return(_TypeTotherAttrText);
        }
        set {
          _TypeTotherAttrText = value;
        }
      }
      /// <summary>
      /// Internal storage for attribute missing flag for: TypeTotherAttrDate
      /// </summary>
      private char _TypeTotherAttrDate_AS;
      /// <summary>
      /// Attribute missing flag for: TypeTotherAttrDate
      /// </summary>
      public char TypeTotherAttrDate_AS {
        get {
          return(_TypeTotherAttrDate_AS);
        }
        set {
          _TypeTotherAttrDate_AS = value;
        }
      }
      /// <summary>
      /// Internal storage, attribute for: TypeTotherAttrDate
      /// Domain: Date
      /// Length: 8
      /// </summary>
      private int _TypeTotherAttrDate;
      /// <summary>
      /// Attribute for: TypeTotherAttrDate
      /// </summary>
      public int TypeTotherAttrDate {
        get {
          return(_TypeTotherAttrDate);
        }
        set {
          _TypeTotherAttrDate = value;
        }
      }
      /// <summary>
      /// Internal storage for attribute missing flag for: TypeTotherAttrTime
      /// </summary>
      private char _TypeTotherAttrTime_AS;
      /// <summary>
      /// Attribute missing flag for: TypeTotherAttrTime
      /// </summary>
      public char TypeTotherAttrTime_AS {
        get {
          return(_TypeTotherAttrTime_AS);
        }
        set {
          _TypeTotherAttrTime_AS = value;
        }
      }
      /// <summary>
      /// Internal storage, attribute for: TypeTotherAttrTime
      /// Domain: Time
      /// Length: 6
      /// </summary>
      private int _TypeTotherAttrTime;
      /// <summary>
      /// Attribute for: TypeTotherAttrTime
      /// </summary>
      public int TypeTotherAttrTime {
        get {
          return(_TypeTotherAttrTime);
        }
        set {
          _TypeTotherAttrTime = value;
        }
      }
      /// <summary>
      /// Internal storage for attribute missing flag for: TypeTotherAttrAmount
      /// </summary>
      private char _TypeTotherAttrAmount_AS;
      /// <summary>
      /// Attribute missing flag for: TypeTotherAttrAmount
      /// </summary>
      public char TypeTotherAttrAmount_AS {
        get {
          return(_TypeTotherAttrAmount_AS);
        }
        set {
          _TypeTotherAttrAmount_AS = value;
        }
      }
      /// <summary>
      /// Internal storage, attribute for: TypeTotherAttrAmount
      /// Domain: Number
      /// Length: 17
      /// Decimal Places: 2
      /// Decimal Precision: Y
      /// </summary>
      private decimal _TypeTotherAttrAmount;
      /// <summary>
      /// Attribute for: TypeTotherAttrAmount
      /// </summary>
      public decimal TypeTotherAttrAmount {
        get {
          return(_TypeTotherAttrAmount);
        }
        set {
          _TypeTotherAttrAmount = value;
        }
      }
      /// <summary>
      /// Default Constructor
      /// </summary>
      
      public DYYY0351_EA(  )
      {
        Reset(  );
      }
      /// <summary>
      /// Copy Constructor
      /// </summary>
      
      public DYYY0351_EA( DYYY0351_EA orig )
      {
        TypeTinstanceId_AS = orig.TypeTinstanceId_AS;
        TypeTinstanceId = orig.TypeTinstanceId;
        TypeTreferenceId_AS = orig.TypeTreferenceId_AS;
        TypeTreferenceId = orig.TypeTreferenceId;
        TypeTcreateUserId_AS = orig.TypeTcreateUserId_AS;
        TypeTcreateUserId = orig.TypeTcreateUserId;
        TypeTupdateUserId_AS = orig.TypeTupdateUserId_AS;
        TypeTupdateUserId = orig.TypeTupdateUserId;
        TypeTkeyAttrText_AS = orig.TypeTkeyAttrText_AS;
        TypeTkeyAttrText = orig.TypeTkeyAttrText;
        TypeTsearchAttrText_AS = orig.TypeTsearchAttrText_AS;
        TypeTsearchAttrText = orig.TypeTsearchAttrText;
        TypeTotherAttrText_AS = orig.TypeTotherAttrText_AS;
        TypeTotherAttrText = orig.TypeTotherAttrText;
        TypeTotherAttrDate_AS = orig.TypeTotherAttrDate_AS;
        TypeTotherAttrDate = orig.TypeTotherAttrDate;
        TypeTotherAttrTime_AS = orig.TypeTotherAttrTime_AS;
        TypeTotherAttrTime = orig.TypeTotherAttrTime;
        TypeTotherAttrAmount_AS = orig.TypeTotherAttrAmount_AS;
        TypeTotherAttrAmount = orig.TypeTotherAttrAmount;
      }
      /// <summary>
      /// clone constructor
      /// </summary>
      
      public override Object Clone(  )
      {
        return(new DYYY0351_EA(this));
      }
      /// <summary>
      /// Resets all properties to the defaults.
      /// </summary>
      
      public void Reset(  )
      {
        TypeTinstanceId_AS = ' ';
        TypeTinstanceId = "00000000000000000000";
        TypeTreferenceId_AS = ' ';
        TypeTreferenceId = "00000000000000000000";
        TypeTcreateUserId_AS = ' ';
        TypeTcreateUserId = "        ";
        TypeTupdateUserId_AS = ' ';
        TypeTupdateUserId = "        ";
        TypeTkeyAttrText_AS = ' ';
        TypeTkeyAttrText = "    ";
        TypeTsearchAttrText_AS = ' ';
        TypeTsearchAttrText = "                    ";
        TypeTotherAttrText_AS = ' ';
        TypeTotherAttrText = "  ";
        TypeTotherAttrDate_AS = ' ';
        TypeTotherAttrDate = 00000000;
        TypeTotherAttrTime_AS = ' ';
        TypeTotherAttrTime = 00000000;
        TypeTotherAttrAmount_AS = ' ';
        TypeTotherAttrAmount = DecimalAttr.GetDefaultValue();
      }
    }
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // ENTITY ACTION VIEW CLASS VARIABLE
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    DYYY0351_EA WEa = new DYYY0351_EA();
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // LOCAL VIEW CLASS VARIABLE
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    DYYY0351_LA WLa;
    
    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // HOST VARIABLES FOR TABLE: VDVYYYT
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    string TkeyAttr_001EF;
    string TkeyAttr_002EN;
    string TsearchAttr_003EF;
    string TsearchAttr_004EN;
    string TotherAttr_005EF;
    string TotherAttr_006EN;
    string TcreateUserid_007EF;
    string TcreateUserid_008EN;
    string TupdateUserid_009EF;
    string TupdateUserid_010EN;
    DateTime TinstanceId_011EF;
    DateTime TinstanceId_012EN;
    DateTime TreferenceId_013EF;
    DateTime TreferenceId_014EN;
    DateTime TotherDate_015EF;
    DateTime TotherDate_016EN;
    DateTime TotherTime_017EF;
    DateTime TotherTime_018EN;
    decimal TotherAmount_019EF;
    decimal TotherAmount_020EN;
    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // TEMPORARY HOST VARIABLES 
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    string TkeyAttrText_002TP;
    string TsearchAttrText_001TP;
    string TkeyAttrText_003TP;
    string TkeyAttrText_004TP;
    string TsearchAttrText_005TP;
    string TotherAttrText_006TP;
    
    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // REPEATING GROUP VIEW STATUS FIELDS 
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    bool ExpGroupList_FL_001;
    int ExpGroupList_PS_001;
    bool ExpGroupList_RF_001;
    public const int ExpGroupList_MM_001 = 48;
    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // MISC DECLARATIONS AND PROTOTYPES 
    //    FOLLOW AS NEEDED:             
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    bool func_0022020279_esc_flag;
    bool func_0020972278_esc_flag;
    bool func_0020972285_esc_flag;
    bool func_0020972684_esc_flag;
    bool read_each_0068157707_esc_flag;
    IAbstractCommand hstmt_0037988323_1_cmd;
    IAbstractResultSet hstmt_0037988323_1_rs;
    bool func_0020972688_esc_flag;
    bool read_each_0068157453_esc_flag;
    IAbstractCommand hstmt_0037920443_1_cmd;
    IAbstractResultSet hstmt_0037920443_1_rs;
    bool func_0020971901_esc_flag;
    bool read_each_0068157861_esc_flag;
    IAbstractCommand hstmt_0037990974_1_cmd;
    IAbstractResultSet hstmt_0037990974_1_rs;
    bool func_0020971910_esc_flag;
    bool read_each_0068158093_esc_flag;
    IAbstractCommand hstmt_0037921956_1_cmd;
    IAbstractResultSet hstmt_0037921956_1_rs;
    bool func_0020971920_esc_flag;
    bool func_0020971640_esc_flag;
    bool func_0020972149_esc_flag;
    bool func_0020972594_esc_flag;
    bool func_0020972058_esc_flag;
    bool func_0020972146_esc_flag;
    bool func_0020971554_esc_flag;
    bool func_0020971729_esc_flag;
    bool func_0020972153_esc_flag;
    bool func_0020972229_esc_flag;
    bool func_0020971693_esc_flag;
    bool func_0020972747_esc_flag;
    //       +->   DYYY0351_TYPE_LIST                01/09/2024  13:40
    //       !       IMPORTS:
    //       !         Work View imp_error iyy1_component (Transient,
    //       !                     Mandatory, Import only)
    //       !           severity_code
    //       !           rollback_indicator
    //       !           origin_servid
    //       !           context_string
    //       !           return_code
    //       !           reason_code
    //       !           checksum
    //       !         Work View imp_filter iyy1_list (Transient, Mandatory,
    //       !                     Import only)
    //       !           sort_option
    //       !           scroll_type
    //       !           list_direction
    //       !           scroll_amount
    //       !           order_by_field_num
    //       !         Entity View imp_from type (Transient, Mandatory, Import
    //       !                     only)
    //       !           tinstance_id
    //       !           tkey_attr_text
    //       !           tsearch_attr_text
    //       !         Entity View imp_filter_start type (Transient,
    //       !                     Mandatory, Import only)
    //       !           tkey_attr_text
    //       !         Entity View imp_filter_stop type (Transient, Mandatory,
    //       !                     Import only)
    //       !           tkey_attr_text
    //       !         Entity View imp_filter type (Transient, Mandatory,
    //       !                     Import only)
    //       !           tsearch_attr_text
    //       !           tother_attr_text
    //       !       EXPORTS:
    //       !         Group View (48) exp_group_list
    //       !           Entity View exp_g_list type (Transient, Export only)
    //       !             tinstance_id
    //       !             treference_id
    //       !             tcreate_user_id
    //       !             tupdate_user_id
    //       !             tkey_attr_text
    //       !             tsearch_attr_text
    //       !             tother_attr_text
    //       !             tother_attr_date
    //       !             tother_attr_time
    //       !             tother_attr_amount
    //       !         Work View exp_error iyy1_component (Transient, Export
    //       !                     only)
    //       !           severity_code
    //       !           rollback_indicator
    //       !           origin_servid
    //       !           context_string
    //       !           return_code
    //       !           reason_code
    //       !           checksum
    //       !       ENTITY ACTIONS:
    //       !         Entity View type
    //       !           tinstance_id
    //       !           treference_id
    //       !           tcreate_user_id
    //       !           tupdate_user_id
    //       !           tkey_attr_text
    //       !           tsearch_attr_text
    //       !           tother_attr_text
    //       !           tother_attr_date
    //       !           tother_attr_time
    //       !           tother_attr_amount
    //       !       LOCALS:
    //       !         Work View loc_filter iyy1_list
    //       !           scroll_type
    //       !         Work View loc dont_change_return_codes
    //       !           1_ok
    //       !         Work View loc dont_change_reason_codes
    //       !           1_default
    //       !           11_list_full
    //       !           12_list_empty
    //       !
    //       !     PROCEDURE STATEMENTS
    //       !
    //     1 !  NOTE: 
    //     1 !  Please review explanation for purpose.
    //     1 !  
    //     2 !  NOTE: 
    //     2 !  RELEASE HISTORY
    //     2 !  01_00 23-02-1998 New release
    //     2 !  
    //     3 !  MOVE imp_error iyy1_component TO exp_error iyy1_component
    //     4 !   
    //     5 !  NOTE: 
    //     5 !  ****************************************************************
    //     5 !  Values of the ReturnCode/ReasonCode used.
    //     5 !  
    //     6 !  NOTE: 
    //     6 !  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    //     6 !  Please set the return ve reason code values below.
    //     6 !  
    //     7 !  SET loc dont_change_return_codes 1_ok TO 1 
    //     8 !   
    //     9 !  SET loc dont_change_reason_codes 1_default TO 1 
    //    10 !  SET loc dont_change_reason_codes 11_list_full TO 11 
    //    11 !  SET loc dont_change_reason_codes 12_list_empty TO 12 
    //    12 !   
    //    13 !  NOTE: 
    //    13 !  ****************************************************************
    //    13 !  
    //    14 !  SET SUBSCRIPT OF exp_group_list TO 0 
    //    15 !  SET loc_filter iyy1_list scroll_type TO imp_filter iyy1_list
    //    15 !              scroll_type 
    //    16 !   
    //    17 !   
    //    18 !  +->CASE OF imp_filter iyy1_list sort_option
    //    18 !  +> CASE "ASC"
    //    19 !  !  NOTE: 
    //    19 ...!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    //    19 ...!!!!!!!!!!!!!!!!!!!!!
    //    19 ...Set "General->Select Clause Isolation Level" property to
    //    19 ..."Uncomitted / Browse" 
    //    19 ...and "DB2 MVS (XDB)->Optimize for N rows" property to "Use the
    //    19 ...value: 1".
    //    19 ...
    //    20 !  !  +->CASE OF imp_filter iyy1_list order_by_field_num
    //    20 !  !  +> CASE 2
    //    21 !  !  !  +=>READ EACH (Isolation UR) type
    //    21 !  !  !  !        SORTED BY ASCENDING type tsearch_attr_text
    //    21 !  !  !  !        
    //    21 !  !  !  !              AND SORTED BY ASCENDING type
    //    21 !  !  !  !              tkey_attr_text
    //    21 !  !  !  !        WHERE (DESIRED type tsearch_attr_text >
    //    21 !  !  !  !              imp_from type tsearch_attr_text  
    //    21 !  !  !  !              OR  (DESIRED type tsearch_attr_text =
    //    21 !  !  !  !              imp_from type tsearch_attr_text  
    //    21 !  !  !  !              AND  (DESIRED type tkey_attr_text >=
    //    21 !  !  !  !              imp_from type tkey_attr_text)))  
    //    21 !  !  !  !              AND  DESIRED type tkey_attr_text >=
    //    21 !  !  !  !              imp_filter_start type tkey_attr_text  
    //    21 !  !  !  !              AND  DESIRED type tkey_attr_text <=
    //    21 !  !  !  !              imp_filter_stop type tkey_attr_text  
    //    21 !  !  !  !              AND  DESIRED type tsearch_attr_text IS
    //    21 !  !  !  !              LIKE imp_filter type tsearch_attr_text 
    //    21 !  !  !  !              AND  DESIRED type tother_attr_text IS
    //    21 !  !  !  !              LIKE imp_filter type tother_attr_text
    //    22 !  !  !  !  +->IF SUBSCRIPT OF exp_group_list < imp_filter
    //    22 !  !  !  !  !        iyy1_list scroll_amount
    //    23 !  !  !  !  !  +->IF loc_filter iyy1_list scroll_type = "S"
    //    24 !  !  !  !  !  !  SET loc_filter iyy1_list scroll_type TO SPACES 
    //    23 !  !  !  !  !  +> ELSE
    //    25 !  !  !  !  !  !  SET SUBSCRIPT OF exp_group_list TO SUBSCRIPT OF
    //    25 !  !  !  !  !  !              exp_group_list + 1 
    //    26 !  !  !  !  !  !  MOVE  type TO exp_g_list type
    //    23 !  !  !  !  !  +--
    //    22 !  !  !  !  +> ELSE
    //    27 !  !  !  !  !  SET exp_error iyy1_component reason_code TO loc
    //    27 !  !  !  !  !              dont_change_reason_codes 11_list_full 
    //    28 !  !  ! <------ESCAPE
    //    22 !  !  !  !  +--
    //    21 !  !  !  +--
    //    20 !  !  +> OTHERWISE
    //    29 !  !  !  NOTE: 
    //    29 ...!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    //    29 ...!!!!!!!!!!!!!!!!!!!!!
    //    29 ...Set "General->Select Clause Isolation Level" property to
    //    29 ..."Uncomitted / Browse" 
    //    29 ...and "DB2 MVS (XDB)->Optimize for N rows" property to "Use the
    //    29 ...value: 1".
    //    29 ...
    //    30 !  !  !  +=>READ EACH (Optimize 1, Isolation UR) type
    //    30 !  !  !  !        SORTED BY ASCENDING type tkey_attr_text
    //    30 !  !  !  !        WHERE DESIRED type tkey_attr_text >= imp_from
    //    30 !  !  !  !              type tkey_attr_text  
    //    30 !  !  !  !              AND  DESIRED type tkey_attr_text >=
    //    30 !  !  !  !              imp_filter_start type tkey_attr_text  
    //    30 !  !  !  !              AND  DESIRED type tkey_attr_text <=
    //    30 !  !  !  !              imp_filter_stop type tkey_attr_text  
    //    30 !  !  !  !              AND  DESIRED type tsearch_attr_text IS
    //    30 !  !  !  !              LIKE imp_filter type tsearch_attr_text 
    //    30 !  !  !  !              AND  DESIRED type tother_attr_text IS
    //    30 !  !  !  !              LIKE imp_filter type tother_attr_text
    //    31 !  !  !  !  +->IF SUBSCRIPT OF exp_group_list < imp_filter
    //    31 !  !  !  !  !        iyy1_list scroll_amount
    //    32 !  !  !  !  !  +->IF loc_filter iyy1_list scroll_type = "S"
    //    33 !  !  !  !  !  !  SET loc_filter iyy1_list scroll_type TO SPACES 
    //    32 !  !  !  !  !  +> ELSE
    //    34 !  !  !  !  !  !  SET SUBSCRIPT OF exp_group_list TO SUBSCRIPT OF
    //    34 !  !  !  !  !  !              exp_group_list + 1 
    //    35 !  !  !  !  !  !  MOVE  type TO exp_g_list type
    //    32 !  !  !  !  !  +--
    //    31 !  !  !  !  +> ELSE
    //    36 !  !  !  !  !  SET exp_error iyy1_component reason_code TO loc
    //    36 !  !  !  !  !              dont_change_reason_codes 11_list_full 
    //    37 !  !  ! <------ESCAPE
    //    31 !  !  !  !  +--
    //    30 !  !  !  +--
    //    20 !  !  +--
    //    18 !  +> CASE "DES"
    //    38 !  !  +->CASE OF imp_filter iyy1_list order_by_field_num
    //    38 !  !  +> CASE 2
    //    39 !  !  !  NOTE: 
    //    39 ...!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    //    39 ...!!!!!!!!!!!!!!!!!!!!!
    //    39 ...Set "General->Select Clause Isolation Level" property to
    //    39 ..."Uncomitted / Browse" 
    //    39 ...and "DB2 MVS (XDB)->Optimize for N rows" property to "Use the
    //    39 ...value: 1". 
    //    39 ...
    //    40 !  !  !  +=>READ EACH (Isolation UR) type
    //    40 !  !  !  !        SORTED BY DESCENDING type tsearch_attr_text
    //    40 !  !  !  !        
    //    40 !  !  !  !              AND SORTED BY DESCENDING type
    //    40 !  !  !  !              tkey_attr_text
    //    40 !  !  !  !        WHERE (DESIRED type tsearch_attr_text <
    //    40 !  !  !  !              imp_from type tsearch_attr_text  
    //    40 !  !  !  !              OR  (DESIRED type tsearch_attr_text =
    //    40 !  !  !  !              imp_from type tsearch_attr_text  
    //    40 !  !  !  !              AND  (DESIRED type tkey_attr_text <=
    //    40 !  !  !  !              imp_from type tkey_attr_text)))  
    //    40 !  !  !  !              AND  DESIRED type tkey_attr_text >=
    //    40 !  !  !  !              imp_filter_start type tkey_attr_text  
    //    40 !  !  !  !              AND  DESIRED type tkey_attr_text <=
    //    40 !  !  !  !              imp_filter_stop type tkey_attr_text  
    //    40 !  !  !  !              AND  DESIRED type tsearch_attr_text IS
    //    40 !  !  !  !              LIKE imp_filter type tsearch_attr_text 
    //    40 !  !  !  !              AND  DESIRED type tother_attr_text IS
    //    40 !  !  !  !              LIKE imp_filter type tother_attr_text
    //    41 !  !  !  !  +->IF SUBSCRIPT OF exp_group_list < imp_filter
    //    41 !  !  !  !  !        iyy1_list scroll_amount
    //    42 !  !  !  !  !  +->IF loc_filter iyy1_list scroll_type = "S"
    //    43 !  !  !  !  !  !  SET loc_filter iyy1_list scroll_type TO SPACES 
    //    42 !  !  !  !  !  +> ELSE
    //    44 !  !  !  !  !  !  SET SUBSCRIPT OF exp_group_list TO SUBSCRIPT OF
    //    44 !  !  !  !  !  !              exp_group_list + 1 
    //    45 !  !  !  !  !  !  MOVE  type TO exp_g_list type
    //    42 !  !  !  !  !  +--
    //    41 !  !  !  !  +> ELSE
    //    46 !  !  !  !  !  SET exp_error iyy1_component reason_code TO loc
    //    46 !  !  !  !  !              dont_change_reason_codes 11_list_full 
    //    47 !  !  ! <------ESCAPE
    //    41 !  !  !  !  +--
    //    40 !  !  !  +--
    //    38 !  !  +> OTHERWISE
    //    48 !  !  !  NOTE: 
    //    48 ...!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    //    48 ...!!!!!!!!!!!!!!!!!!!!!
    //    48 ...Set "General->Select Clause Isolation Level" property to
    //    48 ..."Uncomitted / Browse" 
    //    48 ...and "DB2 MVS (XDB)->Optimize for N rows" property to "Use the
    //    48 ...value: 1". 
    //    48 ...
    //    49 !  !  !  +=>READ EACH (Optimize 1, Isolation UR) type
    //    49 !  !  !  !        SORTED BY DESCENDING type tkey_attr_text
    //    49 !  !  !  !        WHERE DESIRED type tkey_attr_text <= imp_from
    //    49 !  !  !  !              type tkey_attr_text  
    //    49 !  !  !  !              AND  DESIRED type tkey_attr_text >=
    //    49 !  !  !  !              imp_filter_start type tkey_attr_text  
    //    49 !  !  !  !              AND  DESIRED type tkey_attr_text <=
    //    49 !  !  !  !              imp_filter_stop type tkey_attr_text  
    //    49 !  !  !  !              AND  DESIRED type tsearch_attr_text IS
    //    49 !  !  !  !              LIKE imp_filter type tsearch_attr_text 
    //    49 !  !  !  !              AND  DESIRED type tother_attr_text IS
    //    49 !  !  !  !              LIKE imp_filter type tother_attr_text
    //    50 !  !  !  !  +->IF SUBSCRIPT OF exp_group_list < imp_filter
    //    50 !  !  !  !  !        iyy1_list scroll_amount
    //    51 !  !  !  !  !  +->IF loc_filter iyy1_list scroll_type = "S"
    //    52 !  !  !  !  !  !  SET loc_filter iyy1_list scroll_type TO SPACES 
    //    51 !  !  !  !  !  +> ELSE
    //    53 !  !  !  !  !  !  SET SUBSCRIPT OF exp_group_list TO SUBSCRIPT OF
    //    53 !  !  !  !  !  !              exp_group_list + 1 
    //    54 !  !  !  !  !  !  MOVE  type TO exp_g_list type
    //    51 !  !  !  !  !  +--
    //    50 !  !  !  !  +> ELSE
    //    55 !  !  !  !  !  SET exp_error iyy1_component reason_code TO loc
    //    55 !  !  !  !  !              dont_change_reason_codes 11_list_full 
    //    56 !  !  ! <------ESCAPE
    //    50 !  !  !  !  +--
    //    49 !  !  !  +--
    //    38 !  !  +--
    //    18 !  +> OTHERWISE
    //    18 !  +--
    //    57 !  +->IF LAST OF exp_group_list <= 0
    //    58 !  !  SET exp_error iyy1_component reason_code TO loc
    //    58 !  !              dont_change_reason_codes 12_list_empty 
    //    57 !  +--
    //       +---
    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    //  CONSTRUCTOR FOR THE CLASS       
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    public DYYY0351(  )
    {
      IefCGenRlse = "CA Gen 8.6";
      IsCopyright = "Copyright (c) 2024 CA Technologies. All rights reserved.";
      IefCGenDate = "2024/01/09";
      IefCGenTime = "13:40:35";
      IefCGenEncy = "9.2.A6";
      IefCGenUserId = "AliAl";
      IefCGenModel = "N8I_ORT_YYY_0112_TEMPLATE";
      IefCGenSubset = "ALL";
      IefCGenName = "DYYY0351_TYPE_LIST";
      NestingLevel = 0;
      ValChkDeadlockTimeout = false;
      ValChkDBError = false;
    }
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // ACTION BLOCK FUNCTION DECLARATIONS 
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    
    public void Execute( Object in_runtime_parm1, 
    	IRuntimePStepContext in_runtime_parm2, 
    	GlobData in_globdata, 
    	DYYY0351_IA import_view, 
    	DYYY0351_OA export_view )
    {
      IefRuntimeParm1 = in_runtime_parm1;
      IefRuntimeParm2 = in_runtime_parm2;
      Globdata = in_globdata;
      WIa = import_view;
      WOa = export_view;
      _Execute();
    }
    
    private void _Execute()
    {
      
      f_22020279_localAlloc( "DYYY0351_TYPE_LIST" );
      if ( Globdata.GetErrorData().GetLastStatus() == ErrorData.LastStatusIefAllocationError )
      	return;
      
      ++(NestingLevel);
      try {
        f_22020279_init(  );
        f_22020279(  );
      } catch( Exception e ) {
        if ( ((Globdata.GetErrorData().GetStatus() == ErrorData.StatusNone) && (Globdata.GetErrorData().GetErrorEncountered() == 
          ErrorData.ErrorEncounteredNoErrorFound)) && (Globdata.GetErrorData().GetViewOverflow() == 
          ErrorData.ErrorEncounteredNoErrorFound) )
        {
          Globdata.GetErrorData().SetStatus( ErrorData.LastStatusFatalError );
          Globdata.GetErrorData().SetLastStatus( ErrorData.LastStatusUnexpectedExceptionError );
          Globdata.GetErrorData().SetErrorEncountered( ErrorData.ErrorEncounteredErrorFound );
          Globdata.GetErrorData(  ).SetErrorMessage( e );
        }
      }
      --(NestingLevel);
    }
    public void f_22020279(  )
    {
      func_0022020279_esc_flag = false;
      Globdata.GetStateData().SetCurrentABId( "0022020279" );
      Globdata.GetStateData().SetCurrentABName( "DYYY0351_TYPE_LIST" );
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    Please review explanation for purpose.                          
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    RELEASE HISTORY                                                 
      //    01_00 23-02-1998 New release                                    
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      Globdata.GetStateData().SetLastStatementNumber( "0000000003" );
      WOa.ExpErrorIyy1ComponentSeverityCode = FixedStringAttr.ValueOf(WIa.ImpErrorIyy1ComponentSeverityCode, 1);
      WOa.ExpErrorIyy1ComponentRollbackIndicator = FixedStringAttr.ValueOf(WIa.ImpErrorIyy1ComponentRollbackIndicator, 1);
      WOa.ExpErrorIyy1ComponentOriginServid = DoubleAttr.ValueOf(WIa.ImpErrorIyy1ComponentOriginServid);
      WOa.ExpErrorIyy1ComponentContextString = StringAttr.ValueOf(WIa.ImpErrorIyy1ComponentContextString, 512);
      WOa.ExpErrorIyy1ComponentReturnCode = IntAttr.ValueOf(WIa.ImpErrorIyy1ComponentReturnCode);
      WOa.ExpErrorIyy1ComponentReasonCode = IntAttr.ValueOf(WIa.ImpErrorIyy1ComponentReasonCode);
      WOa.ExpErrorIyy1ComponentChecksum = FixedStringAttr.ValueOf(WIa.ImpErrorIyy1ComponentChecksum, 15);
      
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    **************************************************************  
      //    **                                                              
      //    Values of the ReturnCode/ReasonCode used.                       
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  
      //    !!                                                              
      //    Please set the return ve reason code values below.              
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      Globdata.GetStateData().SetLastStatementNumber( "0000000007" );
      WLa.LocDontChangeReturnCodesQ1Ok = IntAttr.ValueOf((int)TIRD2DEC.Execute1(1, 0, TIRD2DEC.ROUND_NONE, 5));
      
      Globdata.GetStateData().SetLastStatementNumber( "0000000009" );
      WLa.LocDontChangeReasonCodesQ1Default = IntAttr.ValueOf((int)TIRD2DEC.Execute1(1, 0, TIRD2DEC.ROUND_NONE, 5));
      Globdata.GetStateData().SetLastStatementNumber( "0000000010" );
      WLa.LocDontChangeReasonCodesQ11ListFull = IntAttr.ValueOf((int)TIRD2DEC.Execute1(11, 0, TIRD2DEC.ROUND_NONE, 5));
      Globdata.GetStateData().SetLastStatementNumber( "0000000011" );
      WLa.LocDontChangeReasonCodesQ12ListEmpty = IntAttr.ValueOf((int)TIRD2DEC.Execute1(12, 0, TIRD2DEC.ROUND_NONE, 5));
      
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    **************************************************************  
      //    **                                                              
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      Globdata.GetStateData().SetLastStatementNumber( "0000000014" );
      ExpGroupList_PS_001 = (int)TIRD2DEC.Execute1(0, 0, TIRD2DEC.ROUND_NONE, 0);
      if ( (ExpGroupList_PS_001 > WOa.ExpGroupList_MA) && (ExpGroupList_PS_001 <= 48) )
      WOa.ExpGroupList_MA = IntAttr.ValueOf(ExpGroupList_PS_001);
      Globdata.GetStateData().SetLastStatementNumber( "0000000015" );
      WLa.LocFilterIyy1ListScrollType = FixedStringAttr.ValueOf(WIa.ImpFilterIyy1ListScrollType, 1);
      
      
      Globdata.GetStateData().SetLastStatementNumber( "0000000018" );
      if ( CompareExit.CompareTo(WIa.ImpFilterIyy1ListSortOption, "ASC") == 0 )
      {
        Globdata.GetStateData().SetLastSubStatementNumber( "1" );
        {
          f_20972278(  );
        }
      }
      else if ( CompareExit.CompareTo(WIa.ImpFilterIyy1ListSortOption, "DES") == 0 )
      {
        Globdata.GetStateData().SetLastSubStatementNumber( "2" );
        {
          f_20972285(  );
        }
      }
      else {
        Globdata.GetStateData().SetLastSubStatementNumber( "3" );
        {
          // Empty statement here.
          ;
        }
      }
      Globdata.GetStateData().SetLastStatementNumber( "0000000057" );
      if ( ((double)WOa.ExpGroupList_MA <= 0) )
      {
        Globdata.GetStateData().SetLastStatementNumber( "0000000058" );
        WOa.ExpErrorIyy1ComponentReasonCode = IntAttr.ValueOf((int)TIRD2DEC.Execute1((double) 
          WLa.LocDontChangeReasonCodesQ12ListEmpty, 0, TIRD2DEC.ROUND_NONE, 5));
      }
      
      return;
    }
    
    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // SUBORDINATE FUNCTIONS
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    
    
    public void f_20972278(  )
    {
      func_0020972278_esc_flag = false;
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  
      //    !!!!!!!!!!!!!!!!!!!!!                                           
      //    Set "General->Select Clause Isolation Level" property to        
      //    "Uncomitted / Browse"                                           
      //    and "DB2 MVS (XDB)->Optimize for N rows" property to "Use the   
      //    value: 1".                                                      
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      Globdata.GetStateData().SetLastStatementNumber( "0000000020" );
      if ( (double) WIa.ImpFilterIyy1ListOrderByFieldNum == 2 )
      {
        Globdata.GetStateData().SetLastSubStatementNumber( "1" );
        {
          f_20972684(  );
        }
      }
      else {
        Globdata.GetStateData().SetLastSubStatementNumber( "2" );
        {
          f_20972688(  );
        }
      }
      return;
    }
    
    public void f_20972285(  )
    {
      func_0020972285_esc_flag = false;
      Globdata.GetStateData().SetLastStatementNumber( "0000000038" );
      if ( (double) WIa.ImpFilterIyy1ListOrderByFieldNum == 2 )
      {
        Globdata.GetStateData().SetLastSubStatementNumber( "1" );
        {
          f_20971901(  );
        }
      }
      else {
        Globdata.GetStateData().SetLastSubStatementNumber( "2" );
        {
          f_20971910(  );
        }
      }
      return;
    }
    
    public void f_20972684(  )
    {
      func_0020972684_esc_flag = false;
      {
        sl_29360142 = ErrorData.LastStatusNotFound;
        Globdata.GetStateData().SetLastStatementNumber( "0000000021" );
        read_each_0068157707_esc_flag = false;
        f_29360142_open(  );
        if ( sl_29360142 == ErrorData.LastStatusSucceeds )
        {
          f_29360142_fetch(  );
          while ((sl_29360142 == ErrorData.LastStatusSucceeds == true) && (read_each_0068157707_esc_flag != true))
          {
            {
              f_20971920(  );
            }
            Globdata.GetStateData().SetLastStatementNumber( "0000000021" );
            if ( read_each_0068157707_esc_flag != true )
            f_29360142_fetch(  );
          }
          if ( read_each_0068157707_esc_flag != true )
          {
            if ( !((sl_29360142 == ErrorData.LastStatusSucceeds == false) && (sl_29360142 == ErrorData.LastStatusNotFound == false)) 
              )
            {
              f_29360142_esc_close(  );
            }
            f_29360142_close(  );
          }
        }
        if ( (sl_29360142 == ErrorData.LastStatusSucceeds == false) && (sl_29360142 == ErrorData.LastStatusNotFound == false) )
        {
          Globdata.GetErrorData().SetStatus( ErrorData.LastStatusFatalError );
          Globdata.GetErrorData().SetLastStatus( sl_29360142 );
          Globdata.GetErrorData().SetErrorEncountered( ErrorData.ErrorEncounteredErrorFound );
          throw new ABException();
        }
      }
      f_0020972684_esctag: 
      ;
      return;
    }
    
    public void f_20972688(  )
    {
      func_0020972688_esc_flag = false;
      {
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        //    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  
        //    !!!!!!!!!!!!!!!!!!!!!                                           
        //    Set "General->Select Clause Isolation Level" property to        
        //    "Uncomitted / Browse"                                           
        //    and "DB2 MVS (XDB)->Optimize for N rows" property to "Use the   
        //    value: 1".                                                      
        //                                                                    
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        sl_29360130 = ErrorData.LastStatusNotFound;
        Globdata.GetStateData().SetLastStatementNumber( "0000000030" );
        read_each_0068157453_esc_flag = false;
        f_29360130_open(  );
        if ( sl_29360130 == ErrorData.LastStatusSucceeds )
        {
          f_29360130_fetch(  );
          while ((sl_29360130 == ErrorData.LastStatusSucceeds == true) && (read_each_0068157453_esc_flag != true))
          {
            {
              f_20971640(  );
            }
            Globdata.GetStateData().SetLastStatementNumber( "0000000030" );
            if ( read_each_0068157453_esc_flag != true )
            f_29360130_fetch(  );
          }
          if ( read_each_0068157453_esc_flag != true )
          {
            if ( !((sl_29360130 == ErrorData.LastStatusSucceeds == false) && (sl_29360130 == ErrorData.LastStatusNotFound == false)) 
              )
            {
              f_29360130_esc_close(  );
            }
            f_29360130_close(  );
          }
        }
        if ( (sl_29360130 == ErrorData.LastStatusSucceeds == false) && (sl_29360130 == ErrorData.LastStatusNotFound == false) )
        {
          Globdata.GetErrorData().SetStatus( ErrorData.LastStatusFatalError );
          Globdata.GetErrorData().SetLastStatus( sl_29360130 );
          Globdata.GetErrorData().SetErrorEncountered( ErrorData.ErrorEncounteredErrorFound );
          throw new ABException();
        }
      }
      f_0020972688_esctag: 
      ;
      return;
    }
    
    public void f_20971901(  )
    {
      func_0020971901_esc_flag = false;
      {
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        //    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  
        //    !!!!!!!!!!!!!!!!!!!!!                                           
        //    Set "General->Select Clause Isolation Level" property to        
        //    "Uncomitted / Browse"                                           
        //    and "DB2 MVS (XDB)->Optimize for N rows" property to "Use the   
        //    value: 1".                                                      
        //                                                                    
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        sl_29360150 = ErrorData.LastStatusNotFound;
        Globdata.GetStateData().SetLastStatementNumber( "0000000040" );
        read_each_0068157861_esc_flag = false;
        f_29360150_open(  );
        if ( sl_29360150 == ErrorData.LastStatusSucceeds )
        {
          f_29360150_fetch(  );
          while ((sl_29360150 == ErrorData.LastStatusSucceeds == true) && (read_each_0068157861_esc_flag != true))
          {
            {
              f_20972149(  );
            }
            Globdata.GetStateData().SetLastStatementNumber( "0000000040" );
            if ( read_each_0068157861_esc_flag != true )
            f_29360150_fetch(  );
          }
          if ( read_each_0068157861_esc_flag != true )
          {
            if ( !((sl_29360150 == ErrorData.LastStatusSucceeds == false) && (sl_29360150 == ErrorData.LastStatusNotFound == false)) 
              )
            {
              f_29360150_esc_close(  );
            }
            f_29360150_close(  );
          }
        }
        if ( (sl_29360150 == ErrorData.LastStatusSucceeds == false) && (sl_29360150 == ErrorData.LastStatusNotFound == false) )
        {
          Globdata.GetErrorData().SetStatus( ErrorData.LastStatusFatalError );
          Globdata.GetErrorData().SetLastStatus( sl_29360150 );
          Globdata.GetErrorData().SetErrorEncountered( ErrorData.ErrorEncounteredErrorFound );
          throw new ABException();
        }
      }
      f_0020971901_esctag: 
      ;
      return;
    }
    
    public void f_20971910(  )
    {
      func_0020971910_esc_flag = false;
      {
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        //    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  
        //    !!!!!!!!!!!!!!!!!!!!!                                           
        //    Set "General->Select Clause Isolation Level" property to        
        //    "Uncomitted / Browse"                                           
        //    and "DB2 MVS (XDB)->Optimize for N rows" property to "Use the   
        //    value: 1".                                                      
        //                                                                    
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        sl_29360134 = ErrorData.LastStatusNotFound;
        Globdata.GetStateData().SetLastStatementNumber( "0000000049" );
        read_each_0068158093_esc_flag = false;
        f_29360134_open(  );
        if ( sl_29360134 == ErrorData.LastStatusSucceeds )
        {
          f_29360134_fetch(  );
          while ((sl_29360134 == ErrorData.LastStatusSucceeds == true) && (read_each_0068158093_esc_flag != true))
          {
            {
              f_20972594(  );
            }
            Globdata.GetStateData().SetLastStatementNumber( "0000000049" );
            if ( read_each_0068158093_esc_flag != true )
            f_29360134_fetch(  );
          }
          if ( read_each_0068158093_esc_flag != true )
          {
            if ( !((sl_29360134 == ErrorData.LastStatusSucceeds == false) && (sl_29360134 == ErrorData.LastStatusNotFound == false)) 
              )
            {
              f_29360134_esc_close(  );
            }
            f_29360134_close(  );
          }
        }
        if ( (sl_29360134 == ErrorData.LastStatusSucceeds == false) && (sl_29360134 == ErrorData.LastStatusNotFound == false) )
        {
          Globdata.GetErrorData().SetStatus( ErrorData.LastStatusFatalError );
          Globdata.GetErrorData().SetLastStatus( sl_29360134 );
          Globdata.GetErrorData().SetErrorEncountered( ErrorData.ErrorEncounteredErrorFound );
          throw new ABException();
        }
      }
      f_0020971910_esctag: 
      ;
      return;
    }
    
    public void f_20971920(  )
    {
      func_0020971920_esc_flag = false;
      {
        Globdata.GetStateData().SetLastStatementNumber( "0000000022" );
        if ( (ExpGroupList_PS_001 < (double) WIa.ImpFilterIyy1ListScrollAmount) )
        {
          f_20972058(  );
        }
        else 
        {
          Globdata.GetStateData().SetLastSubStatementNumber( "1" );
          {
            f_20972146(  );
          }
        }
        
      }
      f_0020971920_esctag: 
      ;
      return;
    }
    
    public void f_20971640(  )
    {
      func_0020971640_esc_flag = false;
      {
        Globdata.GetStateData().SetLastStatementNumber( "0000000031" );
        if ( (ExpGroupList_PS_001 < (double) WIa.ImpFilterIyy1ListScrollAmount) )
        {
          f_20971554(  );
        }
        else 
        {
          Globdata.GetStateData().SetLastSubStatementNumber( "1" );
          {
            f_20971729(  );
          }
        }
        
      }
      f_0020971640_esctag: 
      ;
      return;
    }
    
    public void f_20972149(  )
    {
      func_0020972149_esc_flag = false;
      {
        Globdata.GetStateData().SetLastStatementNumber( "0000000041" );
        if ( (ExpGroupList_PS_001 < (double) WIa.ImpFilterIyy1ListScrollAmount) )
        {
          f_20972153(  );
        }
        else 
        {
          Globdata.GetStateData().SetLastSubStatementNumber( "1" );
          {
            f_20972229(  );
          }
        }
        
      }
      f_0020972149_esctag: 
      ;
      return;
    }
    
    public void f_20972594(  )
    {
      func_0020972594_esc_flag = false;
      {
        Globdata.GetStateData().SetLastStatementNumber( "0000000050" );
        if ( (ExpGroupList_PS_001 < (double) WIa.ImpFilterIyy1ListScrollAmount) )
        {
          f_20971693(  );
        }
        else 
        {
          Globdata.GetStateData().SetLastSubStatementNumber( "1" );
          {
            f_20972747(  );
          }
        }
        
      }
      f_0020972594_esctag: 
      ;
      return;
    }
    
    public void f_20972058(  )
    {
      func_0020972058_esc_flag = false;
      Globdata.GetStateData().SetLastStatementNumber( "0000000023" );
      if ( CompareExit.CompareTo(WLa.LocFilterIyy1ListScrollType, "S") == 0 )
      {
        Globdata.GetStateData().SetLastStatementNumber( "0000000024" );
        WLa.LocFilterIyy1ListScrollType = FixedStringAttr.ValueOf(Spaces, 1);
      }
      else 
      {
        Globdata.GetStateData().SetLastSubStatementNumber( "1" );
        {
          Globdata.GetStateData().SetLastStatementNumber( "0000000025" );
          ExpGroupList_PS_001 = (int)TIRD2DEC.Execute1(((double)ExpGroupList_PS_001 + 1), 0, TIRD2DEC.ROUND_NONE, 0);
          if ( (ExpGroupList_PS_001 > WOa.ExpGroupList_MA) && (ExpGroupList_PS_001 <= 48) )
          WOa.ExpGroupList_MA = IntAttr.ValueOf(ExpGroupList_PS_001);
          Globdata.GetStateData().SetLastStatementNumber( "0000000026" );
          f_173015097_rgvc(  );
          WOa.ExpGListTypeTinstanceId[ExpGroupList_PS_001-1] = TimestampAttr.ValueOf(WEa.TypeTinstanceId);
          WOa.ExpGListTypeTreferenceId[ExpGroupList_PS_001-1] = TimestampAttr.ValueOf(WEa.TypeTreferenceId);
          WOa.ExpGListTypeTcreateUserId[ExpGroupList_PS_001-1] = FixedStringAttr.ValueOf(WEa.TypeTcreateUserId, 8);
          WOa.ExpGListTypeTupdateUserId[ExpGroupList_PS_001-1] = FixedStringAttr.ValueOf(WEa.TypeTupdateUserId, 8);
          WOa.ExpGListTypeTkeyAttrText[ExpGroupList_PS_001-1] = FixedStringAttr.ValueOf(WEa.TypeTkeyAttrText, 4);
          WOa.ExpGListTypeTsearchAttrText[ExpGroupList_PS_001-1] = FixedStringAttr.ValueOf(WEa.TypeTsearchAttrText, 20);
          WOa.ExpGListTypeTotherAttrText[ExpGroupList_PS_001-1] = FixedStringAttr.ValueOf(WEa.TypeTotherAttrText, 2);
          WOa.ExpGListTypeTotherAttrDate[ExpGroupList_PS_001-1] = DateAttr.ValueOf(WEa.TypeTotherAttrDate);
          WOa.ExpGListTypeTotherAttrTime[ExpGroupList_PS_001-1] = TimeAttr.ValueOf(WEa.TypeTotherAttrTime);
          WOa.ExpGListTypeTotherAttrAmount[ExpGroupList_PS_001-1] = DecimalAttr.ValueOf(TIRBDTRU.TruncateToDecimal(
            WEa.TypeTotherAttrAmount, 2));
        }
      }
      
      return;
    }
    
    public void f_20972146(  )
    {
      func_0020972146_esc_flag = false;
      {
        Globdata.GetStateData().SetLastStatementNumber( "0000000027" );
        WOa.ExpErrorIyy1ComponentReasonCode = IntAttr.ValueOf((int)TIRD2DEC.Execute1((double) 
          WLa.LocDontChangeReasonCodesQ11ListFull, 0, TIRD2DEC.ROUND_NONE, 5));
        Globdata.GetStateData().SetLastStatementNumber( "0000000028" );
        func_0020972146_esc_flag = true;
        func_0020971920_esc_flag = true;
        f_29360142_esc_close(  );
        read_each_0068157707_esc_flag = true;
      }
      f_0020972146_esctag: 
      ;
      return;
    }
    
    public void f_20971554(  )
    {
      func_0020971554_esc_flag = false;
      Globdata.GetStateData().SetLastStatementNumber( "0000000032" );
      if ( CompareExit.CompareTo(WLa.LocFilterIyy1ListScrollType, "S") == 0 )
      {
        Globdata.GetStateData().SetLastStatementNumber( "0000000033" );
        WLa.LocFilterIyy1ListScrollType = FixedStringAttr.ValueOf(Spaces, 1);
      }
      else 
      {
        Globdata.GetStateData().SetLastSubStatementNumber( "1" );
        {
          Globdata.GetStateData().SetLastStatementNumber( "0000000034" );
          ExpGroupList_PS_001 = (int)TIRD2DEC.Execute1(((double)ExpGroupList_PS_001 + 1), 0, TIRD2DEC.ROUND_NONE, 0);
          if ( (ExpGroupList_PS_001 > WOa.ExpGroupList_MA) && (ExpGroupList_PS_001 <= 48) )
          WOa.ExpGroupList_MA = IntAttr.ValueOf(ExpGroupList_PS_001);
          Globdata.GetStateData().SetLastStatementNumber( "0000000035" );
          f_173015097_rgvc(  );
          WOa.ExpGListTypeTinstanceId[ExpGroupList_PS_001-1] = TimestampAttr.ValueOf(WEa.TypeTinstanceId);
          WOa.ExpGListTypeTreferenceId[ExpGroupList_PS_001-1] = TimestampAttr.ValueOf(WEa.TypeTreferenceId);
          WOa.ExpGListTypeTcreateUserId[ExpGroupList_PS_001-1] = FixedStringAttr.ValueOf(WEa.TypeTcreateUserId, 8);
          WOa.ExpGListTypeTupdateUserId[ExpGroupList_PS_001-1] = FixedStringAttr.ValueOf(WEa.TypeTupdateUserId, 8);
          WOa.ExpGListTypeTkeyAttrText[ExpGroupList_PS_001-1] = FixedStringAttr.ValueOf(WEa.TypeTkeyAttrText, 4);
          WOa.ExpGListTypeTsearchAttrText[ExpGroupList_PS_001-1] = FixedStringAttr.ValueOf(WEa.TypeTsearchAttrText, 20);
          WOa.ExpGListTypeTotherAttrText[ExpGroupList_PS_001-1] = FixedStringAttr.ValueOf(WEa.TypeTotherAttrText, 2);
          WOa.ExpGListTypeTotherAttrDate[ExpGroupList_PS_001-1] = DateAttr.ValueOf(WEa.TypeTotherAttrDate);
          WOa.ExpGListTypeTotherAttrTime[ExpGroupList_PS_001-1] = TimeAttr.ValueOf(WEa.TypeTotherAttrTime);
          WOa.ExpGListTypeTotherAttrAmount[ExpGroupList_PS_001-1] = DecimalAttr.ValueOf(TIRBDTRU.TruncateToDecimal(
            WEa.TypeTotherAttrAmount, 2));
        }
      }
      
      return;
    }
    
    public void f_20971729(  )
    {
      func_0020971729_esc_flag = false;
      {
        Globdata.GetStateData().SetLastStatementNumber( "0000000036" );
        WOa.ExpErrorIyy1ComponentReasonCode = IntAttr.ValueOf((int)TIRD2DEC.Execute1((double) 
          WLa.LocDontChangeReasonCodesQ11ListFull, 0, TIRD2DEC.ROUND_NONE, 5));
        Globdata.GetStateData().SetLastStatementNumber( "0000000037" );
        func_0020971729_esc_flag = true;
        func_0020971640_esc_flag = true;
        f_29360130_esc_close(  );
        read_each_0068157453_esc_flag = true;
      }
      f_0020971729_esctag: 
      ;
      return;
    }
    
    public void f_20972153(  )
    {
      func_0020972153_esc_flag = false;
      Globdata.GetStateData().SetLastStatementNumber( "0000000042" );
      if ( CompareExit.CompareTo(WLa.LocFilterIyy1ListScrollType, "S") == 0 )
      {
        Globdata.GetStateData().SetLastStatementNumber( "0000000043" );
        WLa.LocFilterIyy1ListScrollType = FixedStringAttr.ValueOf(Spaces, 1);
      }
      else 
      {
        Globdata.GetStateData().SetLastSubStatementNumber( "1" );
        {
          Globdata.GetStateData().SetLastStatementNumber( "0000000044" );
          ExpGroupList_PS_001 = (int)TIRD2DEC.Execute1(((double)ExpGroupList_PS_001 + 1), 0, TIRD2DEC.ROUND_NONE, 0);
          if ( (ExpGroupList_PS_001 > WOa.ExpGroupList_MA) && (ExpGroupList_PS_001 <= 48) )
          WOa.ExpGroupList_MA = IntAttr.ValueOf(ExpGroupList_PS_001);
          Globdata.GetStateData().SetLastStatementNumber( "0000000045" );
          f_173015097_rgvc(  );
          WOa.ExpGListTypeTinstanceId[ExpGroupList_PS_001-1] = TimestampAttr.ValueOf(WEa.TypeTinstanceId);
          WOa.ExpGListTypeTreferenceId[ExpGroupList_PS_001-1] = TimestampAttr.ValueOf(WEa.TypeTreferenceId);
          WOa.ExpGListTypeTcreateUserId[ExpGroupList_PS_001-1] = FixedStringAttr.ValueOf(WEa.TypeTcreateUserId, 8);
          WOa.ExpGListTypeTupdateUserId[ExpGroupList_PS_001-1] = FixedStringAttr.ValueOf(WEa.TypeTupdateUserId, 8);
          WOa.ExpGListTypeTkeyAttrText[ExpGroupList_PS_001-1] = FixedStringAttr.ValueOf(WEa.TypeTkeyAttrText, 4);
          WOa.ExpGListTypeTsearchAttrText[ExpGroupList_PS_001-1] = FixedStringAttr.ValueOf(WEa.TypeTsearchAttrText, 20);
          WOa.ExpGListTypeTotherAttrText[ExpGroupList_PS_001-1] = FixedStringAttr.ValueOf(WEa.TypeTotherAttrText, 2);
          WOa.ExpGListTypeTotherAttrDate[ExpGroupList_PS_001-1] = DateAttr.ValueOf(WEa.TypeTotherAttrDate);
          WOa.ExpGListTypeTotherAttrTime[ExpGroupList_PS_001-1] = TimeAttr.ValueOf(WEa.TypeTotherAttrTime);
          WOa.ExpGListTypeTotherAttrAmount[ExpGroupList_PS_001-1] = DecimalAttr.ValueOf(TIRBDTRU.TruncateToDecimal(
            WEa.TypeTotherAttrAmount, 2));
        }
      }
      
      return;
    }
    
    public void f_20972229(  )
    {
      func_0020972229_esc_flag = false;
      {
        Globdata.GetStateData().SetLastStatementNumber( "0000000046" );
        WOa.ExpErrorIyy1ComponentReasonCode = IntAttr.ValueOf((int)TIRD2DEC.Execute1((double) 
          WLa.LocDontChangeReasonCodesQ11ListFull, 0, TIRD2DEC.ROUND_NONE, 5));
        Globdata.GetStateData().SetLastStatementNumber( "0000000047" );
        func_0020972229_esc_flag = true;
        func_0020972149_esc_flag = true;
        f_29360150_esc_close(  );
        read_each_0068157861_esc_flag = true;
      }
      f_0020972229_esctag: 
      ;
      return;
    }
    
    public void f_20971693(  )
    {
      func_0020971693_esc_flag = false;
      Globdata.GetStateData().SetLastStatementNumber( "0000000051" );
      if ( CompareExit.CompareTo(WLa.LocFilterIyy1ListScrollType, "S") == 0 )
      {
        Globdata.GetStateData().SetLastStatementNumber( "0000000052" );
        WLa.LocFilterIyy1ListScrollType = FixedStringAttr.ValueOf(Spaces, 1);
      }
      else 
      {
        Globdata.GetStateData().SetLastSubStatementNumber( "1" );
        {
          Globdata.GetStateData().SetLastStatementNumber( "0000000053" );
          ExpGroupList_PS_001 = (int)TIRD2DEC.Execute1(((double)ExpGroupList_PS_001 + 1), 0, TIRD2DEC.ROUND_NONE, 0);
          if ( (ExpGroupList_PS_001 > WOa.ExpGroupList_MA) && (ExpGroupList_PS_001 <= 48) )
          WOa.ExpGroupList_MA = IntAttr.ValueOf(ExpGroupList_PS_001);
          Globdata.GetStateData().SetLastStatementNumber( "0000000054" );
          f_173015097_rgvc(  );
          WOa.ExpGListTypeTinstanceId[ExpGroupList_PS_001-1] = TimestampAttr.ValueOf(WEa.TypeTinstanceId);
          WOa.ExpGListTypeTreferenceId[ExpGroupList_PS_001-1] = TimestampAttr.ValueOf(WEa.TypeTreferenceId);
          WOa.ExpGListTypeTcreateUserId[ExpGroupList_PS_001-1] = FixedStringAttr.ValueOf(WEa.TypeTcreateUserId, 8);
          WOa.ExpGListTypeTupdateUserId[ExpGroupList_PS_001-1] = FixedStringAttr.ValueOf(WEa.TypeTupdateUserId, 8);
          WOa.ExpGListTypeTkeyAttrText[ExpGroupList_PS_001-1] = FixedStringAttr.ValueOf(WEa.TypeTkeyAttrText, 4);
          WOa.ExpGListTypeTsearchAttrText[ExpGroupList_PS_001-1] = FixedStringAttr.ValueOf(WEa.TypeTsearchAttrText, 20);
          WOa.ExpGListTypeTotherAttrText[ExpGroupList_PS_001-1] = FixedStringAttr.ValueOf(WEa.TypeTotherAttrText, 2);
          WOa.ExpGListTypeTotherAttrDate[ExpGroupList_PS_001-1] = DateAttr.ValueOf(WEa.TypeTotherAttrDate);
          WOa.ExpGListTypeTotherAttrTime[ExpGroupList_PS_001-1] = TimeAttr.ValueOf(WEa.TypeTotherAttrTime);
          WOa.ExpGListTypeTotherAttrAmount[ExpGroupList_PS_001-1] = DecimalAttr.ValueOf(TIRBDTRU.TruncateToDecimal(
            WEa.TypeTotherAttrAmount, 2));
        }
      }
      
      return;
    }
    
    public void f_20972747(  )
    {
      func_0020972747_esc_flag = false;
      {
        Globdata.GetStateData().SetLastStatementNumber( "0000000055" );
        WOa.ExpErrorIyy1ComponentReasonCode = IntAttr.ValueOf((int)TIRD2DEC.Execute1((double) 
          WLa.LocDontChangeReasonCodesQ11ListFull, 0, TIRD2DEC.ROUND_NONE, 5));
        Globdata.GetStateData().SetLastStatementNumber( "0000000056" );
        func_0020972747_esc_flag = true;
        func_0020972594_esc_flag = true;
        f_29360134_esc_close(  );
        read_each_0068158093_esc_flag = true;
      }
      f_0020972747_esctag: 
      ;
      return;
    }
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // INITIALIZATION UTILITY FUNCTIONS 
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    
    public void f_22020279_localAlloc( String abname )
    {
      // Request localview allocation 
      WLa = (GEN.ORT.YYY.DYYY0351_LA)(IefRuntimeParm2.GetInstance( GetType().Assembly,
      	"GEN.ORT.YYY.DYYY0351_LA" ));
      if ( WLa == null )
      {
        Globdata.GetStateData().SetCurrentABId( "0022020279" );
        Globdata.GetStateData().SetCurrentABName( abname );
        Globdata.GetErrorData().SetErrorEncountered( ErrorData.ErrorEncounteredErrorFound );
        Globdata.GetErrorData().SetLastStatus( ErrorData.LastStatusIefAllocationError );
      }
    }
    
    public void f_22020279_init(  )
    {
      
      TkeyAttr_001EF = Spaces;
      TkeyAttr_002EN = Spaces;
      TsearchAttr_003EF = Spaces;
      TsearchAttr_004EN = Spaces;
      TotherAttr_005EF = Spaces;
      TotherAttr_006EN = Spaces;
      TcreateUserid_007EF = Spaces;
      TcreateUserid_008EN = Spaces;
      TupdateUserid_009EF = Spaces;
      TupdateUserid_010EN = Spaces;
      TinstanceId_011EF = TIRVW2S.Execute( IefRuntimeParm1,
      	IefRuntimeParm2,
      	Globdata,
      	"IEFDB",
      	"00010101000000000000" );
      TinstanceId_012EN = TIRVW2S.Execute( IefRuntimeParm1,
      	IefRuntimeParm2,
      	Globdata,
      	"IEFDB",
      	"00010101000000000000" );
      TreferenceId_013EF = TIRVW2S.Execute( IefRuntimeParm1,
      	IefRuntimeParm2,
      	Globdata,
      	"IEFDB",
      	"00010101000000000000" );
      TreferenceId_014EN = TIRVW2S.Execute( IefRuntimeParm1,
      	IefRuntimeParm2,
      	Globdata,
      	"IEFDB",
      	"00010101000000000000" );
      TotherDate_015EF = TIRVW2D.Execute( IefRuntimeParm1,
      	IefRuntimeParm2,
      	Globdata,
      	"IEFDB",
      	0 );
      TotherDate_016EN = TIRVW2D.Execute( IefRuntimeParm1,
      	IefRuntimeParm2,
      	Globdata,
      	"IEFDB",
      	0 );
      TotherTime_017EF = TIRVW2T.Execute( IefRuntimeParm1,
      	IefRuntimeParm2,
      	Globdata,
      	"IEFDB",
      	0 );
      TotherTime_018EN = TIRVW2T.Execute( IefRuntimeParm1,
      	IefRuntimeParm2,
      	Globdata,
      	"IEFDB",
      	0 );
      TotherAmount_019EF = 0.0M;
      TotherAmount_020EN = 0.0M;
      if ( NestingLevel < 2 )
      {
        WLa.Reset();
      }
      WEa.Reset();
      WOa.ExpGroupList_MA = 0;
      for(ExpGroupList_PS_001 = 1; ExpGroupList_PS_001 <= 48; ++(ExpGroupList_PS_001))
      {
        WOa.ExpGListTypeTinstanceId[ExpGroupList_PS_001-1] = "00000000000000000000";
        WOa.ExpGListTypeTreferenceId[ExpGroupList_PS_001-1] = "00000000000000000000";
        WOa.ExpGListTypeTcreateUserId[ExpGroupList_PS_001-1] = "        ";
        WOa.ExpGListTypeTupdateUserId[ExpGroupList_PS_001-1] = "        ";
        WOa.ExpGListTypeTkeyAttrText[ExpGroupList_PS_001-1] = "    ";
        WOa.ExpGListTypeTsearchAttrText[ExpGroupList_PS_001-1] = "                    ";
        WOa.ExpGListTypeTotherAttrText[ExpGroupList_PS_001-1] = "  ";
        WOa.ExpGListTypeTotherAttrDate[ExpGroupList_PS_001-1] = 00000000;
        WOa.ExpGListTypeTotherAttrTime[ExpGroupList_PS_001-1] = 00000000;
        WOa.ExpGListTypeTotherAttrAmount[ExpGroupList_PS_001-1] = DecimalAttr.GetDefaultValue();
      }
      WOa.ExpErrorIyy1ComponentSeverityCode = " ";
      WOa.ExpErrorIyy1ComponentRollbackIndicator = " ";
      WOa.ExpErrorIyy1ComponentOriginServid = 0.0;
      WOa.ExpErrorIyy1ComponentContextString = "";
      WOa.ExpErrorIyy1ComponentReturnCode = 0;
      WOa.ExpErrorIyy1ComponentReasonCode = 0;
      WOa.ExpErrorIyy1ComponentChecksum = "               ";
      Type_es = ABBase.EvUnusable;
      Type_lk = ABBase.EvwUnlocked;
      WEa.TypeTinstanceId = "00000000000000000000";
      WEa.TypeTreferenceId = "00000000000000000000";
      ExpGroupList_PS_001 = 1;
    }
    public void f_29360142_open(  )
    {
      sl_29360142 = ErrorData.LastStatusSucceeds;
      Type_001cd = ABBase.PvSelect;
      Type_lk = ABBase.EvwUnlocked;
      f_29360142_moveb(  );
      
      if ( sl_29360142 == ErrorData.LastStatusSucceeds )
      {
        ValChkDeadlockTimeout = false;
        ValChkDBError = false;
        Type_es = ABBase.EvUsable;
        DataException = null;
        try {
          if ( hstmt_0037988323_1_cmd == null )
          {
            SQLStatement.Length = 0;
            
            SQLStatement.Append("SELECT ");
            SQLStatement.Append("VDVYYYT01.`TINSTANCE_ID`,");
            SQLStatement.Append("VDVYYYT01.`TREFERENCE_ID`,");
            SQLStatement.Append("VDVYYYT01.`TCREATE_USERID`,");
            SQLStatement.Append("VDVYYYT01.`TUPDATE_USERID`,");
            SQLStatement.Append("VDVYYYT01.`TKEY_ATTR`,");
            SQLStatement.Append("VDVYYYT01.`TSEARCH_ATTR`,");
            SQLStatement.Append("VDVYYYT01.`TOTHER_ATTR`,");
            SQLStatement.Append("VDVYYYT01.`TOTHER_DATE`,");
            SQLStatement.Append("VDVYYYT01.`TOTHER_TIME`,");
            SQLStatement.Append("VDVYYYT01.`TOTHER_AMOUNT`");
            SQLStatement.Append(" FROM ");
            SQLStatement.Append("`VDVYYYT` VDVYYYT01");
            SQLStatement.Append(" WHERE ");
            SQLStatement.Append("(");
            SQLStatement.Append(
"(VDVYYYT01.`TSEARCH_ATTR` > ? OR (VDVYYYT01.`TSEARCH_ATTR` = ? AND (VDVYYYT01.`TKEY_ATTR` >= ?))) AND VDVYYYT01.`TKEY_ATTR` >= ? AND VDVYYYT01.`TKEY_ATTR` <= ? AND VDVYYYT01.`TSEARCH_ATTR` LIKE ? AND VDVYYYT01.`TOTHER_ATTR` LIKE ?"
              );
            SQLStatement.Append(")");
            SQLStatement.Append("  ORDER BY 6 ASC ,");
            SQLStatement.Append(" 5 ASC ");
            if ( Globdata.GetDBMSData().GetDBMSManager().IsDBMS(IefRuntimeParm2, "IEFDB", "DB2") )
            {
              SQLStatement.Append(" WITH UR ");
            }
            hstmt_0037988323_1_cmd = Globdata.GetDBMSData().GetDBMSManager().GetCommand(Globdata, IefRuntimeParm2, "IEFDB", 
              SQLStatement.ToString());
            hstmt_0037988323_1_cmd.InsertParameter();
            hstmt_0037988323_1_cmd.InsertParameter();
            hstmt_0037988323_1_cmd.InsertParameter();
            hstmt_0037988323_1_cmd.InsertParameter();
            hstmt_0037988323_1_cmd.InsertParameter();
            hstmt_0037988323_1_cmd.InsertParameter();
            hstmt_0037988323_1_cmd.InsertParameter();
          }
          hstmt_0037988323_1_cmd.BindParameter(0, TsearchAttrText_001TP);
          hstmt_0037988323_1_cmd.BindParameter(1, TsearchAttrText_001TP);
          hstmt_0037988323_1_cmd.BindParameter(2, TkeyAttrText_002TP);
          hstmt_0037988323_1_cmd.BindParameter(3, TkeyAttrText_003TP);
          hstmt_0037988323_1_cmd.BindParameter(4, TkeyAttrText_004TP);
          hstmt_0037988323_1_cmd.BindParameter(5, TsearchAttrText_005TP);
          hstmt_0037988323_1_cmd.BindParameter(6, TotherAttrText_006TP);
          hstmt_0037988323_1_rs = hstmt_0037988323_1_cmd.ExecuteQuery(  );
        } catch( Exception e ) {
          DataException = e;
        }
        if ( !((Globdata.GetDBMSData().GetDBMSManager().WasSuccessful(DataException))) )
        {
             f_29360142_adonet_dberror(  );
        }
      }
    }
    
    public void f_29360142_fetch(  )
    {
      DataException = null;
      try {
        if ( hstmt_0037988323_1_rs.MoveNext(  ) == false )
        {
          throw new Exception("No data found");
        }
        TinstanceId_011EF = Globdata.GetDBMSData().GetDBMSManager().GetDateTime(IefRuntimeParm2, "IEFDB", 
          hstmt_0037988323_1_rs.GetValue(0));
        TreferenceId_013EF = Globdata.GetDBMSData().GetDBMSManager().GetDateTime(IefRuntimeParm2, "IEFDB", 
          hstmt_0037988323_1_rs.GetValue(1));
        TcreateUserid_007EF = Globdata.GetDBMSData().GetDBMSManager().GetString(IefRuntimeParm2, "IEFDB", 
          hstmt_0037988323_1_rs.GetValue(2));
        TupdateUserid_009EF = Globdata.GetDBMSData().GetDBMSManager().GetString(IefRuntimeParm2, "IEFDB", 
          hstmt_0037988323_1_rs.GetValue(3));
        TkeyAttr_001EF = Globdata.GetDBMSData().GetDBMSManager().GetString(IefRuntimeParm2, "IEFDB", hstmt_0037988323_1_rs.GetValue(
          4));
        TsearchAttr_003EF = Globdata.GetDBMSData().GetDBMSManager().GetString(IefRuntimeParm2, "IEFDB", 
          hstmt_0037988323_1_rs.GetValue(5));
        TotherAttr_005EF = Globdata.GetDBMSData().GetDBMSManager().GetString(IefRuntimeParm2, "IEFDB", 
          hstmt_0037988323_1_rs.GetValue(6));
        TotherDate_015EF = Globdata.GetDBMSData().GetDBMSManager().GetDateTime(IefRuntimeParm2, "IEFDB", 
          hstmt_0037988323_1_rs.GetValue(7));
        TotherTime_017EF = Globdata.GetDBMSData().GetDBMSManager().GetDateTime(IefRuntimeParm2, "IEFDB", 
          hstmt_0037988323_1_rs.GetValue(8));
        TotherAmount_019EF = Globdata.GetDBMSData().GetDBMSManager().GetDecimal(IefRuntimeParm2, "IEFDB", 
          hstmt_0037988323_1_rs.GetValue(9));
      } catch( Exception e ) {
        DataException = e;
      }
      
      if ( Globdata.GetDBMSData().GetDBMSManager().WasSuccessful(DataException) )
      {
        f_29360142_movea(  );
        if ( sl_29360142 == ErrorData.LastStatusSucceeds )
        {
          Type_es = ABBase.EvUsable;
        }
        else {
          Type_es = ABBase.EvUnusable;
        }
      }
      else if ( Globdata.GetDBMSData().GetDBMSManager().WasNoDataFound(DataException) )
      {
        sl_29360142 = ErrorData.LastStatusNotFound;
        Type_es = ABBase.EvUnusable;
      }
      else {
        f_29360142_adonet_dberror(  );
      }
    }
    
    public void f_29360142_esc_close(  )
    {
      try {
        if ( hstmt_0037988323_1_rs != null )
        {
          hstmt_0037988323_1_rs.Close(  );
          hstmt_0037988323_1_rs = null;
        }
        if ( hstmt_0037988323_1_cmd != null )
        {
          hstmt_0037988323_1_cmd.Close(  );
          hstmt_0037988323_1_cmd = null;
        }
      } catch( Exception e ) {
        if ( Globdata.GetDBMSData().GetDBMSManager().WasSuccessful(e) == false )
        {
          DataException = e;
          f_29360142_adonet_dberror(  );
        }
      }
    }
    public void f_29360142_close(  )
    {
      Type_es = ABBase.EvUnusable;
    }
    
    public void f_29360142_adonet_dberror(  )
    {
      Globdata.GetErrorData().SetStatus( ErrorData.LastStatusFatalError );
      Globdata.GetDBMSData().SetActionId( 21 );
      if ( DataException != null )
      {
        Globdata.GetErrorData(  ).SetErrorMessage( DataException );
      }
      Globdata.GetErrorData().SetLastStatus( ErrorData.LastStatusDbError );
      sl_29360142 = Globdata.GetErrorData().GetLastStatus();
      throw new ABException();
    }
    
    public void f_29360142_moveb(  )
    {
      TsearchAttrText_001TP = WIa.ImpFromTypeTsearchAttrText;
      TkeyAttrText_002TP = WIa.ImpFromTypeTkeyAttrText;
      TkeyAttrText_003TP = WIa.ImpFilterStartTypeTkeyAttrText;
      TkeyAttrText_004TP = WIa.ImpFilterStopTypeTkeyAttrText;
      TsearchAttrText_005TP = WIa.ImpFilterTypeTsearchAttrText;
      TotherAttrText_006TP = WIa.ImpFilterTypeTotherAttrText;
    }
    
    public void f_29360142_movea(  )
    {
      WEa.TypeTinstanceId = TimestampAttr.ValueOf(TIRS2VW.Execute( IefRuntimeParm1,
      	IefRuntimeParm2,
      	Globdata,
      	"IEFDB",
      	TinstanceId_011EF ));
      WEa.TypeTreferenceId = TimestampAttr.ValueOf(TIRS2VW.Execute( IefRuntimeParm1,
      	IefRuntimeParm2,
      	Globdata,
      	"IEFDB",
      	TreferenceId_013EF ));
      WEa.TypeTcreateUserId = FixedStringAttr.ValueOf(TcreateUserid_007EF, 8);
      WEa.TypeTupdateUserId = FixedStringAttr.ValueOf(TupdateUserid_009EF, 8);
      WEa.TypeTkeyAttrText = FixedStringAttr.ValueOf(TkeyAttr_001EF, 4);
      WEa.TypeTsearchAttrText = FixedStringAttr.ValueOf(TsearchAttr_003EF, 20);
      WEa.TypeTotherAttrText = FixedStringAttr.ValueOf(TotherAttr_005EF, 2);
      WEa.TypeTotherAttrDate = DateAttr.ValueOf(TIRD2VW.Execute( IefRuntimeParm1,
      	IefRuntimeParm2,
      	Globdata,
      	"IEFDB",
      	TotherDate_015EF ));
      WEa.TypeTotherAttrTime = TimeAttr.ValueOf(TIRT2VW.Execute( IefRuntimeParm1,
      	IefRuntimeParm2,
      	Globdata,
      	"IEFDB",
      	TotherTime_017EF ));
      WEa.TypeTotherAttrAmount = DecimalAttr.ValueOf(TIRBDRND.RoundToDecimal(TotherAmount_019EF, 2));
    }
    public void f_29360130_open(  )
    {
      sl_29360130 = ErrorData.LastStatusSucceeds;
      Type_001cd = ABBase.PvSelect;
      Type_lk = ABBase.EvwUnlocked;
      f_29360130_moveb(  );
      
      if ( sl_29360130 == ErrorData.LastStatusSucceeds )
      {
        ValChkDeadlockTimeout = false;
        ValChkDBError = false;
        Type_es = ABBase.EvUsable;
        DataException = null;
        try {
          if ( hstmt_0037920443_1_cmd == null )
          {
            SQLStatement.Length = 0;
            
            SQLStatement.Append("SELECT ");
            SQLStatement.Append("VDVYYYT01.`TINSTANCE_ID`,");
            SQLStatement.Append("VDVYYYT01.`TREFERENCE_ID`,");
            SQLStatement.Append("VDVYYYT01.`TCREATE_USERID`,");
            SQLStatement.Append("VDVYYYT01.`TUPDATE_USERID`,");
            SQLStatement.Append("VDVYYYT01.`TKEY_ATTR`,");
            SQLStatement.Append("VDVYYYT01.`TSEARCH_ATTR`,");
            SQLStatement.Append("VDVYYYT01.`TOTHER_ATTR`,");
            SQLStatement.Append("VDVYYYT01.`TOTHER_DATE`,");
            SQLStatement.Append("VDVYYYT01.`TOTHER_TIME`,");
            SQLStatement.Append("VDVYYYT01.`TOTHER_AMOUNT`");
            SQLStatement.Append(" FROM ");
            SQLStatement.Append("`VDVYYYT` VDVYYYT01");
            SQLStatement.Append(" WHERE ");
            SQLStatement.Append("(");
            SQLStatement.Append(
"VDVYYYT01.`TKEY_ATTR` >= ? AND VDVYYYT01.`TKEY_ATTR` >= ? AND VDVYYYT01.`TKEY_ATTR` <= ? AND VDVYYYT01.`TSEARCH_ATTR` LIKE ? AND VDVYYYT01.`TOTHER_ATTR` LIKE ?"
              );
            SQLStatement.Append(")");
            SQLStatement.Append("  ORDER BY 5 ASC ");
            if ( Globdata.GetDBMSData().GetDBMSManager().IsDBMS(IefRuntimeParm2, "IEFDB", "DB2") )
            {
              SQLStatement.Append(" WITH UR ");
            }
            hstmt_0037920443_1_cmd = Globdata.GetDBMSData().GetDBMSManager().GetCommand(Globdata, IefRuntimeParm2, "IEFDB", 
              SQLStatement.ToString());
            hstmt_0037920443_1_cmd.InsertParameter();
            hstmt_0037920443_1_cmd.InsertParameter();
            hstmt_0037920443_1_cmd.InsertParameter();
            hstmt_0037920443_1_cmd.InsertParameter();
            hstmt_0037920443_1_cmd.InsertParameter();
          }
          hstmt_0037920443_1_cmd.BindParameter(0, TkeyAttrText_002TP);
          hstmt_0037920443_1_cmd.BindParameter(1, TkeyAttrText_003TP);
          hstmt_0037920443_1_cmd.BindParameter(2, TkeyAttrText_004TP);
          hstmt_0037920443_1_cmd.BindParameter(3, TsearchAttrText_005TP);
          hstmt_0037920443_1_cmd.BindParameter(4, TotherAttrText_006TP);
          hstmt_0037920443_1_rs = hstmt_0037920443_1_cmd.ExecuteQuery(  );
        } catch( Exception e ) {
          DataException = e;
        }
        if ( !((Globdata.GetDBMSData().GetDBMSManager().WasSuccessful(DataException))) )
        {
             f_29360130_adonet_dberror(  );
        }
      }
    }
    
    public void f_29360130_fetch(  )
    {
      DataException = null;
      try {
        if ( hstmt_0037920443_1_rs.MoveNext(  ) == false )
        {
          throw new Exception("No data found");
        }
        TinstanceId_011EF = Globdata.GetDBMSData().GetDBMSManager().GetDateTime(IefRuntimeParm2, "IEFDB", 
          hstmt_0037920443_1_rs.GetValue(0));
        TreferenceId_013EF = Globdata.GetDBMSData().GetDBMSManager().GetDateTime(IefRuntimeParm2, "IEFDB", 
          hstmt_0037920443_1_rs.GetValue(1));
        TcreateUserid_007EF = Globdata.GetDBMSData().GetDBMSManager().GetString(IefRuntimeParm2, "IEFDB", 
          hstmt_0037920443_1_rs.GetValue(2));
        TupdateUserid_009EF = Globdata.GetDBMSData().GetDBMSManager().GetString(IefRuntimeParm2, "IEFDB", 
          hstmt_0037920443_1_rs.GetValue(3));
        TkeyAttr_001EF = Globdata.GetDBMSData().GetDBMSManager().GetString(IefRuntimeParm2, "IEFDB", hstmt_0037920443_1_rs.GetValue(
          4));
        TsearchAttr_003EF = Globdata.GetDBMSData().GetDBMSManager().GetString(IefRuntimeParm2, "IEFDB", 
          hstmt_0037920443_1_rs.GetValue(5));
        TotherAttr_005EF = Globdata.GetDBMSData().GetDBMSManager().GetString(IefRuntimeParm2, "IEFDB", 
          hstmt_0037920443_1_rs.GetValue(6));
        TotherDate_015EF = Globdata.GetDBMSData().GetDBMSManager().GetDateTime(IefRuntimeParm2, "IEFDB", 
          hstmt_0037920443_1_rs.GetValue(7));
        TotherTime_017EF = Globdata.GetDBMSData().GetDBMSManager().GetDateTime(IefRuntimeParm2, "IEFDB", 
          hstmt_0037920443_1_rs.GetValue(8));
        TotherAmount_019EF = Globdata.GetDBMSData().GetDBMSManager().GetDecimal(IefRuntimeParm2, "IEFDB", 
          hstmt_0037920443_1_rs.GetValue(9));
      } catch( Exception e ) {
        DataException = e;
      }
      
      if ( Globdata.GetDBMSData().GetDBMSManager().WasSuccessful(DataException) )
      {
        f_29360130_movea(  );
        if ( sl_29360130 == ErrorData.LastStatusSucceeds )
        {
          Type_es = ABBase.EvUsable;
        }
        else {
          Type_es = ABBase.EvUnusable;
        }
      }
      else if ( Globdata.GetDBMSData().GetDBMSManager().WasNoDataFound(DataException) )
      {
        sl_29360130 = ErrorData.LastStatusNotFound;
        Type_es = ABBase.EvUnusable;
      }
      else {
        f_29360130_adonet_dberror(  );
      }
    }
    
    public void f_29360130_esc_close(  )
    {
      try {
        if ( hstmt_0037920443_1_rs != null )
        {
          hstmt_0037920443_1_rs.Close(  );
          hstmt_0037920443_1_rs = null;
        }
        if ( hstmt_0037920443_1_cmd != null )
        {
          hstmt_0037920443_1_cmd.Close(  );
          hstmt_0037920443_1_cmd = null;
        }
      } catch( Exception e ) {
        if ( Globdata.GetDBMSData().GetDBMSManager().WasSuccessful(e) == false )
        {
          DataException = e;
          f_29360130_adonet_dberror(  );
        }
      }
    }
    public void f_29360130_close(  )
    {
      Type_es = ABBase.EvUnusable;
    }
    
    public void f_29360130_adonet_dberror(  )
    {
      Globdata.GetErrorData().SetStatus( ErrorData.LastStatusFatalError );
      Globdata.GetDBMSData().SetActionId( 30 );
      if ( DataException != null )
      {
        Globdata.GetErrorData(  ).SetErrorMessage( DataException );
      }
      Globdata.GetErrorData().SetLastStatus( ErrorData.LastStatusDbError );
      sl_29360130 = Globdata.GetErrorData().GetLastStatus();
      throw new ABException();
    }
    
    public void f_29360130_moveb(  )
    {
      TkeyAttrText_002TP = WIa.ImpFromTypeTkeyAttrText;
      TkeyAttrText_003TP = WIa.ImpFilterStartTypeTkeyAttrText;
      TkeyAttrText_004TP = WIa.ImpFilterStopTypeTkeyAttrText;
      TsearchAttrText_005TP = WIa.ImpFilterTypeTsearchAttrText;
      TotherAttrText_006TP = WIa.ImpFilterTypeTotherAttrText;
    }
    
    public void f_29360130_movea(  )
    {
      WEa.TypeTinstanceId = TimestampAttr.ValueOf(TIRS2VW.Execute( IefRuntimeParm1,
      	IefRuntimeParm2,
      	Globdata,
      	"IEFDB",
      	TinstanceId_011EF ));
      WEa.TypeTreferenceId = TimestampAttr.ValueOf(TIRS2VW.Execute( IefRuntimeParm1,
      	IefRuntimeParm2,
      	Globdata,
      	"IEFDB",
      	TreferenceId_013EF ));
      WEa.TypeTcreateUserId = FixedStringAttr.ValueOf(TcreateUserid_007EF, 8);
      WEa.TypeTupdateUserId = FixedStringAttr.ValueOf(TupdateUserid_009EF, 8);
      WEa.TypeTkeyAttrText = FixedStringAttr.ValueOf(TkeyAttr_001EF, 4);
      WEa.TypeTsearchAttrText = FixedStringAttr.ValueOf(TsearchAttr_003EF, 20);
      WEa.TypeTotherAttrText = FixedStringAttr.ValueOf(TotherAttr_005EF, 2);
      WEa.TypeTotherAttrDate = DateAttr.ValueOf(TIRD2VW.Execute( IefRuntimeParm1,
      	IefRuntimeParm2,
      	Globdata,
      	"IEFDB",
      	TotherDate_015EF ));
      WEa.TypeTotherAttrTime = TimeAttr.ValueOf(TIRT2VW.Execute( IefRuntimeParm1,
      	IefRuntimeParm2,
      	Globdata,
      	"IEFDB",
      	TotherTime_017EF ));
      WEa.TypeTotherAttrAmount = DecimalAttr.ValueOf(TIRBDRND.RoundToDecimal(TotherAmount_019EF, 2));
    }
    public void f_29360150_open(  )
    {
      sl_29360150 = ErrorData.LastStatusSucceeds;
      Type_001cd = ABBase.PvSelect;
      Type_lk = ABBase.EvwUnlocked;
      f_29360150_moveb(  );
      
      if ( sl_29360150 == ErrorData.LastStatusSucceeds )
      {
        ValChkDeadlockTimeout = false;
        ValChkDBError = false;
        Type_es = ABBase.EvUsable;
        DataException = null;
        try {
          if ( hstmt_0037990974_1_cmd == null )
          {
            SQLStatement.Length = 0;
            
            SQLStatement.Append("SELECT ");
            SQLStatement.Append("VDVYYYT01.`TINSTANCE_ID`,");
            SQLStatement.Append("VDVYYYT01.`TREFERENCE_ID`,");
            SQLStatement.Append("VDVYYYT01.`TCREATE_USERID`,");
            SQLStatement.Append("VDVYYYT01.`TUPDATE_USERID`,");
            SQLStatement.Append("VDVYYYT01.`TKEY_ATTR`,");
            SQLStatement.Append("VDVYYYT01.`TSEARCH_ATTR`,");
            SQLStatement.Append("VDVYYYT01.`TOTHER_ATTR`,");
            SQLStatement.Append("VDVYYYT01.`TOTHER_DATE`,");
            SQLStatement.Append("VDVYYYT01.`TOTHER_TIME`,");
            SQLStatement.Append("VDVYYYT01.`TOTHER_AMOUNT`");
            SQLStatement.Append(" FROM ");
            SQLStatement.Append("`VDVYYYT` VDVYYYT01");
            SQLStatement.Append(" WHERE ");
            SQLStatement.Append("(");
            SQLStatement.Append(
"(VDVYYYT01.`TSEARCH_ATTR` < ? OR (VDVYYYT01.`TSEARCH_ATTR` = ? AND (VDVYYYT01.`TKEY_ATTR` <= ?))) AND VDVYYYT01.`TKEY_ATTR` >= ? AND VDVYYYT01.`TKEY_ATTR` <= ? AND VDVYYYT01.`TSEARCH_ATTR` LIKE ? AND VDVYYYT01.`TOTHER_ATTR` LIKE ?"
              );
            SQLStatement.Append(")");
            SQLStatement.Append("  ORDER BY 6 DESC ,");
            SQLStatement.Append(" 5 DESC ");
            if ( Globdata.GetDBMSData().GetDBMSManager().IsDBMS(IefRuntimeParm2, "IEFDB", "DB2") )
            {
              SQLStatement.Append(" WITH UR ");
            }
            hstmt_0037990974_1_cmd = Globdata.GetDBMSData().GetDBMSManager().GetCommand(Globdata, IefRuntimeParm2, "IEFDB", 
              SQLStatement.ToString());
            hstmt_0037990974_1_cmd.InsertParameter();
            hstmt_0037990974_1_cmd.InsertParameter();
            hstmt_0037990974_1_cmd.InsertParameter();
            hstmt_0037990974_1_cmd.InsertParameter();
            hstmt_0037990974_1_cmd.InsertParameter();
            hstmt_0037990974_1_cmd.InsertParameter();
            hstmt_0037990974_1_cmd.InsertParameter();
          }
          hstmt_0037990974_1_cmd.BindParameter(0, TsearchAttrText_001TP);
          hstmt_0037990974_1_cmd.BindParameter(1, TsearchAttrText_001TP);
          hstmt_0037990974_1_cmd.BindParameter(2, TkeyAttrText_002TP);
          hstmt_0037990974_1_cmd.BindParameter(3, TkeyAttrText_003TP);
          hstmt_0037990974_1_cmd.BindParameter(4, TkeyAttrText_004TP);
          hstmt_0037990974_1_cmd.BindParameter(5, TsearchAttrText_005TP);
          hstmt_0037990974_1_cmd.BindParameter(6, TotherAttrText_006TP);
          hstmt_0037990974_1_rs = hstmt_0037990974_1_cmd.ExecuteQuery(  );
        } catch( Exception e ) {
          DataException = e;
        }
        if ( !((Globdata.GetDBMSData().GetDBMSManager().WasSuccessful(DataException))) )
        {
             f_29360150_adonet_dberror(  );
        }
      }
    }
    
    public void f_29360150_fetch(  )
    {
      DataException = null;
      try {
        if ( hstmt_0037990974_1_rs.MoveNext(  ) == false )
        {
          throw new Exception("No data found");
        }
        TinstanceId_011EF = Globdata.GetDBMSData().GetDBMSManager().GetDateTime(IefRuntimeParm2, "IEFDB", 
          hstmt_0037990974_1_rs.GetValue(0));
        TreferenceId_013EF = Globdata.GetDBMSData().GetDBMSManager().GetDateTime(IefRuntimeParm2, "IEFDB", 
          hstmt_0037990974_1_rs.GetValue(1));
        TcreateUserid_007EF = Globdata.GetDBMSData().GetDBMSManager().GetString(IefRuntimeParm2, "IEFDB", 
          hstmt_0037990974_1_rs.GetValue(2));
        TupdateUserid_009EF = Globdata.GetDBMSData().GetDBMSManager().GetString(IefRuntimeParm2, "IEFDB", 
          hstmt_0037990974_1_rs.GetValue(3));
        TkeyAttr_001EF = Globdata.GetDBMSData().GetDBMSManager().GetString(IefRuntimeParm2, "IEFDB", hstmt_0037990974_1_rs.GetValue(
          4));
        TsearchAttr_003EF = Globdata.GetDBMSData().GetDBMSManager().GetString(IefRuntimeParm2, "IEFDB", 
          hstmt_0037990974_1_rs.GetValue(5));
        TotherAttr_005EF = Globdata.GetDBMSData().GetDBMSManager().GetString(IefRuntimeParm2, "IEFDB", 
          hstmt_0037990974_1_rs.GetValue(6));
        TotherDate_015EF = Globdata.GetDBMSData().GetDBMSManager().GetDateTime(IefRuntimeParm2, "IEFDB", 
          hstmt_0037990974_1_rs.GetValue(7));
        TotherTime_017EF = Globdata.GetDBMSData().GetDBMSManager().GetDateTime(IefRuntimeParm2, "IEFDB", 
          hstmt_0037990974_1_rs.GetValue(8));
        TotherAmount_019EF = Globdata.GetDBMSData().GetDBMSManager().GetDecimal(IefRuntimeParm2, "IEFDB", 
          hstmt_0037990974_1_rs.GetValue(9));
      } catch( Exception e ) {
        DataException = e;
      }
      
      if ( Globdata.GetDBMSData().GetDBMSManager().WasSuccessful(DataException) )
      {
        f_29360150_movea(  );
        if ( sl_29360150 == ErrorData.LastStatusSucceeds )
        {
          Type_es = ABBase.EvUsable;
        }
        else {
          Type_es = ABBase.EvUnusable;
        }
      }
      else if ( Globdata.GetDBMSData().GetDBMSManager().WasNoDataFound(DataException) )
      {
        sl_29360150 = ErrorData.LastStatusNotFound;
        Type_es = ABBase.EvUnusable;
      }
      else {
        f_29360150_adonet_dberror(  );
      }
    }
    
    public void f_29360150_esc_close(  )
    {
      try {
        if ( hstmt_0037990974_1_rs != null )
        {
          hstmt_0037990974_1_rs.Close(  );
          hstmt_0037990974_1_rs = null;
        }
        if ( hstmt_0037990974_1_cmd != null )
        {
          hstmt_0037990974_1_cmd.Close(  );
          hstmt_0037990974_1_cmd = null;
        }
      } catch( Exception e ) {
        if ( Globdata.GetDBMSData().GetDBMSManager().WasSuccessful(e) == false )
        {
          DataException = e;
          f_29360150_adonet_dberror(  );
        }
      }
    }
    public void f_29360150_close(  )
    {
      Type_es = ABBase.EvUnusable;
    }
    
    public void f_29360150_adonet_dberror(  )
    {
      Globdata.GetErrorData().SetStatus( ErrorData.LastStatusFatalError );
      Globdata.GetDBMSData().SetActionId( 40 );
      if ( DataException != null )
      {
        Globdata.GetErrorData(  ).SetErrorMessage( DataException );
      }
      Globdata.GetErrorData().SetLastStatus( ErrorData.LastStatusDbError );
      sl_29360150 = Globdata.GetErrorData().GetLastStatus();
      throw new ABException();
    }
    
    public void f_29360150_moveb(  )
    {
      TsearchAttrText_001TP = WIa.ImpFromTypeTsearchAttrText;
      TkeyAttrText_002TP = WIa.ImpFromTypeTkeyAttrText;
      TkeyAttrText_003TP = WIa.ImpFilterStartTypeTkeyAttrText;
      TkeyAttrText_004TP = WIa.ImpFilterStopTypeTkeyAttrText;
      TsearchAttrText_005TP = WIa.ImpFilterTypeTsearchAttrText;
      TotherAttrText_006TP = WIa.ImpFilterTypeTotherAttrText;
    }
    
    public void f_29360150_movea(  )
    {
      WEa.TypeTinstanceId = TimestampAttr.ValueOf(TIRS2VW.Execute( IefRuntimeParm1,
      	IefRuntimeParm2,
      	Globdata,
      	"IEFDB",
      	TinstanceId_011EF ));
      WEa.TypeTreferenceId = TimestampAttr.ValueOf(TIRS2VW.Execute( IefRuntimeParm1,
      	IefRuntimeParm2,
      	Globdata,
      	"IEFDB",
      	TreferenceId_013EF ));
      WEa.TypeTcreateUserId = FixedStringAttr.ValueOf(TcreateUserid_007EF, 8);
      WEa.TypeTupdateUserId = FixedStringAttr.ValueOf(TupdateUserid_009EF, 8);
      WEa.TypeTkeyAttrText = FixedStringAttr.ValueOf(TkeyAttr_001EF, 4);
      WEa.TypeTsearchAttrText = FixedStringAttr.ValueOf(TsearchAttr_003EF, 20);
      WEa.TypeTotherAttrText = FixedStringAttr.ValueOf(TotherAttr_005EF, 2);
      WEa.TypeTotherAttrDate = DateAttr.ValueOf(TIRD2VW.Execute( IefRuntimeParm1,
      	IefRuntimeParm2,
      	Globdata,
      	"IEFDB",
      	TotherDate_015EF ));
      WEa.TypeTotherAttrTime = TimeAttr.ValueOf(TIRT2VW.Execute( IefRuntimeParm1,
      	IefRuntimeParm2,
      	Globdata,
      	"IEFDB",
      	TotherTime_017EF ));
      WEa.TypeTotherAttrAmount = DecimalAttr.ValueOf(TIRBDRND.RoundToDecimal(TotherAmount_019EF, 2));
    }
    public void f_29360134_open(  )
    {
      sl_29360134 = ErrorData.LastStatusSucceeds;
      Type_001cd = ABBase.PvSelect;
      Type_lk = ABBase.EvwUnlocked;
      f_29360134_moveb(  );
      
      if ( sl_29360134 == ErrorData.LastStatusSucceeds )
      {
        ValChkDeadlockTimeout = false;
        ValChkDBError = false;
        Type_es = ABBase.EvUsable;
        DataException = null;
        try {
          if ( hstmt_0037921956_1_cmd == null )
          {
            SQLStatement.Length = 0;
            
            SQLStatement.Append("SELECT ");
            SQLStatement.Append("VDVYYYT01.`TINSTANCE_ID`,");
            SQLStatement.Append("VDVYYYT01.`TREFERENCE_ID`,");
            SQLStatement.Append("VDVYYYT01.`TCREATE_USERID`,");
            SQLStatement.Append("VDVYYYT01.`TUPDATE_USERID`,");
            SQLStatement.Append("VDVYYYT01.`TKEY_ATTR`,");
            SQLStatement.Append("VDVYYYT01.`TSEARCH_ATTR`,");
            SQLStatement.Append("VDVYYYT01.`TOTHER_ATTR`,");
            SQLStatement.Append("VDVYYYT01.`TOTHER_DATE`,");
            SQLStatement.Append("VDVYYYT01.`TOTHER_TIME`,");
            SQLStatement.Append("VDVYYYT01.`TOTHER_AMOUNT`");
            SQLStatement.Append(" FROM ");
            SQLStatement.Append("`VDVYYYT` VDVYYYT01");
            SQLStatement.Append(" WHERE ");
            SQLStatement.Append("(");
            SQLStatement.Append(
"VDVYYYT01.`TKEY_ATTR` <= ? AND VDVYYYT01.`TKEY_ATTR` >= ? AND VDVYYYT01.`TKEY_ATTR` <= ? AND VDVYYYT01.`TSEARCH_ATTR` LIKE ? AND VDVYYYT01.`TOTHER_ATTR` LIKE ?"
              );
            SQLStatement.Append(")");
            SQLStatement.Append("  ORDER BY 5 DESC ");
            if ( Globdata.GetDBMSData().GetDBMSManager().IsDBMS(IefRuntimeParm2, "IEFDB", "DB2") )
            {
              SQLStatement.Append(" WITH UR ");
            }
            hstmt_0037921956_1_cmd = Globdata.GetDBMSData().GetDBMSManager().GetCommand(Globdata, IefRuntimeParm2, "IEFDB", 
              SQLStatement.ToString());
            hstmt_0037921956_1_cmd.InsertParameter();
            hstmt_0037921956_1_cmd.InsertParameter();
            hstmt_0037921956_1_cmd.InsertParameter();
            hstmt_0037921956_1_cmd.InsertParameter();
            hstmt_0037921956_1_cmd.InsertParameter();
          }
          hstmt_0037921956_1_cmd.BindParameter(0, TkeyAttrText_002TP);
          hstmt_0037921956_1_cmd.BindParameter(1, TkeyAttrText_003TP);
          hstmt_0037921956_1_cmd.BindParameter(2, TkeyAttrText_004TP);
          hstmt_0037921956_1_cmd.BindParameter(3, TsearchAttrText_005TP);
          hstmt_0037921956_1_cmd.BindParameter(4, TotherAttrText_006TP);
          hstmt_0037921956_1_rs = hstmt_0037921956_1_cmd.ExecuteQuery(  );
        } catch( Exception e ) {
          DataException = e;
        }
        if ( !((Globdata.GetDBMSData().GetDBMSManager().WasSuccessful(DataException))) )
        {
             f_29360134_adonet_dberror(  );
        }
      }
    }
    
    public void f_29360134_fetch(  )
    {
      DataException = null;
      try {
        if ( hstmt_0037921956_1_rs.MoveNext(  ) == false )
        {
          throw new Exception("No data found");
        }
        TinstanceId_011EF = Globdata.GetDBMSData().GetDBMSManager().GetDateTime(IefRuntimeParm2, "IEFDB", 
          hstmt_0037921956_1_rs.GetValue(0));
        TreferenceId_013EF = Globdata.GetDBMSData().GetDBMSManager().GetDateTime(IefRuntimeParm2, "IEFDB", 
          hstmt_0037921956_1_rs.GetValue(1));
        TcreateUserid_007EF = Globdata.GetDBMSData().GetDBMSManager().GetString(IefRuntimeParm2, "IEFDB", 
          hstmt_0037921956_1_rs.GetValue(2));
        TupdateUserid_009EF = Globdata.GetDBMSData().GetDBMSManager().GetString(IefRuntimeParm2, "IEFDB", 
          hstmt_0037921956_1_rs.GetValue(3));
        TkeyAttr_001EF = Globdata.GetDBMSData().GetDBMSManager().GetString(IefRuntimeParm2, "IEFDB", hstmt_0037921956_1_rs.GetValue(
          4));
        TsearchAttr_003EF = Globdata.GetDBMSData().GetDBMSManager().GetString(IefRuntimeParm2, "IEFDB", 
          hstmt_0037921956_1_rs.GetValue(5));
        TotherAttr_005EF = Globdata.GetDBMSData().GetDBMSManager().GetString(IefRuntimeParm2, "IEFDB", 
          hstmt_0037921956_1_rs.GetValue(6));
        TotherDate_015EF = Globdata.GetDBMSData().GetDBMSManager().GetDateTime(IefRuntimeParm2, "IEFDB", 
          hstmt_0037921956_1_rs.GetValue(7));
        TotherTime_017EF = Globdata.GetDBMSData().GetDBMSManager().GetDateTime(IefRuntimeParm2, "IEFDB", 
          hstmt_0037921956_1_rs.GetValue(8));
        TotherAmount_019EF = Globdata.GetDBMSData().GetDBMSManager().GetDecimal(IefRuntimeParm2, "IEFDB", 
          hstmt_0037921956_1_rs.GetValue(9));
      } catch( Exception e ) {
        DataException = e;
      }
      
      if ( Globdata.GetDBMSData().GetDBMSManager().WasSuccessful(DataException) )
      {
        f_29360134_movea(  );
        if ( sl_29360134 == ErrorData.LastStatusSucceeds )
        {
          Type_es = ABBase.EvUsable;
        }
        else {
          Type_es = ABBase.EvUnusable;
        }
      }
      else if ( Globdata.GetDBMSData().GetDBMSManager().WasNoDataFound(DataException) )
      {
        sl_29360134 = ErrorData.LastStatusNotFound;
        Type_es = ABBase.EvUnusable;
      }
      else {
        f_29360134_adonet_dberror(  );
      }
    }
    
    public void f_29360134_esc_close(  )
    {
      try {
        if ( hstmt_0037921956_1_rs != null )
        {
          hstmt_0037921956_1_rs.Close(  );
          hstmt_0037921956_1_rs = null;
        }
        if ( hstmt_0037921956_1_cmd != null )
        {
          hstmt_0037921956_1_cmd.Close(  );
          hstmt_0037921956_1_cmd = null;
        }
      } catch( Exception e ) {
        if ( Globdata.GetDBMSData().GetDBMSManager().WasSuccessful(e) == false )
        {
          DataException = e;
          f_29360134_adonet_dberror(  );
        }
      }
    }
    public void f_29360134_close(  )
    {
      Type_es = ABBase.EvUnusable;
    }
    
    public void f_29360134_adonet_dberror(  )
    {
      Globdata.GetErrorData().SetStatus( ErrorData.LastStatusFatalError );
      Globdata.GetDBMSData().SetActionId( 49 );
      if ( DataException != null )
      {
        Globdata.GetErrorData(  ).SetErrorMessage( DataException );
      }
      Globdata.GetErrorData().SetLastStatus( ErrorData.LastStatusDbError );
      sl_29360134 = Globdata.GetErrorData().GetLastStatus();
      throw new ABException();
    }
    
    public void f_29360134_moveb(  )
    {
      TkeyAttrText_002TP = WIa.ImpFromTypeTkeyAttrText;
      TkeyAttrText_003TP = WIa.ImpFilterStartTypeTkeyAttrText;
      TkeyAttrText_004TP = WIa.ImpFilterStopTypeTkeyAttrText;
      TsearchAttrText_005TP = WIa.ImpFilterTypeTsearchAttrText;
      TotherAttrText_006TP = WIa.ImpFilterTypeTotherAttrText;
    }
    
    public void f_29360134_movea(  )
    {
      WEa.TypeTinstanceId = TimestampAttr.ValueOf(TIRS2VW.Execute( IefRuntimeParm1,
      	IefRuntimeParm2,
      	Globdata,
      	"IEFDB",
      	TinstanceId_011EF ));
      WEa.TypeTreferenceId = TimestampAttr.ValueOf(TIRS2VW.Execute( IefRuntimeParm1,
      	IefRuntimeParm2,
      	Globdata,
      	"IEFDB",
      	TreferenceId_013EF ));
      WEa.TypeTcreateUserId = FixedStringAttr.ValueOf(TcreateUserid_007EF, 8);
      WEa.TypeTupdateUserId = FixedStringAttr.ValueOf(TupdateUserid_009EF, 8);
      WEa.TypeTkeyAttrText = FixedStringAttr.ValueOf(TkeyAttr_001EF, 4);
      WEa.TypeTsearchAttrText = FixedStringAttr.ValueOf(TsearchAttr_003EF, 20);
      WEa.TypeTotherAttrText = FixedStringAttr.ValueOf(TotherAttr_005EF, 2);
      WEa.TypeTotherAttrDate = DateAttr.ValueOf(TIRD2VW.Execute( IefRuntimeParm1,
      	IefRuntimeParm2,
      	Globdata,
      	"IEFDB",
      	TotherDate_015EF ));
      WEa.TypeTotherAttrTime = TimeAttr.ValueOf(TIRT2VW.Execute( IefRuntimeParm1,
      	IefRuntimeParm2,
      	Globdata,
      	"IEFDB",
      	TotherTime_017EF ));
      WEa.TypeTotherAttrAmount = DecimalAttr.ValueOf(TIRBDRND.RoundToDecimal(TotherAmount_019EF, 2));
    }
    public void f_173015097_rgvc(  )
    {
      if ( (ExpGroupList_PS_001 > 48) || (ExpGroupList_PS_001 < 1) )
      {
        Globdata.GetErrorData().SetViewOverflow( ErrorData.ErrorEncounteredErrorFound );
        {
          throw new ABException();
        }
      }
    }
  }// end class
  
}

