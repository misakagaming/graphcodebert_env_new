namespace GEN.ORT.YYY
{
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  //
  //                    Source Code Generated by
  //                           CA Gen 8.6
  //
  //    Copyright (c) 2024 CA Technologies. All rights reserved.
  //
  //    Name: SYYY0351_TYPE_LIST               Date: 2024/01/09
  //    Target OS:   CLR                       Time: 13:40:22
  //    Target DBMS: ODBC/ADO.NET              User: AliAl
  //    Access Method: <NONE>         
  //
  //    Generation options:
  //    Debug trace option not selected
  //    Data modeling constraint enforcement not selected
  //    Optimized import view initialization not selected
  //    Enforce default values with DBMS not selected
  //    Init unspecified optional fields to NULL not selected
  //
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // using Statements
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  using System;
  using com.ca.gen.vwrt;
  using com.ca.gen.vwrt.types;
  using com.ca.gen.vwrt.vdf;
  using com.ca.gen.csu.exception;
  
  using com.ca.gen.abrt;
  using com.ca.gen.abrt.functions;
  using com.ca.gen.abrt.cascade;
  using com.ca.gen.abrt.manager;
  using com.ca.gen.abrt.trace;
  using com.ca.gen.exits.common;
  using com.ca.gen.odc;
  using System.Data;
  using System.Collections;
  
  public class SYYY0351 : ABBase
  {
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // IMPORT VIEW CLASS VARIABLE
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    SYYY0351_IA WIa;
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // EXPORT VIEW CLASS VARIABLE
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    SYYY0351_OA WOa;
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // LOCAL VIEW CLASS VARIABLE
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    SYYY0351_LA WLa;
    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // ACTION BLOCK IMPORT/EXPORT VIEWS CLASS VARIABLES
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // Data View Group: TEXTNUM_OA
    // Entity View: EXPORT
    //        Type: TEXTNUM
    StringAttr TextnumOa_ExportTextnumString_FP_032 = StringAttr.GetInstance();
    // Data View Group: TEXTNUM_OA
    // Entity View: EXPORT
    //        Type: TEXTNUM
    StringAttr TextnumOa_ExportTextnumString_FP_033 = StringAttr.GetInstance();
    // Data View Group: TEXTNUM_IA
    // Entity View: IMPORT
    //        Type: TEXTNUM
    DoubleAttr TextnumIa_ImportTextnumNumber_FP_034 = DoubleAttr.GetInstance();
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // REPEATING GROUP VIEW STATUS FIELDS 
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    bool ExpGroupList_FL_001;
    int ExpGroupList_PS_001;
    bool ExpGroupList_RF_001;
    public const int ExpGroupList_MM_001 = 48;
    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // MISC DECLARATIONS AND PROTOTYPES 
    //    FOLLOW AS NEEDED:             
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    bool func_0022020234_esc_flag;
    bool func_0020971661_esc_flag;
    bool func_0020971665_esc_flag;
    bool func_0020972297_esc_flag;
    bool repeat_0066060447_esc_flag;
    bool func_0020972424_esc_flag;
    bool repeat_0066060487_esc_flag;
    bool func_0020971836_esc_flag;
    bool func_0020972089_esc_flag;
    bool func_0020971978_esc_flag;
    bool func_0020971783_esc_flag;
    bool func_0020972003_esc_flag;
    bool func_0020971925_esc_flag;
    bool func_0020972096_esc_flag;
    bool func_0020972196_esc_flag;
    bool func_0020972289_esc_flag;
    bool func_0020972292_esc_flag;
    //       +->   SYYY0351_TYPE_LIST                01/09/2024  13:40
    //       !       IMPORTS:
    //       !         Work View imp_filter iyy1_list (Transient, Mandatory,
    //       !                     Import only)
    //       !           sort_option
    //       !           scroll_type
    //       !           list_direction
    //       !           scroll_amount
    //       !           order_by_field_num
    //       !         Entity View imp_from type (Transient, Mandatory, Import
    //       !                     only)
    //       !           tkey_attr_text
    //       !           tsearch_attr_text
    //       !         Entity View imp_filter_start type (Transient,
    //       !                     Mandatory, Import only)
    //       !           tkey_attr_text
    //       !         Entity View imp_filter_stop type (Transient, Mandatory,
    //       !                     Import only)
    //       !           tkey_attr_text
    //       !         Entity View imp_filter type (Transient, Mandatory,
    //       !                     Import only)
    //       !           tsearch_attr_text
    //       !           tother_attr_text
    //       !       EXPORTS:
    //       !         Group View (48) exp_group_list
    //       !           Entity View exp_g_list type (Transient, Export only)
    //       !             tinstance_id
    //       !             treference_id
    //       !             tcreate_user_id
    //       !             tupdate_user_id
    //       !             tkey_attr_text
    //       !             tsearch_attr_text
    //       !             tother_attr_text
    //       !             tother_attr_date
    //       !             tother_attr_time
    //       !             tother_attr_amount
    //       !         Work View exp_error dont_change_text (Transient, Export
    //       !                     only)
    //       !           text_2
    //       !       LOCALS:
    //       !         Work View loc_filter iyy1_list
    //       !           scroll_type
    //       !
    //       !     PROCEDURE STATEMENTS
    //       !
    //     1 !  NOTE: 
    //     1 !  See the description for the purpose
    //     1 !  
    //     2 !  NOTE: 
    //     2 !  RELEASE HISTORY
    //     2 !  01_00 23-02-1998 New release
    //     2 !  
    //     3 !  NOTE: 
    //     3 !  **************************************************************
    //     3 !  *
    //     3 !  WARNING ! Before GENERATION EXECUTE STATEMENT NUMBER flag
    //     3 !  must be unchecked.
    //     3 !  
    //     4 !  NOTE: 
    //     4 !  **************************************************************
    //     4 !  *
    //     4 !  SIMULATION and EXTERNAL APPLICATION
    //     4 !  The preparation purposes of external AB s, Server test for
    //     4 !  Local tests and Simulation for real time 
    //     4 !  conditions, to-do list and the things to be taken into
    //     4 !  consideration during the preparation, what 
    //     4 !  should be done during the usage are explained in the related
    //     4 !  documents.
    //     4 !  
    //     5 !  NOTE: 
    //     5 !  Special NOTES for LIST AB...
    //     5 !  **************************************************************
    //     5 !  *
    //     5 !  *
    //     5 !  *  Compress CoolGen function usages with NOTEs to make it
    //     5 !  easier to find them in the generated source 
    //     5 !  * and replace them with our own functions.
    //     5 !  *   Replace the CLIENT-PASSWORD used lines with requisite
    //     5 !  COBOL statements.
    //     5 !  *
    //     5 !  **************************************************************
    //     5 !  *
    //     5 !  
    //     6 !  SET exp_error dont_change_text text_2 TO "LE" 
    //     7 !   
    //     8 !  NOTE: 
    //     8 !  ****************************************************************
    //     8 !  END OF Filtering
    //     8 !  
    //     9 !  SET SUBSCRIPT OF exp_group_list TO 0 
    //    10 !  SET loc_filter iyy1_list scroll_type TO imp_filter iyy1_list
    //    10 !              scroll_type 
    //    11 !   
    //    12 !  NOTE: 
    //    12 !  ****************************************************************
    //    12 !  Generate the Key.
    //    12 !  StartBrowse
    //    12 !  
    //    13 !  +->CASE OF imp_filter iyy1_list sort_option
    //    13 !  +> CASE "ASC"
    //    14 !  !  NOTE: 
    //    14 ...**************************************************************
    //    14 ...**
    //    14 ...Read Next
    //    14 ...IF CLIENT-PASSWORD NOT = '*** Was it read correctly? ***'
    //    14 ...
    //    15 !  !  +->IF CLIENT_PASSWORD ^= "*** Hatasız okundu mu ? ***"
    //    16 !  !  !  +=>REPEAT
    //    17 !  !  !  !  +->IF SUBSCRIPT OF exp_group_list < imp_filter
    //    17 !  !  !  !  !        iyy1_list scroll_amount
    //    18 !  !  !  !  !  NOTE: 
    //    18 ...**************************************************************
    //    18 ...**
    //    18 ...IF CLIENT-PASSWORD NOT = '*** Does it satisfy the needed
    //    18 ...criterias? ***'
    //    18 ...
    //    19 !  !  !  !  !  +->IF CLIENT_PASSWORD ^= "*** İstenilen kriterlere
    //    19 !  !  !  !  !  !        uygun mu? ***"
    //    20 !  !  !  !  !  !  +->IF loc_filter iyy1_list scroll_type = "S"
    //    21 !  !  !  !  !  !  !  SET loc_filter iyy1_list scroll_type TO
    //    21 !  !  !  !  !  !  !              SPACES 
    //    20 !  !  !  !  !  !  +> ELSE
    //    22 !  !  !  !  !  !  !  SET SUBSCRIPT OF exp_group_list TO SUBSCRIPT
    //    22 !  !  !  !  !  !  !              OF exp_group_list + 1 
    //    23 !  !  !  !  !  !  !  NOTE: 
    //    23 ...**************************************************************
    //    23 ...**
    //    23 ...The lines to be changed in Host COBOL source has STARTED
    //    23 ...
    //    24 !  !  !  !  !  !  !  SET exp_g_list type tkey_attr_text TO
    //    24 !  !  !  !  !  !  !              textnum(SUBSCRIPT OF
    //    24 !  !  !  !  !  !  !              exp_group_list) 
    //    25 !  !  !  !  !  !  !  SET exp_g_list type tsearch_attr_text TO
    //    25 !  !  !  !  !  !  !              "TSEARCH..........ASC" 
    //    26 !  !  !  !  !  !  !  SET exp_g_list type tinstance_id TO
    //    26 !  !  !  !  !  !  !              CURRENT_TIMESTAMP 
    //    27 !  !  !  !  !  !  !  NOTE: 
    //    27 ...**************************************************************
    //    27 ...**
    //    27 ...The lines to be changed in Host COBOL source has ENDED
    //    27 ...
    //    20 !  !  !  !  !  !  +--
    //    19 !  !  !  !  !  +--
    //    28 !  !  !  !  !  NOTE: 
    //    28 ...**************************************************************
    //    28 ...**
    //    28 ...if FileKey > File-Key-Stop
    //    28 ...  EIBRESP = DFHRESP (ENDFILE)
    //    28 ...else
    //    28 ...  Read Next
    //    28 ...end if
    //    28 ...if TEKNIK HATA then GOBACK
    //    28 ...IF CLIENT-PASSWORD = '*** Endfile ***'
    //    28 ...
    //    29 !  !  !  !  !  +->IF CLIENT_PASSWORD = "*** Endfile ***"
    //    30 !  !  ! <---------ESCAPE
    //    29 !  !  !  !  !  +--
    //    17 !  !  !  !  +> ELSE
    //    31 !  !  !  !  !  SET exp_error dont_change_text text_2 TO "LF" 
    //    32 !  !  ! <------ESCAPE
    //    17 !  !  !  !  +--
    //    16 !  !  !  +--UNTIL SUBSCRIPT OF exp_group_list > 999
    //    15 !  !  +--
    //    13 !  +> CASE "DES"
    //    33 !  !  NOTE: 
    //    33 ...**************************************************************
    //    33 ...**
    //    33 ...if NOTFOUND then
    //    33 ...   set KEY = X'FFFF..FF'
    //    33 ...   Start Browse
    //    33 ...else
    //    33 ...   Read Next
    //    33 ...end if
    //    33 ...Read Prev
    //    33 ...IF CLIENT-PASSWORD NOT = '*** Was it read correctly? ***'
    //    33 ...
    //    34 !  !  +->IF CLIENT_PASSWORD ^= "*** Hatasız okundu mu ? ***"
    //    35 !  !  !  +=>REPEAT
    //    36 !  !  !  !  +->IF SUBSCRIPT OF exp_group_list < imp_filter
    //    36 !  !  !  !  !        iyy1_list scroll_amount
    //    37 !  !  !  !  !  NOTE: 
    //    37 ...**************************************************************
    //    37 ...**
    //    37 ...IF CLIENT-PASSWORD NOT = '*** Does it satisfy the needed
    //    37 ...criterias? ***'
    //    37 ...
    //    38 !  !  !  !  !  +->IF CLIENT_PASSWORD ^= "*** İstenilen kriterlere
    //    38 !  !  !  !  !  !        uygun mu? ***"
    //    39 !  !  !  !  !  !  +->IF loc_filter iyy1_list scroll_type = "S"
    //    40 !  !  !  !  !  !  !  SET loc_filter iyy1_list scroll_type TO
    //    40 !  !  !  !  !  !  !              SPACES 
    //    39 !  !  !  !  !  !  +> ELSE
    //    41 !  !  !  !  !  !  !  SET SUBSCRIPT OF exp_group_list TO SUBSCRIPT
    //    41 !  !  !  !  !  !  !              OF exp_group_list + 1 
    //    42 !  !  !  !  !  !  !  NOTE: 
    //    42 ...**************************************************************
    //    42 ...**
    //    42 ...The lines to be changed in Host COBOL source has STARTED
    //    42 ...
    //    43 !  !  !  !  !  !  !  SET exp_g_list type tkey_attr_text TO
    //    43 !  !  !  !  !  !  !              textnum(1000 - SUBSCRIPT OF
    //    43 !  !  !  !  !  !  !              exp_group_list) 
    //    44 !  !  !  !  !  !  !  SET exp_g_list type tsearch_attr_text TO
    //    44 !  !  !  !  !  !  !              "TSEARCH..........DES" 
    //    45 !  !  !  !  !  !  !  SET exp_g_list type tinstance_id TO
    //    45 !  !  !  !  !  !  !              CURRENT_TIMESTAMP 
    //    46 !  !  !  !  !  !  !  NOTE: 
    //    46 ...**************************************************************
    //    46 ...**
    //    46 ...The lines to be changed in Host COBOL source has ENDED
    //    46 ...
    //    39 !  !  !  !  !  !  +--
    //    38 !  !  !  !  !  +--
    //    47 !  !  !  !  !  NOTE: 
    //    47 ...**************************************************************
    //    47 ...**
    //    47 ...if FileKey < File-Key-Start
    //    47 ...  EIBRESP = DFHRESP (ENDFILE)
    //    47 ...else
    //    47 ...  Read Prev
    //    47 ...end if
    //    47 ...if TEKNIK HATA then GOBACK
    //    47 ...IF CLIENT-PASSWORD = '*** Endfile ***'
    //    47 ...
    //    48 !  !  !  !  !  +->IF CLIENT_PASSWORD = "*** Endfile ***"
    //    49 !  !  ! <---------ESCAPE
    //    48 !  !  !  !  !  +--
    //    36 !  !  !  !  +> ELSE
    //    50 !  !  !  !  !  SET exp_error dont_change_text text_2 TO "LF" 
    //    51 !  !  ! <------ESCAPE
    //    36 !  !  !  !  +--
    //    35 !  !  !  +--UNTIL SUBSCRIPT OF exp_group_list > 999
    //    34 !  !  +--
    //    13 !  +> OTHERWISE
    //    13 !  +--
    //    52 !  +->IF LAST OF exp_group_list <= 0
    //    53 !  !  SET exp_error dont_change_text text_2 TO "LE" 
    //    52 !  +--
    //       +---
    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    //  CONSTRUCTOR FOR THE CLASS       
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    public SYYY0351(  )
    {
      IefCGenRlse = "CA Gen 8.6";
      IsCopyright = "Copyright (c) 2024 CA Technologies. All rights reserved.";
      IefCGenDate = "2024/01/09";
      IefCGenTime = "13:40:22";
      IefCGenEncy = "9.2.A6";
      IefCGenUserId = "AliAl";
      IefCGenModel = "N8I_ORT_YYY_0112_TEMPLATE";
      IefCGenSubset = "ALL";
      IefCGenName = "SYYY0351_TYPE_LIST";
      NestingLevel = 0;
      ValChkDeadlockTimeout = false;
      ValChkDBError = false;
    }
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // ACTION BLOCK FUNCTION DECLARATIONS 
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    
    public void Execute( Object in_runtime_parm1, 
    	IRuntimePStepContext in_runtime_parm2, 
    	GlobData in_globdata, 
    	SYYY0351_IA import_view, 
    	SYYY0351_OA export_view )
    {
      IefRuntimeParm1 = in_runtime_parm1;
      IefRuntimeParm2 = in_runtime_parm2;
      Globdata = in_globdata;
      WIa = import_view;
      WOa = export_view;
      _Execute();
    }
    
    private void _Execute()
    {
      
      f_22020234_localAlloc( "SYYY0351_TYPE_LIST" );
      if ( Globdata.GetErrorData().GetLastStatus() == ErrorData.LastStatusIefAllocationError )
      	return;
      
      ++(NestingLevel);
      try {
        f_22020234_init(  );
        f_22020234(  );
      } catch( Exception e ) {
        if ( ((Globdata.GetErrorData().GetStatus() == ErrorData.StatusNone) && (Globdata.GetErrorData().GetErrorEncountered() == 
          ErrorData.ErrorEncounteredNoErrorFound)) && (Globdata.GetErrorData().GetViewOverflow() == 
          ErrorData.ErrorEncounteredNoErrorFound) )
        {
          Globdata.GetErrorData().SetStatus( ErrorData.LastStatusFatalError );
          Globdata.GetErrorData().SetLastStatus( ErrorData.LastStatusUnexpectedExceptionError );
          Globdata.GetErrorData().SetErrorEncountered( ErrorData.ErrorEncounteredErrorFound );
          Globdata.GetErrorData(  ).SetErrorMessage( e );
        }
      }
      --(NestingLevel);
    }
    public void f_22020234(  )
    {
      func_0022020234_esc_flag = false;
      Globdata.GetStateData().SetCurrentABId( "0022020234" );
      Globdata.GetStateData().SetCurrentABName( "SYYY0351_TYPE_LIST" );
      Globdata.GetStateData().SetLastStatementNumber( "0000000000" );
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    See the description for the purpose                             
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    RELEASE HISTORY                                                 
      //    01_00 23-02-1998 New release                                    
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    **************************************************************  
      //    *                                                               
      //    WARNING ! Before GENERATION EXECUTE STATEMENT NUMBER flag       
      //    must be unchecked.                                              
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    **************************************************************  
      //    *                                                               
      //    SIMULATION and EXTERNAL APPLICATION                             
      //    The preparation purposes of external AB s, Server test for      
      //    Local tests and Simulation for real time                        
      //    conditions, to-do list and the things to be taken into          
      //    consideration during the preparation, what                      
      //    should be done during the usage are explained in the related    
      //    documents.                                                      
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    Special NOTES for LIST AB...                                    
      //    **************************************************************  
      //    *                                                               
      //    *                                                               
      //    *  Compress CoolGen function usages with NOTEs to make it       
      //    easier to find them in the generated source                     
      //    * and replace them with our own functions.                      
      //    *   Replace the CLIENT-PASSWORD used lines with requisite       
      //    COBOL statements.                                               
      //    *                                                               
      //    **************************************************************  
      //    *                                                               
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      // Globdata.GetStateData().SetLastStatementNumber( "0000000006" );
      WOa.ExpErrorDontChangeTextText2 = FixedStringAttr.ValueOf("LE", 2);
      
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    **************************************************************  
      //    **                                                              
      //    END OF Filtering                                                
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      // Globdata.GetStateData().SetLastStatementNumber( "0000000009" );
      ExpGroupList_PS_001 = (int)TIRD2DEC.Execute1(0, 0, TIRD2DEC.ROUND_NONE, 0);
      if ( (ExpGroupList_PS_001 > WOa.ExpGroupList_MA) && (ExpGroupList_PS_001 <= 48) )
      WOa.ExpGroupList_MA = IntAttr.ValueOf(ExpGroupList_PS_001);
      // Globdata.GetStateData().SetLastStatementNumber( "0000000010" );
      WLa.LocFilterIyy1ListScrollType = FixedStringAttr.ValueOf(WIa.ImpFilterIyy1ListScrollType, 1);
      
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    **************************************************************  
      //    **                                                              
      //    Generate the Key.                                               
      //    StartBrowse                                                     
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      // Globdata.GetStateData().SetLastStatementNumber( "0000000013" );
      if ( CompareExit.CompareTo(WIa.ImpFilterIyy1ListSortOption, "ASC") == 0 )
      {
        // Globdata.GetStateData().SetLastSubStatementNumber( "1" );
        {
          f_20971661(  );
        }
      }
      else if ( CompareExit.CompareTo(WIa.ImpFilterIyy1ListSortOption, "DES") == 0 )
      {
        // Globdata.GetStateData().SetLastSubStatementNumber( "2" );
        {
          f_20971665(  );
        }
      }
      else {
        // Globdata.GetStateData().SetLastSubStatementNumber( "3" );
        {
          // Empty statement here.
          ;
        }
      }
      // Globdata.GetStateData().SetLastStatementNumber( "0000000052" );
      if ( ((double)WOa.ExpGroupList_MA <= 0) )
      {
        // Globdata.GetStateData().SetLastStatementNumber( "0000000053" );
        WOa.ExpErrorDontChangeTextText2 = FixedStringAttr.ValueOf("LE", 2);
      }
      
      return;
    }
    
    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // SUBORDINATE FUNCTIONS
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    
    
    public void f_20971661(  )
    {
      func_0020971661_esc_flag = false;
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    **************************************************************  
      //    **                                                              
      //    Read Next                                                       
      //    IF CLIENT-PASSWORD NOT = '*** Was it read correctly? ***'       
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      // Globdata.GetStateData().SetLastStatementNumber( "0000000015" );
      if ( CompareExit.CompareTo(Globdata.GetStateData().GetClientPassword(), "*** Hatasız okundu mu ? ***") != 0 )
      {
        f_20972297(  );
      }
      
      return;
    }
    
    public void f_20971665(  )
    {
      func_0020971665_esc_flag = false;
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    **************************************************************  
      //    **                                                              
      //    if NOTFOUND then                                                
      //       set KEY = X'FFFF..FF'                                        
      //       Start Browse                                                 
      //    else                                                            
      //       Read Next                                                    
      //    end if                                                          
      //    Read Prev                                                       
      //    IF CLIENT-PASSWORD NOT = '*** Was it read correctly? ***'       
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      // Globdata.GetStateData().SetLastStatementNumber( "0000000034" );
      if ( CompareExit.CompareTo(Globdata.GetStateData().GetClientPassword(), "*** Hatasız okundu mu ? ***") != 0 )
      {
        f_20972424(  );
      }
      
      return;
    }
    
    public void f_20972297(  )
    {
      func_0020972297_esc_flag = false;
      {
        // Globdata.GetStateData().SetLastStatementNumber( "0000000016" );
        // Globdata.GetStateData().SetLastSubStatementNumber( "1" );
        repeat_0066060447_esc_flag = false;
        do
        {
          {
            f_20971836(  );
          }
          // Globdata.GetStateData().SetLastStatementNumber( "0000000016" );
          // Globdata.GetStateData().SetLastStatementNumber( "0000000016" );
        }
      while ((!(((double)ExpGroupList_PS_001 > 999))) && (repeat_0066060447_esc_flag != true));}
      f_0020972297_esctag: 
      ;
      return;
    }
    
    public void f_20972424(  )
    {
      func_0020972424_esc_flag = false;
      {
        // Globdata.GetStateData().SetLastStatementNumber( "0000000035" );
        // Globdata.GetStateData().SetLastSubStatementNumber( "1" );
        repeat_0066060487_esc_flag = false;
        do
        {
          {
            f_20972089(  );
          }
          // Globdata.GetStateData().SetLastStatementNumber( "0000000035" );
          // Globdata.GetStateData().SetLastStatementNumber( "0000000035" );
        }
      while ((!(((double)ExpGroupList_PS_001 > 999))) && (repeat_0066060487_esc_flag != true));}
      f_0020972424_esctag: 
      ;
      return;
    }
    
    public void f_20971836(  )
    {
      func_0020971836_esc_flag = false;
      {
        // Globdata.GetStateData().SetLastStatementNumber( "0000000017" );
        if ( (ExpGroupList_PS_001 < (double) WIa.ImpFilterIyy1ListScrollAmount) )
        {
          f_20971978(  );
        }
        else 
        {
          // Globdata.GetStateData().SetLastSubStatementNumber( "1" );
          {
            f_20971783(  );
          }
        }
        
      }
      f_0020971836_esctag: 
      ;
      return;
    }
    
    public void f_20972089(  )
    {
      func_0020972089_esc_flag = false;
      {
        // Globdata.GetStateData().SetLastStatementNumber( "0000000036" );
        if ( (ExpGroupList_PS_001 < (double) WIa.ImpFilterIyy1ListScrollAmount) )
        {
          f_20972003(  );
        }
        else 
        {
          // Globdata.GetStateData().SetLastSubStatementNumber( "1" );
          {
            f_20971925(  );
          }
        }
        
      }
      f_0020972089_esctag: 
      ;
      return;
    }
    
    public void f_20971978(  )
    {
      func_0020971978_esc_flag = false;
      {
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        //    **************************************************************  
        //    **                                                              
        //    IF CLIENT-PASSWORD NOT = '*** Does it satisfy the needed        
        //    criterias? ***'                                                 
        //                                                                    
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        // Globdata.GetStateData().SetLastStatementNumber( "0000000019" );
        if ( CompareExit.CompareTo(Globdata.GetStateData().GetClientPassword(), "*** İstenilen kriterlere uygun mu? ***") != 0 )
        {
          f_20972096(  );
        }
        
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        //    **************************************************************  
        //    **                                                              
        //    if FileKey > File-Key-Stop                                      
        //      EIBRESP = DFHRESP (ENDFILE)                                   
        //    else                                                            
        //      Read Next                                                     
        //    end if                                                          
        //    if TEKNIK HATA then GOBACK                                      
        //    IF CLIENT-PASSWORD = '*** Endfile ***'                          
        //                                                                    
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        // Globdata.GetStateData().SetLastStatementNumber( "0000000029" );
        if ( CompareExit.CompareTo(Globdata.GetStateData().GetClientPassword(), "*** Endfile ***") == 0 )
        {
          f_20972196(  );
        }
        
      }
      f_0020971978_esctag: 
      ;
      return;
    }
    
    public void f_20971783(  )
    {
      func_0020971783_esc_flag = false;
      {
        // Globdata.GetStateData().SetLastStatementNumber( "0000000031" );
        WOa.ExpErrorDontChangeTextText2 = FixedStringAttr.ValueOf("LF", 2);
        // Globdata.GetStateData().SetLastStatementNumber( "0000000032" );
        func_0020971783_esc_flag = true;
        func_0020971836_esc_flag = true;
        repeat_0066060447_esc_flag = true;
      }
      f_0020971783_esctag: 
      ;
      return;
    }
    
    public void f_20972003(  )
    {
      func_0020972003_esc_flag = false;
      {
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        //    **************************************************************  
        //    **                                                              
        //    IF CLIENT-PASSWORD NOT = '*** Does it satisfy the needed        
        //    criterias? ***'                                                 
        //                                                                    
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        // Globdata.GetStateData().SetLastStatementNumber( "0000000038" );
        if ( CompareExit.CompareTo(Globdata.GetStateData().GetClientPassword(), "*** İstenilen kriterlere uygun mu? ***") != 0 )
        {
          f_20972289(  );
        }
        
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        //    **************************************************************  
        //    **                                                              
        //    if FileKey < File-Key-Start                                     
        //      EIBRESP = DFHRESP (ENDFILE)                                   
        //    else                                                            
        //      Read Prev                                                     
        //    end if                                                          
        //    if TEKNIK HATA then GOBACK                                      
        //    IF CLIENT-PASSWORD = '*** Endfile ***'                          
        //                                                                    
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        // Globdata.GetStateData().SetLastStatementNumber( "0000000048" );
        if ( CompareExit.CompareTo(Globdata.GetStateData().GetClientPassword(), "*** Endfile ***") == 0 )
        {
          f_20972292(  );
        }
        
      }
      f_0020972003_esctag: 
      ;
      return;
    }
    
    public void f_20971925(  )
    {
      func_0020971925_esc_flag = false;
      {
        // Globdata.GetStateData().SetLastStatementNumber( "0000000050" );
        WOa.ExpErrorDontChangeTextText2 = FixedStringAttr.ValueOf("LF", 2);
        // Globdata.GetStateData().SetLastStatementNumber( "0000000051" );
        func_0020971925_esc_flag = true;
        func_0020972089_esc_flag = true;
        repeat_0066060487_esc_flag = true;
      }
      f_0020971925_esctag: 
      ;
      return;
    }
    
    public void f_20972096(  )
    {
      func_0020972096_esc_flag = false;
      // Globdata.GetStateData().SetLastStatementNumber( "0000000020" );
      if ( CompareExit.CompareTo(WLa.LocFilterIyy1ListScrollType, "S") == 0 )
      {
        // Globdata.GetStateData().SetLastStatementNumber( "0000000021" );
        WLa.LocFilterIyy1ListScrollType = FixedStringAttr.ValueOf(Spaces, 1);
      }
      else 
      {
        // Globdata.GetStateData().SetLastSubStatementNumber( "1" );
        {
          // Globdata.GetStateData().SetLastStatementNumber( "0000000022" );
          ExpGroupList_PS_001 = (int)TIRD2DEC.Execute1(((double)ExpGroupList_PS_001 + 1), 0, TIRD2DEC.ROUND_NONE, 0);
          if ( (ExpGroupList_PS_001 > WOa.ExpGroupList_MA) && (ExpGroupList_PS_001 <= 48) )
          WOa.ExpGroupList_MA = IntAttr.ValueOf(ExpGroupList_PS_001);
          // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
          //    **************************************************************  
          //    **                                                              
          //    The lines to be changed in Host COBOL source has STARTED        
          //                                                                    
          // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
          // Globdata.GetStateData().SetLastStatementNumber( "0000000024" );
          StringAttr.Reset( TextnumOa_ExportTextnumString_FP_032 );
          Globdata.GetErrorData().SetErrorEncountered( ErrorData.ErrorEncounteredNoErrorFound );
          TIRFCHR.Execute( IefRuntimeParm1,
          	IefRuntimeParm2,
          	Globdata,
          	(double)ExpGroupList_PS_001,
          	TextnumOa_ExportTextnumString_FP_032 );
          if ( ((Globdata.GetErrorData().GetStatus() != ErrorData.StatusNone) || (Globdata.GetErrorData().GetErrorEncountered() != 
            ErrorData.ErrorEncounteredNoErrorFound)) || (Globdata.GetErrorData().GetViewOverflow() != 
            ErrorData.ErrorEncounteredNoErrorFound) )
          {
            throw new ABException();
          }
          WOa.ExpGListTypeTkeyAttrText[ExpGroupList_PS_001-1] = FixedStringAttr.ValueOf(TIRRJUST.TIRRJUS2(
            TextnumOa_ExportTextnumString_FP_032.Get(), 4), 4);
          f_173015053_rgvc(  );
          // Globdata.GetStateData().SetLastStatementNumber( "0000000025" );
          WOa.ExpGListTypeTsearchAttrText[ExpGroupList_PS_001-1] = FixedStringAttr.ValueOf("TSEARCH..........ASC", 20);
          f_173015053_rgvc(  );
          // Globdata.GetStateData().SetLastStatementNumber( "0000000026" );
          if ( TodaysTimestamp == null )
          {
            TodaysTimestamp = StringAttr.GetInstance();
          }
          if ( TodaysTime == null )
          {
            TodaysTime = IntAttr.GetInstance();
          }
          if ( TodaysDate == null )
          {
            TodaysDate = IntAttr.GetInstance();
          }
          TIRDAT2.GetSystemTimestamp( TodaysTimestamp );
          TIRDAT2.GetSystemDate( TodaysDate,
          	TIRDAT2.DF_YYYYMMDD );
          TIRDAT2.GetSystemTime( TodaysTime,
          	TIRDAT2.TF_HHMMSS );
          WOa.ExpGListTypeTinstanceId[ExpGroupList_PS_001-1] = TimestampAttr.ValueOf(TodaysTimestamp.Get());
          f_173015053_rgvc(  );
          // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
          //    **************************************************************  
          //    **                                                              
          //    The lines to be changed in Host COBOL source has ENDED          
          //                                                                    
          // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        }
      }
      
      return;
    }
    
    public void f_20972196(  )
    {
      func_0020972196_esc_flag = false;
      {
        // Globdata.GetStateData().SetLastStatementNumber( "0000000030" );
        func_0020972196_esc_flag = true;
        func_0020971978_esc_flag = true;
        func_0020971836_esc_flag = true;
        repeat_0066060447_esc_flag = true;
      }
      f_0020972196_esctag: 
      ;
      return;
    }
    
    public void f_20972289(  )
    {
      func_0020972289_esc_flag = false;
      // Globdata.GetStateData().SetLastStatementNumber( "0000000039" );
      if ( CompareExit.CompareTo(WLa.LocFilterIyy1ListScrollType, "S") == 0 )
      {
        // Globdata.GetStateData().SetLastStatementNumber( "0000000040" );
        WLa.LocFilterIyy1ListScrollType = FixedStringAttr.ValueOf(Spaces, 1);
      }
      else 
      {
        // Globdata.GetStateData().SetLastSubStatementNumber( "1" );
        {
          // Globdata.GetStateData().SetLastStatementNumber( "0000000041" );
          ExpGroupList_PS_001 = (int)TIRD2DEC.Execute1(((double)ExpGroupList_PS_001 + 1), 0, TIRD2DEC.ROUND_NONE, 0);
          if ( (ExpGroupList_PS_001 > WOa.ExpGroupList_MA) && (ExpGroupList_PS_001 <= 48) )
          WOa.ExpGroupList_MA = IntAttr.ValueOf(ExpGroupList_PS_001);
          // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
          //    **************************************************************  
          //    **                                                              
          //    The lines to be changed in Host COBOL source has STARTED        
          //                                                                    
          // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
          // Globdata.GetStateData().SetLastStatementNumber( "0000000043" );
          StringAttr.Reset( TextnumOa_ExportTextnumString_FP_033 );
          Globdata.GetErrorData().SetErrorEncountered( ErrorData.ErrorEncounteredNoErrorFound );
          TIRFCHR.Execute( IefRuntimeParm1,
          	IefRuntimeParm2,
          	Globdata,
          	(double)((double)1000 - ExpGroupList_PS_001),
          	TextnumOa_ExportTextnumString_FP_033 );
          if ( ((Globdata.GetErrorData().GetStatus() != ErrorData.StatusNone) || (Globdata.GetErrorData().GetErrorEncountered() != 
            ErrorData.ErrorEncounteredNoErrorFound)) || (Globdata.GetErrorData().GetViewOverflow() != 
            ErrorData.ErrorEncounteredNoErrorFound) )
          {
            throw new ABException();
          }
          WOa.ExpGListTypeTkeyAttrText[ExpGroupList_PS_001-1] = FixedStringAttr.ValueOf(TIRRJUST.TIRRJUS2(
            TextnumOa_ExportTextnumString_FP_033.Get(), 4), 4);
          f_173015053_rgvc(  );
          // Globdata.GetStateData().SetLastStatementNumber( "0000000044" );
          WOa.ExpGListTypeTsearchAttrText[ExpGroupList_PS_001-1] = FixedStringAttr.ValueOf("TSEARCH..........DES", 20);
          f_173015053_rgvc(  );
          // Globdata.GetStateData().SetLastStatementNumber( "0000000045" );
          if ( TodaysTimestamp == null )
          {
            TodaysTimestamp = StringAttr.GetInstance();
          }
          if ( TodaysTime == null )
          {
            TodaysTime = IntAttr.GetInstance();
          }
          if ( TodaysDate == null )
          {
            TodaysDate = IntAttr.GetInstance();
          }
          TIRDAT2.GetSystemTimestamp( TodaysTimestamp );
          TIRDAT2.GetSystemDate( TodaysDate,
          	TIRDAT2.DF_YYYYMMDD );
          TIRDAT2.GetSystemTime( TodaysTime,
          	TIRDAT2.TF_HHMMSS );
          WOa.ExpGListTypeTinstanceId[ExpGroupList_PS_001-1] = TimestampAttr.ValueOf(TodaysTimestamp.Get());
          f_173015053_rgvc(  );
          // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
          //    **************************************************************  
          //    **                                                              
          //    The lines to be changed in Host COBOL source has ENDED          
          //                                                                    
          // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        }
      }
      
      return;
    }
    
    public void f_20972292(  )
    {
      func_0020972292_esc_flag = false;
      {
        // Globdata.GetStateData().SetLastStatementNumber( "0000000049" );
        func_0020972292_esc_flag = true;
        func_0020972003_esc_flag = true;
        func_0020972089_esc_flag = true;
        repeat_0066060487_esc_flag = true;
      }
      f_0020972292_esctag: 
      ;
      return;
    }
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // INITIALIZATION UTILITY FUNCTIONS 
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    
    public void f_22020234_localAlloc( String abname )
    {
      // Request localview allocation 
      WLa = (GEN.ORT.YYY.SYYY0351_LA)(IefRuntimeParm2.GetInstance( GetType().Assembly,
      	"GEN.ORT.YYY.SYYY0351_LA" ));
      if ( WLa == null )
      {
        Globdata.GetStateData().SetCurrentABId( "0022020234" );
        Globdata.GetStateData().SetCurrentABName( abname );
        Globdata.GetErrorData().SetErrorEncountered( ErrorData.ErrorEncounteredErrorFound );
        Globdata.GetErrorData().SetLastStatus( ErrorData.LastStatusIefAllocationError );
      }
    }
    
    public void f_22020234_init(  )
    {
      if ( NestingLevel < 2 )
      {
        WLa.Reset();
      }
      WOa.ExpGroupList_MA = 0;
      for(ExpGroupList_PS_001 = 1; ExpGroupList_PS_001 <= 48; ++(ExpGroupList_PS_001))
      {
        WOa.ExpGListTypeTinstanceId[ExpGroupList_PS_001-1] = "00000000000000000000";
        WOa.ExpGListTypeTreferenceId[ExpGroupList_PS_001-1] = "00000000000000000000";
        WOa.ExpGListTypeTcreateUserId[ExpGroupList_PS_001-1] = "        ";
        WOa.ExpGListTypeTupdateUserId[ExpGroupList_PS_001-1] = "        ";
        WOa.ExpGListTypeTkeyAttrText[ExpGroupList_PS_001-1] = "    ";
        WOa.ExpGListTypeTsearchAttrText[ExpGroupList_PS_001-1] = "                    ";
        WOa.ExpGListTypeTotherAttrText[ExpGroupList_PS_001-1] = "  ";
        WOa.ExpGListTypeTotherAttrDate[ExpGroupList_PS_001-1] = 00000000;
        WOa.ExpGListTypeTotherAttrTime[ExpGroupList_PS_001-1] = 00000000;
        WOa.ExpGListTypeTotherAttrAmount[ExpGroupList_PS_001-1] = DecimalAttr.GetDefaultValue();
      }
      WOa.ExpErrorDontChangeTextText2 = "  ";
      ExpGroupList_PS_001 = 1;
    }
    public void f_173015053_rgvc(  )
    {
      if ( (ExpGroupList_PS_001 > 48) || (ExpGroupList_PS_001 < 1) )
      {
        Globdata.GetErrorData().SetViewOverflow( ErrorData.ErrorEncounteredErrorFound );
        {
          throw new ABException();
        }
      }
    }
  }// end class
  
}

