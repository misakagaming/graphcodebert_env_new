namespace GEN.ORT.YYY
{
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  //
  //                    Source Code Generated by
  //                           CA Gen 8.6
  //
  //    Copyright (c) 2024 CA Technologies. All rights reserved.
  //
  //    Name: CYYY0251_CHILD_LIST              Date: 2024/01/09
  //    Target OS:   CLR                       Time: 13:41:10
  //    Target DBMS: ODBC/ADO.NET              User: AliAl
  //    Access Method: <NONE>         
  //
  //    Generation options:
  //    Debug trace option not selected
  //    Data modeling constraint enforcement not selected
  //    Optimized import view initialization not selected
  //    Enforce default values with DBMS not selected
  //    Init unspecified optional fields to NULL not selected
  //
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // using Statements
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  using System;
  using com.ca.gen.vwrt;
  using com.ca.gen.vwrt.types;
  using com.ca.gen.vwrt.vdf;
  using com.ca.gen.csu.exception;
  
  using com.ca.gen.abrt;
  using com.ca.gen.abrt.functions;
  using com.ca.gen.abrt.cascade;
  using com.ca.gen.abrt.manager;
  using com.ca.gen.abrt.trace;
  using com.ca.gen.exits.common;
  using com.ca.gen.odc;
  using System.Data;
  using System.Collections;
  
  public class CYYY0251 : ABBase
  {
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // IMPORT VIEW CLASS VARIABLE
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    CYYY0251_IA WIa;
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // EXPORT VIEW CLASS VARIABLE
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    CYYY0251_OA WOa;
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // LOCAL VIEW CLASS VARIABLE
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    CYYY0251_LA WLa;
    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // ACTION BLOCK IMPORT/EXPORT VIEWS CLASS VARIABLES
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // Data Structure for string function
    // Data View Group: Workarea001
    //      DVG id name: Workarea001_oa
    // Entity View: EXPORT
    //        Type: STORAGE
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    StringAttr Workarea001Oa_output_string_FP_001 = StringAttr.GetInstance();
    
    // Data View Group: Workarea002
    //      DVG id name: Workarea002_oa
    // Entity View: EXPORT
    //        Type: STORAGE
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    StringAttr Workarea002Oa_output_string_FP_002 = StringAttr.GetInstance();
    
    GEN.ORT.YYY.CYYY9001_OA Cyyy9001Oa;
    GEN.ORT.YYY.CYYY9141_IA Cyyy9141Ia;
    GEN.ORT.YYY.CYYY9141_OA Cyyy9141Oa;
    GEN.ORT.YYY.DYYY0251_IA Dyyy0251Ia;
    GEN.ORT.YYY.DYYY0251_OA Dyyy0251Oa;
    // Data View Group: TRIM_IA
    // Entity View: IMPORT
    //        Type: TRIM
    StringAttr TrimIa_ImportTrimInputString_FP_152 = StringAttr.GetInstance();
    // Data View Group: CONCAT_IA
    // Entity View: IMPORT
    //        Type: CONCAT
    StringAttr ConcatIa_ImportConcatString1_FP_153 = StringAttr.GetInstance();
    StringAttr ConcatIa_ImportConcatString2_FP_153 = StringAttr.GetInstance();
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // REPEATING GROUP VIEW STATUS FIELDS 
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    bool ExpGroupList_FL_001;
    int ExpGroupList_PS_001;
    bool ExpGroupList_RF_001;
    public const int ExpGroupList_MM_001 = 48;
    bool LocGroupList_FL_002;
    int LocGroupList_PS_002;
    bool LocGroupList_RF_002;
    public const int LocGroupList_MM_002 = 48;
    bool LocGroupContext_FL_003;
    int LocGroupContext_PS_003;
    bool LocGroupContext_RF_003;
    public const int LocGroupContext_MM_003 = 9;
    bool ImpGroupContext_FL_004;
    int ImpGroupContext_PS_004;
    bool ImpGroupContext_RF_004;
    public const int ImpGroupContext_MM_004 = 9;
    bool ExpGroupList_FL_005;
    int ExpGroupList_PS_005;
    bool ExpGroupList_RF_005;
    public const int ExpGroupList_MM_005 = 48;
    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // MISC DECLARATIONS AND PROTOTYPES 
    //    FOLLOW AS NEEDED:             
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    bool func_0022020126_esc_flag;
    bool func_0020971646_esc_flag;
    bool func_0020972420_esc_flag;
    bool func_0020972175_esc_flag;
    bool func_0020971876_esc_flag;
    bool func_0020972923_esc_flag;
    bool func_0020971767_esc_flag;
    bool func_0020972801_esc_flag;
    bool func_0020971719_esc_flag;
    bool func_0020972331_esc_flag;
    bool repeat_0066060319_esc_flag;
    bool func_0020972001_esc_flag;
    bool func_0020972693_esc_flag;
    //       +->   CYYY0251_CHILD_LIST               01/09/2024  13:41
    //       !       IMPORTS:
    //       !         Work View imp_filter iyy1_list (Transient, Mandatory,
    //       !                     Import only)
    //       !           sort_option
    //       !           scroll_type
    //       !           list_direction
    //       !           scroll_amount
    //       !           order_by_field_num
    //       !         Entity View imp_from child (Transient, Mandatory,
    //       !                     Import only)
    //       !           cinstance_id
    //       !           cparent_pkey_attr_text
    //       !           ckey_attr_num
    //       !         Entity View imp_filter_start child (Transient,
    //       !                     Mandatory, Import only)
    //       !           cparent_pkey_attr_text
    //       !           ckey_attr_num
    //       !         Entity View imp_filter_stop child (Transient,
    //       !                     Mandatory, Import only)
    //       !           cparent_pkey_attr_text
    //       !           ckey_attr_num
    //       !         Entity View imp_filter child (Transient, Mandatory,
    //       !                     Import only)
    //       !           csearch_attr_text
    //       !       EXPORTS:
    //       !         Group View (48) exp_group_list
    //       !           Entity View exp_g_list child (Transient, Export only)
    //       !             cinstance_id
    //       !             creference_id
    //       !             cparent_pkey_attr_text
    //       !             ckey_attr_num
    //       !             csearch_attr_text
    //       !             cother_attr_text
    //       !         Work View exp_error iyy1_component (Transient, Export
    //       !                     only)
    //       !           severity_code
    //       !           rollback_indicator
    //       !           origin_servid
    //       !           context_string
    //       !           return_code
    //       !           reason_code
    //       !           checksum
    //       !       LOCALS:
    //       !         Work View loc_filter iyy1_list
    //       !           sort_option
    //       !           scroll_type
    //       !           list_direction
    //       !           scroll_amount
    //       !           order_by_field_num
    //       !         Entity View loc_from child
    //       !           ckey_attr_num
    //       !           cparent_pkey_attr_text
    //       !           cinstance_id
    //       !         Entity View loc_filter_start child
    //       !           cparent_pkey_attr_text
    //       !           ckey_attr_num
    //       !         Entity View loc_filter_stop child
    //       !           cparent_pkey_attr_text
    //       !           ckey_attr_num
    //       !         Entity View loc_filter child
    //       !           csearch_attr_text
    //       !         Group View (48) loc_group_list
    //       !           Entity View loc_g_list child
    //       !             cinstance_id
    //       !             creference_id
    //       !             cparent_pkey_attr_text
    //       !             ckey_attr_num
    //       !             csearch_attr_text
    //       !             cother_attr_text
    //       !         Entity View loc_empty child
    //       !           cinstance_id
    //       !           cparent_pkey_attr_text
    //       !           ckey_attr_num
    //       !         Entity View loc_max child
    //       !           cparent_pkey_attr_text
    //       !           ckey_attr_num
    //       !         Work View loc_read_lb iyy1_supplied
    //       !           total_integer
    //       !         Work View loc_error iyy1_component
    //       !           severity_code
    //       !           rollback_indicator
    //       !           origin_servid
    //       !           context_string
    //       !           return_code
    //       !           reason_code
    //       !           checksum
    //       !         Group View (9) loc_group_context
    //       !           Work View loc_g_context dont_change_text
    //       !             text_150
    //       !         Work View loc dont_change_return_codes
    //       !           1_ok
    //       !         Work View loc dont_change_reason_codes
    //       !           1_default
    //       !           11_list_full
    //       !           12_list_empty
    //       !         Work View loc_mvs_string_high_value iyy1_supplied
    //       !           flag
    //       !         Work View loc_pc_string_high_value iyy1_supplied
    //       !           flag
    //       !
    //       !     PROCEDURE STATEMENTS
    //       !
    //     1 !  NOTE: 
    //     1 !  See the description for the purpose.
    //     1 !  
    //     2 !  NOTE: 
    //     2 !  RELEASE HISTORY
    //     2 !  01_00 23-02-1998 New release
    //     2 !  
    //     3 !  USE cyyy9001_exception_hndlng_dflt
    //     3 !     WHICH EXPORTS: Work View exp_error iyy1_component FROM Work
    //     3 !              View exp_error iyy1_component
    //     4 !   
    //     5 !  NOTE: 
    //     5 !  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    //     5 !  Name the method below
    //     5 !  
    //     6 !  SET SUBSCRIPT OF loc_group_context TO 1 
    //     7 !  SET loc_g_context dont_change_text text_150 TO "CYYY0251" 
    //     8 !  SET SUBSCRIPT OF loc_group_context TO 2 
    //     9 !  SET loc_g_context dont_change_text text_150 TO "LIST" 
    //    10 !   
    //    11 !  NOTE: 
    //    11 !  ****************************************************************
    //    11 !  The used ReturnCode/ReasonCode values
    //    11 !  
    //    12 !  NOTE: 
    //    12 !  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    //    12 !  Set the return and reason codes below
    //    12 !  
    //    13 !  SET loc dont_change_return_codes 1_ok TO 1 
    //    14 !   
    //    15 !  SET loc dont_change_reason_codes 1_default TO 1 
    //    16 !   
    //    17 !  NOTE: 
    //    17 !  **************************************************************
    //    17 !  **
    //    17 !  a) The attribute(s) to be sorted must be in imp_from.
    //    17 !  b) If the attribute(s) to be sorted are not unique, the
    //    17 !  attribute(s) supplying them to be unique must be added.
    //    17 !  (Being defined as index in DB is not necessary)
    //    17 !  c) If there are multiple sorting options, common attribute(s)
    //    17 !  will naturally be in imp_form once.
    //    17 !  d) Attribute(s) to be sorted SORTED BY(s) must be included
    //    17 !  too, for uniqueness attribute(s) must be at the end if added
    //    17 !  any.
    //    17 !  e) Attribute(s) in SORTED BY(s) must be first in WHERE
    //    17 !  condition in I1204such a manner that they oversee the same
    //    17 !  sequence.
    //    17 !  
    //    18 !  +->IF exp_error iyy1_component return_code >= loc
    //    18 !  !        dont_change_return_codes 1_ok
    //    19 !  !  MOVE imp_filter iyy1_list TO loc_filter iyy1_list
    //    20 !  !   
    //    21 !  !  +->IF loc_filter iyy1_list scroll_amount > MAX OF
    //    21 !  !  !        exp_group_list  
    //    21 !  !  !        OR  loc_filter iyy1_list scroll_amount < 1
    //    22 !  !  !  SET loc_filter iyy1_list scroll_amount TO MAX OF
    //    22 !  !  !              exp_group_list 
    //    21 !  !  +--
    //    23 !  !  +->IF loc_filter iyy1_list sort_option = SPACES
    //    24 !  !  !  SET loc_filter iyy1_list sort_option TO "ASC" 
    //    23 !  !  +--
    //    25 !  !  +->IF loc_filter iyy1_list list_direction = "P"
    //    26 !  !  !  +->IF loc_filter iyy1_list sort_option = "ASC"
    //    27 !  !  !  !  SET loc_filter iyy1_list sort_option TO "DES" 
    //    26 !  !  !  +> ELSE
    //    28 !  !  !  !  SET loc_filter iyy1_list sort_option TO "ASC" 
    //    26 !  !  !  +--
    //    25 !  !  +--
    //    29 !  !   
    //    30 !  !  NOTE: 
    //    30 ...!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    //    30 ...!!!!!
    //    30 ...Check over the filtering sections
    //    30 ...
    //    31 !  !  NOTE: 
    //    31 ...**************************************************************
    //    31 ...**
    //    31 ...Min-Max interval filtering
    //    31 ...
    //    32 !  !  MOVE imp_filter_start child TO loc_filter_start child
    //    33 !  !  MOVE imp_filter_stop child TO loc_filter_stop child
    //    34 !  !   
    //    35 !  !  NOTE: 
    //    35 ...!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    //    35 ...!!!!!!!!!!!
    //    35 ...Give the highest value that every key and filter_stop
    //    35 ...variable can get
    //    35 ...
    //    36 !  !  SET loc_mvs_string_high_value iyy1_supplied flag TO "9" 
    //    37 !  !  SET loc_pc_string_high_value iyy1_supplied flag TO "Z" 
    //    38 !  !   
    //    39 !  !  SET loc_max child ckey_attr_num TO 999999 
    //    40 !  !  +->IF loc_pc_string_high_value iyy1_supplied flag >
    //    40 !  !  !        loc_mvs_string_high_value iyy1_supplied flag
    //    41 !  !  !  SET loc_max child cparent_pkey_attr_text TO "ZZZZZ" 
    //    40 !  !  +> ELSE
    //    42 !  !  !  SET loc_max child cparent_pkey_attr_text TO "99999" 
    //    40 !  !  +--
    //    43 !  !   
    //    44 !  !  NOTE: 
    //    44 ...**************************************************************
    //    44 ...**
    //    44 ...If the stop comes empty, it is accepted as maximum.
    //    44 ...If the stop comes occupied it cannot be less than Start, if
    //    44 ...it is less it is made equal to start.
    //    44 ...
    //    45 !  !  +->IF loc_filter_stop child cparent_pkey_attr_text <=
    //    45 !  !  !        loc_empty child cparent_pkey_attr_text
    //    46 !  !  !  SET loc_filter_stop child cparent_pkey_attr_text TO
    //    46 !  !  !              loc_max child cparent_pkey_attr_text 
    //    45 !  !  +> ELSE
    //    47 !  !  !  +->IF loc_filter_start child cparent_pkey_attr_text >
    //    47 !  !  !  !        loc_filter_stop child cparent_pkey_attr_text
    //    48 !  !  !  !  SET loc_filter_stop child cparent_pkey_attr_text TO
    //    48 !  !  !  !              loc_filter_start child
    //    48 !  !  !  !              cparent_pkey_attr_text 
    //    47 !  !  !  +--
    //    45 !  !  +--
    //    49 !  !  +->IF loc_filter_stop child ckey_attr_num <= loc_empty
    //    49 !  !  !        child ckey_attr_num
    //    50 !  !  !  SET loc_filter_stop child ckey_attr_num TO loc_max child
    //    50 !  !  !              ckey_attr_num 
    //    49 !  !  +> ELSE
    //    51 !  !  !  +->IF loc_filter_start child ckey_attr_num >
    //    51 !  !  !  !        loc_filter_stop child ckey_attr_num
    //    52 !  !  !  !  SET loc_filter_stop child ckey_attr_num TO
    //    52 !  !  !  !              loc_filter_start child ckey_attr_num 
    //    51 !  !  !  +--
    //    49 !  !  +--
    //    53 !  !   
    //    54 !  !  MOVE imp_from child TO loc_from child
    //    55 !  !   
    //    56 !  !  NOTE: 
    //    56 ...**************************************************************
    //    56 ...**
    //    56 ...From initial value is checked
    //    56 ...
    //    57 !  !  +->IF loc_filter iyy1_list sort_option = "ASC"
    //    57 !  !  +> ELSE
    //    58 !  !  !  NOTE: 
    //    58 ...**************************************************************
    //    58 ...**
    //    58 ...If From comes empty for Full list, it is made equal to Max.
    //    58 ...
    //    59 !  !  !  +->IF loc_filter iyy1_list scroll_type ^= "S"
    //    60 !  !  !  !  NOTE: 
    //    60 ...**************************************************************
    //    60 ...**
    //    60 ...If From comes empty for Full list, it is made equal to Max.
    //    60 ...
    //    61 !  !  !  !  +->IF loc_from child cparent_pkey_attr_text <=
    //    61 !  !  !  !  !        loc_empty child cparent_pkey_attr_text  
    //    61 !  !  !  !  !        AND  loc_from child ckey_attr_num <=
    //    61 !  !  !  !  !        loc_empty child ckey_attr_num
    //    62 !  !  !  !  !  SET loc_from child cparent_pkey_attr_text TO
    //    62 !  !  !  !  !              loc_max child cparent_pkey_attr_text 
    //    63 !  !  !  !  !  SET loc_from child ckey_attr_num TO loc_max child
    //    63 !  !  !  !  !              ckey_attr_num 
    //    61 !  !  !  !  +--
    //    59 !  !  !  +--
    //    57 !  !  +--
    //    64 !  !   
    //    65 !  !  NOTE: 
    //    65 ...**************************************************************
    //    65 ...**
    //    65 ...If the attributes in filter_start and filter_stop appear in
    //    65 ...from too, From cannot come greater than filter_Stop and 
    //    65 ...less than filter_Start.
    //    65 ...
    //    66 !  !  +->IF ((loc_from child cparent_pkey_attr_text <
    //    66 !  !  !        loc_filter_start child cparent_pkey_attr_text)  
    //    66 !  !  !        OR  (loc_from child cparent_pkey_attr_text =
    //    66 !  !  !        loc_filter_start child cparent_pkey_attr_text  
    //    66 !  !  !        AND  loc_from child ckey_attr_num <
    //    66 !  !  !        loc_filter_start child ckey_attr_num))  
    //    66 !  !  !        OR  ((loc_from child cparent_pkey_attr_text >
    //    66 !  !  !        loc_filter_stop child cparent_pkey_attr_text)  
    //    66 !  !  !        OR  (loc_from child cparent_pkey_attr_text =
    //    66 !  !  !        loc_filter_stop child cparent_pkey_attr_text  
    //    66 !  !  !        AND  loc_from child ckey_attr_num >
    //    66 !  !  !        loc_filter_stop child ckey_attr_num))
    //    67 !  !  !   
    //    68 !  !  !  +->IF loc_filter iyy1_list sort_option = "ASC"
    //    69 !  !  !  !  SET loc_from child cparent_pkey_attr_text TO
    //    69 !  !  !  !              loc_filter_start child
    //    69 !  !  !  !              cparent_pkey_attr_text 
    //    70 !  !  !  !  SET loc_from child ckey_attr_num TO loc_filter_start
    //    70 !  !  !  !              child ckey_attr_num 
    //    68 !  !  !  +> ELSE
    //    71 !  !  !  !  SET loc_from child cparent_pkey_attr_text TO
    //    71 !  !  !  !              loc_filter_stop child
    //    71 !  !  !  !              cparent_pkey_attr_text 
    //    72 !  !  !  !  SET loc_from child ckey_attr_num TO loc_filter_stop
    //    72 !  !  !  !              child ckey_attr_num 
    //    68 !  !  !  +--
    //    66 !  !  +--
    //    73 !  !   
    //    74 !  !  NOTE: 
    //    74 ...**************************************************************
    //    74 ...**
    //    74 ...Filtering (Compensate % as much as the filter variable
    //    74 ...length)
    //    74 ...
    //    75 !  !  SET loc_filter child csearch_attr_text TO
    //    75 !  !              "%%%%%%%%%%%%%%%%%%%%%%%%%" 
    //    76 !  !  SET loc_filter child csearch_attr_text TO
    //    76 !  !              concat(trim(imp_filter child
    //    76 !  !              csearch_attr_text), loc_filter child
    //    76 !  !              csearch_attr_text) 
    //    77 !  !  NOTE: 
    //    77 ...**************************************************************
    //    77 ...**
    //    77 ...END OF filtering
    //    77 ...
    //    78 !  !  USE dyyy0251_child_list
    //    78 !  !     WHICH IMPORTS: Work View exp_error iyy1_component TO
    //    78 !  !              Work View imp_error iyy1_component
    //    78 !  !                    Work View loc_filter iyy1_list TO Work
    //    78 !  !              View imp_filter iyy1_list
    //    78 !  !                    Entity View loc_from child TO Entity View
    //    78 !  !              imp_from child
    //    78 !  !                    Entity View loc_filter_start child TO
    //    78 !  !              Entity View imp_filter_start child
    //    78 !  !                    Entity View loc_filter_stop child TO
    //    78 !  !              Entity View imp_filter_stop child
    //    78 !  !                    Entity View loc_filter child TO Entity
    //    78 !  !              View imp_filter child
    //    78 !  !     WHICH EXPORTS: Group View  loc_group_list FROM Group
    //    78 !  !              View exp_group_list
    //    78 !  !                    Work View loc_error iyy1_component FROM
    //    78 !  !              Work View exp_error iyy1_component
    //    79 !  !  +->IF loc_error iyy1_component return_code < loc
    //    79 !  !  !        dont_change_return_codes 1_ok
    //    80 !  !  !  MOVE loc_error iyy1_component TO exp_error
    //    80 !  !  !              iyy1_component
    //    81 !  !  !  NOTE: 
    //    81 ...!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    //    81 ...!!!!!!!!!!!
    //    81 ...!! WARNING: In D AB, if there' s a need for generating
    //    81 ...context string, must exit from ESCAPE AB.
    //    81 ...
    //    82 ! <------ESCAPE
    //    79 !  !  +--
    //    83 !  !   
    //    84 !  !  SET loc_read_lb iyy1_supplied total_integer TO LAST OF
    //    84 !  !              loc_group_list 
    //    85 !  !  +->IF loc_read_lb iyy1_supplied total_integer > 0
    //    86 !  !  !  +->IF loc_filter iyy1_list list_direction = "P"
    //    87 !  !  !  !  SET SUBSCRIPT OF loc_group_list TO loc_read_lb
    //    87 !  !  !  !              iyy1_supplied total_integer 
    //    86 !  !  !  +> ELSE
    //    88 !  !  !  !  SET SUBSCRIPT OF loc_group_list TO 1 
    //    86 !  !  !  +--
    //    89 !  !  !  SET SUBSCRIPT OF exp_group_list TO 0 
    //    90 !  !  !  +=>REPEAT
    //    91 !  !  !  !  SET SUBSCRIPT OF exp_group_list TO SUBSCRIPT OF
    //    91 !  !  !  !              exp_group_list + 1 
    //    92 !  !  !  !  MOVE loc_g_list child TO exp_g_list child
    //    93 !  !  !  !  +->IF loc_filter iyy1_list list_direction = "P"
    //    94 !  !  !  !  !  SET SUBSCRIPT OF loc_group_list TO SUBSCRIPT OF
    //    94 !  !  !  !  !              loc_group_list - 1 
    //    93 !  !  !  !  +> ELSE
    //    95 !  !  !  !  !  SET SUBSCRIPT OF loc_group_list TO SUBSCRIPT OF
    //    95 !  !  !  !  !              loc_group_list + 1 
    //    93 !  !  !  !  +--
    //    96 !  !  !  !  SET loc_read_lb iyy1_supplied total_integer TO
    //    96 !  !  !  !              loc_read_lb iyy1_supplied total_integer -
    //    96 !  !  !  !              1 
    //    90 !  !  !  +--UNTIL loc_read_lb iyy1_supplied total_integer = 0
    //    85 !  !  +--
    //    18 !  +--
    //    97 !   
    //    98 !  +->IF exp_error iyy1_component return_code < loc
    //    98 !  !        dont_change_return_codes 1_ok
    //    99 !  !  USE cyyy9141_context_string_set
    //    99 !  !     WHICH IMPORTS: Group View  loc_group_context TO Group
    //    99 !  !              View imp_group_context
    //    99 !  !     WHICH EXPORTS: Work View loc_error iyy1_component FROM
    //    99 !  !              Work View exp_error iyy1_component
    //    99 !  !                    Work View exp_error iyy1_component FROM
    //    99 !  !              Work View exp_context iyy1_component
    //   100 !  !   
    //   101 !  !  +->IF loc_error iyy1_component return_code < loc
    //   101 !  !  !        dont_change_return_codes 1_ok
    //   102 !  !  !  MOVE loc_error iyy1_component TO exp_error
    //   102 !  !  !              iyy1_component
    //   101 !  !  +--
    //   103 !  !  SET exp_error iyy1_component severity_code TO "E" 
    //    98 !  +--
    //       +---
    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    //  CONSTRUCTOR FOR THE CLASS       
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    public CYYY0251(  )
    {
      IefCGenRlse = "CA Gen 8.6";
      IsCopyright = "Copyright (c) 2024 CA Technologies. All rights reserved.";
      IefCGenDate = "2024/01/09";
      IefCGenTime = "13:41:10";
      IefCGenEncy = "9.2.A6";
      IefCGenUserId = "AliAl";
      IefCGenModel = "N8I_ORT_YYY_0112_TEMPLATE";
      IefCGenSubset = "ALL";
      IefCGenName = "CYYY0251_CHILD_LIST";
      NestingLevel = 0;
      ValChkDeadlockTimeout = false;
      ValChkDBError = false;
    }
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // ACTION BLOCK FUNCTION DECLARATIONS 
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    
    public void Execute( Object in_runtime_parm1, 
    	IRuntimePStepContext in_runtime_parm2, 
    	GlobData in_globdata, 
    	CYYY0251_IA import_view, 
    	CYYY0251_OA export_view )
    {
      IefRuntimeParm1 = in_runtime_parm1;
      IefRuntimeParm2 = in_runtime_parm2;
      Globdata = in_globdata;
      WIa = import_view;
      WOa = export_view;
      _Execute();
    }
    
    private void _Execute()
    {
      
      f_22020126_localAlloc( "CYYY0251_CHILD_LIST" );
      if ( Globdata.GetErrorData().GetLastStatus() == ErrorData.LastStatusIefAllocationError )
      	return;
      
      ++(NestingLevel);
      try {
        f_22020126_init(  );
        f_22020126(  );
      } catch( Exception e ) {
        if ( ((Globdata.GetErrorData().GetStatus() == ErrorData.StatusNone) && (Globdata.GetErrorData().GetErrorEncountered() == 
          ErrorData.ErrorEncounteredNoErrorFound)) && (Globdata.GetErrorData().GetViewOverflow() == 
          ErrorData.ErrorEncounteredNoErrorFound) )
        {
          Globdata.GetErrorData().SetStatus( ErrorData.LastStatusFatalError );
          Globdata.GetErrorData().SetLastStatus( ErrorData.LastStatusUnexpectedExceptionError );
          Globdata.GetErrorData().SetErrorEncountered( ErrorData.ErrorEncounteredErrorFound );
          Globdata.GetErrorData(  ).SetErrorMessage( e );
        }
      }
      --(NestingLevel);
    }
    public void f_22020126(  )
    {
      func_0022020126_esc_flag = false;
      Globdata.GetStateData().SetCurrentABId( "0022020126" );
      Globdata.GetStateData().SetCurrentABName( "CYYY0251_CHILD_LIST" );
      {
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        //    See the description for the purpose.                            
        //                                                                    
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        //    RELEASE HISTORY                                                 
        //    01_00 23-02-1998 New release                                    
        //                                                                    
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        Globdata.GetStateData().SetLastStatementNumber( "0000000003" );
        
        Cyyy9001Oa = (GEN.ORT.YYY.CYYY9001_OA)(IefRuntimeParm2.GetInstance( typeof(GEN.ORT.YYY.CYYY9001).Assembly,
        	"GEN.ORT.YYY.CYYY9001_OA" ));
        Globdata.GetErrorData().SetErrorEncountered( ErrorData.ErrorEncounteredNoErrorFound );
        IefRuntimeParm2.UseActionBlock( typeof(GEN.ORT.YYY.CYYY9001).Assembly,
        	"GEN.ORT.YYY.CYYY9001",
        	"Execute",
        	null,
        	Cyyy9001Oa );
        if ( ((Globdata.GetErrorData().GetStatus() != ErrorData.StatusNone) || (Globdata.GetErrorData().GetErrorEncountered() != 
          ErrorData.ErrorEncounteredNoErrorFound)) || (Globdata.GetErrorData().GetViewOverflow() != 
          ErrorData.ErrorEncounteredNoErrorFound) )
        {
          throw new ABException();
        }
        Globdata.GetStateData().SetCurrentABId( "0022020126" );
        Globdata.GetStateData().SetCurrentABName( "CYYY0251_CHILD_LIST" );
        Globdata.GetStateData().SetLastStatementNumber( "0000000003" );
        WOa.ExpErrorIyy1ComponentSeverityCode = FixedStringAttr.ValueOf(Cyyy9001Oa.ExpErrorIyy1ComponentSeverityCode, 1);
        WOa.ExpErrorIyy1ComponentRollbackIndicator = FixedStringAttr.ValueOf(Cyyy9001Oa.ExpErrorIyy1ComponentRollbackIndicator, 1);
        WOa.ExpErrorIyy1ComponentOriginServid = DoubleAttr.ValueOf(Cyyy9001Oa.ExpErrorIyy1ComponentOriginServid);
        WOa.ExpErrorIyy1ComponentContextString = StringAttr.ValueOf(Cyyy9001Oa.ExpErrorIyy1ComponentContextString, 512);
        WOa.ExpErrorIyy1ComponentReturnCode = IntAttr.ValueOf(Cyyy9001Oa.ExpErrorIyy1ComponentReturnCode);
        WOa.ExpErrorIyy1ComponentReasonCode = IntAttr.ValueOf(Cyyy9001Oa.ExpErrorIyy1ComponentReasonCode);
        WOa.ExpErrorIyy1ComponentChecksum = FixedStringAttr.ValueOf(Cyyy9001Oa.ExpErrorIyy1ComponentChecksum, 15);
        Cyyy9001Oa.FreeInstance(  );
        Cyyy9001Oa = null;
        
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        //    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!                      
        //    Name the method below                                           
        //                                                                    
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        Globdata.GetStateData().SetLastStatementNumber( "0000000006" );
        LocGroupContext_PS_003 = (int)TIRD2DEC.Execute1(1, 0, TIRD2DEC.ROUND_NONE, 0);
        if ( (LocGroupContext_PS_003 > WLa.LocGroupContext_MA) && (LocGroupContext_PS_003 <= 9) )
        WLa.LocGroupContext_MA = IntAttr.ValueOf(LocGroupContext_PS_003);
        Globdata.GetStateData().SetLastStatementNumber( "0000000007" );
        WLa.LocGContextDontChangeTextText150[LocGroupContext_PS_003-1] = FixedStringAttr.ValueOf("CYYY0251", 150);
        f_173015129_rgvc(  );
        Globdata.GetStateData().SetLastStatementNumber( "0000000008" );
        LocGroupContext_PS_003 = (int)TIRD2DEC.Execute1(2, 0, TIRD2DEC.ROUND_NONE, 0);
        if ( (LocGroupContext_PS_003 > WLa.LocGroupContext_MA) && (LocGroupContext_PS_003 <= 9) )
        WLa.LocGroupContext_MA = IntAttr.ValueOf(LocGroupContext_PS_003);
        Globdata.GetStateData().SetLastStatementNumber( "0000000009" );
        WLa.LocGContextDontChangeTextText150[LocGroupContext_PS_003-1] = FixedStringAttr.ValueOf("LIST", 150);
        f_173015129_rgvc(  );
        
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        //    **************************************************************  
        //    **                                                              
        //    The used ReturnCode/ReasonCode values                           
        //                                                                    
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        //    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  
        //    !!                                                              
        //    Set the return and reason codes below                           
        //                                                                    
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        Globdata.GetStateData().SetLastStatementNumber( "0000000013" );
        WLa.LocDontChangeReturnCodesQ1Ok = IntAttr.ValueOf((int)TIRD2DEC.Execute1(1, 0, TIRD2DEC.ROUND_NONE, 5));
        
        Globdata.GetStateData().SetLastStatementNumber( "0000000015" );
        WLa.LocDontChangeReasonCodesQ1Default = IntAttr.ValueOf((int)TIRD2DEC.Execute1(1, 0, TIRD2DEC.ROUND_NONE, 5));
        
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        //    **************************************************************  
        //    **                                                              
        //    a) The attribute(s) to be sorted must be in imp_from.           
        //    b) If the attribute(s) to be sorted are not unique, the         
        //    attribute(s) supplying them to be unique must be added.         
        //    (Being defined as index in DB is not necessary)                 
        //    c) If there are multiple sorting options, common attribute(s)   
        //    will naturally be in imp_form once.                             
        //    d) Attribute(s) to be sorted SORTED BY(s) must be included      
        //    too, for uniqueness attribute(s) must be at the end if added    
        //    any.                                                            
        //    e) Attribute(s) in SORTED BY(s) must be first in WHERE          
        //    condition in I1204such a manner that they oversee the same      
        //    sequence.                                                       
        //                                                                    
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        Globdata.GetStateData().SetLastStatementNumber( "0000000018" );
        if ( ((double) WOa.ExpErrorIyy1ComponentReturnCode >= (double) WLa.LocDontChangeReturnCodesQ1Ok) )
        {
          f_20971646(  );
        }
        
        if ( func_0022020126_esc_flag )
        {
          goto f_0022020126_esctag;
        }
        
        Globdata.GetStateData().SetLastStatementNumber( "0000000098" );
        if ( ((double) WOa.ExpErrorIyy1ComponentReturnCode < (double) WLa.LocDontChangeReturnCodesQ1Ok) )
        {
          f_20972420(  );
        }
        
      }
      f_0022020126_esctag: 
      ;
      return;
    }
    
    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // SUBORDINATE FUNCTIONS
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    
    
    public void f_20971646(  )
    {
      func_0020971646_esc_flag = false;
      {
        Globdata.GetStateData().SetLastStatementNumber( "0000000019" );
        WLa.LocFilterIyy1ListSortOption = FixedStringAttr.ValueOf(WIa.ImpFilterIyy1ListSortOption, 3);
        WLa.LocFilterIyy1ListScrollType = FixedStringAttr.ValueOf(WIa.ImpFilterIyy1ListScrollType, 1);
        WLa.LocFilterIyy1ListListDirection = FixedStringAttr.ValueOf(WIa.ImpFilterIyy1ListListDirection, 1);
        WLa.LocFilterIyy1ListScrollAmount = IntAttr.ValueOf(WIa.ImpFilterIyy1ListScrollAmount);
        WLa.LocFilterIyy1ListOrderByFieldNum = ShortAttr.ValueOf(WIa.ImpFilterIyy1ListOrderByFieldNum);
        
        Globdata.GetStateData().SetLastStatementNumber( "0000000021" );
        if ( (((double) WLa.LocFilterIyy1ListScrollAmount > ExpGroupList_MM_001) || ((double) WLa.LocFilterIyy1ListScrollAmount < 1))
           )
        {
          Globdata.GetStateData().SetLastStatementNumber( "0000000022" );
          WLa.LocFilterIyy1ListScrollAmount = IntAttr.ValueOf((int)TIRD2DEC.Execute1(ExpGroupList_MM_001, 0, TIRD2DEC.ROUND_NONE, 5))
            ;
        }
        
        Globdata.GetStateData().SetLastStatementNumber( "0000000023" );
        if ( CompareExit.CompareTo(WLa.LocFilterIyy1ListSortOption, Spaces) == 0 )
        {
          Globdata.GetStateData().SetLastStatementNumber( "0000000024" );
          WLa.LocFilterIyy1ListSortOption = FixedStringAttr.ValueOf("ASC", 3);
        }
        
        Globdata.GetStateData().SetLastStatementNumber( "0000000025" );
        if ( CompareExit.CompareTo(WLa.LocFilterIyy1ListListDirection, "P") == 0 )
        {
          f_20972175(  );
        }
        
        
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        //    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  
        //    !!!!!                                                           
        //    Check over the filtering sections                               
        //                                                                    
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        //    **************************************************************  
        //    **                                                              
        //    Min-Max interval filtering                                      
        //                                                                    
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        Globdata.GetStateData().SetLastStatementNumber( "0000000032" );
        WLa.LocFilterStartChildCparentPkeyAttrText = FixedStringAttr.ValueOf(WIa.ImpFilterStartChildCparentPkeyAttrText, 5);
        WLa.LocFilterStartChildCkeyAttrNum = IntAttr.ValueOf(WIa.ImpFilterStartChildCkeyAttrNum);
        Globdata.GetStateData().SetLastStatementNumber( "0000000033" );
        WLa.LocFilterStopChildCparentPkeyAttrText = FixedStringAttr.ValueOf(WIa.ImpFilterStopChildCparentPkeyAttrText, 5);
        WLa.LocFilterStopChildCkeyAttrNum = IntAttr.ValueOf(WIa.ImpFilterStopChildCkeyAttrNum);
        
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        //    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  
        //    !!!!!!!!!!!                                                     
        //    Give the highest value that every key and filter_stop           
        //    variable can get                                                
        //                                                                    
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        Globdata.GetStateData().SetLastStatementNumber( "0000000036" );
        WLa.LocMvsStringHighValueIyy1SuppliedFlag = FixedStringAttr.ValueOf("9", 1);
        Globdata.GetStateData().SetLastStatementNumber( "0000000037" );
        WLa.LocPcStringHighValueIyy1SuppliedFlag = FixedStringAttr.ValueOf("Z", 1);
        
        Globdata.GetStateData().SetLastStatementNumber( "0000000039" );
        WLa.LocMaxChildCkeyAttrNum = IntAttr.ValueOf((int)TIRD2DEC.Execute1(999999, 0, TIRD2DEC.ROUND_NONE, 6));
        Globdata.GetStateData().SetLastStatementNumber( "0000000040" );
        if ( CompareExit.CompareTo(WLa.LocPcStringHighValueIyy1SuppliedFlag, WLa.LocMvsStringHighValueIyy1SuppliedFlag) > 0 )
        {
          Globdata.GetStateData().SetLastStatementNumber( "0000000041" );
          WLa.LocMaxChildCparentPkeyAttrText = FixedStringAttr.ValueOf("ZZZZZ", 5);
        }
        else 
        {
          Globdata.GetStateData().SetLastSubStatementNumber( "1" );
          {
            Globdata.GetStateData().SetLastStatementNumber( "0000000042" );
            WLa.LocMaxChildCparentPkeyAttrText = FixedStringAttr.ValueOf("99999", 5);
          }
        }
        
        
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        //    **************************************************************  
        //    **                                                              
        //    If the stop comes empty, it is accepted as maximum.             
        //    If the stop comes occupied it cannot be less than Start, if     
        //    it is less it is made equal to start.                           
        //                                                                    
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        Globdata.GetStateData().SetLastStatementNumber( "0000000045" );
        if ( CompareExit.CompareTo(WLa.LocFilterStopChildCparentPkeyAttrText, WLa.LocEmptyChildCparentPkeyAttrText) <= 0 )
        {
          Globdata.GetStateData().SetLastStatementNumber( "0000000046" );
          WLa.LocFilterStopChildCparentPkeyAttrText = FixedStringAttr.ValueOf(WLa.LocMaxChildCparentPkeyAttrText, 5);
        }
        else 
        {
          Globdata.GetStateData().SetLastSubStatementNumber( "1" );
          {
            f_20971876(  );
          }
        }
        
        Globdata.GetStateData().SetLastStatementNumber( "0000000049" );
        if ( ((double) WLa.LocFilterStopChildCkeyAttrNum <= (double) WLa.LocEmptyChildCkeyAttrNum) )
        {
          Globdata.GetStateData().SetLastStatementNumber( "0000000050" );
          WLa.LocFilterStopChildCkeyAttrNum = IntAttr.ValueOf((int)TIRD2DEC.Execute1((double) WLa.LocMaxChildCkeyAttrNum, 0, 
            TIRD2DEC.ROUND_NONE, 6));
        }
        else 
        {
          Globdata.GetStateData().SetLastSubStatementNumber( "1" );
          {
            f_20972923(  );
          }
        }
        
        
        Globdata.GetStateData().SetLastStatementNumber( "0000000054" );
        WLa.LocFromChildCinstanceId = TimestampAttr.ValueOf(WIa.ImpFromChildCinstanceId);
        WLa.LocFromChildCparentPkeyAttrText = FixedStringAttr.ValueOf(WIa.ImpFromChildCparentPkeyAttrText, 5);
        WLa.LocFromChildCkeyAttrNum = IntAttr.ValueOf(WIa.ImpFromChildCkeyAttrNum);
        
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        //    **************************************************************  
        //    **                                                              
        //    From initial value is checked                                   
        //                                                                    
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        Globdata.GetStateData().SetLastStatementNumber( "0000000057" );
        if ( CompareExit.CompareTo(WLa.LocFilterIyy1ListSortOption, "ASC") == 0 )
        {
          // Empty statement here.
          ;
        }
        else 
        {
          Globdata.GetStateData().SetLastSubStatementNumber( "1" );
          {
            f_20971767(  );
          }
        }
        
        
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        //    **************************************************************  
        //    **                                                              
        //    If the attributes in filter_start and filter_stop appear in     
        //    from too, From cannot come greater than filter_Stop and         
        //    less than filter_Start.                                         
        //                                                                    
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        Globdata.GetStateData().SetLastStatementNumber( "0000000066" );
        if ( ((CompareExit.CompareTo(WLa.LocFromChildCparentPkeyAttrText, WLa.LocFilterStartChildCparentPkeyAttrText) < 0 || (
          CompareExit.CompareTo(WLa.LocFromChildCparentPkeyAttrText, WLa.LocFilterStartChildCparentPkeyAttrText) == 0 && ((double) 
          WLa.LocFromChildCkeyAttrNum < (double) WLa.LocFilterStartChildCkeyAttrNum))) || (CompareExit.CompareTo(
          WLa.LocFromChildCparentPkeyAttrText, WLa.LocFilterStopChildCparentPkeyAttrText) > 0 || (CompareExit.CompareTo(
          WLa.LocFromChildCparentPkeyAttrText, WLa.LocFilterStopChildCparentPkeyAttrText) == 0 && ((double) 
          WLa.LocFromChildCkeyAttrNum > (double) WLa.LocFilterStopChildCkeyAttrNum)))) )
        {
          f_20972801(  );
        }
        
        
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        //    **************************************************************  
        //    **                                                              
        //    Filtering (Compensate % as much as the filter variable          
        //    length)                                                         
        //                                                                    
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        Globdata.GetStateData().SetLastStatementNumber( "0000000075" );
        WLa.LocFilterChildCsearchAttrText = FixedStringAttr.ValueOf("%%%%%%%%%%%%%%%%%%%%%%%%%", 25);
        Globdata.GetStateData().SetLastStatementNumber( "0000000076" );
        StringAttr.Reset( Workarea002Oa_output_string_FP_002 );
        Globdata.GetErrorData().SetErrorEncountered( ErrorData.ErrorEncounteredNoErrorFound );
        TIRFTRIM.Execute( IefRuntimeParm1,
        	IefRuntimeParm2,
        	Globdata,
        	WIa.ImpFilterChildCsearchAttrText,
        	Workarea002Oa_output_string_FP_002 );
        if ( ((Globdata.GetErrorData().GetStatus() != ErrorData.StatusNone) || (Globdata.GetErrorData().GetErrorEncountered() != 
          ErrorData.ErrorEncounteredNoErrorFound)) || (Globdata.GetErrorData().GetViewOverflow() != 
          ErrorData.ErrorEncounteredNoErrorFound) )
        {
          throw new ABException();
        }
        StringAttr.Reset( Workarea001Oa_output_string_FP_001 );
        Globdata.GetErrorData().SetErrorEncountered( ErrorData.ErrorEncounteredNoErrorFound );
        TIRFCCAT.Execute( IefRuntimeParm1,
        	IefRuntimeParm2,
        	Globdata,
        	Workarea002Oa_output_string_FP_002.Get(),
        	WLa.LocFilterChildCsearchAttrText,
        	Workarea001Oa_output_string_FP_001 );
        if ( ((Globdata.GetErrorData().GetStatus() != ErrorData.StatusNone) || (Globdata.GetErrorData().GetErrorEncountered() != 
          ErrorData.ErrorEncounteredNoErrorFound)) || (Globdata.GetErrorData().GetViewOverflow() != 
          ErrorData.ErrorEncounteredNoErrorFound) )
        {
          throw new ABException();
        }
        WLa.LocFilterChildCsearchAttrText = FixedStringAttr.ValueOf(Workarea001Oa_output_string_FP_001.Get(), 25);
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        //    **************************************************************  
        //    **                                                              
        //    END OF filtering                                                
        //                                                                    
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        Globdata.GetStateData().SetLastStatementNumber( "0000000078" );
        
        Dyyy0251Ia = (GEN.ORT.YYY.DYYY0251_IA)(IefRuntimeParm2.GetInstance( typeof(GEN.ORT.YYY.DYYY0251).Assembly,
        	"GEN.ORT.YYY.DYYY0251_IA" ));
        Dyyy0251Oa = (GEN.ORT.YYY.DYYY0251_OA)(IefRuntimeParm2.GetInstance( typeof(GEN.ORT.YYY.DYYY0251).Assembly,
        	"GEN.ORT.YYY.DYYY0251_OA" ));
        Dyyy0251Ia.ImpFilterChildCsearchAttrText = FixedStringAttr.ValueOf(WLa.LocFilterChildCsearchAttrText, 25);
        Dyyy0251Ia.ImpFilterStopChildCparentPkeyAttrText = FixedStringAttr.ValueOf(WLa.LocFilterStopChildCparentPkeyAttrText, 5);
        Dyyy0251Ia.ImpFilterStopChildCkeyAttrNum = IntAttr.ValueOf(WLa.LocFilterStopChildCkeyAttrNum);
        Dyyy0251Ia.ImpFilterStartChildCparentPkeyAttrText = FixedStringAttr.ValueOf(WLa.LocFilterStartChildCparentPkeyAttrText, 5);
        Dyyy0251Ia.ImpFilterStartChildCkeyAttrNum = IntAttr.ValueOf(WLa.LocFilterStartChildCkeyAttrNum);
        Dyyy0251Ia.ImpFromChildCkeyAttrNum = IntAttr.ValueOf(WLa.LocFromChildCkeyAttrNum);
        Dyyy0251Ia.ImpFromChildCparentPkeyAttrText = FixedStringAttr.ValueOf(WLa.LocFromChildCparentPkeyAttrText, 5);
        Dyyy0251Ia.ImpFromChildCinstanceId = TimestampAttr.ValueOf(WLa.LocFromChildCinstanceId);
        Dyyy0251Ia.ImpFilterIyy1ListSortOption = FixedStringAttr.ValueOf(WLa.LocFilterIyy1ListSortOption, 3);
        Dyyy0251Ia.ImpFilterIyy1ListScrollType = FixedStringAttr.ValueOf(WLa.LocFilterIyy1ListScrollType, 1);
        Dyyy0251Ia.ImpFilterIyy1ListListDirection = FixedStringAttr.ValueOf(WLa.LocFilterIyy1ListListDirection, 1);
        Dyyy0251Ia.ImpFilterIyy1ListScrollAmount = IntAttr.ValueOf(WLa.LocFilterIyy1ListScrollAmount);
        Dyyy0251Ia.ImpFilterIyy1ListOrderByFieldNum = ShortAttr.ValueOf(WLa.LocFilterIyy1ListOrderByFieldNum);
        Dyyy0251Ia.ImpErrorIyy1ComponentSeverityCode = FixedStringAttr.ValueOf(WOa.ExpErrorIyy1ComponentSeverityCode, 1);
        Dyyy0251Ia.ImpErrorIyy1ComponentRollbackIndicator = FixedStringAttr.ValueOf(WOa.ExpErrorIyy1ComponentRollbackIndicator, 1);
        Dyyy0251Ia.ImpErrorIyy1ComponentOriginServid = DoubleAttr.ValueOf(WOa.ExpErrorIyy1ComponentOriginServid);
        Dyyy0251Ia.ImpErrorIyy1ComponentContextString = StringAttr.ValueOf(WOa.ExpErrorIyy1ComponentContextString, 512);
        Dyyy0251Ia.ImpErrorIyy1ComponentReturnCode = IntAttr.ValueOf(WOa.ExpErrorIyy1ComponentReturnCode);
        Dyyy0251Ia.ImpErrorIyy1ComponentReasonCode = IntAttr.ValueOf(WOa.ExpErrorIyy1ComponentReasonCode);
        Dyyy0251Ia.ImpErrorIyy1ComponentChecksum = FixedStringAttr.ValueOf(WOa.ExpErrorIyy1ComponentChecksum, 15);
        Globdata.GetErrorData().SetErrorEncountered( ErrorData.ErrorEncounteredNoErrorFound );
        IefRuntimeParm2.UseActionBlock( typeof(GEN.ORT.YYY.DYYY0251).Assembly,
        	"GEN.ORT.YYY.DYYY0251",
        	"Execute",
        	Dyyy0251Ia,
        	Dyyy0251Oa );
        if ( ((Globdata.GetErrorData().GetStatus() != ErrorData.StatusNone) || (Globdata.GetErrorData().GetErrorEncountered() != 
          ErrorData.ErrorEncounteredNoErrorFound)) || (Globdata.GetErrorData().GetViewOverflow() != 
          ErrorData.ErrorEncounteredNoErrorFound) )
        {
          throw new ABException();
        }
        Globdata.GetStateData().SetCurrentABId( "0022020126" );
        Globdata.GetStateData().SetCurrentABName( "CYYY0251_CHILD_LIST" );
        Globdata.GetStateData().SetLastStatementNumber( "0000000078" );
        WLa.LocErrorIyy1ComponentSeverityCode = FixedStringAttr.ValueOf(Dyyy0251Oa.ExpErrorIyy1ComponentSeverityCode, 1);
        WLa.LocErrorIyy1ComponentRollbackIndicator = FixedStringAttr.ValueOf(Dyyy0251Oa.ExpErrorIyy1ComponentRollbackIndicator, 1);
        WLa.LocErrorIyy1ComponentOriginServid = DoubleAttr.ValueOf(Dyyy0251Oa.ExpErrorIyy1ComponentOriginServid);
        WLa.LocErrorIyy1ComponentContextString = StringAttr.ValueOf(Dyyy0251Oa.ExpErrorIyy1ComponentContextString, 512);
        WLa.LocErrorIyy1ComponentReturnCode = IntAttr.ValueOf(Dyyy0251Oa.ExpErrorIyy1ComponentReturnCode);
        WLa.LocErrorIyy1ComponentReasonCode = IntAttr.ValueOf(Dyyy0251Oa.ExpErrorIyy1ComponentReasonCode);
        WLa.LocErrorIyy1ComponentChecksum = FixedStringAttr.ValueOf(Dyyy0251Oa.ExpErrorIyy1ComponentChecksum, 15);
        WLa.LocGroupList_MA = IntAttr.ValueOf(Dyyy0251Oa.ExpGroupList_MA);
        for(Adim1 = 1; Adim1 <= WLa.LocGroupList_MA; ++(Adim1))
        {
          WLa.LocGListChildCinstanceId[Adim1-1] = TimestampAttr.ValueOf(Dyyy0251Oa.ExpGListChildCinstanceId[Adim1-1]);
          WLa.LocGListChildCreferenceId[Adim1-1] = TimestampAttr.ValueOf(Dyyy0251Oa.ExpGListChildCreferenceId[Adim1-1]);
          WLa.LocGListChildCparentPkeyAttrText[Adim1-1] = FixedStringAttr.ValueOf(Dyyy0251Oa.ExpGListChildCparentPkeyAttrText[
            Adim1-1], 5);
          WLa.LocGListChildCkeyAttrNum[Adim1-1] = IntAttr.ValueOf(Dyyy0251Oa.ExpGListChildCkeyAttrNum[Adim1-1]);
          WLa.LocGListChildCsearchAttrText[Adim1-1] = FixedStringAttr.ValueOf(Dyyy0251Oa.ExpGListChildCsearchAttrText[Adim1-1], 25);
          WLa.LocGListChildCotherAttrText[Adim1-1] = FixedStringAttr.ValueOf(Dyyy0251Oa.ExpGListChildCotherAttrText[Adim1-1], 25);
        }
        Dyyy0251Ia.FreeInstance(  );
        Dyyy0251Ia = null;
        Dyyy0251Oa.FreeInstance(  );
        Dyyy0251Oa = null;
        Globdata.GetStateData().SetLastStatementNumber( "0000000079" );
        if ( ((double) WLa.LocErrorIyy1ComponentReturnCode < (double) WLa.LocDontChangeReturnCodesQ1Ok) )
        {
          f_20971719(  );
        }
        
        if ( func_0020971646_esc_flag )
        {
          goto f_0020971646_esctag;
        }
        
        Globdata.GetStateData().SetLastStatementNumber( "0000000084" );
        WLa.LocReadLbIyy1SuppliedTotalInteger = DoubleAttr.ValueOf(TIRD2DEC.Execute1(WLa.LocGroupList_MA, 0, TIRD2DEC.ROUND_NONE, 15)
          );
        Globdata.GetStateData().SetLastStatementNumber( "0000000085" );
        if ( TIRD2DEC.Execute((double)WLa.LocReadLbIyy1SuppliedTotalInteger, 0, TIRD2DEC.ROUND_NORMAL)  >  TIRD2DEC.Execute((double)
          0, 0, TIRD2DEC.ROUND_NORMAL) )
        {
          f_20972331(  );
        }
        
      }
      f_0020971646_esctag: 
      ;
      return;
    }
    
    public void f_20972420(  )
    {
      func_0020972420_esc_flag = false;
      Globdata.GetStateData().SetLastStatementNumber( "0000000099" );
      
      Cyyy9141Ia = (GEN.ORT.YYY.CYYY9141_IA)(IefRuntimeParm2.GetInstance( typeof(GEN.ORT.YYY.CYYY9141).Assembly,
      	"GEN.ORT.YYY.CYYY9141_IA" ));
      Cyyy9141Oa = (GEN.ORT.YYY.CYYY9141_OA)(IefRuntimeParm2.GetInstance( typeof(GEN.ORT.YYY.CYYY9141).Assembly,
      	"GEN.ORT.YYY.CYYY9141_OA" ));
      Cyyy9141Ia.ImpGroupContext_MA = IntAttr.ValueOf(WLa.LocGroupContext_MA);
      for(Adim1 = 1; Adim1 <= WLa.LocGroupContext_MA; ++(Adim1))
      {
        Cyyy9141Ia.ImpGContextDontChangeTextText150[Adim1-1] = FixedStringAttr.ValueOf(WLa.LocGContextDontChangeTextText150[Adim1-1],
           150);
      }
      for(Adim1 = WLa.LocGroupContext_MA + 1; Adim1 <= 9; ++(Adim1))
      {
        Cyyy9141Ia.ImpGContextDontChangeTextText150[Adim1-1] = 
"                                                                                                                                                      "
          ;
      }
      Globdata.GetErrorData().SetErrorEncountered( ErrorData.ErrorEncounteredNoErrorFound );
      IefRuntimeParm2.UseActionBlock( typeof(GEN.ORT.YYY.CYYY9141).Assembly,
      	"GEN.ORT.YYY.CYYY9141",
      	"Execute",
      	Cyyy9141Ia,
      	Cyyy9141Oa );
      if ( ((Globdata.GetErrorData().GetStatus() != ErrorData.StatusNone) || (Globdata.GetErrorData().GetErrorEncountered() != 
        ErrorData.ErrorEncounteredNoErrorFound)) || (Globdata.GetErrorData().GetViewOverflow() != 
        ErrorData.ErrorEncounteredNoErrorFound) )
      {
        throw new ABException();
      }
      Globdata.GetStateData().SetCurrentABId( "0022020126" );
      Globdata.GetStateData().SetCurrentABName( "CYYY0251_CHILD_LIST" );
      Globdata.GetStateData().SetLastStatementNumber( "0000000099" );
      WOa.ExpErrorIyy1ComponentContextString = StringAttr.ValueOf(Cyyy9141Oa.ExpContextIyy1ComponentContextString, 512);
      WLa.LocErrorIyy1ComponentSeverityCode = FixedStringAttr.ValueOf(Cyyy9141Oa.ExpErrorIyy1ComponentSeverityCode, 1);
      WLa.LocErrorIyy1ComponentRollbackIndicator = FixedStringAttr.ValueOf(Cyyy9141Oa.ExpErrorIyy1ComponentRollbackIndicator, 1);
      WLa.LocErrorIyy1ComponentOriginServid = DoubleAttr.ValueOf(Cyyy9141Oa.ExpErrorIyy1ComponentOriginServid);
      WLa.LocErrorIyy1ComponentContextString = StringAttr.ValueOf(Cyyy9141Oa.ExpErrorIyy1ComponentContextString, 512);
      WLa.LocErrorIyy1ComponentReturnCode = IntAttr.ValueOf(Cyyy9141Oa.ExpErrorIyy1ComponentReturnCode);
      WLa.LocErrorIyy1ComponentReasonCode = IntAttr.ValueOf(Cyyy9141Oa.ExpErrorIyy1ComponentReasonCode);
      WLa.LocErrorIyy1ComponentChecksum = FixedStringAttr.ValueOf(Cyyy9141Oa.ExpErrorIyy1ComponentChecksum, 15);
      Cyyy9141Ia.FreeInstance(  );
      Cyyy9141Ia = null;
      Cyyy9141Oa.FreeInstance(  );
      Cyyy9141Oa = null;
      
      Globdata.GetStateData().SetLastStatementNumber( "0000000101" );
      if ( ((double) WLa.LocErrorIyy1ComponentReturnCode < (double) WLa.LocDontChangeReturnCodesQ1Ok) )
      {
        Globdata.GetStateData().SetLastStatementNumber( "0000000102" );
        WOa.ExpErrorIyy1ComponentSeverityCode = FixedStringAttr.ValueOf(WLa.LocErrorIyy1ComponentSeverityCode, 1);
        WOa.ExpErrorIyy1ComponentRollbackIndicator = FixedStringAttr.ValueOf(WLa.LocErrorIyy1ComponentRollbackIndicator, 1);
        WOa.ExpErrorIyy1ComponentOriginServid = DoubleAttr.ValueOf(WLa.LocErrorIyy1ComponentOriginServid);
        WOa.ExpErrorIyy1ComponentContextString = StringAttr.ValueOf(WLa.LocErrorIyy1ComponentContextString, 512);
        WOa.ExpErrorIyy1ComponentReturnCode = IntAttr.ValueOf(WLa.LocErrorIyy1ComponentReturnCode);
        WOa.ExpErrorIyy1ComponentReasonCode = IntAttr.ValueOf(WLa.LocErrorIyy1ComponentReasonCode);
        WOa.ExpErrorIyy1ComponentChecksum = FixedStringAttr.ValueOf(WLa.LocErrorIyy1ComponentChecksum, 15);
      }
      
      Globdata.GetStateData().SetLastStatementNumber( "0000000103" );
      WOa.ExpErrorIyy1ComponentSeverityCode = FixedStringAttr.ValueOf("E", 1);
      return;
    }
    
    public void f_20972175(  )
    {
      func_0020972175_esc_flag = false;
      Globdata.GetStateData().SetLastStatementNumber( "0000000026" );
      if ( CompareExit.CompareTo(WLa.LocFilterIyy1ListSortOption, "ASC") == 0 )
      {
        Globdata.GetStateData().SetLastStatementNumber( "0000000027" );
        WLa.LocFilterIyy1ListSortOption = FixedStringAttr.ValueOf("DES", 3);
      }
      else 
      {
        Globdata.GetStateData().SetLastSubStatementNumber( "1" );
        {
          Globdata.GetStateData().SetLastStatementNumber( "0000000028" );
          WLa.LocFilterIyy1ListSortOption = FixedStringAttr.ValueOf("ASC", 3);
        }
      }
      
      return;
    }
    
    public void f_20971876(  )
    {
      func_0020971876_esc_flag = false;
      Globdata.GetStateData().SetLastStatementNumber( "0000000047" );
      if ( CompareExit.CompareTo(WLa.LocFilterStartChildCparentPkeyAttrText, WLa.LocFilterStopChildCparentPkeyAttrText) > 0 )
      {
        Globdata.GetStateData().SetLastStatementNumber( "0000000048" );
        WLa.LocFilterStopChildCparentPkeyAttrText = FixedStringAttr.ValueOf(WLa.LocFilterStartChildCparentPkeyAttrText, 5);
      }
      
      return;
    }
    
    public void f_20972923(  )
    {
      func_0020972923_esc_flag = false;
      Globdata.GetStateData().SetLastStatementNumber( "0000000051" );
      if ( ((double) WLa.LocFilterStartChildCkeyAttrNum > (double) WLa.LocFilterStopChildCkeyAttrNum) )
      {
        Globdata.GetStateData().SetLastStatementNumber( "0000000052" );
        WLa.LocFilterStopChildCkeyAttrNum = IntAttr.ValueOf((int)TIRD2DEC.Execute1((double) WLa.LocFilterStartChildCkeyAttrNum, 0, 
          TIRD2DEC.ROUND_NONE, 6));
      }
      
      return;
    }
    
    public void f_20971767(  )
    {
      func_0020971767_esc_flag = false;
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    **************************************************************  
      //    **                                                              
      //    If From comes empty for Full list, it is made equal to Max.     
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      Globdata.GetStateData().SetLastStatementNumber( "0000000059" );
      if ( CompareExit.CompareTo(WLa.LocFilterIyy1ListScrollType, "S") != 0 )
      {
        f_20972001(  );
      }
      
      return;
    }
    
    public void f_20972801(  )
    {
      func_0020972801_esc_flag = false;
      
      Globdata.GetStateData().SetLastStatementNumber( "0000000068" );
      if ( CompareExit.CompareTo(WLa.LocFilterIyy1ListSortOption, "ASC") == 0 )
      {
        Globdata.GetStateData().SetLastStatementNumber( "0000000069" );
        WLa.LocFromChildCparentPkeyAttrText = FixedStringAttr.ValueOf(WLa.LocFilterStartChildCparentPkeyAttrText, 5);
        Globdata.GetStateData().SetLastStatementNumber( "0000000070" );
        WLa.LocFromChildCkeyAttrNum = IntAttr.ValueOf((int)TIRD2DEC.Execute1((double) WLa.LocFilterStartChildCkeyAttrNum, 0, 
          TIRD2DEC.ROUND_NONE, 6));
      }
      else 
      {
        Globdata.GetStateData().SetLastSubStatementNumber( "1" );
        {
          Globdata.GetStateData().SetLastStatementNumber( "0000000071" );
          WLa.LocFromChildCparentPkeyAttrText = FixedStringAttr.ValueOf(WLa.LocFilterStopChildCparentPkeyAttrText, 5);
          Globdata.GetStateData().SetLastStatementNumber( "0000000072" );
          WLa.LocFromChildCkeyAttrNum = IntAttr.ValueOf((int)TIRD2DEC.Execute1((double) WLa.LocFilterStopChildCkeyAttrNum, 0, 
            TIRD2DEC.ROUND_NONE, 6));
        }
      }
      
      return;
    }
    
    public void f_20971719(  )
    {
      func_0020971719_esc_flag = false;
      {
        Globdata.GetStateData().SetLastStatementNumber( "0000000080" );
        WOa.ExpErrorIyy1ComponentSeverityCode = FixedStringAttr.ValueOf(WLa.LocErrorIyy1ComponentSeverityCode, 1);
        WOa.ExpErrorIyy1ComponentRollbackIndicator = FixedStringAttr.ValueOf(WLa.LocErrorIyy1ComponentRollbackIndicator, 1);
        WOa.ExpErrorIyy1ComponentOriginServid = DoubleAttr.ValueOf(WLa.LocErrorIyy1ComponentOriginServid);
        WOa.ExpErrorIyy1ComponentContextString = StringAttr.ValueOf(WLa.LocErrorIyy1ComponentContextString, 512);
        WOa.ExpErrorIyy1ComponentReturnCode = IntAttr.ValueOf(WLa.LocErrorIyy1ComponentReturnCode);
        WOa.ExpErrorIyy1ComponentReasonCode = IntAttr.ValueOf(WLa.LocErrorIyy1ComponentReasonCode);
        WOa.ExpErrorIyy1ComponentChecksum = FixedStringAttr.ValueOf(WLa.LocErrorIyy1ComponentChecksum, 15);
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        //    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  
        //    !!!!!!!!!!!                                                     
        //    !! WARNING: In D AB, if there' s a need for generating          
        //    context string, must exit from ESCAPE AB.                       
        //                                                                    
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        Globdata.GetStateData().SetLastStatementNumber( "0000000082" );
        func_0020971719_esc_flag = true;
        func_0020971646_esc_flag = true;
      }
      f_0020971719_esctag: 
      ;
      return;
    }
    
    public void f_20972331(  )
    {
      func_0020972331_esc_flag = false;
      Globdata.GetStateData().SetLastStatementNumber( "0000000086" );
      if ( CompareExit.CompareTo(WLa.LocFilterIyy1ListListDirection, "P") == 0 )
      {
        Globdata.GetStateData().SetLastStatementNumber( "0000000087" );
        LocGroupList_PS_002 = (int)TIRD2DEC.Execute1(WLa.LocReadLbIyy1SuppliedTotalInteger, 0, TIRD2DEC.ROUND_NONE, 0);
        if ( (LocGroupList_PS_002 > WLa.LocGroupList_MA) && (LocGroupList_PS_002 <= 48) )
        WLa.LocGroupList_MA = IntAttr.ValueOf(LocGroupList_PS_002);
      }
      else 
      {
        Globdata.GetStateData().SetLastSubStatementNumber( "1" );
        {
          Globdata.GetStateData().SetLastStatementNumber( "0000000088" );
          LocGroupList_PS_002 = (int)TIRD2DEC.Execute1(1, 0, TIRD2DEC.ROUND_NONE, 0);
          if ( (LocGroupList_PS_002 > WLa.LocGroupList_MA) && (LocGroupList_PS_002 <= 48) )
          WLa.LocGroupList_MA = IntAttr.ValueOf(LocGroupList_PS_002);
        }
      }
      
      Globdata.GetStateData().SetLastStatementNumber( "0000000089" );
      ExpGroupList_PS_001 = (int)TIRD2DEC.Execute1(0, 0, TIRD2DEC.ROUND_NONE, 0);
      if ( (ExpGroupList_PS_001 > WOa.ExpGroupList_MA) && (ExpGroupList_PS_001 <= 48) )
      WOa.ExpGroupList_MA = IntAttr.ValueOf(ExpGroupList_PS_001);
      Globdata.GetStateData().SetLastStatementNumber( "0000000090" );
      Globdata.GetStateData().SetLastSubStatementNumber( "1" );
      repeat_0066060319_esc_flag = false;
      do
      {
        {
          f_20972693(  );
        }
        Globdata.GetStateData().SetLastStatementNumber( "0000000090" );
        Globdata.GetStateData().SetLastStatementNumber( "0000000090" );
      }
      while ((!(TIRD2DEC.Execute((double)WLa.LocReadLbIyy1SuppliedTotalInteger, 0, TIRD2DEC.ROUND_NORMAL)  ==  TIRD2DEC.Execute((
        double)0, 0, TIRD2DEC.ROUND_NORMAL))) && (repeat_0066060319_esc_flag != true));return;
    }
    
    public void f_20972001(  )
    {
      func_0020972001_esc_flag = false;
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    **************************************************************  
      //    **                                                              
      //    If From comes empty for Full list, it is made equal to Max.     
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      Globdata.GetStateData().SetLastStatementNumber( "0000000061" );
      if ( (CompareExit.CompareTo(WLa.LocFromChildCparentPkeyAttrText, WLa.LocEmptyChildCparentPkeyAttrText) <= 0 && ((double) 
        WLa.LocFromChildCkeyAttrNum <= (double) WLa.LocEmptyChildCkeyAttrNum)) )
      {
        Globdata.GetStateData().SetLastStatementNumber( "0000000062" );
        WLa.LocFromChildCparentPkeyAttrText = FixedStringAttr.ValueOf(WLa.LocMaxChildCparentPkeyAttrText, 5);
        Globdata.GetStateData().SetLastStatementNumber( "0000000063" );
        WLa.LocFromChildCkeyAttrNum = IntAttr.ValueOf((int)TIRD2DEC.Execute1((double) WLa.LocMaxChildCkeyAttrNum, 0, 
          TIRD2DEC.ROUND_NONE, 6));
      }
      
      return;
    }
    
    public void f_20972693(  )
    {
      func_0020972693_esc_flag = false;
      Globdata.GetStateData().SetLastStatementNumber( "0000000091" );
      ExpGroupList_PS_001 = (int)TIRD2DEC.Execute1(((double)ExpGroupList_PS_001 + 1), 0, TIRD2DEC.ROUND_NONE, 0);
      if ( (ExpGroupList_PS_001 > WOa.ExpGroupList_MA) && (ExpGroupList_PS_001 <= 48) )
      WOa.ExpGroupList_MA = IntAttr.ValueOf(ExpGroupList_PS_001);
      Globdata.GetStateData().SetLastStatementNumber( "0000000092" );
      f_173015189_rgvc(  );
      f_173015042_rgvc(  );
      WOa.ExpGListChildCinstanceId[ExpGroupList_PS_001-1] = TimestampAttr.ValueOf(WLa.LocGListChildCinstanceId[LocGroupList_PS_002-1]
        );
      WOa.ExpGListChildCreferenceId[ExpGroupList_PS_001-1] = TimestampAttr.ValueOf(WLa.LocGListChildCreferenceId[
        LocGroupList_PS_002-1]);
      WOa.ExpGListChildCparentPkeyAttrText[ExpGroupList_PS_001-1] = FixedStringAttr.ValueOf(WLa.LocGListChildCparentPkeyAttrText[
        LocGroupList_PS_002-1], 5);
      WOa.ExpGListChildCkeyAttrNum[ExpGroupList_PS_001-1] = IntAttr.ValueOf(WLa.LocGListChildCkeyAttrNum[LocGroupList_PS_002-1]);
      WOa.ExpGListChildCsearchAttrText[ExpGroupList_PS_001-1] = FixedStringAttr.ValueOf(WLa.LocGListChildCsearchAttrText[
        LocGroupList_PS_002-1], 25);
      WOa.ExpGListChildCotherAttrText[ExpGroupList_PS_001-1] = FixedStringAttr.ValueOf(WLa.LocGListChildCotherAttrText[
        LocGroupList_PS_002-1], 25);
      Globdata.GetStateData().SetLastStatementNumber( "0000000093" );
      if ( CompareExit.CompareTo(WLa.LocFilterIyy1ListListDirection, "P") == 0 )
      {
        Globdata.GetStateData().SetLastStatementNumber( "0000000094" );
        LocGroupList_PS_002 = (int)TIRD2DEC.Execute1(((double)LocGroupList_PS_002 - 1), 0, TIRD2DEC.ROUND_NONE, 0);
        if ( (LocGroupList_PS_002 > WLa.LocGroupList_MA) && (LocGroupList_PS_002 <= 48) )
        WLa.LocGroupList_MA = IntAttr.ValueOf(LocGroupList_PS_002);
      }
      else 
      {
        Globdata.GetStateData().SetLastSubStatementNumber( "1" );
        {
          Globdata.GetStateData().SetLastStatementNumber( "0000000095" );
          LocGroupList_PS_002 = (int)TIRD2DEC.Execute1(((double)LocGroupList_PS_002 + 1), 0, TIRD2DEC.ROUND_NONE, 0);
          if ( (LocGroupList_PS_002 > WLa.LocGroupList_MA) && (LocGroupList_PS_002 <= 48) )
          WLa.LocGroupList_MA = IntAttr.ValueOf(LocGroupList_PS_002);
        }
      }
      
      Globdata.GetStateData().SetLastStatementNumber( "0000000096" );
      WLa.LocReadLbIyy1SuppliedTotalInteger = DoubleAttr.ValueOf(TIRD2DEC.Execute1((WLa.LocReadLbIyy1SuppliedTotalInteger - 1.0), 0, 
        TIRD2DEC.ROUND_NONE, 15));
      return;
    }
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // INITIALIZATION UTILITY FUNCTIONS 
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    
    public void f_22020126_localAlloc( String abname )
    {
      // Request localview allocation 
      WLa = (GEN.ORT.YYY.CYYY0251_LA)(IefRuntimeParm2.GetInstance( GetType().Assembly,
      	"GEN.ORT.YYY.CYYY0251_LA" ));
      if ( WLa == null )
      {
        Globdata.GetStateData().SetCurrentABId( "0022020126" );
        Globdata.GetStateData().SetCurrentABName( abname );
        Globdata.GetErrorData().SetErrorEncountered( ErrorData.ErrorEncounteredErrorFound );
        Globdata.GetErrorData().SetLastStatus( ErrorData.LastStatusIefAllocationError );
      }
    }
    
    public void f_22020126_init(  )
    {
      if ( NestingLevel < 2 )
      {
        WLa.Reset();
      }
      WLa.LocGroupList_MA = 0;
      for(LocGroupList_PS_002 = 1; LocGroupList_PS_002 <= 48; ++(LocGroupList_PS_002))
      {
      }
      WLa.LocGroupContext_MA = 0;
      for(LocGroupContext_PS_003 = 1; LocGroupContext_PS_003 <= 9; ++(LocGroupContext_PS_003))
      {
      }
      WOa.ExpGroupList_MA = 0;
      for(ExpGroupList_PS_001 = 1; ExpGroupList_PS_001 <= 48; ++(ExpGroupList_PS_001))
      {
        WOa.ExpGListChildCinstanceId[ExpGroupList_PS_001-1] = "00000000000000000000";
        WOa.ExpGListChildCreferenceId[ExpGroupList_PS_001-1] = "00000000000000000000";
        WOa.ExpGListChildCparentPkeyAttrText[ExpGroupList_PS_001-1] = "     ";
        WOa.ExpGListChildCkeyAttrNum[ExpGroupList_PS_001-1] = 0;
        WOa.ExpGListChildCsearchAttrText[ExpGroupList_PS_001-1] = "                         ";
        WOa.ExpGListChildCotherAttrText[ExpGroupList_PS_001-1] = "                         ";
      }
      WOa.ExpErrorIyy1ComponentSeverityCode = " ";
      WOa.ExpErrorIyy1ComponentRollbackIndicator = " ";
      WOa.ExpErrorIyy1ComponentOriginServid = 0.0;
      WOa.ExpErrorIyy1ComponentContextString = "";
      WOa.ExpErrorIyy1ComponentReturnCode = 0;
      WOa.ExpErrorIyy1ComponentReasonCode = 0;
      WOa.ExpErrorIyy1ComponentChecksum = "               ";
      ExpGroupList_PS_001 = 1;
      LocGroupList_PS_002 = 1;
      LocGroupContext_PS_003 = 1;
    }
    public void f_173015129_rgvc(  )
    {
      if ( (LocGroupContext_PS_003 > 9) || (LocGroupContext_PS_003 < 1) )
      {
        Globdata.GetErrorData().SetViewOverflow( ErrorData.ErrorEncounteredErrorFound );
        {
          throw new ABException();
        }
      }
    }
    public void f_173015189_rgvc(  )
    {
      if ( (LocGroupList_PS_002 > 48) || (LocGroupList_PS_002 < 1) )
      {
        Globdata.GetErrorData().SetViewOverflow( ErrorData.ErrorEncounteredErrorFound );
        {
          throw new ABException();
        }
      }
    }
    public void f_173015042_rgvc(  )
    {
      if ( (ExpGroupList_PS_001 > 48) || (ExpGroupList_PS_001 < 1) )
      {
        Globdata.GetErrorData().SetViewOverflow( ErrorData.ErrorEncounteredErrorFound );
        {
          throw new ABException();
        }
      }
    }
  }// end class
  
}

