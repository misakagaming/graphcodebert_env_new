namespace GEN.ORT.YYY
{
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  //
  //                    Source Code Generated by
  //                           CA Gen 8.6
  //
  //    Copyright (c) 2024 CA Technologies. All rights reserved.
  //
  //    Name: MYY10251_CHILD_LIST              Date: 2024/01/09
  //    Target OS:   CLR                       Time: 13:42:05
  //    Target DBMS: ODBC/ADO.NET              User: AliAl
  //    Access Method: <NONE>         
  //
  //    Generation options:
  //    Debug trace option not selected
  //    Data modeling constraint enforcement not selected
  //    Optimized import view initialization not selected
  //    Enforce default values with DBMS not selected
  //    Init unspecified optional fields to NULL not selected
  //
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // using Statements
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  using System;
  using com.ca.gen.vwrt;
  using com.ca.gen.vwrt.types;
  using com.ca.gen.vwrt.vdf;
  using com.ca.gen.csu.exception;
  
  using com.ca.gen.abrt;
  using com.ca.gen.abrt.functions;
  using com.ca.gen.abrt.cascade;
  using com.ca.gen.abrt.manager;
  using com.ca.gen.abrt.trace;
  using com.ca.gen.exits.common;
  using com.ca.gen.odc;
  using System.Data;
  using System.Collections;
  
  public class MYY10251 : ABBase
  {
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // IMPORT VIEW CLASS VARIABLE
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    MYY10251_IA WIa;
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // EXPORT VIEW CLASS VARIABLE
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    MYY10251_OA WOa;
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // LOCAL VIEW CLASS VARIABLE
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    MYY10251_LA WLa;
    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // ACTION BLOCK IMPORT/EXPORT VIEWS CLASS VARIABLES
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    GEN.ORT.YYY.CYYY0251_IA Cyyy0251Ia;
    GEN.ORT.YYY.CYYY0251_OA Cyyy0251Oa;
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // REPEATING GROUP VIEW STATUS FIELDS 
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    bool ExpGroupList_FL_001;
    int ExpGroupList_PS_001;
    bool ExpGroupList_RF_001;
    public const int ExpGroupList_MM_001 = 48;
    bool LocExpGroupList_FL_002;
    int LocExpGroupList_PS_002;
    bool LocExpGroupList_RF_002;
    public const int LocExpGroupList_MM_002 = 48;
    bool ExpGroupList_FL_003;
    int ExpGroupList_PS_003;
    bool ExpGroupList_RF_003;
    public const int ExpGroupList_MM_003 = 48;
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // FOR-LOOP CONTROL TEMPORARY VARIABLES 
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    int by___0070255429;
    int limit___0070255429;
    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // MISC DECLARATIONS AND PROTOTYPES 
    //    FOLLOW AS NEEDED:             
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    bool func_0022020125_esc_flag;
    bool while_0070255429_esc_flag;
    //       +->   MYY10251_CHILD_LIST               01/09/2024  13:42
    //       !       IMPORTS:
    //       !         Work View imp_filter iyy1_list (Transient, Mandatory,
    //       !                     Import only)
    //       !           sort_option
    //       !           scroll_type
    //       !           list_direction
    //       !           scroll_amount
    //       !           order_by_field_num
    //       !         Entity View imp_from iyy1_child (Transient, Mandatory,
    //       !                     Import only)
    //       !           cinstance_id
    //       !           cparent_pkey_attr_text
    //       !           ckey_attr_num
    //       !         Entity View imp_filter_start iyy1_child (Transient,
    //       !                     Mandatory, Import only)
    //       !           cparent_pkey_attr_text
    //       !           ckey_attr_num
    //       !         Entity View imp_filter_stop iyy1_child (Transient,
    //       !                     Mandatory, Import only)
    //       !           cparent_pkey_attr_text
    //       !           ckey_attr_num
    //       !         Entity View imp_filter iyy1_child (Transient,
    //       !                     Mandatory, Import only)
    //       !           csearch_attr_text
    //       !       EXPORTS:
    //       !         Group View (48) exp_group_list
    //       !           Entity View exp_g_list iyy1_child (Transient, Export
    //       !                       only)
    //       !             cinstance_id
    //       !             creference_id
    //       !             cparent_pkey_attr_text
    //       !             ckey_attr_num
    //       !             csearch_attr_text
    //       !             cother_attr_text
    //       !         Work View exp_error iyy1_component (Transient, Export
    //       !                     only)
    //       !           severity_code
    //       !           rollback_indicator
    //       !           origin_servid
    //       !           context_string
    //       !           return_code
    //       !           reason_code
    //       !           checksum
    //       !       LOCALS:
    //       !         Work View loc_imp_filter iyy1_list
    //       !           sort_option
    //       !           scroll_type
    //       !           list_direction
    //       !           scroll_amount
    //       !           order_by_field_num
    //       !         Entity View loc_imp_from child
    //       !           cinstance_id
    //       !           cparent_pkey_attr_text
    //       !           ckey_attr_num
    //       !         Entity View loc_imp_filter_start child
    //       !           cparent_pkey_attr_text
    //       !           ckey_attr_num
    //       !         Entity View loc_imp_filter_stop child
    //       !           cparent_pkey_attr_text
    //       !           ckey_attr_num
    //       !         Entity View loc_imp_filter child
    //       !           csearch_attr_text
    //       !         Group View (48) loc_exp_group_list
    //       !           Entity View loc_exp_g_list child
    //       !             cinstance_id
    //       !             creference_id
    //       !             cparent_pkey_attr_text
    //       !             ckey_attr_num
    //       !             csearch_attr_text
    //       !             cother_attr_text
    //       !
    //       !     PROCEDURE STATEMENTS
    //       !
    //     1 !  NOTE: 
    //     1 !  See the description for the purpose
    //     2 !   
    //     3 !  NOTE: 
    //     3 !  RELEASE HISTORY
    //     3 !  01_00 23-02-1998 New release
    //     3 !  
    //     4 !  NOTE: 
    //     4 !  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    //     4 !  !!!!!!!!!!!!
    //     4 !  SET <loc imp*> TO <imp*>
    //     4 !  
    //     5 !  SET loc_imp_filter iyy1_list list_direction TO imp_filter
    //     5 !              iyy1_list list_direction 
    //     6 !  SET loc_imp_filter iyy1_list scroll_type TO imp_filter
    //     6 !              iyy1_list scroll_type 
    //     7 !  SET loc_imp_filter iyy1_list sort_option TO imp_filter
    //     7 !              iyy1_list sort_option 
    //     8 !  SET loc_imp_filter iyy1_list scroll_amount TO imp_filter
    //     8 !              iyy1_list scroll_amount 
    //     9 !  SET loc_imp_filter iyy1_list order_by_field_num TO imp_filter
    //     9 !              iyy1_list order_by_field_num 
    //    10 !   
    //    11 !  SET loc_imp_from child cinstance_id TO imp_from iyy1_child
    //    11 !              cinstance_id 
    //    12 !  SET loc_imp_from child cparent_pkey_attr_text TO imp_from
    //    12 !              iyy1_child cparent_pkey_attr_text 
    //    13 !  SET loc_imp_from child ckey_attr_num TO imp_from iyy1_child
    //    13 !              ckey_attr_num 
    //    14 !   
    //    15 !  SET loc_imp_filter_start child cparent_pkey_attr_text TO
    //    15 !              imp_filter_start iyy1_child cparent_pkey_attr_text
    //    16 !  SET loc_imp_filter_start child ckey_attr_num TO
    //    16 !              imp_filter_start iyy1_child ckey_attr_num 
    //    17 !   
    //    18 !  SET loc_imp_filter_stop child cparent_pkey_attr_text TO
    //    18 !              loc_imp_filter_stop child cparent_pkey_attr_text 
    //    19 !  SET loc_imp_filter_stop child ckey_attr_num TO imp_filter_stop
    //    19 !              iyy1_child ckey_attr_num 
    //    20 !   
    //    21 !  SET loc_imp_filter child csearch_attr_text TO imp_filter
    //    21 !              iyy1_child csearch_attr_text 
    //    22 !   
    //    23 !  NOTE: 
    //    23 !  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    //    23 !  !!!!!!!!!!!!
    //    23 !  USE <implementation ab>
    //    23 !  
    //    24 !  USE cyyy0251_child_list
    //    24 !     WHICH IMPORTS: Work View loc_imp_filter iyy1_list TO Work
    //    24 !              View imp_filter iyy1_list
    //    24 !                    Entity View loc_imp_from child TO Entity
    //    24 !              View imp_from child
    //    24 !                    Entity View loc_imp_filter_start child TO
    //    24 !              Entity View imp_filter_start child
    //    24 !                    Entity View loc_imp_filter_stop child TO
    //    24 !              Entity View imp_filter_stop child
    //    24 !                    Entity View loc_imp_filter child TO Entity
    //    24 !              View imp_filter child
    //    24 !     WHICH EXPORTS: Group View  loc_exp_group_list FROM Group
    //    24 !              View exp_group_list
    //    24 !                    Work View exp_error iyy1_component FROM Work
    //    24 !              View exp_error iyy1_component
    //    25 !   
    //    26 !  NOTE: 
    //    26 !  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    //    26 !  !!!!!!!!!!!!
    //    26 !  SET <exp*> TO <loc exp*>
    //    26 !  
    //    27 !  +=>FOR SUBSCRIPT OF loc_exp_group_list FROM 1 TO LAST OF
    //    27 !  !        loc_exp_group_list BY 1
    //    28 !  !  SET SUBSCRIPT OF exp_group_list TO SUBSCRIPT OF
    //    28 !  !              loc_exp_group_list 
    //    29 !  !  SET exp_g_list iyy1_child cinstance_id TO loc_exp_g_list
    //    29 !  !              child cinstance_id 
    //    30 !  !  SET exp_g_list iyy1_child creference_id TO loc_exp_g_list
    //    30 !  !              child creference_id 
    //    31 !  !  SET exp_g_list iyy1_child cparent_pkey_attr_text TO
    //    31 !  !              loc_exp_g_list child cparent_pkey_attr_text 
    //    32 !  !  SET exp_g_list iyy1_child ckey_attr_num TO loc_exp_g_list
    //    32 !  !              child ckey_attr_num 
    //    33 !  !  SET exp_g_list iyy1_child csearch_attr_text TO
    //    33 !  !              loc_exp_g_list child csearch_attr_text 
    //    34 !  !  SET exp_g_list iyy1_child cother_attr_text TO
    //    34 !  !              loc_exp_g_list child cother_attr_text 
    //    27 !  +--
    //       +---
    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    //  CONSTRUCTOR FOR THE CLASS       
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    public MYY10251(  )
    {
      IefCGenRlse = "CA Gen 8.6";
      IsCopyright = "Copyright (c) 2024 CA Technologies. All rights reserved.";
      IefCGenDate = "2024/01/09";
      IefCGenTime = "13:42:05";
      IefCGenEncy = "9.2.A6";
      IefCGenUserId = "AliAl";
      IefCGenModel = "N8I_ORT_YYY_0112_TEMPLATE";
      IefCGenSubset = "ALL";
      IefCGenName = "MYY10251_CHILD_LIST";
      NestingLevel = 0;
      ValChkDeadlockTimeout = false;
      ValChkDBError = false;
    }
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // ACTION BLOCK FUNCTION DECLARATIONS 
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    
    public void Execute( Object in_runtime_parm1, 
    	IRuntimePStepContext in_runtime_parm2, 
    	GlobData in_globdata, 
    	MYY10251_IA import_view, 
    	MYY10251_OA export_view )
    {
      IefRuntimeParm1 = in_runtime_parm1;
      IefRuntimeParm2 = in_runtime_parm2;
      Globdata = in_globdata;
      WIa = import_view;
      WOa = export_view;
      _Execute();
    }
    
    private void _Execute()
    {
      
      f_22020125_localAlloc( "MYY10251_CHILD_LIST" );
      if ( Globdata.GetErrorData().GetLastStatus() == ErrorData.LastStatusIefAllocationError )
      	return;
      
      ++(NestingLevel);
      try {
        f_22020125_init(  );
        f_22020125(  );
      } catch( Exception e ) {
        if ( ((Globdata.GetErrorData().GetStatus() == ErrorData.StatusNone) && (Globdata.GetErrorData().GetErrorEncountered() == 
          ErrorData.ErrorEncounteredNoErrorFound)) && (Globdata.GetErrorData().GetViewOverflow() == 
          ErrorData.ErrorEncounteredNoErrorFound) )
        {
          Globdata.GetErrorData().SetStatus( ErrorData.LastStatusFatalError );
          Globdata.GetErrorData().SetLastStatus( ErrorData.LastStatusUnexpectedExceptionError );
          Globdata.GetErrorData().SetErrorEncountered( ErrorData.ErrorEncounteredErrorFound );
          Globdata.GetErrorData(  ).SetErrorMessage( e );
        }
      }
      --(NestingLevel);
    }
    public void f_22020125(  )
    {
      func_0022020125_esc_flag = false;
      Globdata.GetStateData().SetCurrentABId( "0022020125" );
      Globdata.GetStateData().SetCurrentABName( "MYY10251_CHILD_LIST" );
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    See the description for the purpose                             
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    RELEASE HISTORY                                                 
      //    01_00 23-02-1998 New release                                    
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  
      //    !!!!!!!!!!!!                                                    
      //    SET <loc imp*> TO <imp*>                                        
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      Globdata.GetStateData().SetLastStatementNumber( "0000000005" );
      WLa.LocImpFilterIyy1ListListDirection = FixedStringAttr.ValueOf(WIa.ImpFilterIyy1ListListDirection, 1);
      Globdata.GetStateData().SetLastStatementNumber( "0000000006" );
      WLa.LocImpFilterIyy1ListScrollType = FixedStringAttr.ValueOf(WIa.ImpFilterIyy1ListScrollType, 1);
      Globdata.GetStateData().SetLastStatementNumber( "0000000007" );
      WLa.LocImpFilterIyy1ListSortOption = FixedStringAttr.ValueOf(WIa.ImpFilterIyy1ListSortOption, 3);
      Globdata.GetStateData().SetLastStatementNumber( "0000000008" );
      WLa.LocImpFilterIyy1ListScrollAmount = IntAttr.ValueOf((int)TIRD2DEC.Execute1((double) WIa.ImpFilterIyy1ListScrollAmount, 0, 
        TIRD2DEC.ROUND_NONE, 5));
      Globdata.GetStateData().SetLastStatementNumber( "0000000009" );
      WLa.LocImpFilterIyy1ListOrderByFieldNum = ShortAttr.ValueOf((short)TIRD2DEC.Execute1((double) 
        WIa.ImpFilterIyy1ListOrderByFieldNum, 0, TIRD2DEC.ROUND_NONE, 1));
      
      Globdata.GetStateData().SetLastStatementNumber( "0000000011" );
      WLa.LocImpFromChildCinstanceId = TimestampAttr.ValueOf(WIa.ImpFromIyy1ChildCinstanceId);
      Globdata.GetStateData().SetLastStatementNumber( "0000000012" );
      WLa.LocImpFromChildCparentPkeyAttrText = FixedStringAttr.ValueOf(WIa.ImpFromIyy1ChildCparentPkeyAttrText, 5);
      Globdata.GetStateData().SetLastStatementNumber( "0000000013" );
      WLa.LocImpFromChildCkeyAttrNum = IntAttr.ValueOf((int)TIRD2DEC.Execute1((double) WIa.ImpFromIyy1ChildCkeyAttrNum, 0, 
        TIRD2DEC.ROUND_NONE, 6));
      
      Globdata.GetStateData().SetLastStatementNumber( "0000000015" );
      WLa.LocImpFilterStartChildCparentPkeyAttrText = FixedStringAttr.ValueOf(WIa.ImpFilterStartIyy1ChildCparentPkeyAttrText, 5);
      Globdata.GetStateData().SetLastStatementNumber( "0000000016" );
      WLa.LocImpFilterStartChildCkeyAttrNum = IntAttr.ValueOf((int)TIRD2DEC.Execute1((double) WIa.ImpFilterStartIyy1ChildCkeyAttrNum,
         0, TIRD2DEC.ROUND_NONE, 6));
      
      Globdata.GetStateData().SetLastStatementNumber( "0000000018" );
      // No code genned for Set if source and dest are the same
      ;
      Globdata.GetStateData().SetLastStatementNumber( "0000000019" );
      WLa.LocImpFilterStopChildCkeyAttrNum = IntAttr.ValueOf((int)TIRD2DEC.Execute1((double) WIa.ImpFilterStopIyy1ChildCkeyAttrNum, 
        0, TIRD2DEC.ROUND_NONE, 6));
      
      Globdata.GetStateData().SetLastStatementNumber( "0000000021" );
      WLa.LocImpFilterChildCsearchAttrText = FixedStringAttr.ValueOf(WIa.ImpFilterIyy1ChildCsearchAttrText, 25);
      
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  
      //    !!!!!!!!!!!!                                                    
      //    USE <implementation ab>                                         
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      Globdata.GetStateData().SetLastStatementNumber( "0000000024" );
      
      Cyyy0251Ia = (GEN.ORT.YYY.CYYY0251_IA)(IefRuntimeParm2.GetInstance( typeof(GEN.ORT.YYY.CYYY0251).Assembly,
      	"GEN.ORT.YYY.CYYY0251_IA" ));
      Cyyy0251Oa = (GEN.ORT.YYY.CYYY0251_OA)(IefRuntimeParm2.GetInstance( typeof(GEN.ORT.YYY.CYYY0251).Assembly,
      	"GEN.ORT.YYY.CYYY0251_OA" ));
      Cyyy0251Ia.ImpFilterChildCsearchAttrText = FixedStringAttr.ValueOf(WLa.LocImpFilterChildCsearchAttrText, 25);
      Cyyy0251Ia.ImpFilterStopChildCparentPkeyAttrText = FixedStringAttr.ValueOf(WLa.LocImpFilterStopChildCparentPkeyAttrText, 5);
      Cyyy0251Ia.ImpFilterStopChildCkeyAttrNum = IntAttr.ValueOf(WLa.LocImpFilterStopChildCkeyAttrNum);
      Cyyy0251Ia.ImpFilterStartChildCparentPkeyAttrText = FixedStringAttr.ValueOf(WLa.LocImpFilterStartChildCparentPkeyAttrText, 5);
      Cyyy0251Ia.ImpFilterStartChildCkeyAttrNum = IntAttr.ValueOf(WLa.LocImpFilterStartChildCkeyAttrNum);
      Cyyy0251Ia.ImpFromChildCinstanceId = TimestampAttr.ValueOf(WLa.LocImpFromChildCinstanceId);
      Cyyy0251Ia.ImpFromChildCparentPkeyAttrText = FixedStringAttr.ValueOf(WLa.LocImpFromChildCparentPkeyAttrText, 5);
      Cyyy0251Ia.ImpFromChildCkeyAttrNum = IntAttr.ValueOf(WLa.LocImpFromChildCkeyAttrNum);
      Cyyy0251Ia.ImpFilterIyy1ListSortOption = FixedStringAttr.ValueOf(WLa.LocImpFilterIyy1ListSortOption, 3);
      Cyyy0251Ia.ImpFilterIyy1ListScrollType = FixedStringAttr.ValueOf(WLa.LocImpFilterIyy1ListScrollType, 1);
      Cyyy0251Ia.ImpFilterIyy1ListListDirection = FixedStringAttr.ValueOf(WLa.LocImpFilterIyy1ListListDirection, 1);
      Cyyy0251Ia.ImpFilterIyy1ListScrollAmount = IntAttr.ValueOf(WLa.LocImpFilterIyy1ListScrollAmount);
      Cyyy0251Ia.ImpFilterIyy1ListOrderByFieldNum = ShortAttr.ValueOf(WLa.LocImpFilterIyy1ListOrderByFieldNum);
      Globdata.GetErrorData().SetErrorEncountered( ErrorData.ErrorEncounteredNoErrorFound );
      IefRuntimeParm2.UseActionBlock( typeof(GEN.ORT.YYY.CYYY0251).Assembly,
      	"GEN.ORT.YYY.CYYY0251",
      	"Execute",
      	Cyyy0251Ia,
      	Cyyy0251Oa );
      if ( ((Globdata.GetErrorData().GetStatus() != ErrorData.StatusNone) || (Globdata.GetErrorData().GetErrorEncountered() != 
        ErrorData.ErrorEncounteredNoErrorFound)) || (Globdata.GetErrorData().GetViewOverflow() != 
        ErrorData.ErrorEncounteredNoErrorFound) )
      {
        throw new ABException();
      }
      Globdata.GetStateData().SetCurrentABId( "0022020125" );
      Globdata.GetStateData().SetCurrentABName( "MYY10251_CHILD_LIST" );
      Globdata.GetStateData().SetLastStatementNumber( "0000000024" );
      WOa.ExpErrorIyy1ComponentSeverityCode = FixedStringAttr.ValueOf(Cyyy0251Oa.ExpErrorIyy1ComponentSeverityCode, 1);
      WOa.ExpErrorIyy1ComponentRollbackIndicator = FixedStringAttr.ValueOf(Cyyy0251Oa.ExpErrorIyy1ComponentRollbackIndicator, 1);
      WOa.ExpErrorIyy1ComponentOriginServid = DoubleAttr.ValueOf(Cyyy0251Oa.ExpErrorIyy1ComponentOriginServid);
      WOa.ExpErrorIyy1ComponentContextString = StringAttr.ValueOf(Cyyy0251Oa.ExpErrorIyy1ComponentContextString, 512);
      WOa.ExpErrorIyy1ComponentReturnCode = IntAttr.ValueOf(Cyyy0251Oa.ExpErrorIyy1ComponentReturnCode);
      WOa.ExpErrorIyy1ComponentReasonCode = IntAttr.ValueOf(Cyyy0251Oa.ExpErrorIyy1ComponentReasonCode);
      WOa.ExpErrorIyy1ComponentChecksum = FixedStringAttr.ValueOf(Cyyy0251Oa.ExpErrorIyy1ComponentChecksum, 15);
      WLa.LocExpGroupList_MA = IntAttr.ValueOf(Cyyy0251Oa.ExpGroupList_MA);
      for(Adim1 = 1; Adim1 <= WLa.LocExpGroupList_MA; ++(Adim1))
      {
        WLa.LocExpGListChildCinstanceId[Adim1-1] = TimestampAttr.ValueOf(Cyyy0251Oa.ExpGListChildCinstanceId[Adim1-1]);
        WLa.LocExpGListChildCreferenceId[Adim1-1] = TimestampAttr.ValueOf(Cyyy0251Oa.ExpGListChildCreferenceId[Adim1-1]);
        WLa.LocExpGListChildCparentPkeyAttrText[Adim1-1] = FixedStringAttr.ValueOf(Cyyy0251Oa.ExpGListChildCparentPkeyAttrText[
          Adim1-1], 5);
        WLa.LocExpGListChildCkeyAttrNum[Adim1-1] = IntAttr.ValueOf(Cyyy0251Oa.ExpGListChildCkeyAttrNum[Adim1-1]);
        WLa.LocExpGListChildCsearchAttrText[Adim1-1] = FixedStringAttr.ValueOf(Cyyy0251Oa.ExpGListChildCsearchAttrText[Adim1-1], 25)
          ;
        WLa.LocExpGListChildCotherAttrText[Adim1-1] = FixedStringAttr.ValueOf(Cyyy0251Oa.ExpGListChildCotherAttrText[Adim1-1], 25);
      }
      Cyyy0251Ia.FreeInstance(  );
      Cyyy0251Ia = null;
      Cyyy0251Oa.FreeInstance(  );
      Cyyy0251Oa = null;
      
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      //    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  
      //    !!!!!!!!!!!!                                                    
      //    SET <exp*> TO <loc exp*>                                        
      //                                                                    
      // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
      Globdata.GetStateData().SetLastStatementNumber( "0000000027" );
      while_0070255429_esc_flag = false;
      LocExpGroupList_PS_002 = (int)1;
      limit___0070255429 = WLa.LocExpGroupList_MA;
      by___0070255429 = 1;
      while ((LocExpGroupList_PS_002 <= limit___0070255429) && (while_0070255429_esc_flag != true))
      {
        if ( (LocExpGroupList_PS_002 > 48) || (LocExpGroupList_PS_002 < 1) )
        break;
        if ( (LocExpGroupList_PS_002 > WLa.LocExpGroupList_MA) && (LocExpGroupList_PS_002 <= 48) )
        WLa.LocExpGroupList_MA = IntAttr.ValueOf(LocExpGroupList_PS_002);
        {
          Globdata.GetStateData().SetLastStatementNumber( "0000000028" );
          ExpGroupList_PS_001 = (int)TIRD2DEC.Execute1(LocExpGroupList_PS_002, 0, TIRD2DEC.ROUND_NONE, 0);
          if ( (ExpGroupList_PS_001 > WOa.ExpGroupList_MA) && (ExpGroupList_PS_001 <= 48) )
          WOa.ExpGroupList_MA = IntAttr.ValueOf(ExpGroupList_PS_001);
          Globdata.GetStateData().SetLastStatementNumber( "0000000029" );
          WOa.ExpGListIyy1ChildCinstanceId[ExpGroupList_PS_001-1] = TimestampAttr.ValueOf(WLa.LocExpGListChildCinstanceId[
            LocExpGroupList_PS_002-1]);
          f_173015168_rgvc(  );
          Globdata.GetStateData().SetLastStatementNumber( "0000000030" );
          WOa.ExpGListIyy1ChildCreferenceId[ExpGroupList_PS_001-1] = TimestampAttr.ValueOf(WLa.LocExpGListChildCreferenceId[
            LocExpGroupList_PS_002-1]);
          f_173015168_rgvc(  );
          Globdata.GetStateData().SetLastStatementNumber( "0000000031" );
          WOa.ExpGListIyy1ChildCparentPkeyAttrText[ExpGroupList_PS_001-1] = FixedStringAttr.ValueOf(
            WLa.LocExpGListChildCparentPkeyAttrText[LocExpGroupList_PS_002-1], 5);
          f_173015168_rgvc(  );
          Globdata.GetStateData().SetLastStatementNumber( "0000000032" );
          WOa.ExpGListIyy1ChildCkeyAttrNum[ExpGroupList_PS_001-1] = IntAttr.ValueOf((int)TIRD2DEC.Execute1((double) 
            WLa.LocExpGListChildCkeyAttrNum[LocExpGroupList_PS_002-1], 0, TIRD2DEC.ROUND_NONE, 6));
          f_173015168_rgvc(  );
          Globdata.GetStateData().SetLastStatementNumber( "0000000033" );
          WOa.ExpGListIyy1ChildCsearchAttrText[ExpGroupList_PS_001-1] = FixedStringAttr.ValueOf(WLa.LocExpGListChildCsearchAttrText[
            LocExpGroupList_PS_002-1], 25);
          f_173015168_rgvc(  );
          Globdata.GetStateData().SetLastStatementNumber( "0000000034" );
          WOa.ExpGListIyy1ChildCotherAttrText[ExpGroupList_PS_001-1] = FixedStringAttr.ValueOf(WLa.LocExpGListChildCotherAttrText[
            LocExpGroupList_PS_002-1], 25);
          f_173015168_rgvc(  );
        }
        Globdata.GetStateData().SetLastStatementNumber( "0000000027" );
        LocExpGroupList_PS_002 = (int)(LocExpGroupList_PS_002 + by___0070255429);
        Globdata.GetStateData().SetLastStatementNumber( "0000000027" );
      }
      if ( LocExpGroupList_PS_002 > 48 )
      LocExpGroupList_PS_002 = 48;
      return;
    }
    
    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // SUBORDINATE FUNCTIONS
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // INITIALIZATION UTILITY FUNCTIONS 
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    
    public void f_22020125_localAlloc( String abname )
    {
      // Request localview allocation 
      WLa = (GEN.ORT.YYY.MYY10251_LA)(IefRuntimeParm2.GetInstance( GetType().Assembly,
      	"GEN.ORT.YYY.MYY10251_LA" ));
      if ( WLa == null )
      {
        Globdata.GetStateData().SetCurrentABId( "0022020125" );
        Globdata.GetStateData().SetCurrentABName( abname );
        Globdata.GetErrorData().SetErrorEncountered( ErrorData.ErrorEncounteredErrorFound );
        Globdata.GetErrorData().SetLastStatus( ErrorData.LastStatusIefAllocationError );
      }
    }
    
    public void f_22020125_init(  )
    {
      if ( NestingLevel < 2 )
      {
        WLa.Reset();
      }
      WLa.LocExpGroupList_MA = 0;
      for(LocExpGroupList_PS_002 = 1; LocExpGroupList_PS_002 <= 48; ++(LocExpGroupList_PS_002))
      {
      }
      WOa.ExpGroupList_MA = 0;
      for(ExpGroupList_PS_001 = 1; ExpGroupList_PS_001 <= 48; ++(ExpGroupList_PS_001))
      {
        WOa.ExpGListIyy1ChildCinstanceId[ExpGroupList_PS_001-1] = "00000000000000000000";
        WOa.ExpGListIyy1ChildCreferenceId[ExpGroupList_PS_001-1] = "00000000000000000000";
        WOa.ExpGListIyy1ChildCparentPkeyAttrText[ExpGroupList_PS_001-1] = "     ";
        WOa.ExpGListIyy1ChildCkeyAttrNum[ExpGroupList_PS_001-1] = 0;
        WOa.ExpGListIyy1ChildCsearchAttrText[ExpGroupList_PS_001-1] = "                         ";
        WOa.ExpGListIyy1ChildCotherAttrText[ExpGroupList_PS_001-1] = "                         ";
      }
      WOa.ExpErrorIyy1ComponentSeverityCode = " ";
      WOa.ExpErrorIyy1ComponentRollbackIndicator = " ";
      WOa.ExpErrorIyy1ComponentOriginServid = 0.0;
      WOa.ExpErrorIyy1ComponentContextString = "";
      WOa.ExpErrorIyy1ComponentReturnCode = 0;
      WOa.ExpErrorIyy1ComponentReasonCode = 0;
      WOa.ExpErrorIyy1ComponentChecksum = "               ";
      ExpGroupList_PS_001 = 1;
      LocExpGroupList_PS_002 = 1;
    }
    public void f_173015168_rgvc(  )
    {
      if ( (ExpGroupList_PS_001 > 48) || (ExpGroupList_PS_001 < 1) )
      {
        Globdata.GetErrorData().SetViewOverflow( ErrorData.ErrorEncounteredErrorFound );
        {
          throw new ABException();
        }
      }
    }
  }// end class
  
}

