namespace GEN.ORT.YYY
{
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  //
  //                    Source Code Generated by
  //                           CA Gen 8.6
  //
  //    Copyright (c) 2024 CA Technologies. All rights reserved.
  //
  //    Name: DYYY0231_CHILD_UPDATE            Date: 2024/01/09
  //    Target OS:   CLR                       Time: 13:41:06
  //    Target DBMS: ODBC/ADO.NET              User: AliAl
  //    Access Method: <NONE>         
  //
  //    Generation options:
  //    Debug trace option not selected
  //    Data modeling constraint enforcement not selected
  //    Optimized import view initialization not selected
  //    Enforce default values with DBMS not selected
  //    Init unspecified optional fields to NULL not selected
  //
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  // using Statements
  // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  using System;
  using com.ca.gen.vwrt;
  using com.ca.gen.vwrt.types;
  using com.ca.gen.vwrt.vdf;
  using com.ca.gen.csu.exception;
  
  using com.ca.gen.abrt;
  using com.ca.gen.abrt.functions;
  using com.ca.gen.abrt.cascade;
  using com.ca.gen.abrt.manager;
  using com.ca.gen.abrt.trace;
  using com.ca.gen.exits.common;
  using com.ca.gen.odc;
  using System.Data;
  using System.Collections;
  
  public class DYYY0231 : ABBase
  {
    // * * * * * * * * * * * * * * * * * * *
    // ENTITY ACTION STATEMENT STATUS FLAGS 
    // ENTITY VIEW STATUS FLAGS AND         
    // LAST COMMAND FOR EACH ENTITY VIEW    
    // * * * * * * * * * * * * * * * * * * *
    string sl_29360187 = ErrorData.LastStatusNone;
    string up_27263039 = ErrorData.LastStatusNone;
    string Child_es;
    string Child_001cd;
    string Child_lk;
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // IMPORT VIEW CLASS VARIABLE
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    DYYY0231_IA WIa;
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // EXPORT VIEW CLASS VARIABLE
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    DYYY0231_OA WOa;
    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // START OF ENTITY ACTION VIEW
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    /// <summary>
    /// Internal data view storage for: DYYY0231_EA
    /// </summary>
    [Serializable]
    public class DYYY0231_EA : ViewBase, IEntityActionView
    {
      // Entity View: 
      //        Type: CHILD
      /// <summary>
      /// Internal storage for attribute missing flag for: ChildCinstanceId
      /// </summary>
      private char _ChildCinstanceId_AS;
      /// <summary>
      /// Attribute missing flag for: ChildCinstanceId
      /// </summary>
      public char ChildCinstanceId_AS {
        get {
          return(_ChildCinstanceId_AS);
        }
        set {
          _ChildCinstanceId_AS = value;
        }
      }
      /// <summary>
      /// Internal storage, attribute for: ChildCinstanceId
      /// Domain: Timestamp
      /// Length: 20
      /// </summary>
      private string _ChildCinstanceId;
      /// <summary>
      /// Attribute for: ChildCinstanceId
      /// </summary>
      public string ChildCinstanceId {
        get {
          return(_ChildCinstanceId);
        }
        set {
          _ChildCinstanceId = value;
        }
      }
      /// <summary>
      /// Internal storage for attribute missing flag for: ChildCreferenceId
      /// </summary>
      private char _ChildCreferenceId_AS;
      /// <summary>
      /// Attribute missing flag for: ChildCreferenceId
      /// </summary>
      public char ChildCreferenceId_AS {
        get {
          return(_ChildCreferenceId_AS);
        }
        set {
          _ChildCreferenceId_AS = value;
        }
      }
      /// <summary>
      /// Internal storage, attribute for: ChildCreferenceId
      /// Domain: Timestamp
      /// Length: 20
      /// </summary>
      private string _ChildCreferenceId;
      /// <summary>
      /// Attribute for: ChildCreferenceId
      /// </summary>
      public string ChildCreferenceId {
        get {
          return(_ChildCreferenceId);
        }
        set {
          _ChildCreferenceId = value;
        }
      }
      /// <summary>
      /// Internal storage for attribute missing flag for: ChildCupdateUserId
      /// </summary>
      private char _ChildCupdateUserId_AS;
      /// <summary>
      /// Attribute missing flag for: ChildCupdateUserId
      /// </summary>
      public char ChildCupdateUserId_AS {
        get {
          return(_ChildCupdateUserId_AS);
        }
        set {
          _ChildCupdateUserId_AS = value;
        }
      }
      /// <summary>
      /// Internal storage, attribute for: ChildCupdateUserId
      /// Domain: Text
      /// Length: 8
      /// Varying Length: N
      /// </summary>
      private string _ChildCupdateUserId;
      /// <summary>
      /// Attribute for: ChildCupdateUserId
      /// </summary>
      public string ChildCupdateUserId {
        get {
          return(_ChildCupdateUserId);
        }
        set {
          _ChildCupdateUserId = value;
        }
      }
      /// <summary>
      /// Internal storage for attribute missing flag for: ChildCparentPkeyAttrText
      /// </summary>
      private char _ChildCparentPkeyAttrText_AS;
      /// <summary>
      /// Attribute missing flag for: ChildCparentPkeyAttrText
      /// </summary>
      public char ChildCparentPkeyAttrText_AS {
        get {
          return(_ChildCparentPkeyAttrText_AS);
        }
        set {
          _ChildCparentPkeyAttrText_AS = value;
        }
      }
      /// <summary>
      /// Internal storage, attribute for: ChildCparentPkeyAttrText
      /// Domain: Text
      /// Length: 5
      /// Varying Length: N
      /// </summary>
      private string _ChildCparentPkeyAttrText;
      /// <summary>
      /// Attribute for: ChildCparentPkeyAttrText
      /// </summary>
      public string ChildCparentPkeyAttrText {
        get {
          return(_ChildCparentPkeyAttrText);
        }
        set {
          _ChildCparentPkeyAttrText = value;
        }
      }
      /// <summary>
      /// Internal storage for attribute missing flag for: ChildCkeyAttrNum
      /// </summary>
      private char _ChildCkeyAttrNum_AS;
      /// <summary>
      /// Attribute missing flag for: ChildCkeyAttrNum
      /// </summary>
      public char ChildCkeyAttrNum_AS {
        get {
          return(_ChildCkeyAttrNum_AS);
        }
        set {
          _ChildCkeyAttrNum_AS = value;
        }
      }
      /// <summary>
      /// Internal storage, attribute for: ChildCkeyAttrNum
      /// Domain: Number
      /// Length: 6
      /// Decimal Places: 0
      /// Decimal Precision: N
      /// </summary>
      private int _ChildCkeyAttrNum;
      /// <summary>
      /// Attribute for: ChildCkeyAttrNum
      /// </summary>
      public int ChildCkeyAttrNum {
        get {
          return(_ChildCkeyAttrNum);
        }
        set {
          _ChildCkeyAttrNum = value;
        }
      }
      /// <summary>
      /// Internal storage for attribute missing flag for: ChildCsearchAttrText
      /// </summary>
      private char _ChildCsearchAttrText_AS;
      /// <summary>
      /// Attribute missing flag for: ChildCsearchAttrText
      /// </summary>
      public char ChildCsearchAttrText_AS {
        get {
          return(_ChildCsearchAttrText_AS);
        }
        set {
          _ChildCsearchAttrText_AS = value;
        }
      }
      /// <summary>
      /// Internal storage, attribute for: ChildCsearchAttrText
      /// Domain: Text
      /// Length: 25
      /// Varying Length: N
      /// </summary>
      private string _ChildCsearchAttrText;
      /// <summary>
      /// Attribute for: ChildCsearchAttrText
      /// </summary>
      public string ChildCsearchAttrText {
        get {
          return(_ChildCsearchAttrText);
        }
        set {
          _ChildCsearchAttrText = value;
        }
      }
      /// <summary>
      /// Internal storage for attribute missing flag for: ChildCotherAttrText
      /// </summary>
      private char _ChildCotherAttrText_AS;
      /// <summary>
      /// Attribute missing flag for: ChildCotherAttrText
      /// </summary>
      public char ChildCotherAttrText_AS {
        get {
          return(_ChildCotherAttrText_AS);
        }
        set {
          _ChildCotherAttrText_AS = value;
        }
      }
      /// <summary>
      /// Internal storage, attribute for: ChildCotherAttrText
      /// Domain: Text
      /// Length: 25
      /// Varying Length: N
      /// </summary>
      private string _ChildCotherAttrText;
      /// <summary>
      /// Attribute for: ChildCotherAttrText
      /// </summary>
      public string ChildCotherAttrText {
        get {
          return(_ChildCotherAttrText);
        }
        set {
          _ChildCotherAttrText = value;
        }
      }
      /// <summary>
      /// Default Constructor
      /// </summary>
      
      public DYYY0231_EA(  )
      {
        Reset(  );
      }
      /// <summary>
      /// Copy Constructor
      /// </summary>
      
      public DYYY0231_EA( DYYY0231_EA orig )
      {
        ChildCinstanceId_AS = orig.ChildCinstanceId_AS;
        ChildCinstanceId = orig.ChildCinstanceId;
        ChildCreferenceId_AS = orig.ChildCreferenceId_AS;
        ChildCreferenceId = orig.ChildCreferenceId;
        ChildCupdateUserId_AS = orig.ChildCupdateUserId_AS;
        ChildCupdateUserId = orig.ChildCupdateUserId;
        ChildCparentPkeyAttrText_AS = orig.ChildCparentPkeyAttrText_AS;
        ChildCparentPkeyAttrText = orig.ChildCparentPkeyAttrText;
        ChildCkeyAttrNum_AS = orig.ChildCkeyAttrNum_AS;
        ChildCkeyAttrNum = orig.ChildCkeyAttrNum;
        ChildCsearchAttrText_AS = orig.ChildCsearchAttrText_AS;
        ChildCsearchAttrText = orig.ChildCsearchAttrText;
        ChildCotherAttrText_AS = orig.ChildCotherAttrText_AS;
        ChildCotherAttrText = orig.ChildCotherAttrText;
      }
      /// <summary>
      /// clone constructor
      /// </summary>
      
      public override Object Clone(  )
      {
        return(new DYYY0231_EA(this));
      }
      /// <summary>
      /// Resets all properties to the defaults.
      /// </summary>
      
      public void Reset(  )
      {
        ChildCinstanceId_AS = ' ';
        ChildCinstanceId = "00000000000000000000";
        ChildCreferenceId_AS = ' ';
        ChildCreferenceId = "00000000000000000000";
        ChildCupdateUserId_AS = ' ';
        ChildCupdateUserId = "        ";
        ChildCparentPkeyAttrText_AS = ' ';
        ChildCparentPkeyAttrText = "     ";
        ChildCkeyAttrNum_AS = ' ';
        ChildCkeyAttrNum = 0;
        ChildCsearchAttrText_AS = ' ';
        ChildCsearchAttrText = "                         ";
        ChildCotherAttrText_AS = ' ';
        ChildCotherAttrText = "                         ";
      }
    }
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // ENTITY ACTION VIEW CLASS VARIABLE
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    DYYY0231_EA WEa = new DYYY0231_EA();
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // LOCAL VIEW CLASS VARIABLE
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    DYYY0231_LA WLa;
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // CURSOR OPEN FLAGS
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    bool curs_open_0029360187 = false;
    
    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // HOST VARIABLES FOR TABLE: VDVYYYC
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    int CkeyAttr_001EF;
    int CkeyAttr_002EN;
    string CsearchAttr_003EF;
    string CsearchAttr_004EN;
    string CotherAttr_005EF;
    string CotherAttr_006EN;
    string CupdateUserid_007EF;
    string CupdateUserid_008EN;
    DateTime CinstanceId_009EF;
    DateTime CinstanceId_010EN;
    DateTime CreferenceId_011EF;
    DateTime CreferenceId_012EN;
    string FkVdvyyyppkeyAtt_013EF;
    string FkVdvyyyppkeyAtt_014EN;
    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // TEMPORARY HOST VARIABLES 
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    string CparentPkeyAttrText_001TP;
    int CkeyAttrNum_002TP;
    
    
    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // MISC DECLARATIONS AND PROTOTYPES 
    //    FOLLOW AS NEEDED:             
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    bool func_0022020307_esc_flag;
    IAbstractCommand hstmt_0037934449_1_cmd;
    IAbstractResultSet hstmt_0037934449_1_rs;
    bool func_0020972125_esc_flag;
    IAbstractCommand hstmt_0027263039_1_cmd;
    int hstmt_0027263039_1_cnt;
    IAbstractResultSet hstmt_0027263039_1_rs;
    bool func_0020972884_esc_flag;
    //       +->   DYYY0231_CHILD_UPDATE             01/09/2024  13:41
    //       !       IMPORTS:
    //       !         Work View imp_error iyy1_component (Transient,
    //       !                     Mandatory, Import only)
    //       !           severity_code
    //       !           rollback_indicator
    //       !           origin_servid
    //       !           context_string
    //       !           return_code
    //       !           reason_code
    //       !           checksum
    //       !         Work View imp_reference iyy1_server_data (Transient,
    //       !                     Mandatory, Import only)
    //       !           userid
    //       !           reference_id
    //       !         Entity View imp child (Transient, Mandatory, Import
    //       !                     only)
    //       !           cinstance_id
    //       !           creference_id
    //       !           cparent_pkey_attr_text
    //       !           ckey_attr_num
    //       !           csearch_attr_text
    //       !           cother_attr_text
    //       !       EXPORTS:
    //       !         Entity View exp child (Transient, Export only)
    //       !           creference_id
    //       !         Work View exp_error iyy1_component (Transient, Export
    //       !                     only)
    //       !           severity_code
    //       !           rollback_indicator
    //       !           origin_servid
    //       !           context_string
    //       !           return_code
    //       !           reason_code
    //       !           checksum
    //       !       ENTITY ACTIONS:
    //       !         Entity View child
    //       !           cinstance_id
    //       !           creference_id
    //       !           cupdate_user_id
    //       !           cparent_pkey_attr_text
    //       !           ckey_attr_num
    //       !           csearch_attr_text
    //       !           cother_attr_text
    //       !       LOCALS:
    //       !         Work View loc dont_change_return_codes
    //       !           1_ok
    //       !           n10_obj_not_found
    //       !           n41_obj_update_failed
    //       !         Work View loc dont_change_reason_codes
    //       !           1_default
    //       !           121_child_not_found
    //       !           122_child_already_exist
    //       !           123_child_attr_value_invalid
    //       !           132_child_concurrency_error
    //       !
    //       !     PROCEDURE STATEMENTS
    //       !
    //     1 !  NOTE: 
    //     1 !  See the description for the purpose
    //     1 !  
    //     2 !  NOTE: 
    //     2 !  RELEASE HISTORY
    //     2 !  01_00 23-02-1998 New release
    //     2 !  
    //     3 !  MOVE imp_error iyy1_component TO exp_error iyy1_component
    //     4 !   
    //     5 !  NOTE: 
    //     5 !  ****************************************************************
    //     5 !  The used ReturnCode/ReasonCode values
    //     5 !  
    //     6 !  NOTE: 
    //     6 !  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    //     6 !  Set the return and reason codes below
    //     6 !  
    //     7 !  SET loc dont_change_return_codes 1_ok TO 1 
    //     8 !  SET loc dont_change_return_codes n10_obj_not_found TO -10 
    //     9 !  SET loc dont_change_return_codes n41_obj_update_failed TO -41 
    //    10 !   
    //    11 !  SET loc dont_change_reason_codes 1_default TO 1 
    //    12 !  SET loc dont_change_reason_codes 121_child_not_found TO 121 
    //    13 !  SET loc dont_change_reason_codes 122_child_already_exist TO
    //    13 !              122 
    //    14 !  SET loc dont_change_reason_codes 123_child_attr_value_invalid
    //    14 !              TO 123 
    //    15 !  SET loc dont_change_reason_codes 132_child_concurrency_error
    //    15 !              TO 132 
    //    16 !   
    //    17 !  NOTE: 
    //    17 !  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    //    17 !  !!!!!!!!!!!!!!!!!!!!!
    //    17 !  If Instance_id is being used, reading must be operated
    //    17 !  according to this section, instead 
    //    17 !  of business_key(s).
    //    17 !  
    //    18 !  NOTE: 
    //    18 !  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    //    18 !  !!!!!!!!!!!!!!!!!!!!!
    //    18 !  Choose Control of Cursor Generation property as "Select
    //    18 !  only".
    //    18 !  (being read for update)
    //    18 !  
    //    19 !  +=>READ (Cursor Only) child
    //    19 !  !        WHERE DESIRED child cparent_pkey_attr_text = imp
    //    19 !  !              child cparent_pkey_attr_text  
    //    19 !  !              AND  DESIRED child ckey_attr_num = imp child
    //    19 !  !              ckey_attr_num
    //    19 !  +> WHEN successful
    //    20 !  !  +->IF imp child creference_id ^= child creference_id
    //    21 !  !  !  SET exp_error iyy1_component return_code TO loc
    //    21 !  !  !              dont_change_return_codes
    //    21 !  !  !              n41_obj_update_failed 
    //    22 !  !  !  SET exp_error iyy1_component reason_code TO loc
    //    22 !  !  !              dont_change_reason_codes
    //    22 !  !  !              132_child_concurrency_error 
    //    23 ! <------ESCAPE
    //    20 !  !  +--
    //    24 !  !  NOTE: 
    //    24 ...!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    //    24 ...!!!!!!!!!!!!!!!!!!!!!
    //    24 ...All fields are updated except for the key field(s), Create_ts
    //    24 ...and Create_userid. 
    //    24 ...
    //    25 !  !  +->UPDATE child
    //    26 !  !  !  SET creference_id TO imp_reference iyy1_server_data
    //    26 !  !  !              reference_id 
    //    27 !  !  !  SET cupdate_user_id TO imp_reference iyy1_server_data
    //    27 !  !  !              userid 
    //    28 !  !  !  SET csearch_attr_text TO imp child csearch_attr_text 
    //    29 !  !  !  SET cother_attr_text TO imp child cother_attr_text 
    //    25 !  !  +> WHEN successful
    //    30 !  !  !  MOVE  child TO exp child
    //    25 !  !  +> WHEN not unique
    //    31 !  !  !  SET exp_error iyy1_component return_code TO loc
    //    31 !  !  !              dont_change_return_codes
    //    31 !  !  !              n41_obj_update_failed 
    //    32 !  !  !  SET exp_error iyy1_component reason_code TO loc
    //    32 !  !  !              dont_change_reason_codes
    //    32 !  !  !              122_child_already_exist 
    //    25 !  !  +> WHEN permitted value violation
    //    33 !  !  !  SET exp_error iyy1_component return_code TO loc
    //    33 !  !  !              dont_change_return_codes
    //    33 !  !  !              n41_obj_update_failed 
    //    34 !  !  !  SET exp_error iyy1_component reason_code TO loc
    //    34 !  !  !              dont_change_reason_codes
    //    34 !  !  !              123_child_attr_value_invalid 
    //    25 !  !  +--
    //    19 !  +> WHEN not found
    //    35 !  !  SET exp_error iyy1_component return_code TO loc
    //    35 !  !              dont_change_return_codes n10_obj_not_found 
    //    36 !  !  SET exp_error iyy1_component reason_code TO loc
    //    36 !  !              dont_change_reason_codes 121_child_not_found 
    //    19 !  +--
    //       +---
    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    //  CONSTRUCTOR FOR THE CLASS       
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    public DYYY0231(  )
    {
      IefCGenRlse = "CA Gen 8.6";
      IsCopyright = "Copyright (c) 2024 CA Technologies. All rights reserved.";
      IefCGenDate = "2024/01/09";
      IefCGenTime = "13:41:06";
      IefCGenEncy = "9.2.A6";
      IefCGenUserId = "AliAl";
      IefCGenModel = "N8I_ORT_YYY_0112_TEMPLATE";
      IefCGenSubset = "ALL";
      IefCGenName = "DYYY0231_CHILD_UPDATE";
      NestingLevel = 0;
      ValChkDeadlockTimeout = false;
      ValChkDBError = false;
    }
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // ACTION BLOCK FUNCTION DECLARATIONS 
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    
    public void Execute( Object in_runtime_parm1, 
    	IRuntimePStepContext in_runtime_parm2, 
    	GlobData in_globdata, 
    	DYYY0231_IA import_view, 
    	DYYY0231_OA export_view )
    {
      IefRuntimeParm1 = in_runtime_parm1;
      IefRuntimeParm2 = in_runtime_parm2;
      Globdata = in_globdata;
      WIa = import_view;
      WOa = export_view;
      _Execute();
    }
    
    private void _Execute()
    {
      
      f_22020307_localAlloc( "DYYY0231_CHILD_UPDATE" );
      if ( Globdata.GetErrorData().GetLastStatus() == ErrorData.LastStatusIefAllocationError )
      	return;
      
      ++(NestingLevel);
      try {
        f_22020307_init(  );
        f_22020307(  );
      } catch( Exception e ) {
        if ( ((Globdata.GetErrorData().GetStatus() == ErrorData.StatusNone) && (Globdata.GetErrorData().GetErrorEncountered() == 
          ErrorData.ErrorEncounteredNoErrorFound)) && (Globdata.GetErrorData().GetViewOverflow() == 
          ErrorData.ErrorEncounteredNoErrorFound) )
        {
          Globdata.GetErrorData().SetStatus( ErrorData.LastStatusFatalError );
          Globdata.GetErrorData().SetLastStatus( ErrorData.LastStatusUnexpectedExceptionError );
          Globdata.GetErrorData().SetErrorEncountered( ErrorData.ErrorEncounteredErrorFound );
          Globdata.GetErrorData(  ).SetErrorMessage( e );
        }
      }
      --(NestingLevel);
      
      
      f_22020307_term(  );
    }
    public void f_22020307(  )
    {
      func_0022020307_esc_flag = false;
      Globdata.GetStateData().SetCurrentABId( "0022020307" );
      Globdata.GetStateData().SetCurrentABName( "DYYY0231_CHILD_UPDATE" );
      {
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        //    See the description for the purpose                             
        //                                                                    
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        //    RELEASE HISTORY                                                 
        //    01_00 23-02-1998 New release                                    
        //                                                                    
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        Globdata.GetStateData().SetLastStatementNumber( "0000000003" );
        WOa.ExpErrorIyy1ComponentSeverityCode = FixedStringAttr.ValueOf(WIa.ImpErrorIyy1ComponentSeverityCode, 1);
        WOa.ExpErrorIyy1ComponentRollbackIndicator = FixedStringAttr.ValueOf(WIa.ImpErrorIyy1ComponentRollbackIndicator, 1);
        WOa.ExpErrorIyy1ComponentOriginServid = DoubleAttr.ValueOf(WIa.ImpErrorIyy1ComponentOriginServid);
        WOa.ExpErrorIyy1ComponentContextString = StringAttr.ValueOf(WIa.ImpErrorIyy1ComponentContextString, 512);
        WOa.ExpErrorIyy1ComponentReturnCode = IntAttr.ValueOf(WIa.ImpErrorIyy1ComponentReturnCode);
        WOa.ExpErrorIyy1ComponentReasonCode = IntAttr.ValueOf(WIa.ImpErrorIyy1ComponentReasonCode);
        WOa.ExpErrorIyy1ComponentChecksum = FixedStringAttr.ValueOf(WIa.ImpErrorIyy1ComponentChecksum, 15);
        
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        //    **************************************************************  
        //    **                                                              
        //    The used ReturnCode/ReasonCode values                           
        //                                                                    
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        //    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  
        //    !!                                                              
        //    Set the return and reason codes below                           
        //                                                                    
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        Globdata.GetStateData().SetLastStatementNumber( "0000000007" );
        WLa.LocDontChangeReturnCodesQ1Ok = IntAttr.ValueOf((int)TIRD2DEC.Execute1(1, 0, TIRD2DEC.ROUND_NONE, 5));
        Globdata.GetStateData().SetLastStatementNumber( "0000000008" );
        WLa.LocDontChangeReturnCodesN10ObjNotFound = IntAttr.ValueOf((int)TIRD2DEC.Execute1(-10, 0, TIRD2DEC.ROUND_NONE, 5));
        Globdata.GetStateData().SetLastStatementNumber( "0000000009" );
        WLa.LocDontChangeReturnCodesN41ObjUpdateFailed = IntAttr.ValueOf((int)TIRD2DEC.Execute1(-41, 0, TIRD2DEC.ROUND_NONE, 5));
        
        Globdata.GetStateData().SetLastStatementNumber( "0000000011" );
        WLa.LocDontChangeReasonCodesQ1Default = IntAttr.ValueOf((int)TIRD2DEC.Execute1(1, 0, TIRD2DEC.ROUND_NONE, 5));
        Globdata.GetStateData().SetLastStatementNumber( "0000000012" );
        WLa.LocDontChangeReasonCodesQ121ChildNotFound = IntAttr.ValueOf((int)TIRD2DEC.Execute1(121, 0, TIRD2DEC.ROUND_NONE, 5));
        Globdata.GetStateData().SetLastStatementNumber( "0000000013" );
        WLa.LocDontChangeReasonCodesQ122ChildAlreadyExist = IntAttr.ValueOf((int)TIRD2DEC.Execute1(122, 0, TIRD2DEC.ROUND_NONE, 5));
        Globdata.GetStateData().SetLastStatementNumber( "0000000014" );
        WLa.LocDontChangeReasonCodesQ123ChildAttrValueInvalid = IntAttr.ValueOf((int)TIRD2DEC.Execute1(123, 0, TIRD2DEC.ROUND_NONE, 
          5));
        Globdata.GetStateData().SetLastStatementNumber( "0000000015" );
        WLa.LocDontChangeReasonCodesQ132ChildConcurrencyError = IntAttr.ValueOf((int)TIRD2DEC.Execute1(132, 0, TIRD2DEC.ROUND_NONE, 
          5));
        
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        //    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  
        //    !!!!!!!!!!!!!!!!!!!!!                                           
        //    If Instance_id is being used, reading must be operated          
        //    according to this section, instead                              
        //    of business_key(s).                                             
        //                                                                    
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        //    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  
        //    !!!!!!!!!!!!!!!!!!!!!                                           
        //    Choose Control of Cursor Generation property as "Select         
        //    only".                                                          
        //    (being read for update)                                         
        //                                                                    
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        Globdata.GetStateData().SetLastStatementNumber( "0000000019" );
        f_29360187(  );
        if ( sl_29360187 == ErrorData.LastStatusSucceeds )
        {
          Globdata.GetStateData().SetLastSubStatementNumber( "1" );
          {
            f_20972125(  );
          }
        }
        else if ( sl_29360187 == ErrorData.LastStatusNotFound )
        {
          Globdata.GetStateData().SetLastSubStatementNumber( "2" );
          {
            Globdata.GetStateData().SetLastStatementNumber( "0000000035" );
            WOa.ExpErrorIyy1ComponentReturnCode = IntAttr.ValueOf((int)TIRD2DEC.Execute1((double) 
              WLa.LocDontChangeReturnCodesN10ObjNotFound, 0, TIRD2DEC.ROUND_NONE, 5));
            Globdata.GetStateData().SetLastStatementNumber( "0000000036" );
            WOa.ExpErrorIyy1ComponentReasonCode = IntAttr.ValueOf((int)TIRD2DEC.Execute1((double) 
              WLa.LocDontChangeReasonCodesQ121ChildNotFound, 0, TIRD2DEC.ROUND_NONE, 5));
          }
        }
        else {
          Globdata.GetErrorData().SetStatus( ErrorData.LastStatusFatalError );
          Globdata.GetErrorData().SetLastStatus( sl_29360187 );
          Globdata.GetErrorData().SetErrorEncountered( ErrorData.ErrorEncounteredErrorFound );
          throw new ABException();
        }
      }
      f_0022020307_esctag: 
      ;
      return;
    }
    
    
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // SUBORDINATE FUNCTIONS
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    
    
    public void f_20972125(  )
    {
      func_0020972125_esc_flag = false;
      {
        Globdata.GetStateData().SetLastStatementNumber( "0000000020" );
        if ( CompareExit.CompareTo(WIa.ImpChildCreferenceId, WEa.ChildCreferenceId) != 0 )
        {
          f_20972884(  );
        }
        
        if ( func_0020972125_esc_flag )
        {
          goto f_0020972125_esctag;
        }
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        //    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  
        //    !!!!!!!!!!!!!!!!!!!!!                                           
        //    All fields are updated except for the key field(s), Create_ts   
        //    and Create_userid.                                              
        //                                                                    
        // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        Globdata.GetStateData().SetLastStatementNumber( "0000000025" );
        WEa.ChildCreferenceId = TimestampAttr.ValueOf(WIa.ImpReferenceIyy1ServerDataReferenceId);
        WEa.ChildCupdateUserId = FixedStringAttr.ValueOf(WIa.ImpReferenceIyy1ServerDataUserid, 8);
        WEa.ChildCsearchAttrText = FixedStringAttr.ValueOf(WIa.ImpChildCsearchAttrText, 25);
        WEa.ChildCotherAttrText = FixedStringAttr.ValueOf(WIa.ImpChildCotherAttrText, 25);
        ValChkDeadlockTimeout = false;
        ValChkDBError = false;
        f_27263039(  );
        if ( up_27263039 == ErrorData.LastStatusSucceeds )
        {
          Globdata.GetStateData().SetLastSubStatementNumber( "1" );
          {
            Globdata.GetStateData().SetLastStatementNumber( "0000000030" );
            WOa.ExpChildCreferenceId = TimestampAttr.ValueOf(WEa.ChildCreferenceId);
          }
        }
        else if ( up_27263039 == ErrorData.LastStatusDuplicateFound )
        {
          Globdata.GetStateData().SetLastSubStatementNumber( "2" );
          {
            Globdata.GetStateData().SetLastStatementNumber( "0000000031" );
            WOa.ExpErrorIyy1ComponentReturnCode = IntAttr.ValueOf((int)TIRD2DEC.Execute1((double) 
              WLa.LocDontChangeReturnCodesN41ObjUpdateFailed, 0, TIRD2DEC.ROUND_NONE, 5));
            Globdata.GetStateData().SetLastStatementNumber( "0000000032" );
            WOa.ExpErrorIyy1ComponentReasonCode = IntAttr.ValueOf((int)TIRD2DEC.Execute1((double) 
              WLa.LocDontChangeReasonCodesQ122ChildAlreadyExist, 0, TIRD2DEC.ROUND_NONE, 5));
          }
        }
        else if ( up_27263039 == ErrorData.LastStatusInvalidDatabPerm )
        {
          Globdata.GetStateData().SetLastSubStatementNumber( "3" );
          {
            Globdata.GetStateData().SetLastStatementNumber( "0000000033" );
            WOa.ExpErrorIyy1ComponentReturnCode = IntAttr.ValueOf((int)TIRD2DEC.Execute1((double) 
              WLa.LocDontChangeReturnCodesN41ObjUpdateFailed, 0, TIRD2DEC.ROUND_NONE, 5));
            Globdata.GetStateData().SetLastStatementNumber( "0000000034" );
            WOa.ExpErrorIyy1ComponentReasonCode = IntAttr.ValueOf((int)TIRD2DEC.Execute1((double) 
              WLa.LocDontChangeReasonCodesQ123ChildAttrValueInvalid, 0, TIRD2DEC.ROUND_NONE, 5));
          }
        }
        else {
          Globdata.GetErrorData().SetStatus( ErrorData.LastStatusDbError );
          Globdata.GetErrorData().SetErrorEncountered( ErrorData.ErrorEncounteredErrorFound );
          throw new ABException();
        }
      }
      f_0020972125_esctag: 
      ;
      return;
    }
    
    public void f_20972884(  )
    {
      func_0020972884_esc_flag = false;
      {
        Globdata.GetStateData().SetLastStatementNumber( "0000000021" );
        WOa.ExpErrorIyy1ComponentReturnCode = IntAttr.ValueOf((int)TIRD2DEC.Execute1((double) 
          WLa.LocDontChangeReturnCodesN41ObjUpdateFailed, 0, TIRD2DEC.ROUND_NONE, 5));
        Globdata.GetStateData().SetLastStatementNumber( "0000000022" );
        WOa.ExpErrorIyy1ComponentReasonCode = IntAttr.ValueOf((int)TIRD2DEC.Execute1((double) 
          WLa.LocDontChangeReasonCodesQ132ChildConcurrencyError, 0, TIRD2DEC.ROUND_NONE, 5));
        Globdata.GetStateData().SetLastStatementNumber( "0000000023" );
        func_0020972884_esc_flag = true;
        func_0020972125_esc_flag = true;
      }
      f_0020972884_esctag: 
      ;
      return;
    }
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    // INITIALIZATION UTILITY FUNCTIONS 
    // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    
    public void f_22020307_localAlloc( String abname )
    {
      // Request localview allocation 
      WLa = (GEN.ORT.YYY.DYYY0231_LA)(IefRuntimeParm2.GetInstance( GetType().Assembly,
      	"GEN.ORT.YYY.DYYY0231_LA" ));
      if ( WLa == null )
      {
        Globdata.GetStateData().SetCurrentABId( "0022020307" );
        Globdata.GetStateData().SetCurrentABName( abname );
        Globdata.GetErrorData().SetErrorEncountered( ErrorData.ErrorEncounteredErrorFound );
        Globdata.GetErrorData().SetLastStatus( ErrorData.LastStatusIefAllocationError );
      }
    }
    
    public void f_22020307_init(  )
    {
      
      CkeyAttr_001EF = 0;
      CkeyAttr_002EN = 0;
      CsearchAttr_003EF = Spaces;
      CsearchAttr_004EN = Spaces;
      CotherAttr_005EF = Spaces;
      CotherAttr_006EN = Spaces;
      CupdateUserid_007EF = Spaces;
      CupdateUserid_008EN = Spaces;
      CinstanceId_009EF = TIRVW2S.Execute( IefRuntimeParm1,
      	IefRuntimeParm2,
      	Globdata,
      	"IEFDB",
      	"00010101000000000000" );
      CinstanceId_010EN = TIRVW2S.Execute( IefRuntimeParm1,
      	IefRuntimeParm2,
      	Globdata,
      	"IEFDB",
      	"00010101000000000000" );
      CreferenceId_011EF = TIRVW2S.Execute( IefRuntimeParm1,
      	IefRuntimeParm2,
      	Globdata,
      	"IEFDB",
      	"00010101000000000000" );
      CreferenceId_012EN = TIRVW2S.Execute( IefRuntimeParm1,
      	IefRuntimeParm2,
      	Globdata,
      	"IEFDB",
      	"00010101000000000000" );
      FkVdvyyyppkeyAtt_013EF = Spaces;
      FkVdvyyyppkeyAtt_014EN = Spaces;
      if ( NestingLevel < 2 )
      {
        WLa.Reset();
      }
      WEa.Reset();
      WOa.ExpChildCreferenceId = "00000000000000000000";
      WOa.ExpErrorIyy1ComponentSeverityCode = " ";
      WOa.ExpErrorIyy1ComponentRollbackIndicator = " ";
      WOa.ExpErrorIyy1ComponentOriginServid = 0.0;
      WOa.ExpErrorIyy1ComponentContextString = "";
      WOa.ExpErrorIyy1ComponentReturnCode = 0;
      WOa.ExpErrorIyy1ComponentReasonCode = 0;
      WOa.ExpErrorIyy1ComponentChecksum = "               ";
      Child_es = ABBase.EvUnusable;
      Child_lk = ABBase.EvwUnlocked;
      WEa.ChildCinstanceId = "00000000000000000000";
      WEa.ChildCreferenceId = "00000000000000000000";
    }
    public void f_29360187(  )
    {
      sl_29360187 = ErrorData.LastStatusSucceeds;
      Child_001cd = ABBase.PvSelect;
      Child_lk = ABBase.EvwUnlocked;
      f_29360187_moveb(  );
      
      if ( sl_29360187 == ErrorData.LastStatusSucceeds )
      {
        ValChkDeadlockTimeout = false;
        ValChkDBError = false;
        Child_es = ABBase.EvUsable;
        Child_lk = ABBase.EvwLocked;
        if ( curs_open_0029360187 == true )
        {
          curs_open_0029360187 = false;
          try {
            if ( hstmt_0037934449_1_rs != null )
            {
              hstmt_0037934449_1_rs.Close(  );
              hstmt_0037934449_1_rs = null;
            }
            if ( hstmt_0037934449_1_cmd != null )
            {
              hstmt_0037934449_1_cmd.Close(  );
              hstmt_0037934449_1_cmd = null;
            }
          } catch( Exception e ) {
            if ( Globdata.GetDBMSData().GetDBMSManager().WasSuccessful(e) == false )
            {
              DataException = e;
              f_29360187_adonet_dberror(  );
            }
          }
        }
        
        DataException = null;
        try {
          if ( hstmt_0037934449_1_cmd == null )
          {
            SQLStatement.Length = 0;
            
            SQLStatement.Append("SELECT ");
            SQLStatement.Append("VDVYYYC01.`CINSTANCE_ID`,");
            SQLStatement.Append("VDVYYYC01.`CREFERENCE_ID`,");
            SQLStatement.Append("VDVYYYC01.`CUPDATE_USERID`,");
            SQLStatement.Append("VDVYYYC01.`FK_VDVYYYPPKEY_ATT`,");
            SQLStatement.Append("VDVYYYC01.`CKEY_ATTR`,");
            SQLStatement.Append("VDVYYYC01.`CSEARCH_ATTR`,");
            SQLStatement.Append("VDVYYYC01.`COTHER_ATTR`");
            SQLStatement.Append(" FROM ");
            SQLStatement.Append("`VDVYYYC` VDVYYYC01");
            SQLStatement.Append(" WHERE ");
            SQLStatement.Append("(");
            SQLStatement.Append("VDVYYYC01.`FK_VDVYYYPPKEY_ATT` = ? AND VDVYYYC01.`CKEY_ATTR` = ?");
            SQLStatement.Append(")");
            SQLStatement.Append(" FOR UPDATE OF `CINSTANCE_ID` ");
            hstmt_0037934449_1_cmd = Globdata.GetDBMSData().GetDBMSManager().GetCommand(Globdata, IefRuntimeParm2, "IEFDB", 
              SQLStatement.ToString());
            hstmt_0037934449_1_cmd.InsertParameter();
            hstmt_0037934449_1_cmd.InsertParameter();
          }
          hstmt_0037934449_1_cmd.BindParameter(0, CparentPkeyAttrText_001TP);
          hstmt_0037934449_1_cmd.BindParameter(1, CkeyAttrNum_002TP);
          hstmt_0037934449_1_rs = hstmt_0037934449_1_cmd.ExecuteQuery(  );
        } catch( Exception e ) {
          DataException = e;
        }
        if ( (Globdata.GetDBMSData().GetDBMSManager().WasSuccessful(DataException)) )
        {
          curs_open_0029360187 = true;
          DataException = null;
          try {
            if ( hstmt_0037934449_1_rs.MoveNext(  ) == false )
            {
              throw new Exception("No data found");
            }
            CinstanceId_009EF = Globdata.GetDBMSData().GetDBMSManager().GetDateTime(IefRuntimeParm2, "IEFDB", 
              hstmt_0037934449_1_rs.GetValue(0));
            CreferenceId_011EF = Globdata.GetDBMSData().GetDBMSManager().GetDateTime(IefRuntimeParm2, "IEFDB", 
              hstmt_0037934449_1_rs.GetValue(1));
            CupdateUserid_007EF = Globdata.GetDBMSData().GetDBMSManager().GetString(IefRuntimeParm2, "IEFDB", 
              hstmt_0037934449_1_rs.GetValue(2));
            FkVdvyyyppkeyAtt_013EF = Globdata.GetDBMSData().GetDBMSManager().GetString(IefRuntimeParm2, "IEFDB", 
              hstmt_0037934449_1_rs.GetValue(3));
            CkeyAttr_001EF = Globdata.GetDBMSData().GetDBMSManager().GetInt32(IefRuntimeParm2, "IEFDB", 
              hstmt_0037934449_1_rs.GetValue(4));
            CsearchAttr_003EF = Globdata.GetDBMSData().GetDBMSManager().GetString(IefRuntimeParm2, "IEFDB", 
              hstmt_0037934449_1_rs.GetValue(5));
            CotherAttr_005EF = Globdata.GetDBMSData().GetDBMSManager().GetString(IefRuntimeParm2, "IEFDB", 
              hstmt_0037934449_1_rs.GetValue(6));
          } catch( Exception e ) {
            DataException = e;
          }
          
        }
        
        if ( Globdata.GetDBMSData().GetDBMSManager().WasSuccessful(DataException) )
        {
          f_29360187_movea(  );
          if ( sl_29360187 == ErrorData.LastStatusSucceeds )
          {
            Child_es = ABBase.EvUsable;
            Child_lk = ABBase.EvwLocked;
          }
          else {
            Child_es = ABBase.EvUnusable;
            Child_lk = ABBase.EvwUnlocked;
          }
        }
        else if ( Globdata.GetDBMSData().GetDBMSManager().WasNoDataFound(DataException) )
        {
          sl_29360187 = ErrorData.LastStatusNotFound;
          Child_es = ABBase.EvUnusable;
          Child_lk = ABBase.EvwUnlocked;
        }
        else {
          f_29360187_adonet_dberror(  );
        }
      }
    }
    
    public void f_29360187_adonet_dberror(  )
    {
      Globdata.GetErrorData().SetStatus( ErrorData.LastStatusFatalError );
      Globdata.GetDBMSData().SetActionId( 19 );
      if ( DataException != null )
      {
        Globdata.GetErrorData(  ).SetErrorMessage( DataException );
      }
      Globdata.GetErrorData().SetLastStatus( ErrorData.LastStatusDbError );
      sl_29360187 = Globdata.GetErrorData().GetLastStatus();
      throw new ABException();
    }
    
    public void f_29360187_moveb(  )
    {
      CparentPkeyAttrText_001TP = WIa.ImpChildCparentPkeyAttrText;
      CkeyAttrNum_002TP = WIa.ImpChildCkeyAttrNum;
    }
    
    public void f_29360187_movea(  )
    {
      WEa.ChildCinstanceId = TimestampAttr.ValueOf(TIRS2VW.Execute( IefRuntimeParm1,
      	IefRuntimeParm2,
      	Globdata,
      	"IEFDB",
      	CinstanceId_009EF ));
      WEa.ChildCreferenceId = TimestampAttr.ValueOf(TIRS2VW.Execute( IefRuntimeParm1,
      	IefRuntimeParm2,
      	Globdata,
      	"IEFDB",
      	CreferenceId_011EF ));
      WEa.ChildCupdateUserId = FixedStringAttr.ValueOf(CupdateUserid_007EF, 8);
      WEa.ChildCparentPkeyAttrText = FixedStringAttr.ValueOf(FkVdvyyyppkeyAtt_013EF, 5);
      WEa.ChildCkeyAttrNum = IntAttr.ValueOf(CkeyAttr_001EF);
      WEa.ChildCsearchAttrText = FixedStringAttr.ValueOf(CsearchAttr_003EF, 25);
      WEa.ChildCotherAttrText = FixedStringAttr.ValueOf(CotherAttr_005EF, 25);
    }
    public void f_27263039_moveb(  )
    {
      if ( (Child_es == ABBase.EvUnusable) || (Child_lk == ABBase.EvwUnlocked) )
      {
        up_27263039 = ABBase.EvUnusable;
        return;
      }
      CreferenceId_012EN = TIRVW2S.Execute( IefRuntimeParm1,
      	IefRuntimeParm2,
      	Globdata,
      	"IEFDB",
      	WEa.ChildCreferenceId );
      CupdateUserid_008EN = WEa.ChildCupdateUserId;
      CsearchAttr_004EN = WEa.ChildCsearchAttrText;
      CotherAttr_006EN = WEa.ChildCotherAttrText;
    }
    public void f_27263039(  )
    {
      up_27263039 = ErrorData.LastStatusSucceeds;
      Child_001cd = ABBase.PvUpdate;
      f_27263039_moveb(  );
      
      if ( up_27263039 == ErrorData.LastStatusSucceeds )
      {
        DataException = null;
        try {
          if ( hstmt_0027263039_1_cmd == null )
          {
            SQLStatement.Length = 0;
            
            SQLStatement.Append("UPDATE ");
            SQLStatement.Append("`VDVYYYC`");
            SQLStatement.Append(" SET ");
            SQLStatement.Append("`CREFERENCE_ID` = ?,");
            SQLStatement.Append("`CUPDATE_USERID` = ?,");
            SQLStatement.Append("`CSEARCH_ATTR` = ?,");
            SQLStatement.Append("`COTHER_ATTR` = ?");
            SQLStatement.Append(" WHERE ");
            SQLStatement.Append("`FK_VDVYYYPPKEY_ATT` = ? AND ");
            SQLStatement.Append("`CKEY_ATTR` = ?");
            hstmt_0027263039_1_cmd = Globdata.GetDBMSData().GetDBMSManager().GetCommand(Globdata, IefRuntimeParm2, "IEFDB", 
              SQLStatement.ToString());
            hstmt_0027263039_1_cmd.InsertParameter();
            hstmt_0027263039_1_cmd.InsertParameter();
            hstmt_0027263039_1_cmd.InsertParameter();
            hstmt_0027263039_1_cmd.InsertParameter();
            hstmt_0027263039_1_cmd.InsertParameter();
            hstmt_0027263039_1_cmd.InsertParameter();
          }
          hstmt_0027263039_1_cmd.BindParameter(0, CreferenceId_012EN);
          hstmt_0027263039_1_cmd.BindParameter(1, CupdateUserid_008EN);
          hstmt_0027263039_1_cmd.BindParameter(2, CsearchAttr_004EN);
          hstmt_0027263039_1_cmd.BindParameter(3, CotherAttr_006EN);
          hstmt_0027263039_1_cmd.BindParameter(4, FkVdvyyyppkeyAtt_013EF);
          hstmt_0027263039_1_cmd.BindParameter(5, CkeyAttr_001EF);
          hstmt_0027263039_1_cnt = hstmt_0027263039_1_cmd.ExecuteNonQuery(  );
        } catch( Exception e ) {
          DataException = e;
        }
        if ( (Globdata.GetDBMSData().GetDBMSManager().WasSuccessful(DataException) && hstmt_0027263039_1_cnt == 1) )
        {
          CreferenceId_011EF = CreferenceId_012EN;
          CupdateUserid_007EF = CupdateUserid_008EN;
          CsearchAttr_003EF = CsearchAttr_004EN;
          CotherAttr_005EF = CotherAttr_006EN;
          Child_es = ABBase.EvUsable;
          Child_lk = ABBase.EvwLocked;
          try {
            if ( hstmt_0027263039_1_rs != null )
            {
              hstmt_0027263039_1_rs.Close(  );
              hstmt_0027263039_1_rs = null;
            }
            if ( hstmt_0027263039_1_cmd != null )
            {
              hstmt_0027263039_1_cmd.Close(  );
              hstmt_0027263039_1_cmd = null;
            }
          } catch( Exception e ) {
            if ( Globdata.GetDBMSData().GetDBMSManager().WasSuccessful(e) == false )
            {
              DataException = e;
              f_27263039_adonet_dberror(  );
            }
          }
        }
        else if ( Globdata.GetDBMSData().GetDBMSManager().WasDuplicateFound(IefRuntimeParm2, "IEFDB", DataException) )
        {
          up_27263039 = ErrorData.LastStatusDuplicateFound;
          Child_es = ABBase.EvUnusable;
          try {
            if ( hstmt_0027263039_1_rs != null )
            {
              hstmt_0027263039_1_rs.Close(  );
              hstmt_0027263039_1_rs = null;
            }
            if ( hstmt_0027263039_1_cmd != null )
            {
              hstmt_0027263039_1_cmd.Close(  );
              hstmt_0027263039_1_cmd = null;
            }
          } catch( Exception e ) {
            if ( Globdata.GetDBMSData().GetDBMSManager().WasSuccessful(e) == false )
            {
              DataException = e;
              f_27263039_adonet_dberror(  );
            }
          }
        }
        else {
          f_27263039_adonet_dberror(  );
        }
      }
      else if ( up_27263039 != ErrorData.LastStatusInvalidDatabPerm )
      {
        Globdata.GetErrorData().SetStatus( ErrorData.LastStatusFatalError );
        Globdata.GetDBMSData().SetActionId( 25 );
        Globdata.GetErrorData().SetLastStatus( up_27263039 );
        throw new ABException();
      }
      return;
    }
    
    public void f_27263039_adonet_dberror(  )
    {
      Globdata.GetErrorData().SetStatus( ErrorData.LastStatusFatalError );
      Globdata.GetDBMSData().SetActionId( 25 );
      if ( DataException != null )
      {
        Globdata.GetErrorData(  ).SetErrorMessage( DataException );
      }
      Globdata.GetErrorData().SetLastStatus( ErrorData.LastStatusDbError );
      up_27263039 = Globdata.GetErrorData().GetLastStatus();
      throw new ABException();
    }
    
    public void f_22020307_term(  )
    {
      
      // * * * * * * * * * *
      // DASG Term Function 
      // * * * * * * * * * *
      
      try {
        if ( curs_open_0029360187 == true )
        {
          curs_open_0029360187 = false;
          try {
            if ( hstmt_0037934449_1_rs != null )
            {
              hstmt_0037934449_1_rs.Close(  );
              hstmt_0037934449_1_rs = null;
            }
            if ( hstmt_0037934449_1_cmd != null )
            {
              hstmt_0037934449_1_cmd.Close(  );
              hstmt_0037934449_1_cmd = null;
            }
          } catch( Exception e ) {
            if ( Globdata.GetDBMSData().GetDBMSManager().WasSuccessful(e) == false )
            {
              DataException = e;
              f_29360187_adonet_dberror(  );
            }
          }
        }
      } catch( ABException e ) {
        // No action can be taken here.
      }
    }
  }// end class
  
}

